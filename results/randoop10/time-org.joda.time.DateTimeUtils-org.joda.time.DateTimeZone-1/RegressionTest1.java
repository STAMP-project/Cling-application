import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test00501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00501");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale1.getDisplayScript(locale2);
        java.lang.String str4 = locale0.getDisplayScript(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale1.getUnicodeLocaleKeys();
        java.lang.Object obj7 = locale1.clone();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-CN" + "'", str5, "zh-CN");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "zh_CN");
    }

    @Test
    public void test00502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00502");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setScript("759");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 759 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00503");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        timeZone0.setID("2074-03-24T19:29:09.830");
        java.lang.String str4 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT+00:00" + "'", str4, "GMT+00:00");
    }

    @Test
    public void test00504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00504");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.Object[] objArray2 = strSet1.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = strSet1.add("2022-02-11T09:45:07.889Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
    }

    @Test
    public void test00505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00505");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField17 = localDateTime15.getField((int) (short) 1);
        int int18 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        int int24 = property19.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        boolean boolean28 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((int) 'a', 70, 35072450, 518, 70150840, (int) (short) 1, 43, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 518 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2119 + "'", int18 == 2119);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test00506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00506");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(7);
        int int7 = localDateTime6.getDayOfMonth();
        java.lang.String str9 = localDateTime6.toString("24");
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(dateTimeZone14);
        int int16 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(dateTimeZone19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime18.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone23);
        int int25 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.era();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withPeriodAdded(readablePeriod33, 2119);
        int int36 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime27.withDayOfWeek((int) (short) 1);
        int int39 = localDateTime27.getMinuteOfHour();
        boolean boolean40 = dateTime17.equals((java.lang.Object) int39);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "24" + "'", str9, "24");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00507");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object obj2 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "zh_TW");
    }

    @Test
    public void test00508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00508");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        int int3 = timeZone0.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00509");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        boolean boolean15 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((int) (short) 1);
        int int21 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        int int27 = property22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime14.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getNameKey(3289145349341L);
        long long35 = dateTimeZone29.convertLocalToUTC((long) 6, false);
        long long37 = dateTimeZone29.previousTransition(0L);
        long long40 = dateTimeZone29.adjustOffset((long) (short) 1, false);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2119 + "'", int21 == 2119);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6L + "'", long35 == 6L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
    }

    @Test
    public void test00510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00510");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology5 = chronology3.withZone(dateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = chronology3.getDateTimeMillis(35100820, (int) (byte) 1, 35098961, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35098961 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test00511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00511");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(35082410, 0, 1, (int) (short) 1, (int) (byte) 100, 44, 35114856);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00512");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        long long8 = dateTimeZone5.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime22 = property15.addWrapFieldToCopy(35072450);
        boolean boolean23 = dateTimeZone5.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        boolean boolean26 = dateTimeZone5.isStandardOffset(1644572672009L);
        java.util.TimeZone timeZone27 = dateTimeZone5.toTimeZone();
        java.lang.String str28 = timeZone27.getDisplayName();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35072450L + "'", long8 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2119 + "'", int14 == 2119);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str28, "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test00513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00513");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        org.joda.time.tz.NameProvider nameProvider1 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.lang.String str14 = nameProvider1.getShortName(locale2, "+35:00", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale15.getExtension('a');
        java.lang.String str21 = nameProvider1.getShortName(locale15, "958", "CN");
        java.lang.String str22 = locale0.getDisplayName(locale15);
        java.lang.String str23 = locale15.getLanguage();
        java.lang.String str24 = locale15.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(nameProvider1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str22, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ja" + "'", str23, "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ja" + "'", str24, "ja");
    }

    @Test
    public void test00514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00514");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        int int3 = localDateTime0.getYear();
        int int4 = localDateTime0.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withCenturyOfEra(35082614);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35082614 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35106774 + "'", int4 == 35106774);
    }

    @Test
    public void test00515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00515");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(31, (int) (short) 100, 35100820, 35083868, 35072450);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35083868 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00516");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(35100820, 35083868, (int) (byte) 100, (int) (byte) -1, 10, 58, 27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00517");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.DateTime dateTime2 = readableInterval1.getStart();
        org.joda.time.DateTime dateTime3 = readableInterval1.getStart();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        int int10 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        boolean boolean11 = readableInterval1.isAfter((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.ReadableInstant readableInstant12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = dateTime6.compareTo(readableInstant12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test00518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00518");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = chronology3.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test00519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00519");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = chronology3.weekyears();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField10 = localDateTime8.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (short) 1);
        int int16 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        int int22 = property17.compareTo((org.joda.time.ReadableInstant) dateTime20);
        java.lang.String str23 = property17.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property17.getFieldType();
        org.joda.time.LocalDateTime.Property property25 = localDateTime8.property(dateTimeFieldType24);
        int[] intArray27 = chronology3.get((org.joda.time.ReadablePartial) localDateTime8, 10L);
        org.joda.time.DateTimeField dateTimeField28 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = chronology3.secondOfDay();
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plusDays((int) 'u');
        java.lang.String str36 = localDateTime31.toString();
        int[] intArray37 = localDateTime31.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology3.validate(readablePartial30, intArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2119 + "'", int16 == 2119);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "774" + "'", str23, "774");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 2, 39600010]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-12T20:45:06.774" + "'", str36, "2022-02-12T20:45:06.774");
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 12, 74706774]");
    }

    @Test
    public void test00520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00520");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        boolean boolean5 = timeZone1.observesDaylightTime();
        java.lang.Object obj6 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test00521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00521");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setID("Etc/UTC");
        timeZone1.setID("2074-03-24T19:29:10.161");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        java.util.TimeZone.setDefault(timeZone7);
        boolean boolean9 = timeZone1.hasSameRules(timeZone7);
        int int10 = timeZone7.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00522");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setLanguage("335");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 335 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test00523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00523");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale15.getExtension('a');
        java.lang.String str19 = locale15.getDisplayVariant();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str23 = locale20.getExtension('a');
        java.lang.String str24 = locale15.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder25 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder26 = builder14.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder26.setLanguageTag("42");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 42 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str21, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test00524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00524");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weeks();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray8 = chronology3.get(readablePeriod5, 1L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test00525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00525");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(335L);
    }

    @Test
    public void test00526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00526");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Japanese");
        timeZone1.setRawOffset(0);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean6 = dateTimeZone5.isFixed();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test00527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00527");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.millisOfDay();
        org.joda.time.DurationField durationField6 = chronology3.weeks();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology3.getDateTimeMillis(999, 35082011, 205200000, 0, 13, 335, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 335 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test00528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00528");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime(dateTimeZone4);
        int int6 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DurationField durationField8 = chronology7.years();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test00529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00529");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localDateTime5.toString(dateTimeFormatter6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDateTime5.getField(1970);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1970");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-11T09:45:22.322" + "'", str7, "2022-02-11T09:45:22.322");
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test00530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00530");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:44:57.188Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:44:57.188z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00531");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setLanguageTag("352");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 352 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00532");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00533");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet16);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet16);
        boolean boolean19 = strSet6.removeAll((java.util.Collection<java.lang.String>) strSet16);
        java.util.stream.Stream<java.lang.String> strStream20 = strSet16.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet16.parallelStream();
        boolean boolean22 = readableInterval1.equals((java.lang.Object) strSet16);
        org.joda.time.Duration duration23 = readableInterval1.toDuration();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        long long26 = readableInterval25.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Set<java.lang.String> strSet30 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Set<java.lang.String> strSet35 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str36 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Set<java.lang.String> strSet40 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strSet40);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strSet40);
        boolean boolean43 = strSet30.removeAll((java.util.Collection<java.lang.String>) strSet40);
        java.util.stream.Stream<java.lang.String> strStream44 = strSet40.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream45 = strSet40.parallelStream();
        boolean boolean46 = readableInterval25.equals((java.lang.Object) strSet40);
        org.joda.time.Duration duration47 = readableInterval25.toDuration();
        boolean boolean48 = duration23.isEqual((org.joda.time.ReadableDuration) duration47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        long long51 = readableInterval50.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Set<java.lang.String> strSet55 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str56 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strSet55);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Set<java.lang.String> strSet60 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str61 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Set<java.lang.String> strSet65 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str66 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strSet65);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strSet65);
        boolean boolean68 = strSet55.removeAll((java.util.Collection<java.lang.String>) strSet65);
        java.util.stream.Stream<java.lang.String> strStream69 = strSet65.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream70 = strSet65.parallelStream();
        boolean boolean71 = readableInterval50.equals((java.lang.Object) strSet65);
        org.joda.time.Duration duration72 = readableInterval50.toDuration();
        int int73 = duration23.compareTo((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration74 = duration72.toDuration();
        org.joda.time.Period period75 = duration72.toPeriod();
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1644572722568L + "'", long2 == 1644572722568L);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(readableInterval25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572722568L + "'", long26 == 1644572722568L);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(readableInterval50);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1644572722568L + "'", long51 == 1644572722568L);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    public void test00534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00534");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        boolean boolean7 = localDateTime2.equals((java.lang.Object) chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField9 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test00535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00535");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder9 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder3.setLanguage("688");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 688 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test00536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00536");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.toString();
        int int13 = property6.getMaximumValueOverall();
        org.joda.time.DurationField durationField14 = property6.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime15 = property6.roundHalfCeilingCopy();
        boolean boolean16 = property6.isLeap();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test00537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00537");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setVariant("secondOfMinute");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: secondOfMinute [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test00538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00538");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 67);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.centuryOfEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
    }

    @Test
    public void test00539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00539");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(47L);
    }

    @Test
    public void test00540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00540");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusDays((int) 'u');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField(19);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 19");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test00541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00541");
        org.joda.time.DateTimeUtils.setCurrentMillisFixed((long) (byte) 0);
    }

    @Test
    public void test00542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00542");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        int int3 = localDateTime0.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
    }

    @Test
    public void test00543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00543");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(41);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusMinutes(0);
        int int11 = localDateTime6.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime6.getFieldType(696);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 696");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test00544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00544");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField11 = localDateTime9.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        long long16 = chronology3.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfYear();
        int int18 = property17.get();
        boolean boolean19 = property17.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundCeilingCopy();
        java.lang.Class<?> wildcardClass21 = localDateTime20.getClass();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3061065600000L + "'", long16 == 3061065600000L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test00545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00545");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis(2119);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plus(readablePeriod6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withCenturyOfEra(35083661);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35083661 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00546");
        java.util.Locale.Category category0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(2);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.lang.String str9 = locale5.getDisplayVariant();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str13 = locale10.getExtension('a');
        java.lang.String str14 = locale5.getDisplayLanguage(locale10);
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale5.getDisplayLanguage(locale15);
        java.text.DateFormatSymbols dateFormatSymbols17 = java.text.DateFormatSymbols.getInstance(locale15);
        java.lang.String str18 = locale15.getCountry();
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.lang.String str22 = locale19.getExtension('a');
        java.lang.String str23 = locale19.getDisplayVariant();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getDisplayLanguage();
        java.lang.String str27 = locale24.getExtension('a');
        java.lang.String str28 = locale19.getDisplayLanguage(locale24);
        java.lang.String str29 = locale15.getDisplayName(locale24);
        java.lang.String str30 = dateTimeZone2.getName((long) 70150840, locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str6, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str14, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u6587" + "'", str16, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(dateFormatSymbols17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CN" + "'", str18, "CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str20, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str25, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str28, "\u65e5\u672c\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str29, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.002" + "'", str30, "+00:00:00.002");
    }

    @Test
    public void test00547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00547");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2074-03-24T19:29:09.657");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test00548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00548");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis(2119);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears(834);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.secondOfMinute();
        int int9 = property8.getMaximumValueOverall();
        java.util.Locale locale12 = new java.util.Locale("\u4e8c\u6708");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = property8.setCopy("752", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 752 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertEquals(locale12.toString(), "\u4e8c\u6708");
    }

    @Test
    public void test00549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00549");
        java.text.DateFormatSymbols dateFormatSymbols0 = new java.text.DateFormatSymbols();
        java.lang.String str1 = dateFormatSymbols0.getLocalPatternChars();
        java.lang.String[] strArray6 = new java.lang.String[] { "Property[millisOfSecond]", "hi!", "2119-02-11T09:44:32.668", "ISOChronology[Etc/UTC]" };
        dateFormatSymbols0.setShortWeekdays(strArray6);
        java.lang.Object obj8 = dateFormatSymbols0.clone();
        java.lang.String str9 = dateFormatSymbols0.getLocalPatternChars();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 100, chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        boolean boolean14 = dateFormatSymbols0.equals((java.lang.Object) localDateTime12);
        java.text.DateFormatSymbols dateFormatSymbols15 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols15.setWeekdays(strArray22);
        java.lang.String[] strArray24 = dateFormatSymbols15.getShortWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols25 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols25.setWeekdays(strArray32);
        java.lang.String[] strArray34 = dateFormatSymbols25.getShortWeekdays();
        dateFormatSymbols15.setShortMonths(strArray34);
        java.lang.String[] strArray36 = dateFormatSymbols15.getWeekdays();
        java.lang.String[] strArray37 = dateFormatSymbols15.getAmPmStrings();
        java.text.DateFormatSymbols dateFormatSymbols38 = new java.text.DateFormatSymbols();
        java.lang.String str39 = dateFormatSymbols38.getLocalPatternChars();
        java.lang.String[] strArray44 = new java.lang.String[] { "Property[millisOfSecond]", "hi!", "2119-02-11T09:44:32.668", "ISOChronology[Etc/UTC]" };
        dateFormatSymbols38.setShortWeekdays(strArray44);
        java.text.DateFormatSymbols dateFormatSymbols46 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols46.setWeekdays(strArray53);
        dateFormatSymbols38.setEras(strArray53);
        dateFormatSymbols15.setWeekdays(strArray53);
        dateFormatSymbols0.setEras(strArray53);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str1, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str9, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str39, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test00550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00550");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int5 = timeZone1.getOffset((long) (-1));
        java.lang.String str6 = timeZone1.getID();
        java.time.ZoneId zoneId7 = timeZone1.toZoneId();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId7);
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = timeZone8.getDisplayName(false, 44, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 44");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test00551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00551");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.toString();
        int int13 = property6.getMaximumValueOverall();
        org.joda.time.DurationField durationField14 = property6.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime15 = property6.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withTime(12, 999, 9, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test00552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00552");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setLanguage("\u82f1\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00553");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.toString();
        int int13 = property6.getMaximumValueOverall();
        org.joda.time.DurationField durationField14 = property6.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime15 = property6.roundHalfCeilingCopy();
        long long16 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (short) 1);
        int int22 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.millisOfSecond();
        boolean boolean25 = property23.equals((java.lang.Object) 10L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(dateTimeZone30);
        int int32 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime31);
        int int33 = property23.compareTo((org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str34 = dateTime28.toString();
        long long35 = dateTime28.getMillis();
        long long36 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime28);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = property6.getDifference((org.joda.time.ReadableInstant) dateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 3061065600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2066 + "'", int22 == 2066);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str34, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test00554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00554");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime13 = property6.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (short) 10);
        int int18 = localDateTime13.getValue(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField23 = localDateTime21.getField((int) (short) 1);
        int int24 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        int int30 = property25.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDateTime localDateTime32 = property25.addWrapFieldToCopy(35072450);
        int int33 = localDateTime32.getWeekOfWeekyear();
        boolean boolean34 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMillis(2119);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plus(readablePeriod41);
        int int43 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime13.plusMillis(7);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withSecondOfMinute((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.plusMonths(45);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.withCenturyOfEra(2);
        int int54 = localDateTime53.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.minusWeeks(634);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2067 + "'", int18 == 2067);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2066 + "'", int24 == 2066);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 67 + "'", int54 == 67);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test00555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00555");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone(zoneId1);
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeZone2.getDisplayName(false, 58, locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 58");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test00556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00556");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(575, 0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test00557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00557");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withPeriodAdded(readablePeriod4, (int) ' ');
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField((int) (short) 1);
        int int15 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        int int21 = property16.compareTo((org.joda.time.ReadableInstant) dateTime19);
        java.lang.String str22 = property16.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property16.getFieldType();
        boolean boolean24 = localDateTime6.isSupported(dateTimeFieldType23);
        boolean boolean25 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.minus(readableDuration26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra(205200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 205200000 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.000" + "'", str7, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2066 + "'", int15 == 2066);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test00558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00558");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withPeriodAdded(readablePeriod4, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withPeriodAdded(readablePeriod7, 57);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField((int) (short) 1);
        int int15 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        int int21 = property16.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDateTime localDateTime23 = property16.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, (int) (short) 10);
        int int27 = localDateTime26.getYear();
        boolean boolean28 = localDateTime9.equals((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime9.withMillisOfDay(11);
        int int31 = localDateTime30.size();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2066 + "'", int15 == 2066);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2067 + "'", int27 == 2067);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test00559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00559");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayLanguage(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale0.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str1, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "jpn" + "'", str3, "jpn");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str4, "\u65e5\u672c\u8a9e");
    }

    @Test
    public void test00560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00560");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        long long8 = dateTimeZone5.convertLocalToUTC(52L, false);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        boolean boolean24 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime26.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone31);
        int int33 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withPeriodAdded(readablePeriod36, 10);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfYear();
        boolean boolean40 = property39.isLeap();
        org.joda.time.LocalDateTime localDateTime41 = property39.getLocalDateTime();
        int int42 = localDateTime41.getYearOfEra();
        boolean boolean43 = dateTime23.equals((java.lang.Object) int42);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2066 + "'", int14 == 2066);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test00561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00561");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone5);
        int int7 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        boolean boolean8 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime6);
        int int9 = localDateTime6.getDayOfMonth();
        int int10 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (short) 1);
        int int16 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        int int22 = property17.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime24 = property17.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withDurationAdded(readableDuration25, (int) (short) 10);
        int int29 = localDateTime24.getValue(0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(dateTimeZone31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime30.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone35);
        int int37 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfEvenCopy();
        int int41 = property39.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundHalfEvenCopy();
        boolean boolean43 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime42);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2066 + "'", int16 == 2066);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2067 + "'", int29 == 2067);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test00562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00562");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("452");
        java.util.Locale locale3 = java.util.Locale.US;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = localDateTime1.toString("2074-03-24t19:29:07.916z", locale3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
    }

    @Test
    public void test00563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00563");
        java.lang.String[] strArray20 = new java.lang.String[] { "CHN", "Hours", "ISOChronology[Etc/UTC]", "Etc/UTC", "\u65e5\u672c\u8a9e", "\u65e5\u672c\u8a9e", "2022-02-11T09:44:33.508", "575", "Japanese", "Hours", "Property[millisOfSecond]", "2022-02-11T09:44:34.137", "\u65e5\u6587", "958", "CHN", "2022-02-11T09:44:33.508", "", "2119-02-11T09:44:32.668", "822", "zho" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        strSet21.clear();
        java.lang.Class<?> wildcardClass24 = strSet21.getClass();
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test00564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00564");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-12T20:44:57.701+35:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-12T20:44:57.701+35:00' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00565");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale15.getExtension('a');
        java.lang.String str19 = locale15.getDisplayVariant();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str23 = locale20.getExtension('a');
        java.lang.String str24 = locale15.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder25 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder26 = builder14.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder26.removeUnicodeLocaleAttribute("2074-03-24T19:29:09.657");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2074-03-24T19:29:09.657 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str21, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test00566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00566");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale15.getExtension('a');
        java.lang.String str19 = locale15.getDisplayVariant();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str23 = locale20.getExtension('a');
        java.lang.String str24 = locale15.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder25 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder26 = builder14.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder14.addUnicodeLocaleAttribute("0");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str21, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test00567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0, 35082614, (int) '#', 518, 22, 27, 275);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 518 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00568");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        java.lang.Object obj15 = locale2.clone();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "ja");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "ja");
    }

    @Test
    public void test00569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00569");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("1970-01-01T00:00:00.052", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1970-01-01t00:00:00.052");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00570");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getExtension('a');
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.lang.String str9 = locale0.getDisplayLanguage(locale5);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale0.getDisplayLanguage(locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.lang.String str16 = locale12.getDisplayScript(locale13);
        java.lang.String str17 = locale0.getDisplayCountry(locale13);
        java.text.DateFormatSymbols dateFormatSymbols18 = java.text.DateFormatSymbols.getInstance(locale0);
        java.lang.String[] strArray19 = java.util.Locale.getISOLanguages();
        dateFormatSymbols18.setWeekdays(strArray19);
        java.lang.String[] strArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateFormatSymbols18.setAmPmStrings(strArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str1, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str6, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str9, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u6587" + "'", str11, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols18);
        org.junit.Assert.assertNotNull(strArray19);
    }

    @Test
    public void test00571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00571");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(7);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        int int8 = localDateTime6.getEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test00572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00572");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setID("Etc/UTC");
        timeZone1.setID("2074-03-24T19:29:10.161");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        java.util.TimeZone.setDefault(timeZone7);
        boolean boolean9 = timeZone1.hasSameRules(timeZone7);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = timeZone7.getOffset(676, 205200000, 93, 415, 415, 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test00573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00573");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra(7);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.hours();
        java.lang.String str10 = periodType9.getName();
        org.joda.time.PeriodType periodType11 = org.joda.time.DateTimeUtils.getPeriodType(periodType9);
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.era();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.secondOfMinute();
        int int19 = localDateTime17.getEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusHours(2022);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(999);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.era();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField34 = localDateTime32.getField((int) (short) 1);
        int int35 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        int int41 = property36.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(dateTimeZone43);
        boolean boolean45 = dateTime39.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType49 = periodType47.getFieldType((int) (short) 0);
        boolean boolean50 = localDateTime29.isSupported(durationFieldType49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime23.withFieldAdded(durationFieldType49, 67);
        boolean boolean53 = periodType11.isSupported(durationFieldType49);
        boolean boolean54 = localDateTime7.isSupported(durationFieldType49);
        boolean boolean55 = periodType0.isSupported(durationFieldType49);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Hours" + "'", str10, "Hours");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2066 + "'", int35 == 2066);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test00574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00574");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField11 = localDateTime9.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        long long16 = chronology3.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfYear();
        int int18 = property17.get();
        boolean boolean19 = property17.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMonthOfYear(35082011);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35082011 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3061065600000L + "'", long16 == 3061065600000L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test00575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00575");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone5);
        int int7 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minus(readableDuration13);
        java.util.Date date15 = localDateTime14.toDate();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromDateFields(date15);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localDateTime16.getValue(2170);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2170");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test00576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00576");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int) 'u', 74708767, 35083525, 39600001, 35106774, 45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39600001 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00577");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, chronology2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        boolean boolean8 = localDateTime3.equals((java.lang.Object) chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 57, chronology7);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime10.getFields();
        int int12 = localDateTime10.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDateTime10.getValue(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
    }

    @Test
    public void test00578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00578");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder9 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.addUnicodeLocaleAttribute("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test00579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00579");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("677", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=677");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00580");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField10 = localDateTime8.getField((int) (short) 1);
        int int11 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        int int17 = property12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(dateTimeZone19);
        boolean boolean21 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        int int28 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusYears((int) (short) 0);
        int int35 = localDateTime34.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDateTime37.getFieldType(0);
        boolean boolean40 = dateTime20.isSupported(dateTimeFieldType39);
        org.joda.time.DateTime dateTime41 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime0.plusSeconds((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMinuteOfHour(12);
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        long long48 = readableInterval47.getStartMillis();
        org.joda.time.Interval interval49 = readableInterval47.toInterval();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 100, chronology53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        boolean boolean59 = localDateTime54.equals((java.lang.Object) chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 57, chronology58);
        boolean boolean62 = periodType50.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType63 = periodType50.withSecondsRemoved();
        org.joda.time.PeriodType periodType64 = periodType63.withYearsRemoved();
        org.joda.time.Period period65 = readableInterval47.toPeriod(periodType64);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime43.minus((org.joda.time.ReadablePeriod) period65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime70 = localDateTime43.withDate((int) (short) -1, 35114856, 86390000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35114856 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2066 + "'", int11 == 2066);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(localDateTime66);
    }

    @Test
    public void test00581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00581");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Japanese");
        timeZone1.setRawOffset(0);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusYears(2171);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra((int) 'a');
        java.util.Date date16 = localDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromDateFields(date16);
        boolean boolean18 = timeZone1.inDaylightTime(date16);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 01 00:00:00 GMT 9741");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00582");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
    }

    @Test
    public void test00583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00583");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        int int4 = property3.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-292275054) + "'", int4 == (-292275054));
    }

    @Test
    public void test00584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00584");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.PeriodType periodType2 = org.joda.time.DateTimeUtils.getPeriodType(periodType0);
        java.lang.String str3 = periodType2.toString();
        org.joda.time.PeriodType periodType4 = periodType2.withMillisRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType7 = periodType4.getFieldType(1902);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1902");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hours" + "'", str1, "Hours");
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PeriodType[Hours]" + "'", str3, "PeriodType[Hours]");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test00585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00585");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        int int3 = localDateTime0.getYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfCentury();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 100, chronology9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        boolean boolean15 = localDateTime10.equals((java.lang.Object) chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 57, chronology14);
        boolean boolean18 = periodType6.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType19 = periodType6.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (short) 1);
        int int25 = localDateTime22.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.millisOfSecond();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.LocalDateTime localDateTime28 = property26.withMaximumValue();
        boolean boolean29 = periodType19.equals((java.lang.Object) property26);
        org.joda.time.Period period30 = interval5.toPeriod(periodType19);
        org.joda.time.Interval interval31 = interval5.toInterval();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField36 = localDateTime34.getField((int) (short) 1);
        int int37 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        int int43 = property38.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime(dateTimeZone45);
        boolean boolean47 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField52 = localDateTime50.getField((int) (short) 1);
        int int53 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        int int59 = property54.compareTo((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean60 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean61 = interval31.isBefore((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean63 = dateTime57.equals((java.lang.Object) 1644572681020L);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 67 + "'", int25 == 67);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2066 + "'", int37 == 2066);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2066 + "'", int53 == 2066);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test00586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00586");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setLanguage("2022-02-11T09:45:01.897Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:45:01.897Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test00587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00587");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone5);
        int int7 = localDateTime6.getWeekyear();
        boolean boolean8 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime.Property property9 = localDateTime0.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime0.withDayOfMonth((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test00588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00588");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.toString();
        int int13 = property6.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime14 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfYear((int) 'u');
        int int17 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = localDateTime16.getField(2171);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2171");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2067 + "'", int17 == 2067);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test00589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00589");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        java.lang.String str4 = property3.getAsString();
        java.lang.String str5 = property3.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy((long) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[era]" + "'", str5, "Property[era]");
    }

    @Test
    public void test00590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00590");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(9, 676, 518, (int) (byte) 1, 335, 2002, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 335 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00591");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder5 = builder3.setRegion("759");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.setUnicodeLocaleKeyword("PeriodType[DayTime]", "575");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: PeriodType[DayTime] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00592");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone5);
        int int7 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withWeekyear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusDays(35100820);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMonthOfYear(2170);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2170 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test00593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00593");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        int int6 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusHours(2022);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(999);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusWeeks((int) '4');
        int int13 = localDateTime8.getMonthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 100, chronology15);
        int int17 = localDateTime16.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = property18.getAsShortText(locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property18.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime8.withField(dateTimeFieldType23, 44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str21, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11" + "'", str22, "11");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
    }

    @Test
    public void test00594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00594");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35122722, 2170);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 2170");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00595");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder16 = builder0.setRegion("958");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("1970-01-01T00:00:00.052");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1970-01-01T00:00:00.052 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test00596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00596");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property19.setCopy(12);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.DateTime dateTime24 = readableInterval23.getStart();
        org.joda.time.DateTime dateTime25 = readableInterval23.getStart();
        org.joda.time.Period period26 = readableInterval23.toPeriod();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.minus((org.joda.time.ReadablePeriod) period26);
        int[] intArray30 = chronology10.get((org.joda.time.ReadablePeriod) period26, (long) 100, (long) 3);
        org.joda.time.Chronology chronology31 = chronology10.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0, 70, 2022, (int) 'a', (int) (byte) 1, 2067, 834, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, -97]");
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test00597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00597");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("1", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00598");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMonths(19);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.DateTime dateTime10 = readableInterval9.getStart();
        org.joda.time.DateTime dateTime11 = readableInterval9.getStart();
        org.joda.time.Period period12 = readableInterval9.toPeriod();
        org.joda.time.Interval interval13 = readableInterval9.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 35082058);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        java.lang.Class<?> wildcardClass18 = localDateTime16.getClass();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00599");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek(59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test00600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00600");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone5);
        int int7 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withEra((int) (short) 1);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = localDateTime6.toString("575", locale11);
        int int14 = localDateTime6.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.plusYears((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localDateTime16.getValue(676);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 676");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "575" + "'", str13, "575");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test00601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00601");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone5);
        int int7 = localDateTime6.getWeekyear();
        boolean boolean8 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime.Property property9 = localDateTime0.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime0.withDate(43, 21, 35081087);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test00602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00602");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 67);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        long long16 = readableInterval15.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Set<java.lang.String> strSet20 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Set<java.lang.String> strSet25 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str26 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Set<java.lang.String> strSet30 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet30);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet30);
        boolean boolean33 = strSet20.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.stream.Stream<java.lang.String> strStream34 = strSet30.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream35 = strSet30.parallelStream();
        boolean boolean36 = readableInterval15.equals((java.lang.Object) strSet30);
        org.joda.time.Duration duration37 = readableInterval15.toDuration();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime12.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        long long41 = readableInterval40.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Set<java.lang.String> strSet45 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strSet45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Set<java.lang.String> strSet50 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str51 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strSet50);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Set<java.lang.String> strSet55 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str56 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strSet55);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strSet55);
        boolean boolean58 = strSet45.removeAll((java.util.Collection<java.lang.String>) strSet55);
        java.util.stream.Stream<java.lang.String> strStream59 = strSet55.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream60 = strSet55.parallelStream();
        boolean boolean61 = readableInterval40.equals((java.lang.Object) strSet55);
        org.joda.time.Duration duration62 = readableInterval40.toDuration();
        org.joda.time.ReadableInterval readableInterval63 = null;
        org.joda.time.ReadableInterval readableInterval64 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval63);
        long long65 = readableInterval64.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Set<java.lang.String> strSet69 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str70 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strSet69);
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Set<java.lang.String> strSet74 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str75 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.lang.String>) strSet74);
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.Set<java.lang.String> strSet79 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str80 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.lang.String>) strSet79);
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.lang.String>) strSet79);
        boolean boolean82 = strSet69.removeAll((java.util.Collection<java.lang.String>) strSet79);
        java.util.stream.Stream<java.lang.String> strStream83 = strSet79.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream84 = strSet79.parallelStream();
        boolean boolean85 = readableInterval64.equals((java.lang.Object) strSet79);
        org.joda.time.Duration duration86 = readableInterval64.toDuration();
        boolean boolean87 = duration62.isEqual((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Period period88 = duration86.toPeriod();
        boolean boolean89 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration86);
        long long90 = duration86.getMillis();
        org.joda.time.Duration duration91 = duration86.toDuration();
        long long92 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration86);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertNotNull(strStream60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(readableInterval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strStream83);
        org.junit.Assert.assertNotNull(strStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test00603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00603");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        int int3 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withYearOfCentury(0);
        int[] intArray6 = localDateTime0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withHourOfDay(773);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 773 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1970, 1, 1, 0]");
    }

    @Test
    public void test00604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00604");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = chronology3.add(readablePeriod6, (long) (short) 1, 0);
        org.joda.time.Chronology chronology10 = chronology3.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.months();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.era();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test00605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00605");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.Interval interval3 = readableInterval1.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, chronology7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        boolean boolean13 = localDateTime8.equals((java.lang.Object) chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 57, chronology12);
        boolean boolean16 = periodType4.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType17 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.Period period19 = readableInterval1.toPeriod(periodType18);
        java.lang.String str20 = readableInterval1.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.hours();
        org.joda.time.DurationField durationField26 = chronology24.seconds();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField31 = localDateTime29.getField((int) (short) 1);
        int int32 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        int int38 = property33.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime40 = property33.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withDurationAdded(readableDuration41, (int) (short) 10);
        int int45 = localDateTime40.getValue(0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = localDateTime46.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone51);
        int int53 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField59 = localDateTime57.getField((int) (short) 1);
        int int60 = localDateTime57.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = localDateTime57.getFieldType(0);
        int int63 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        long long65 = chronology24.set((org.joda.time.ReadablePartial) localDateTime52, (long) 2171);
        org.joda.time.DurationField durationField66 = chronology24.months();
        boolean boolean67 = readableInterval1.equals((java.lang.Object) chronology24);
        org.joda.time.DurationField durationField68 = chronology24.months();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str20, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2066 + "'", int32 == 2066);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2067 + "'", int45 == 2067);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 67 + "'", int60 == 67);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test00606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00606");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale7.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str15 = locale12.getExtension('a');
        java.lang.String str16 = locale7.getDisplayLanguage(locale12);
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.lang.String str18 = locale7.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = property6.getAsText(locale17);
        int int21 = property6.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property6.addWrapFieldToCopy(35082614);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField25 = localDateTime23.getField(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u6587" + "'", str18, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CHN" + "'", str19, "CHN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test00607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00607");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.MutableInterval mutableInterval5 = readableInterval4.toMutableInterval();
        boolean boolean6 = mutableInterval2.isBefore(readableInterval4);
        org.joda.time.Interval interval7 = mutableInterval2.toInterval();
        org.joda.time.Duration duration8 = mutableInterval2.toDuration();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        long long11 = readableInterval10.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Set<java.lang.String> strSet20 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Set<java.lang.String> strSet25 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str26 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet25);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet25);
        boolean boolean28 = strSet15.removeAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet25.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream30 = strSet25.parallelStream();
        boolean boolean31 = readableInterval10.equals((java.lang.Object) strSet25);
        org.joda.time.Duration duration32 = readableInterval10.toDuration();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        long long35 = readableInterval34.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Set<java.lang.String> strSet39 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Set<java.lang.String> strSet44 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strSet44);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Set<java.lang.String> strSet49 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str50 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strSet49);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strSet49);
        boolean boolean52 = strSet39.removeAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.stream.Stream<java.lang.String> strStream53 = strSet49.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream54 = strSet49.parallelStream();
        boolean boolean55 = readableInterval34.equals((java.lang.Object) strSet49);
        org.joda.time.Duration duration56 = readableInterval34.toDuration();
        boolean boolean57 = duration32.isEqual((org.joda.time.ReadableDuration) duration56);
        org.joda.time.ReadableInterval readableInterval58 = null;
        org.joda.time.ReadableInterval readableInterval59 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval58);
        long long60 = readableInterval59.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Set<java.lang.String> strSet64 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str65 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet64);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Set<java.lang.String> strSet69 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str70 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strSet69);
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Set<java.lang.String> strSet74 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str75 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.lang.String>) strSet74);
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strSet74);
        boolean boolean77 = strSet64.removeAll((java.util.Collection<java.lang.String>) strSet74);
        java.util.stream.Stream<java.lang.String> strStream78 = strSet74.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream79 = strSet74.parallelStream();
        boolean boolean80 = readableInterval59.equals((java.lang.Object) strSet74);
        org.joda.time.Duration duration81 = readableInterval59.toDuration();
        int int82 = duration32.compareTo((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration83 = duration81.toDuration();
        boolean boolean84 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration83);
        long long85 = duration83.getMillis();
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property89 = localDateTime86.era();
        org.joda.time.Chronology chronology90 = localDateTime86.getChronology();
        org.joda.time.DateTimeZone dateTimeZone91 = chronology90.getZone();
        org.joda.time.DateTimeField dateTimeField92 = chronology90.weekyear();
        org.joda.time.DateTimeField dateTimeField93 = chronology90.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField94 = chronology90.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField95 = chronology90.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField96 = chronology90.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone97 = chronology90.getZone();
        boolean boolean98 = duration83.equals((java.lang.Object) dateTimeZone97);
        java.lang.String str99 = duration83.toString();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(readableInterval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTimeZone97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "PT0S" + "'", str99, "PT0S");
    }

    @Test
    public void test00608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00608");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        boolean boolean9 = localDateTime4.equals((java.lang.Object) chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 57, chronology8);
        boolean boolean12 = periodType0.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType13 = periodType0.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        boolean boolean20 = periodType13.equals((java.lang.Object) chronology17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.secondOfMinute();
        int int27 = localDateTime25.getEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 100, chronology29);
        int int31 = localDateTime30.getDayOfMonth();
        int[] intArray32 = localDateTime30.getValues();
        chronology17.validate((org.joda.time.ReadablePartial) localDateTime25, intArray32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime25.minusSeconds(43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMinuteOfHour(2171);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2171 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test00609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00609");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 2119);
        boolean boolean8 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.centuryOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfCeilingCopy();
        boolean boolean12 = property10.isLeap();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00610");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 100, chronology4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        boolean boolean10 = localDateTime5.equals((java.lang.Object) chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology9);
        boolean boolean14 = locale2.equals((java.lang.Object) chronology9);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00611");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        int int6 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusHours(2022);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(999);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (short) 1);
        int int22 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        int int28 = property23.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(dateTimeZone30);
        boolean boolean32 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType36 = periodType34.getFieldType((int) (short) 0);
        boolean boolean37 = localDateTime16.isSupported(durationFieldType36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime10.withFieldAdded(durationFieldType36, 67);
        org.joda.time.DurationFieldType durationFieldType40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withFieldAdded(durationFieldType40, 35082011);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2066 + "'", int22 == 2066);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test00612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00612");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.MutableInterval mutableInterval5 = readableInterval4.toMutableInterval();
        boolean boolean6 = mutableInterval2.isBefore(readableInterval4);
        org.joda.time.Interval interval7 = mutableInterval2.toInterval();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.DateTime dateTime10 = readableInterval9.getStart();
        org.joda.time.DateTime dateTime11 = readableInterval9.getStart();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(dateTimeZone16);
        int int18 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = readableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        boolean boolean20 = mutableInterval2.contains(readableInterval9);
        org.joda.time.Duration duration21 = mutableInterval2.toDuration();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        long long24 = readableInterval23.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Set<java.lang.String> strSet28 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet28);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Set<java.lang.String> strSet33 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Set<java.lang.String> strSet38 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet38);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet38);
        boolean boolean41 = strSet28.removeAll((java.util.Collection<java.lang.String>) strSet38);
        java.util.stream.Stream<java.lang.String> strStream42 = strSet38.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream43 = strSet38.parallelStream();
        boolean boolean44 = readableInterval23.equals((java.lang.Object) strSet38);
        org.joda.time.Duration duration45 = readableInterval23.toDuration();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        long long48 = readableInterval47.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Set<java.lang.String> strSet52 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Set<java.lang.String> strSet57 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet57);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Set<java.lang.String> strSet62 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.lang.String>) strSet62);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet62);
        boolean boolean65 = strSet52.removeAll((java.util.Collection<java.lang.String>) strSet62);
        java.util.stream.Stream<java.lang.String> strStream66 = strSet62.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream67 = strSet62.parallelStream();
        boolean boolean68 = readableInterval47.equals((java.lang.Object) strSet62);
        org.joda.time.Duration duration69 = readableInterval47.toDuration();
        boolean boolean70 = duration45.isEqual((org.joda.time.ReadableDuration) duration69);
        org.joda.time.ReadableInterval readableInterval71 = null;
        org.joda.time.ReadableInterval readableInterval72 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval71);
        long long73 = readableInterval72.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Set<java.lang.String> strSet77 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str78 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.lang.String>) strSet77);
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Set<java.lang.String> strSet82 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str83 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet82);
        java.util.Locale.LanguageRange[] languageRangeArray84 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList85 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85, languageRangeArray84);
        java.util.Set<java.lang.String> strSet87 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str88 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, (java.util.Collection<java.lang.String>) strSet87);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet87);
        boolean boolean90 = strSet77.removeAll((java.util.Collection<java.lang.String>) strSet87);
        java.util.stream.Stream<java.lang.String> strStream91 = strSet87.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream92 = strSet87.parallelStream();
        boolean boolean93 = readableInterval72.equals((java.lang.Object) strSet87);
        org.joda.time.Duration duration94 = readableInterval72.toDuration();
        int int95 = duration45.compareTo((org.joda.time.ReadableDuration) duration94);
        java.lang.String str96 = duration94.toString();
        boolean boolean97 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration94);
        org.joda.time.Duration duration98 = duration94.toDuration();
        org.joda.time.Period period99 = duration98.toPeriod();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(readableInterval72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(languageRangeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strStream91);
        org.junit.Assert.assertNotNull(strStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "PT0S" + "'", str96, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(duration98);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test00613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00613");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("424");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfMonth(35082410);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35082410 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test00614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00614");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setID("Etc/UTC");
        timeZone1.setID("2074-03-24T19:29:10.161");
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getExtension('a');
        java.lang.String str10 = locale6.getDisplayVariant();
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str14 = locale11.getExtension('a');
        java.lang.String str15 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.setDefault(locale11);
        java.lang.String str17 = locale11.getCountry();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str21 = locale18.getExtension('a');
        java.lang.String str22 = locale18.getDisplayVariant();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str26 = locale23.getExtension('a');
        java.lang.String str27 = locale18.getDisplayLanguage(locale23);
        java.util.Locale.setDefault(locale23);
        java.lang.String str29 = locale11.getDisplayVariant(locale23);
        java.lang.String str30 = timeZone1.getDisplayName(locale23);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str7, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str12, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str15, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str19, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str27, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GMT+00:00" + "'", str30, "GMT+00:00");
    }

    @Test
    public void test00615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00615");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str4 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Set<java.lang.String> strSet5 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet5);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = strSet5.remove((java.lang.Object) locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
    }

    @Test
    public void test00616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00616");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00617");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str4 = locale1.getExtension('a');
        java.lang.String str5 = locale1.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getExtension('a');
        java.lang.String str10 = locale1.getDisplayLanguage(locale6);
        java.lang.String str13 = nameProvider0.getShortName(locale1, "+35:00", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str17 = locale14.getExtension('a');
        java.lang.String str20 = nameProvider0.getShortName(locale14, "958", "CN");
        java.lang.String str21 = locale14.getISO3Country();
        java.lang.Object obj22 = locale14.clone();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str2, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str7, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str10, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str15, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "ja");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "ja");
    }

    @Test
    public void test00618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00618");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder5 = builder3.setRegion("759");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.removeUnicodeLocaleAttribute("de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00619");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.DateTime dateTime2 = readableInterval1.getStart();
        org.joda.time.DateTime dateTime3 = readableInterval1.getStart();
        org.joda.time.Interval interval4 = readableInterval1.toInterval();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weeks();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeUtils.getZone(dateTimeZone12);
        java.lang.String str16 = dateTimeZone12.getName((long) 35083051);
        org.joda.time.Chronology chronology17 = chronology8.withZone(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) interval4, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+35:00" + "'", str16, "+35:00");
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test00620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00620");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        boolean boolean15 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(dateTimeZone20);
        int int22 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusYears((int) (short) 0);
        int int29 = localDateTime28.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDateTime31.getFieldType(0);
        boolean boolean34 = dateTime14.isSupported(dateTimeFieldType33);
        org.joda.time.Instant instant35 = dateTime14.toInstant();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime39.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField49 = localDateTime47.getField((int) (short) 1);
        int int50 = localDateTime47.getWeekyear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology55 = dateTime54.getChronology();
        int int56 = property51.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(dateTimeZone58);
        boolean boolean60 = dateTime54.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(dateTimeZone65);
        int int67 = dateTime63.compareTo((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = dateTime59.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(dateTimeZone70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.minusYears((int) (short) 0);
        int int74 = localDateTime73.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDateTime76.getFieldType(0);
        boolean boolean79 = dateTime59.isSupported(dateTimeFieldType78);
        org.joda.time.DateTime dateTime80 = localDateTime39.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean81 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean82 = instant35.isAfter((org.joda.time.ReadableInstant) dateTime38);
        long long83 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) instant35);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 19 + "'", int29 == 19);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2066 + "'", int50 == 2066);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 19 + "'", int74 == 19);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test00621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00621");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int5 = timeZone1.getOffset((long) (-1));
        int int6 = timeZone1.getRawOffset();
        boolean boolean7 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test00622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00622");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale5);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.lang.String str12 = locale9.getExtension('a');
        java.lang.String str13 = locale9.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str17 = locale14.getExtension('a');
        java.lang.String str18 = locale9.getDisplayLanguage(locale14);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = locale9.getDisplayLanguage(locale19);
        java.text.DateFormatSymbols dateFormatSymbols21 = java.text.DateFormatSymbols.getInstance(locale19);
        java.lang.String str22 = locale19.getCountry();
        java.util.Locale.Builder builder23 = builder3.setLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder23.setExtension('a', "2022-02-11T09:44:41.346");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:44:41.346 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str10, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str15, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str18, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u6587" + "'", str20, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(dateFormatSymbols21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CN" + "'", str22, "CN");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test00623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00623");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        long long9 = chronology3.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField10 = chronology3.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology3);
        java.lang.String str12 = localDateTime11.toString();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale15.getDisplayScript(locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = property13.setCopy("402", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 402 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-90L) + "'", long9 == (-90L));
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.000" + "'", str12, "1970-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test00624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00624");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMonths(19);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField12 = localDateTime10.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField17 = localDateTime15.getField((int) (short) 1);
        int int18 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        int int24 = property19.compareTo((org.joda.time.ReadableInstant) dateTime22);
        java.lang.String str25 = property19.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property19.getFieldType();
        org.joda.time.LocalDateTime.Property property27 = localDateTime10.property(dateTimeFieldType26);
        boolean boolean28 = localDateTime7.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime7.yearOfEra();
        java.lang.String str30 = property29.getAsText();
        int int31 = property29.getLeapAmount();
        java.lang.String str32 = property29.getName();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2066 + "'", int18 == 2066);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1971" + "'", str30, "1971");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "yearOfEra" + "'", str32, "yearOfEra");
    }

    @Test
    public void test00625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00625");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = chronology3.getDateTimeMillis((-125999948L), 53, 968, (int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test00626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00626");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology4.getZone();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.year();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test00627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00627");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        int int3 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.era();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readableDuration5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusHours(43);
        java.lang.Class<?> wildcardClass9 = localDateTime8.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test00628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00628");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DurationField durationField5 = chronology3.weekyears();
        org.joda.time.DurationField durationField6 = chronology3.years();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = chronology3.getDateTimeMillis((long) 74708767, 205200000, 881, 73, 35082058);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 205200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test00629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00629");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withPeriodAdded(readablePeriod4, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withPeriodAdded(readablePeriod7, 57);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField((int) (short) 1);
        int int15 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        int int21 = property16.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDateTime localDateTime23 = property16.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, (int) (short) 10);
        int int27 = localDateTime26.getYear();
        boolean boolean28 = localDateTime9.equals((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime26.withDayOfWeek(1902);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1902 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2066 + "'", int15 == 2066);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2067 + "'", int27 == 2067);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test00630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00630");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test00631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00631");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        int int6 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusHours(2022);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(999);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (short) 1);
        int int22 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        int int28 = property23.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(dateTimeZone30);
        boolean boolean32 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType36 = periodType34.getFieldType((int) (short) 0);
        boolean boolean37 = localDateTime16.isSupported(durationFieldType36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime10.withFieldAdded(durationFieldType36, 67);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime10.minusWeeks((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMonthOfYear((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2066 + "'", int22 == 2066);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test00632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00632");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("705");
        java.lang.String str2 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str2, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test00633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00633");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setExtension('a', "19");
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.lang.String str10 = locale8.getDisplayScript();
        java.text.DateFormatSymbols dateFormatSymbols11 = new java.text.DateFormatSymbols(locale8);
        java.lang.String str12 = locale8.toLanguageTag();
        java.lang.String str13 = locale8.toLanguageTag();
        java.util.Locale.Builder builder14 = builder6.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder14.setExtension('4', "708");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00634");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getExtension('a');
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.lang.String str9 = locale0.getDisplayLanguage(locale5);
        java.util.Locale.setDefault(locale5);
        java.lang.String str11 = locale5.getCountry();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str15 = locale12.getExtension('a');
        java.lang.String str16 = locale12.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str20 = locale17.getExtension('a');
        java.lang.String str21 = locale12.getDisplayLanguage(locale17);
        java.util.Locale.setDefault(locale17);
        java.lang.String str23 = locale5.getDisplayVariant(locale17);
        java.lang.String str24 = locale17.getISO3Country();
        java.text.DateFormatSymbols dateFormatSymbols25 = new java.text.DateFormatSymbols(locale17);
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str27 = locale26.getLanguage();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale17.getDisplayName(locale26);
        java.lang.String str30 = locale17.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str1, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str6, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str9, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str18, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str21, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japanese" + "'", str29, "Japanese");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test00635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00635");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 35072450);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00636");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        boolean boolean15 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((int) (short) 1);
        int int21 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        int int27 = property22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime14.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getNameKey(3289145349341L);
        long long35 = dateTimeZone29.convertLocalToUTC((long) 6, false);
        java.lang.String str36 = dateTimeZone29.getID();
        java.util.TimeZone timeZone37 = dateTimeZone29.toTimeZone();
        java.lang.Object obj38 = timeZone37.clone();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2066 + "'", int21 == 2066);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6L + "'", long35 == 6L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test00637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00637");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(7);
        int int7 = localDateTime6.getDayOfMonth();
        java.lang.String str9 = localDateTime6.toString("24");
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(dateTimeZone14);
        int int16 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime6.withDayOfWeek(2170);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2170 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "24" + "'", str9, "24");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test00638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00638");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder16 = builder0.setRegion("958");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder0.setScript("159");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 159 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test00639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00639");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int4 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone6.setID("Etc/UTC");
        boolean boolean9 = timeZone1.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str14 = locale11.getExtension('a');
        java.lang.String str15 = locale11.getDisplayVariant();
        java.lang.String str16 = locale11.getVariant();
        java.text.DateFormatSymbols dateFormatSymbols17 = java.text.DateFormatSymbols.getInstance(locale11);
        java.lang.String str18 = locale11.getDisplayName();
        java.lang.String str19 = timeZone6.getDisplayName(locale11);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str12, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str18, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str19, "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test00640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00640");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        boolean boolean24 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(dateTimeZone29);
        int int31 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean32 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusYears((int) (short) 0);
        int int38 = localDateTime37.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDateTime40.getFieldType(0);
        boolean boolean43 = dateTime23.isSupported(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime3.plusSeconds((int) (short) 100);
        boolean boolean47 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.era();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withPeriodAdded(readablePeriod52, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime48.withPeriodAdded(readablePeriod55, 57);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfSecond(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime57);
        int int61 = localDateTime57.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2066 + "'", int14 == 2066);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 19 + "'", int38 == 19);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test00641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00641");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("ja", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00642");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis(2119);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears(834);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        long long10 = readableInterval9.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Set<java.lang.String> strSet19 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet24);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet24);
        boolean boolean27 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.stream.Stream<java.lang.String> strStream28 = strSet24.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet24.parallelStream();
        boolean boolean30 = readableInterval9.equals((java.lang.Object) strSet24);
        org.joda.time.Duration duration31 = readableInterval9.toDuration();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        long long34 = readableInterval33.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Set<java.lang.String> strSet38 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Set<java.lang.String> strSet43 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Set<java.lang.String> strSet48 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str49 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet48);
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet48);
        boolean boolean51 = strSet38.removeAll((java.util.Collection<java.lang.String>) strSet48);
        java.util.stream.Stream<java.lang.String> strStream52 = strSet48.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream53 = strSet48.parallelStream();
        boolean boolean54 = readableInterval33.equals((java.lang.Object) strSet48);
        org.joda.time.Duration duration55 = readableInterval33.toDuration();
        boolean boolean56 = duration31.isEqual((org.joda.time.ReadableDuration) duration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration31, 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime7.millisOfSecond();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str63 = locale61.getDisplayScript();
        java.text.DateFormatSymbols dateFormatSymbols64 = new java.text.DateFormatSymbols(locale61);
        java.lang.String str65 = locale61.toLanguageTag();
        java.lang.String str66 = locale61.toLanguageTag();
        org.joda.time.LocalDateTime localDateTime67 = property59.setCopy("327", locale61);
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        org.joda.time.tz.NameProvider nameProvider69 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale70 = java.util.Locale.JAPANESE;
        java.lang.String str71 = locale70.getDisplayLanguage();
        java.lang.String str73 = locale70.getExtension('a');
        java.lang.String str74 = locale70.getDisplayVariant();
        java.util.Locale locale75 = java.util.Locale.JAPANESE;
        java.lang.String str76 = locale75.getDisplayLanguage();
        java.lang.String str78 = locale75.getExtension('a');
        java.lang.String str79 = locale70.getDisplayLanguage(locale75);
        java.lang.String str82 = nameProvider69.getShortName(locale70, "+35:00", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.util.Locale locale83 = java.util.Locale.JAPANESE;
        java.lang.String str84 = locale83.getDisplayLanguage();
        java.lang.String str86 = locale83.getExtension('a');
        java.lang.String str89 = nameProvider69.getShortName(locale83, "958", "CN");
        java.lang.String str90 = locale68.getDisplayName(locale83);
        java.lang.String str91 = locale61.getDisplayScript(locale68);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zh-TW" + "'", str65, "zh-TW");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "zh-TW" + "'", str66, "zh-TW");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertNotNull(nameProvider69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str71, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str76, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str79, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str84, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str90, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test00643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00643");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset((long) 86390000);
    }

    @Test
    public void test00644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00644");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone5);
        int int7 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.minus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withWeekyear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusDays(35100820);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis((int) (short) 100);
        int int23 = localDateTime20.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 286 + "'", int23 == 286);
    }

    @Test
    public void test00645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00645");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("United States");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test00646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00646");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1970-01-01t00:00:00.000z/1970-01-01t00:00:00.000z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00647");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("197");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=197");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00648");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        java.lang.String str7 = localDateTime2.toString();
        int int8 = localDateTime2.getMinuteOfHour();
        int int9 = localDateTime2.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withMillisOfSecond(35100820);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35100820 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2119-02-12T09:45:21.221" + "'", str7, "2119-02-12T09:45:21.221");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 45 + "'", int8 == 45);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2119 + "'", int9 == 2119);
    }

    @Test
    public void test00649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00649");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        int int5 = property3.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.US;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property3.setCopy("\u5354\u5b9a\u4e16\u754c\u6642", locale7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?????\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
    }

    @Test
    public void test00650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00650");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(1949);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1949 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test00651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00651");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:44:42.884", "2074-03-24T19:29:09.320", "zh-CN");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.lang.String str5 = locale3.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:44:42.884_2074-03-24T19:29:09.320_zh-CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-CN" + "'", str4, "zh-CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
    }

    @Test
    public void test00652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00652");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.MutableInterval mutableInterval5 = readableInterval4.toMutableInterval();
        boolean boolean6 = mutableInterval2.isBefore(readableInterval4);
        org.joda.time.Interval interval7 = mutableInterval2.toInterval();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.DateTime dateTime10 = readableInterval9.getStart();
        org.joda.time.DateTime dateTime11 = readableInterval9.getStart();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(dateTimeZone16);
        int int18 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = readableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        boolean boolean20 = mutableInterval2.contains(readableInterval9);
        org.joda.time.Duration duration21 = mutableInterval2.toDuration();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        long long24 = readableInterval23.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Set<java.lang.String> strSet28 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet28);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Set<java.lang.String> strSet33 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Set<java.lang.String> strSet38 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet38);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet38);
        boolean boolean41 = strSet28.removeAll((java.util.Collection<java.lang.String>) strSet38);
        java.util.stream.Stream<java.lang.String> strStream42 = strSet38.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream43 = strSet38.parallelStream();
        boolean boolean44 = readableInterval23.equals((java.lang.Object) strSet38);
        org.joda.time.Duration duration45 = readableInterval23.toDuration();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        long long48 = readableInterval47.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Set<java.lang.String> strSet52 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Set<java.lang.String> strSet57 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet57);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Set<java.lang.String> strSet62 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.lang.String>) strSet62);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet62);
        boolean boolean65 = strSet52.removeAll((java.util.Collection<java.lang.String>) strSet62);
        java.util.stream.Stream<java.lang.String> strStream66 = strSet62.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream67 = strSet62.parallelStream();
        boolean boolean68 = readableInterval47.equals((java.lang.Object) strSet62);
        org.joda.time.Duration duration69 = readableInterval47.toDuration();
        boolean boolean70 = duration45.isEqual((org.joda.time.ReadableDuration) duration69);
        org.joda.time.ReadableInterval readableInterval71 = null;
        org.joda.time.ReadableInterval readableInterval72 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval71);
        long long73 = readableInterval72.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Set<java.lang.String> strSet77 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str78 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.lang.String>) strSet77);
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Set<java.lang.String> strSet82 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str83 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet82);
        java.util.Locale.LanguageRange[] languageRangeArray84 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList85 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85, languageRangeArray84);
        java.util.Set<java.lang.String> strSet87 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str88 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, (java.util.Collection<java.lang.String>) strSet87);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet87);
        boolean boolean90 = strSet77.removeAll((java.util.Collection<java.lang.String>) strSet87);
        java.util.stream.Stream<java.lang.String> strStream91 = strSet87.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream92 = strSet87.parallelStream();
        boolean boolean93 = readableInterval72.equals((java.lang.Object) strSet87);
        org.joda.time.Duration duration94 = readableInterval72.toDuration();
        int int95 = duration45.compareTo((org.joda.time.ReadableDuration) duration94);
        java.lang.String str96 = duration94.toString();
        boolean boolean97 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration94);
        org.joda.time.ReadableDuration readableDuration98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int99 = duration21.compareTo(readableDuration98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(readableInterval23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644659121447L + "'", long24 == 1644659121447L);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(readableInterval47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1644659121447L + "'", long48 == 1644659121447L);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(readableInterval72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644659121447L + "'", long73 == 1644659121447L);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(languageRangeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strStream91);
        org.junit.Assert.assertNotNull(strStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "PT0S" + "'", str96, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test00653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00653");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale5);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.lang.String str12 = locale9.getExtension('a');
        java.lang.String str13 = locale9.getDisplayVariant();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str17 = locale14.getExtension('a');
        java.lang.String str18 = locale9.getDisplayLanguage(locale14);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = locale9.getDisplayLanguage(locale19);
        java.text.DateFormatSymbols dateFormatSymbols21 = java.text.DateFormatSymbols.getInstance(locale19);
        java.lang.String str22 = locale19.getCountry();
        java.util.Locale.Builder builder23 = builder3.setLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder23.addUnicodeLocaleAttribute("+58:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: +58:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str10, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str15, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str18, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u6587" + "'", str20, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(dateFormatSymbols21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "CN" + "'", str22, "CN");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test00654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00654");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        boolean boolean24 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(dateTimeZone29);
        int int31 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean32 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusYears((int) (short) 0);
        int int38 = localDateTime37.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDateTime40.getFieldType(0);
        boolean boolean43 = dateTime23.isSupported(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime3.plusSeconds((int) (short) 100);
        boolean boolean47 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.era();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withPeriodAdded(readablePeriod52, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime48.withPeriodAdded(readablePeriod55, 57);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfSecond(100);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.ReadableInterval readableInterval62 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval61);
        org.joda.time.MutableInterval mutableInterval63 = readableInterval62.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval64 = null;
        org.joda.time.ReadableInterval readableInterval65 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval64);
        org.joda.time.MutableInterval mutableInterval66 = readableInterval65.toMutableInterval();
        boolean boolean67 = mutableInterval63.isBefore(readableInterval65);
        org.joda.time.Interval interval68 = mutableInterval63.toInterval();
        org.joda.time.Duration duration69 = mutableInterval63.toDuration();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime60.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime60.minusDays((int) '4');
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2119 + "'", int14 == 2119);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(readableInterval62);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(readableInterval65);
        org.junit.Assert.assertNotNull(mutableInterval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test00655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00655");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("2074-03-24T19:29:09.804");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.lang.Object[] objArray5 = strSet4.toArray();
        java.text.DateFormatSymbols dateFormatSymbols6 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray7 = java.util.TimeZone.getAvailableIDs();
        dateFormatSymbols6.setMonths(strArray7);
        java.text.DateFormatSymbols dateFormatSymbols9 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray10 = java.util.TimeZone.getAvailableIDs();
        dateFormatSymbols9.setMonths(strArray10);
        dateFormatSymbols6.setEras(strArray10);
        java.lang.String[][] strArray13 = dateFormatSymbols6.getZoneStrings();
        java.lang.String[] strArray14 = dateFormatSymbols6.getShortMonths();
        boolean boolean15 = strSet4.equals((java.lang.Object) dateFormatSymbols6);
        strSet4.clear();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str20 = locale17.getExtension('a');
        java.lang.String str21 = locale17.getDisplayVariant();
        java.util.Locale.setDefault(locale17);
        java.lang.String str23 = locale17.getLanguage();
        boolean boolean24 = locale17.hasExtensions();
        java.util.Set<java.lang.String> strSet25 = locale17.getUnicodeLocaleAttributes();
        boolean boolean26 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Set<java.lang.String> strSet32 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Set<java.lang.String> strSet37 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strSet37);
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap40);
        java.text.DateFormatSymbols dateFormatSymbols42 = java.text.DateFormatSymbols.getInstance();
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Set<java.lang.String> strSet46 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str47 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strSet46);
        boolean boolean48 = dateFormatSymbols42.equals((java.lang.Object) strSet46);
        java.lang.String[] strArray69 = new java.lang.String[] { "CHN", "Hours", "ISOChronology[Etc/UTC]", "Etc/UTC", "\u65e5\u672c\u8a9e", "\u65e5\u672c\u8a9e", "2022-02-11T09:44:33.508", "575", "Japanese", "Hours", "Property[millisOfSecond]", "2022-02-11T09:44:34.137", "\u65e5\u6587", "958", "CHN", "2022-02-11T09:44:33.508", "", "2119-02-11T09:44:32.668", "822", "zho" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        strSet70.clear();
        boolean boolean73 = strSet46.containsAll((java.util.Collection<java.lang.String>) strSet70);
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet46, filteringMode74);
        boolean boolean76 = strSet28.addAll((java.util.Collection<java.lang.String>) strList75);
        boolean boolean77 = strSet4.containsAll((java.util.Collection<java.lang.String>) strList75);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str18, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ja" + "'", str23, "ja");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(dateFormatSymbols42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + filteringMode74 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode74.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test00656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00656");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setUnicodeLocaleKeyword("IT", "34");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: 34 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00657");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis(2119);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears(834);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        long long10 = readableInterval9.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Set<java.lang.String> strSet19 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet24);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet24);
        boolean boolean27 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.stream.Stream<java.lang.String> strStream28 = strSet24.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet24.parallelStream();
        boolean boolean30 = readableInterval9.equals((java.lang.Object) strSet24);
        org.joda.time.Duration duration31 = readableInterval9.toDuration();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        long long34 = readableInterval33.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Set<java.lang.String> strSet38 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Set<java.lang.String> strSet43 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Set<java.lang.String> strSet48 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str49 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet48);
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet48);
        boolean boolean51 = strSet38.removeAll((java.util.Collection<java.lang.String>) strSet48);
        java.util.stream.Stream<java.lang.String> strStream52 = strSet48.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream53 = strSet48.parallelStream();
        boolean boolean54 = readableInterval33.equals((java.lang.Object) strSet48);
        org.joda.time.Duration duration55 = readableInterval33.toDuration();
        boolean boolean56 = duration31.isEqual((org.joda.time.ReadableDuration) duration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration31, 0);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(97L);
        int int61 = localDateTime58.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime63 = localDateTime58.withEra(18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(readableInterval9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644659121905L + "'", long10 == 1644659121905L);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(readableInterval33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644659121905L + "'", long34 == 1644659121905L);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test00658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00658");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder5 = builder3.setRegion("759");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setRegion("GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00659");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ISOChronology[UTC] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00660");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone2);
        int int4 = localDateTime3.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField6 = localDateTime3.getField(1902);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1902");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
    }

    @Test
    public void test00661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00661");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale7.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str15 = locale12.getExtension('a');
        java.lang.String str16 = locale7.getDisplayLanguage(locale12);
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.lang.String str18 = locale7.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = property6.getAsText(locale17);
        java.text.DateFormatSymbols dateFormatSymbols21 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale17);
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str26 = locale23.getExtension('a');
        java.lang.String str27 = locale23.getDisplayVariant();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str31 = locale28.getExtension('a');
        java.lang.String str32 = locale23.getDisplayLanguage(locale28);
        java.lang.String str35 = nameProvider22.getShortName(locale23, "+35:00", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str39 = locale36.getExtension('a');
        java.lang.String str42 = nameProvider22.getShortName(locale36, "958", "CN");
        java.lang.String str43 = locale36.getISO3Country();
        java.lang.String str44 = locale17.getDisplayName(locale36);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale17.getDisplayScript(locale45);
        boolean boolean47 = locale17.hasExtensions();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u6587" + "'", str18, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CHN" + "'", str19, "CHN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "933" + "'", str20, "933");
        org.junit.Assert.assertNotNull(dateFormatSymbols21);
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str29, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str32, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str37, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str44, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test00662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00662");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setRegion("zho");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: zho [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test00663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00663");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime13 = property6.addWrapFieldToCopy(35072450);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str17 = locale14.getExtension('a');
        java.lang.String str18 = property6.getAsText(locale14);
        org.joda.time.Interval interval19 = property6.toInterval();
        org.joda.time.Duration duration20 = interval19.toDuration();
        long long21 = interval19.toDurationMillis();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str15, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "75" + "'", str18, "75");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test00664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00664");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology3);
        int int7 = localDateTime6.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMonthOfYear(1949);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1949 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test00665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00665");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder0.setLanguage("\u65e5\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00666");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setExtension('a', "19");
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.lang.String str10 = locale8.getDisplayScript();
        java.text.DateFormatSymbols dateFormatSymbols11 = new java.text.DateFormatSymbols(locale8);
        java.lang.String str12 = locale8.toLanguageTag();
        java.lang.String str13 = locale8.toLanguageTag();
        java.util.Locale.Builder builder14 = builder6.setLocale(locale8);
        java.util.Locale.Builder builder15 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder6.setScript("134");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 134 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test00667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00667");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("397");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '397' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00668");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder5 = builder3.setRegion("759");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setScript("\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test00669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00669");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        long long8 = dateTimeZone5.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime22 = property15.addWrapFieldToCopy(35072450);
        boolean boolean23 = dateTimeZone5.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        boolean boolean26 = dateTimeZone5.isStandardOffset(1644572672009L);
        java.util.TimeZone timeZone27 = dateTimeZone5.toTimeZone();
        boolean boolean28 = timeZone27.observesDaylightTime();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = timeZone27.getDisplayName(true, 2022, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 2022");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35072450L + "'", long8 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2119 + "'", int14 == 2119);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
    }

    @Test
    public void test00670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00670");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("45", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00671");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.DurationFieldType durationFieldType1 = null;
        int int2 = periodType0.indexOf(durationFieldType1);
        org.joda.time.PeriodType periodType3 = org.joda.time.DateTimeUtils.getPeriodType(periodType0);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test00672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00672");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime(dateTimeZone4);
        int int6 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DurationField durationField9 = chronology7.years();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        java.lang.String str18 = dateTimeZone16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) durationField10, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test00673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00673");
        java.util.Locale locale1 = new java.util.Locale("2074-03-24T19:29:10.161");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.era();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, 2119);
        boolean boolean10 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.centuryOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.year();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        boolean boolean14 = locale1.equals((java.lang.Object) durationField13);
        org.junit.Assert.assertEquals(locale1.toString(), "2074-03-24t19:29:10.161");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00674");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.DateTime dateTime2 = readableInterval1.getStart();
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.MutableInterval mutableInterval4 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.MutableInterval mutableInterval7 = readableInterval6.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.MutableInterval mutableInterval10 = readableInterval9.toMutableInterval();
        boolean boolean11 = mutableInterval7.isBefore(readableInterval9);
        boolean boolean12 = readableInterval1.isAfter(readableInterval9);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        long long15 = readableInterval14.getStartMillis();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.DateTime dateTime18 = readableInterval17.getStart();
        org.joda.time.DateTime dateTime19 = readableInterval17.getStart();
        org.joda.time.Period period20 = readableInterval17.toPeriod();
        org.joda.time.Interval interval21 = readableInterval17.toInterval();
        boolean boolean22 = readableInterval14.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Period period23 = interval21.toPeriod();
        org.joda.time.MutableInterval mutableInterval24 = interval21.toMutableInterval();
        org.joda.time.DateTime dateTime25 = interval21.getStart();
        boolean boolean26 = readableInterval1.isAfter((org.joda.time.ReadableInterval) interval21);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField31 = localDateTime29.getField((int) (short) 1);
        int int32 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        int int38 = property33.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(dateTimeZone40);
        boolean boolean42 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(dateTimeZone47);
        int int49 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str51 = dateTime41.toString();
        boolean boolean52 = interval21.contains((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(readableInterval14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644659123856L + "'", long15 == 1644659123856L);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2119 + "'", int32 == 2119);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-13T20:45:23.857+35:00" + "'", str51, "2022-02-13T20:45:23.857+35:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test00675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00675");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime(dateTimeZone4);
        int int6 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DurationField durationField9 = chronology7.months();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology7.getDateTimeMillis(676, (-292275054), 773, 286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test00676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00676");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(35083051, 100, (int) ' ', 948, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 948 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00677");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        boolean boolean15 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((int) (short) 1);
        int int21 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        int int27 = property22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(dateTimeZone29);
        boolean boolean31 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField36 = localDateTime34.getField((int) (short) 1);
        int int37 = localDateTime34.getWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        int int43 = property38.compareTo((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean44 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime30.getZone();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(dateTimeZone47);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        int int50 = dateTime30.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(dateTimeZone56);
        int int58 = dateTime54.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DurationField durationField60 = chronology59.halfdays();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2119 + "'", int21 == 2119);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2119 + "'", int37 == 2119);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test00678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00678");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone(zoneId1);
        java.lang.String str3 = timeZone2.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str3, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test00679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00679");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:44:42.884", "2074-03-24T19:29:09.320", "zh-CN");
        java.util.Locale locale4 = locale3.stripExtensions();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 100, chronology8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        boolean boolean14 = localDateTime9.equals((java.lang.Object) chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 57, chronology13);
        boolean boolean17 = periodType5.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType18 = periodType5.withSecondsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withHoursRemoved();
        boolean boolean20 = locale4.equals((java.lang.Object) periodType18);
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:44:42.884_2074-03-24T19:29:09.320_zh-CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "2022-02-11t09:44:42.884_2074-03-24T19:29:09.320_zh-CN");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00680");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setExtension('a', "19");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean9 = dateTimeZone7.isStandardOffset(1L);
        long long12 = dateTimeZone7.convertLocalToUTC(999L, true);
        long long14 = dateTimeZone7.convertUTCToLocal((-126000001L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) builder6, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale$Builder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 999L + "'", long12 == 999L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-126000001L) + "'", long14 == (-126000001L));
    }

    @Test
    public void test00681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00681");
        org.joda.time.DurationFieldType[] durationFieldTypeArray0 = new org.joda.time.DurationFieldType[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.forFields(durationFieldTypeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldTypeArray0);
    }

    @Test
    public void test00682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00682");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 70150840, chronology4);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime11.getFieldTypes();
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime11.getFields();
        int int16 = localDateTime11.getDayOfWeek();
        int[] intArray18 = chronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) '4');
        org.joda.time.DurationField durationField19 = chronology4.weekyears();
        org.joda.time.DurationField durationField20 = chronology4.seconds();
        java.lang.String str21 = chronology4.toString();
        org.joda.time.DurationField durationField22 = chronology4.years();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 2, 39600052]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+35:00]" + "'", str21, "ISOChronology[+35:00]");
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test00683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00683");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.toString();
        int int13 = property6.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField14 = property6.getField();
        org.joda.time.LocalDateTime localDateTime15 = property6.roundFloorCopy();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.MutableInterval mutableInterval20 = readableInterval19.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.MutableInterval mutableInterval23 = readableInterval22.toMutableInterval();
        boolean boolean24 = mutableInterval20.isBefore(readableInterval22);
        boolean boolean25 = readableInterval17.isAfter((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        long long28 = readableInterval27.getStartMillis();
        org.joda.time.Interval interval29 = readableInterval27.toInterval();
        boolean boolean30 = mutableInterval20.isAfter((org.joda.time.ReadableInterval) interval29);
        boolean boolean31 = property6.equals((java.lang.Object) mutableInterval20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = property6.setCopy("GaMjkHmsSEDFwWxhKzZ");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GaMjkHmsSEDFwWxhKzZ\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(readableInterval27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1644659124441L + "'", long28 == 1644659124441L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test00684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00684");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusDays((int) 'u');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfDay(2);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusYears(5);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDateTime8.getValue(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test00685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00685");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        int int7 = timeZone5.getOffset((long) 35082011);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone9.setRawOffset(1);
        java.time.ZoneId zoneId12 = timeZone9.toZoneId();
        timeZone9.setRawOffset((-1));
        timeZone9.setRawOffset((int) (short) -1);
        java.time.ZoneId zoneId17 = timeZone9.toZoneId();
        boolean boolean18 = timeZone5.hasSameRules(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone21.setRawOffset(1);
        java.time.ZoneId zoneId24 = timeZone21.toZoneId();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone(zoneId24);
        int int27 = timeZone25.getOffset((long) 35082011);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone29.setRawOffset(1);
        java.time.ZoneId zoneId32 = timeZone29.toZoneId();
        timeZone29.setRawOffset((-1));
        timeZone29.setRawOffset((int) (short) -1);
        java.time.ZoneId zoneId37 = timeZone29.toZoneId();
        boolean boolean38 = timeZone25.hasSameRules(timeZone29);
        boolean boolean39 = timeZone5.hasSameRules(timeZone29);
        java.util.Locale locale40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = timeZone5.getDisplayName(locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test00686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00686");
        java.text.DateFormatSymbols dateFormatSymbols0 = java.text.DateFormatSymbols.getInstance();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str5 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet4);
        boolean boolean6 = dateFormatSymbols0.equals((java.lang.Object) strSet4);
        java.lang.String[] strArray7 = dateFormatSymbols0.getShortMonths();
        java.text.DateFormatSymbols dateFormatSymbols8 = new java.text.DateFormatSymbols();
        java.text.DateFormatSymbols dateFormatSymbols9 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols9.setWeekdays(strArray16);
        java.lang.String[] strArray18 = dateFormatSymbols9.getShortWeekdays();
        java.lang.String[][] strArray19 = dateFormatSymbols9.getZoneStrings();
        dateFormatSymbols8.setZoneStrings(strArray19);
        dateFormatSymbols0.setZoneStrings(strArray19);
        java.text.DateFormatSymbols dateFormatSymbols22 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols22.setWeekdays(strArray29);
        java.lang.String[] strArray31 = dateFormatSymbols22.getShortWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols32 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols32.setWeekdays(strArray39);
        java.lang.String[] strArray41 = dateFormatSymbols32.getShortWeekdays();
        dateFormatSymbols22.setShortMonths(strArray41);
        java.lang.String[] strArray43 = dateFormatSymbols22.getWeekdays();
        dateFormatSymbols0.setShortMonths(strArray43);
        java.lang.String[] strArray45 = dateFormatSymbols0.getShortWeekdays();
        java.lang.String[] strArray46 = dateFormatSymbols0.getAmPmStrings();
        java.lang.String str47 = dateFormatSymbols0.getLocalPatternChars();
        org.junit.Assert.assertNotNull(dateFormatSymbols0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str47, "GyMdkHmsSEDFwWahKzZ");
    }

    @Test
    public void test00687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00687");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("845", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=845");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00688");
        java.text.DateFormatSymbols dateFormatSymbols0 = new java.text.DateFormatSymbols();
        java.text.DateFormatSymbols dateFormatSymbols1 = java.text.DateFormatSymbols.getInstance();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Set<java.lang.String> strSet5 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str6 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet5);
        boolean boolean7 = dateFormatSymbols1.equals((java.lang.Object) strSet5);
        java.lang.String[] strArray8 = dateFormatSymbols1.getShortMonths();
        java.text.DateFormatSymbols dateFormatSymbols9 = new java.text.DateFormatSymbols();
        java.text.DateFormatSymbols dateFormatSymbols10 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols10.setWeekdays(strArray17);
        java.lang.String[] strArray19 = dateFormatSymbols10.getShortWeekdays();
        java.lang.String[][] strArray20 = dateFormatSymbols10.getZoneStrings();
        dateFormatSymbols9.setZoneStrings(strArray20);
        dateFormatSymbols1.setZoneStrings(strArray20);
        java.text.DateFormatSymbols dateFormatSymbols23 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols23.setWeekdays(strArray30);
        java.lang.String[] strArray32 = dateFormatSymbols23.getShortWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols33 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols33.setWeekdays(strArray40);
        java.lang.String[] strArray42 = dateFormatSymbols33.getShortWeekdays();
        dateFormatSymbols23.setShortMonths(strArray42);
        java.lang.String[] strArray44 = dateFormatSymbols23.getWeekdays();
        dateFormatSymbols1.setShortMonths(strArray44);
        java.lang.String[] strArray46 = dateFormatSymbols1.getShortWeekdays();
        dateFormatSymbols0.setShortMonths(strArray46);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        java.text.DateFormatSymbols dateFormatSymbols50 = new java.text.DateFormatSymbols(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols51.setWeekdays(strArray58);
        java.lang.String[] strArray60 = dateFormatSymbols51.getShortWeekdays();
        dateFormatSymbols50.setMonths(strArray60);
        dateFormatSymbols0.setMonths(strArray60);
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.lang.String str66 = locale63.getExtension('a');
        java.lang.String str67 = locale63.getDisplayVariant();
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = locale68.getDisplayLanguage();
        java.lang.String str71 = locale68.getExtension('a');
        java.lang.String str72 = locale63.getDisplayLanguage(locale68);
        java.util.Locale locale73 = java.util.Locale.PRC;
        java.lang.String str74 = locale63.getDisplayLanguage(locale73);
        java.util.Locale locale75 = java.util.Locale.getDefault();
        java.util.Locale locale76 = java.util.Locale.CHINA;
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale76.getDisplayScript(locale77);
        java.lang.String str79 = locale75.getDisplayScript(locale76);
        java.lang.String str80 = locale63.getDisplayCountry(locale76);
        java.text.DateFormatSymbols dateFormatSymbols81 = java.text.DateFormatSymbols.getInstance(locale63);
        java.lang.String[][] strArray82 = dateFormatSymbols81.getZoneStrings();
        java.lang.String[] strArray83 = dateFormatSymbols81.getShortMonths();
        dateFormatSymbols0.setWeekdays(strArray83);
        org.junit.Assert.assertNotNull(dateFormatSymbols1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str64, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str69, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str72, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u65e5\u6587" + "'", str74, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
    }

    @Test
    public void test00689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00689");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        int int3 = localDateTime0.getMillisOfDay();
        int int4 = localDateTime0.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withPeriodAdded(readablePeriod9, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.withPeriodAdded(readablePeriod12, 57);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.era();
        boolean boolean19 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.hours();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.era();
        long long29 = chronology23.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.era();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withPeriodAdded(readablePeriod35, 2119);
        long long39 = chronology23.set((org.joda.time.ReadablePartial) localDateTime34, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField44 = localDateTime42.getField((int) (short) 1);
        int int45 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        int int51 = property46.compareTo((org.joda.time.ReadableInstant) dateTime49);
        java.lang.String str52 = property46.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property46.getFieldType();
        int int54 = localDateTime34.get(dateTimeFieldType53);
        int int55 = localDateTime5.get(dateTimeFieldType53);
        org.joda.time.LocalDateTime.Property property56 = localDateTime0.property(dateTimeFieldType53);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMillis(2119);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.plus(readablePeriod63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime60.withDurationAdded(readableDuration65, (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField72 = localDateTime70.getField((int) (short) 1);
        int int73 = localDateTime70.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.minusSeconds(10);
        int int76 = localDateTime60.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = localDateTime60.toString(dateTimeFormatter77);
        int int79 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime81 = localDateTime60.withDayOfWeek(35110702);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35110702 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35124716 + "'", int3 == 35124716);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 43 + "'", int4 == 43);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-90L) + "'", long29 == (-90L));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62135596800000L) + "'", long39 == (-62135596800000L));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2119 + "'", int45 == 2119);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "717" + "'", str52, "717");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 717 + "'", int55 == 717);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 19 + "'", int73 == 19);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970-01-02T11:00:00.000" + "'", str78, "1970-01-02T11:00:00.000");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test00690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00690");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        boolean boolean8 = property6.isLeap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = property6.setCopy("2022-02-12T09:45:22.063");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-12T09:45:22.063\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test00691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00691");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology3);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = chronology3.getDateTimeMillis(35083051L, 43, 881, 0, 783);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test00692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00692");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2119-02-11T09:45:14.374");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2119-02-11t09:45:14.374");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00693");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusDays((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMonthOfYear(35122099);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35122099 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test00694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00694");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = property3.setCopy("zh-CN");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"zh-CN\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test00695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00695");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        int int7 = timeZone5.getOffset((long) 35082011);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone9.setRawOffset(1);
        java.time.ZoneId zoneId12 = timeZone9.toZoneId();
        timeZone9.setRawOffset((-1));
        timeZone9.setRawOffset((int) (short) -1);
        java.time.ZoneId zoneId17 = timeZone9.toZoneId();
        boolean boolean18 = timeZone5.hasSameRules(timeZone9);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime23.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusYears(2171);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) 'a');
        java.util.Date date29 = localDateTime28.toDate();
        boolean boolean30 = timeZone5.inDaylightTime(date29);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Feb 12 09:45:25 GMT 9793");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00696");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        long long8 = dateTimeZone5.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime22 = property15.addWrapFieldToCopy(35072450);
        boolean boolean23 = dateTimeZone5.isLocalDateTimeGap(localDateTime22);
        int int25 = dateTimeZone5.getOffsetFromLocal((long) 834);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusYears((int) 'a');
        boolean boolean29 = dateTimeZone5.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusDays(126000000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField(35082058);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35082058");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35072450L + "'", long8 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2119 + "'", int14 == 2119);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test00697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00697");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguageTag("yearOfEra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: yearOfEra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00698");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone5);
        int int7 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(16);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test00699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00699");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguageTag("1970-01-01T00:00:00.052Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1970 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00700");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str4 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet8);
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime13.getFieldTypes();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfYear((int) (short) 100);
        int int21 = localDateTime18.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.era();
        org.joda.time.Chronology chronology26 = localDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        long long30 = dateTimeZone27.convertLocalToUTC(52L, false);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField35 = localDateTime33.getField((int) (short) 1);
        int int36 = localDateTime33.getWeekyear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        int int42 = property37.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(dateTimeZone44);
        boolean boolean46 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 100, chronology49);
        int int51 = localDateTime50.getDayOfMonth();
        int[] intArray52 = localDateTime50.getValues();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.minusYears((int) (short) 0);
        int int58 = localDateTime57.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = localDateTime60.getFieldType(0);
        int int63 = localDateTime50.indexOf(dateTimeFieldType62);
        boolean boolean64 = dateTime45.isSupported(dateTimeFieldType62);
        int int65 = localDateTime18.indexOf(dateTimeFieldType62);
        boolean boolean66 = strSet8.contains((java.lang.Object) int65);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2119 + "'", int36 == 2119);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20 + "'", int58 == 20);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test00701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00701");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder0.setUnicodeLocaleKeyword("febbraio", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: febbraio [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test00702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00702");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str3 = timeZone2.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str3, "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test00703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00703");
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Set<java.lang.String> strSet10 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Set<java.lang.String> strSet20 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet20);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet20);
        boolean boolean23 = strSet10.removeAll((java.util.Collection<java.lang.String>) strSet20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis(2119);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusYears(834);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(dateTimeZone33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime32.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone37);
        int int39 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withEra((int) (short) 1);
        boolean boolean42 = localDateTime29.isEqual((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property43 = localDateTime29.era();
        boolean boolean44 = strSet10.equals((java.lang.Object) localDateTime29);
        org.joda.time.Chronology chronology45 = localDateTime29.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((int) (short) 100, 1949, 431, 0, 968, 71, 1949, chronology45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 968 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test00704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00704");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField10 = localDateTime8.getField((int) (short) 1);
        int int11 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        int int17 = property12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(dateTimeZone19);
        boolean boolean21 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.centuryOfEra();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2119 + "'", int11 == 2119);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test00705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00705");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder16 = builder0.setRegion("958");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder0.setLanguageTag("1970-01-02T11:00:00.000+35:00/1970-01-02T11:00:00.000+35:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 1970 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test00706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00706");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        boolean boolean12 = dateTimeZone10.isStandardOffset(1L);
        long long15 = dateTimeZone10.convertLocalToUTC(999L, true);
        org.joda.time.Chronology chronology16 = chronology3.withZone(dateTimeZone10);
        java.util.TimeZone timeZone17 = dateTimeZone10.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = timeZone17.getDisplayName(false, 71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 71");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 999L + "'", long15 == 999L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test00707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00707");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str4 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Set<java.lang.String> strSet13 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet13);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet13);
        boolean boolean16 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis(2119);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(834);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime25.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone30);
        int int32 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withEra((int) (short) 1);
        boolean boolean35 = localDateTime22.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property36 = localDateTime22.era();
        boolean boolean37 = strSet3.equals((java.lang.Object) localDateTime22);
        org.joda.time.Chronology chronology38 = localDateTime22.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology38.add((long) '#', 1644572708944L, 35100820);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572708944 * 35100820");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test00708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00708");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        boolean boolean8 = property6.equals((java.lang.Object) 10.0f);
        org.joda.time.LocalDateTime localDateTime10 = property6.setCopy(19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekOfWeekyear(2093);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2093 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test00709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00709");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.Interval interval3 = readableInterval1.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, chronology7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        boolean boolean13 = localDateTime8.equals((java.lang.Object) chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 57, chronology12);
        boolean boolean16 = periodType4.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType17 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.Period period19 = readableInterval1.toPeriod(periodType18);
        java.lang.String str20 = readableInterval1.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.hours();
        org.joda.time.DurationField durationField26 = chronology24.seconds();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField31 = localDateTime29.getField((int) (short) 1);
        int int32 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        int int38 = property33.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime40 = property33.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withDurationAdded(readableDuration41, (int) (short) 10);
        int int45 = localDateTime40.getValue(0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = localDateTime46.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone51);
        int int53 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField59 = localDateTime57.getField((int) (short) 1);
        int int60 = localDateTime57.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = localDateTime57.getFieldType(0);
        int int63 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        long long65 = chronology24.set((org.joda.time.ReadablePartial) localDateTime52, (long) 2171);
        org.joda.time.DurationField durationField66 = chronology24.months();
        boolean boolean67 = readableInterval1.equals((java.lang.Object) chronology24);
        org.joda.time.DateTime dateTime68 = readableInterval1.getEnd();
        org.joda.time.Duration duration69 = readableInterval1.toDuration();
        org.joda.time.Duration duration70 = duration69.toDuration();
        long long71 = duration69.getMillis();
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1644659126420L + "'", long2 == 1644659126420L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-12T09:45:26.420Z/2022-02-12T09:45:26.420Z" + "'", str20, "2022-02-12T09:45:26.420Z/2022-02-12T09:45:26.420Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2119 + "'", int32 == 2119);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2119 + "'", int45 == 2119);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 19 + "'", int60 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test00710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00710");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        long long4 = dateTimeZone1.convertLocalToUTC(1644572696260L, true);
        java.text.DateFormatSymbols dateFormatSymbols5 = new java.text.DateFormatSymbols();
        java.text.DateFormatSymbols dateFormatSymbols6 = java.text.DateFormatSymbols.getInstance();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Set<java.lang.String> strSet10 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet10);
        boolean boolean12 = dateFormatSymbols6.equals((java.lang.Object) strSet10);
        java.lang.String[] strArray13 = dateFormatSymbols6.getShortMonths();
        java.text.DateFormatSymbols dateFormatSymbols14 = new java.text.DateFormatSymbols();
        java.text.DateFormatSymbols dateFormatSymbols15 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols15.setWeekdays(strArray22);
        java.lang.String[] strArray24 = dateFormatSymbols15.getShortWeekdays();
        java.lang.String[][] strArray25 = dateFormatSymbols15.getZoneStrings();
        dateFormatSymbols14.setZoneStrings(strArray25);
        dateFormatSymbols6.setZoneStrings(strArray25);
        java.text.DateFormatSymbols dateFormatSymbols28 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols28.setWeekdays(strArray35);
        java.lang.String[] strArray37 = dateFormatSymbols28.getShortWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols38 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols38.setWeekdays(strArray45);
        java.lang.String[] strArray47 = dateFormatSymbols38.getShortWeekdays();
        dateFormatSymbols28.setShortMonths(strArray47);
        java.lang.String[] strArray49 = dateFormatSymbols28.getWeekdays();
        dateFormatSymbols6.setShortMonths(strArray49);
        java.lang.String[] strArray51 = dateFormatSymbols6.getShortWeekdays();
        dateFormatSymbols5.setShortMonths(strArray51);
        boolean boolean53 = dateTimeZone1.equals((java.lang.Object) dateFormatSymbols5);
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale54.getDisplayLanguage();
        java.lang.String str57 = locale54.getExtension('a');
        java.lang.String str58 = locale54.getDisplayVariant();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = locale59.getDisplayLanguage();
        java.lang.String str62 = locale59.getExtension('a');
        java.lang.String str63 = locale54.getDisplayLanguage(locale59);
        java.util.Locale locale64 = java.util.Locale.PRC;
        java.lang.String str65 = locale54.getDisplayLanguage(locale64);
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Locale locale67 = java.util.Locale.CHINA;
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale67.getDisplayScript(locale68);
        java.lang.String str70 = locale66.getDisplayScript(locale67);
        java.lang.String str71 = locale54.getDisplayCountry(locale67);
        java.text.DateFormatSymbols dateFormatSymbols72 = java.text.DateFormatSymbols.getInstance(locale54);
        java.lang.String[][] strArray73 = dateFormatSymbols72.getZoneStrings();
        dateFormatSymbols5.setZoneStrings(strArray73);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644572696260L + "'", long4 == 1644572696260L);
        org.junit.Assert.assertNotNull(dateFormatSymbols6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str55, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str60, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str63, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u65e5\u6587" + "'", str65, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols72);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test00711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00711");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2067-01-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2067-01-01t00:00:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00712");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test00713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00713");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.dayOfWeek();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getExtension('a');
        java.lang.String str10 = locale6.getDisplayVariant();
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str14 = locale11.getExtension('a');
        java.lang.String str15 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.setDefault(locale11);
        java.lang.String str17 = locale11.getCountry();
        java.text.DateFormatSymbols dateFormatSymbols18 = new java.text.DateFormatSymbols(locale11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = property4.setCopy("415", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"415\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str7, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str12, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str15, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test00714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00714");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear((int) (short) 100);
        int int10 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        long long19 = dateTimeZone16.convertLocalToUTC(52L, false);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (short) 1);
        int int25 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        int int31 = property26.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(dateTimeZone33);
        boolean boolean35 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 100, chronology38);
        int int40 = localDateTime39.getDayOfMonth();
        int[] intArray41 = localDateTime39.getValues();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minusYears((int) (short) 0);
        int int47 = localDateTime46.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime49.getFieldType(0);
        int int52 = localDateTime39.indexOf(dateTimeFieldType51);
        boolean boolean53 = dateTime34.isSupported(dateTimeFieldType51);
        int int54 = localDateTime7.indexOf(dateTimeFieldType51);
        int int55 = localDateTime7.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2119 + "'", int25 == 2119);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 12 + "'", int55 == 12);
    }

    @Test
    public void test00715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00715");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int4 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone6.setID("Etc/UTC");
        boolean boolean9 = timeZone1.hasSameRules(timeZone6);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = timeZone1.getOffset(292278993, (int) (short) 100, 0, 71, 52, 2066);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00716");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("jpn");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Set<java.lang.String> strSet5 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str6 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet5);
        java.lang.Object[] objArray7 = strSet5.toArray();
        boolean boolean9 = strSet5.add("2022-02-11T09:44:32.203");
        boolean boolean10 = languageRange1.equals((java.lang.Object) strSet5);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00717");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(0L);
    }

    @Test
    public void test00718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00718");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder5 = builder0.setLanguage("Hours");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("2074-03-24t19:29:07.916z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2074-03-24t19:29:07.916z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00719");
        java.util.Locale locale3 = new java.util.Locale("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", "716", "2022-02-11T09:44:57.938");
        org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)_716_2022-02-11T09:44:57.938");
    }

    @Test
    public void test00720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00720");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("jpn");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime(dateTimeZone3);
        int int5 = localDateTime2.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.yearOfCentury();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.DateTime dateTime8 = interval7.getStart();
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval7);
        boolean boolean10 = languageRange1.equals((java.lang.Object) readableInterval9);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test00721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00721");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        boolean boolean9 = localDateTime4.equals((java.lang.Object) chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 57, chronology8);
        boolean boolean12 = periodType0.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType13 = periodType0.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        boolean boolean20 = periodType13.equals((java.lang.Object) chronology17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.secondOfMinute();
        int int27 = localDateTime25.getEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 100, chronology29);
        int int31 = localDateTime30.getDayOfMonth();
        int[] intArray32 = localDateTime30.getValues();
        chronology17.validate((org.joda.time.ReadablePartial) localDateTime25, intArray32);
        org.joda.time.DateTimeField dateTimeField34 = chronology17.year();
        java.lang.Class<?> wildcardClass35 = chronology17.getClass();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test00722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00722");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(35083868, (int) (byte) 100, (-292275054), 626, (int) (byte) 0, 2170);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 626 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00723");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset((long) 21);
    }

    @Test
    public void test00724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00724");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone5);
        int int7 = localDateTime6.getWeekyear();
        boolean boolean8 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime.Property property9 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime.Property property10 = localDateTime0.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime0.getFieldType(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test00725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00725");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 2);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusYears(2171);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfCentury();
        java.lang.String str14 = property13.getAsShortText();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(dateTimeZone16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime15.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone20);
        int int22 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withPeriodAdded(readablePeriod25, 10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.year();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField((int) (short) 1);
        int int34 = localDateTime31.getWeekyear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        int int40 = property35.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(dateTimeZone42);
        boolean boolean44 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField49 = localDateTime47.getField((int) (short) 1);
        int int50 = localDateTime47.getWeekyear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology55 = dateTime54.getChronology();
        int int56 = property51.compareTo((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean57 = dateTime43.isAfter((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        int int59 = property13.getDifference((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.era();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.withPeriodAdded(readablePeriod64, (int) ' ');
        java.lang.String str67 = localDateTime66.toString();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.monthOfYear();
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField74 = localDateTime72.getField((int) (short) 1);
        int int75 = localDateTime72.getWeekyear();
        org.joda.time.LocalDateTime.Property property76 = localDateTime72.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(dateTimeZone78);
        org.joda.time.Chronology chronology80 = dateTime79.getChronology();
        int int81 = property76.compareTo((org.joda.time.ReadableInstant) dateTime79);
        java.lang.String str82 = property76.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property76.getFieldType();
        boolean boolean84 = localDateTime66.isSupported(dateTimeFieldType83);
        boolean boolean85 = dateTime54.isSupported(dateTimeFieldType83);
        boolean boolean86 = dateTimeZone2.equals((java.lang.Object) dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "93" + "'", str14, "93");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2119 + "'", int34 == 2119);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2119 + "'", int50 == 2119);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2170 + "'", int59 == 2170);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-11T09:45:38.366" + "'", str67, "2022-02-11T09:45:38.366");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2119 + "'", int75 == 2119);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "366" + "'", str82, "366");
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test00726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00726");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(7);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        int int8 = localDateTime6.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond(1902);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1902 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test00727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00727");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        int int7 = timeZone5.getOffset((long) 35082011);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone9.setRawOffset(1);
        java.time.ZoneId zoneId12 = timeZone9.toZoneId();
        timeZone9.setRawOffset((-1));
        timeZone9.setRawOffset((int) (short) -1);
        java.time.ZoneId zoneId17 = timeZone9.toZoneId();
        boolean boolean18 = timeZone5.hasSameRules(timeZone9);
        java.lang.String str19 = timeZone9.getID();
        boolean boolean20 = timeZone9.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT" + "'", str19, "GMT");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00728");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.centuryOfEra();
        int int12 = localDateTime6.getSecondOfMinute();
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minusMillis(35083051);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDateTime15.getValue(275);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 275");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 38 + "'", int12 == 38);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test00729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00729");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder16 = builder0.setRegion("958");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setLanguageTag("404");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 404 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test00730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00730");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str4 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet8);
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet16);
        java.lang.String[] strArray27 = new java.lang.String[] { "GyMdkHmsSEDFwWahKzZ", "\u65e5\u672c\u8a9e", "822", "2119-02-11T09:44:32.668", "481", "ISOChronology[Etc/UTC]", "Japanese", "822", "Hours" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strSet16.addAll((java.util.Collection<java.lang.String>) strList28);
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList28);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Set<java.lang.String> strSet35 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str36 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Set<java.lang.String> strSet40 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strSet40);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strSet40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap43);
        java.util.Collection<java.util.Locale> localeCollection45 = null;
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, localeCollection45);
        java.util.Locale locale47 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Set<java.lang.String> strSet51 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strSet51);
        java.util.Set<java.lang.String> strSet53 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strSet53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Set<java.lang.String> strSet58 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str59 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Set<java.lang.String> strSet63 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str64 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strSet63);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet63);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Set<java.lang.String> strSet69 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str70 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strSet69);
        java.util.Set<java.lang.String> strSet71 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strSet71);
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Set<java.lang.String> strSet76 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str77 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.lang.String>) strSet76);
        java.lang.Object[] objArray78 = strSet76.toArray();
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strSet76);
        java.util.Collection<java.util.Locale> localeCollection80 = null;
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, localeCollection80);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, localeCollection80);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((long) 35072450);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        boolean boolean86 = localDateTime84.equals((java.lang.Object) filteringMode85);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, localeCollection80, filteringMode85);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime((long) 35072450);
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        boolean boolean91 = localDateTime89.equals((java.lang.Object) filteringMode90);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection80, filteringMode90);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(objArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "\u65e5\u672c\u8a9e]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "\u65e5\u672c\u8a9e]");
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertTrue("'" + filteringMode90 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode90.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(localeList92);
    }

    @Test
    public void test00731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00731");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField10 = localDateTime8.getField((int) (short) 1);
        int int11 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        int int17 = property12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(dateTimeZone19);
        boolean boolean21 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.centuryOfEra();
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.year();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray30 = chronology25.get(readablePeriod27, (long) 'a', 1644659123628L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2119 + "'", int11 == 2119);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test00732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00732");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField7 = localDateTime5.getField((int) (short) 1);
        int int8 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        int int14 = property9.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(dateTimeZone16);
        boolean boolean18 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField23 = localDateTime21.getField((int) (short) 1);
        int int24 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        int int30 = property25.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(dateTimeZone32);
        boolean boolean34 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(dateTimeZone39);
        int int41 = dateTime37.compareTo((org.joda.time.ReadableInstant) dateTime40);
        boolean boolean42 = dateTime33.isAfter((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean43 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean44 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateTime37);
        long long45 = mutableInterval2.getEndMillis();
        org.joda.time.DateTime dateTime46 = mutableInterval2.getStart();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.hours();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.era();
        long long56 = chronology50.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.era();
        org.joda.time.LocalDateTime localDateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withPeriodAdded(readablePeriod62, 2119);
        long long66 = chronology50.set((org.joda.time.ReadablePartial) localDateTime61, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField71 = localDateTime69.getField((int) (short) 1);
        int int72 = localDateTime69.getWeekyear();
        org.joda.time.LocalDateTime.Property property73 = localDateTime69.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(dateTimeZone75);
        org.joda.time.Chronology chronology77 = dateTime76.getChronology();
        int int78 = property73.compareTo((org.joda.time.ReadableInstant) dateTime76);
        java.lang.String str79 = property73.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property73.getFieldType();
        int int81 = localDateTime61.get(dateTimeFieldType80);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField86 = localDateTime84.getField((int) (short) 1);
        int int87 = localDateTime84.getWeekyear();
        org.joda.time.LocalDateTime.Property property88 = localDateTime84.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone90 = null;
        org.joda.time.DateTime dateTime91 = localDateTime89.toDateTime(dateTimeZone90);
        org.joda.time.Chronology chronology92 = dateTime91.getChronology();
        int int93 = property88.compareTo((org.joda.time.ReadableInstant) dateTime91);
        java.lang.String str94 = property88.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = property88.getFieldType();
        org.joda.time.LocalDateTime localDateTime97 = localDateTime61.withField(dateTimeFieldType95, 948);
        int int98 = dateTime46.get(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2119 + "'", int8 == 2119);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2119 + "'", int24 == 2119);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572738722L + "'", long45 == 1644572738722L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-90L) + "'", long56 == (-90L));
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-62135596800000L) + "'", long66 == (-62135596800000L));
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2119 + "'", int72 == 2119);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "723" + "'", str79, "723");
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2119 + "'", int87 == 2119);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "723" + "'", str94, "723");
        org.junit.Assert.assertNotNull(dateTimeFieldType95);
        org.junit.Assert.assertNotNull(localDateTime97);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 722 + "'", int98 == 722);
    }

    @Test
    public void test00733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00733");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = chronology3.add(readablePeriod6, (long) (short) 1, 0);
        org.joda.time.Chronology chronology10 = chronology3.withUTC();
        org.joda.time.DurationField durationField11 = chronology3.eras();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test00734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00734");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone3.setID("Etc/UTC");
        timeZone3.setID("2074-03-24T19:29:10.161");
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        java.util.TimeZone.setDefault(timeZone9);
        boolean boolean11 = timeZone3.hasSameRules(timeZone9);
        boolean boolean12 = timeZone9.observesDaylightTime();
        boolean boolean13 = timeZone1.hasSameRules(timeZone9);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((int) (short) 1);
        int int21 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        int int27 = property22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime29 = property22.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDurationAdded(readableDuration30, (int) (short) 10);
        int int34 = localDateTime29.getValue(0);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(dateTimeZone36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime35.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone40);
        int int42 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundHalfEvenCopy();
        int int46 = property44.getLeapAmount();
        java.util.Locale locale50 = new java.util.Locale("2022-02-11T09:44:42.884", "2074-03-24T19:29:09.320", "zh-CN");
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale50);
        java.text.DateFormatSymbols dateFormatSymbols52 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale50);
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.lang.String str54 = locale53.getDisplayVariant();
        java.lang.String str55 = locale53.toLanguageTag();
        java.lang.String str56 = locale50.getDisplayLanguage(locale53);
        java.lang.String str57 = property44.getAsText(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = timeZone9.getDisplayName(false, (-1), locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2119 + "'", int21 == 2119);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2119 + "'", int34 == 2119);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals(locale50.toString(), "2022-02-11t09:44:42.884_2074-03-24T19:29:09.320_zh-CN");
        org.junit.Assert.assertNotNull(dateFormatSymbols52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "de-DE" + "'", str55, "de-DE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11t09:44:42.884" + "'", str56, "2022-02-11t09:44:42.884");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
    }

    @Test
    public void test00735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00735");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str4 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        int int5 = strSet3.size();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(57);
        long long10 = dateTimeZone7.adjustOffset((long) (byte) 10, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) int5, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 575 + "'", int5 == 575);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
    }

    @Test
    public void test00736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00736");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime5 = property3.withMaximumValue();
        int int6 = property3.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval7 = property3.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test00737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00737");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        long long9 = chronology3.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 2119);
        long long19 = chronology3.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 0);
        java.lang.String str20 = localDateTime14.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDateTime14.getValue(35083868);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35083868");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-90L) + "'", long9 == (-90L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62135596800000L) + "'", long19 == (-62135596800000L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0001-01-01T00:00:00.000" + "'", str20, "0001-01-01T00:00:00.000");
    }

    @Test
    public void test00738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00738");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusYears(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 100, chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField17 = localDateTime15.getField((int) (short) 1);
        int int18 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime15);
        boolean boolean20 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDateTime19.get(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test00739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00739");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        boolean boolean8 = property6.equals((java.lang.Object) 10.0f);
        org.joda.time.LocalDateTime localDateTime10 = property6.setCopy(19);
        int int11 = property6.get();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 397 + "'", int11 == 397);
    }

    @Test
    public void test00740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00740");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField10 = localDateTime8.getField((int) (short) 1);
        int int11 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        int int17 = property12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(dateTimeZone19);
        boolean boolean21 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        int int28 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusYears((int) (short) 0);
        int int35 = localDateTime34.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDateTime37.getFieldType(0);
        boolean boolean40 = dateTime20.isSupported(dateTimeFieldType39);
        org.joda.time.DateTime dateTime41 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime0.plusSeconds((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.era();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField54 = localDateTime52.getField((int) (short) 1);
        int int55 = localDateTime52.getWeekyear();
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(dateTimeZone58);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        int int61 = property56.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(dateTimeZone63);
        boolean boolean65 = dateTime59.isAfter((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime66 = localDateTime49.toDateTime((org.joda.time.ReadableInstant) dateTime64);
        int int67 = localDateTime49.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime49.withMinuteOfHour(19);
        int int70 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.era();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.withPeriodAdded(readablePeriod77, (int) ' ');
        java.lang.String str80 = localDateTime79.toString();
        org.joda.time.LocalDateTime.Property property81 = localDateTime79.monthOfYear();
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField87 = localDateTime85.getField((int) (short) 1);
        int int88 = localDateTime85.getWeekyear();
        org.joda.time.LocalDateTime.Property property89 = localDateTime85.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone91 = null;
        org.joda.time.DateTime dateTime92 = localDateTime90.toDateTime(dateTimeZone91);
        org.joda.time.Chronology chronology93 = dateTime92.getChronology();
        int int94 = property89.compareTo((org.joda.time.ReadableInstant) dateTime92);
        java.lang.String str95 = property89.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = property89.getFieldType();
        boolean boolean97 = localDateTime79.isSupported(dateTimeFieldType96);
        boolean boolean98 = localDateTime72.isSupported(dateTimeFieldType96);
        org.joda.time.LocalDateTime.Property property99 = localDateTime72.year();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2119 + "'", int11 == 2119);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2119 + "'", int55 == 2119);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35139408 + "'", int67 == 35139408);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-02-11T09:45:39.409" + "'", str80, "2022-02-11T09:45:39.409");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2119 + "'", int88 == 2119);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "409" + "'", str95, "409");
        org.junit.Assert.assertNotNull(dateTimeFieldType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test00741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00741");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusYears(2171);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays(1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusSeconds(35082011);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withDayOfMonth(205200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 205200000 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test00742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00742");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.era();
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        long long11 = dateTimeZone8.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField16 = localDateTime14.getField((int) (short) 1);
        int int17 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        int int23 = property18.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime25 = property18.addWrapFieldToCopy(35072450);
        boolean boolean26 = dateTimeZone8.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        boolean boolean29 = dateTimeZone8.isStandardOffset(1644572672009L);
        org.joda.time.DateTime dateTime30 = localDateTime0.toDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime.Property property31 = localDateTime0.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = property31.setCopy(67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 67 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35072450L + "'", long11 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2119 + "'", int17 == 2119);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test00743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00743");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        long long8 = dateTimeZone5.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime22 = property15.addWrapFieldToCopy(35072450);
        boolean boolean23 = dateTimeZone5.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        boolean boolean26 = dateTimeZone5.isStandardOffset(1644572672009L);
        long long28 = dateTimeZone5.previousTransition((long) 1970);
        long long32 = dateTimeZone5.convertLocalToUTC(999L, true, (long) 16);
        boolean boolean34 = dateTimeZone5.isStandardOffset((long) 35082410);
        long long36 = dateTimeZone5.convertUTCToLocal(1644572700380L);
        long long40 = dateTimeZone5.convertLocalToUTC((long) 626, false, 724L);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35072450L + "'", long8 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2119 + "'", int14 == 2119);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1970L + "'", long28 == 1970L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 999L + "'", long32 == 999L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1644572700380L + "'", long36 == 1644572700380L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 626L + "'", long40 == 626L);
    }

    @Test
    public void test00744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00744");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone5);
        int int7 = localDateTime6.getWeekyear();
        boolean boolean8 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withDayOfMonth((int) (byte) 1);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.MutableInterval mutableInterval13 = readableInterval12.toMutableInterval();
        long long14 = readableInterval12.getStartMillis();
        org.joda.time.Period period15 = readableInterval12.toPeriod();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.plus((org.joda.time.ReadablePeriod) period15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime16.getFieldType(1900);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1900");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572739960L + "'", long14 == 1644572739960L);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test00745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00745");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(41);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusDays((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDateTime8.getField(27);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 27");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test00746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00746");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField((int) (short) 1);
        int int15 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime12);
        boolean boolean17 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime.Property property18 = localDateTime8.era();
        boolean boolean19 = property18.isLeap();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test00747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00747");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        long long8 = dateTimeZone5.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime22 = property15.addWrapFieldToCopy(35072450);
        boolean boolean23 = dateTimeZone5.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        boolean boolean26 = dateTimeZone5.isStandardOffset(1644572672009L);
        java.util.TimeZone timeZone27 = dateTimeZone5.toTimeZone();
        java.lang.Object obj28 = timeZone27.clone();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.hours();
        org.joda.time.DurationField durationField34 = chronology32.centuries();
        org.joda.time.Chronology chronology35 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) timeZone27, chronology35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.SimpleTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35072450L + "'", long8 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2119 + "'", int14 == 2119);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test00748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00748");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        long long9 = chronology3.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 2119);
        long long19 = chronology3.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusHours(634);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.minusYears(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime14.withTime(23, 35083661, 57, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35083661 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-90L) + "'", long9 == (-90L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62135596800000L) + "'", long19 == (-62135596800000L));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test00749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00749");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField10 = localDateTime8.getField((int) (short) 1);
        int int11 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        int int17 = property12.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime(dateTimeZone19);
        boolean boolean21 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        int int28 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusYears((int) (short) 0);
        int int35 = localDateTime34.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDateTime37.getFieldType(0);
        boolean boolean40 = dateTime20.isSupported(dateTimeFieldType39);
        org.joda.time.DateTime dateTime41 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime0.plusSeconds((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime0.withDate(67, 2171, 676);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2171 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2119 + "'", int11 == 2119);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test00750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00750");
        org.joda.time.Chronology chronology1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) 'a', chronology1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00751");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setScript("2022-02-11T09:45:05.579");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:45:05.579 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00752");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("jpn");
        java.lang.String str2 = languageRange1.getRange();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField7 = localDateTime5.getField((int) (short) 1);
        int int8 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        int int14 = property9.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(dateTimeZone16);
        boolean boolean18 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = languageRange1.equals((java.lang.Object) dateTime17);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2119 + "'", int8 == 2119);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test00753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00753");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(74708767);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test00754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00754");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear((int) (short) 100);
        int int10 = localDateTime7.getMillisOfSecond();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.String str14 = localDateTime7.toString("815", locale12);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "815" + "'", str14, "815");
    }

    @Test
    public void test00755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00755");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.Chronology chronology3 = chronology1.withUTC();
        org.joda.time.DurationField durationField4 = chronology3.days();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone7);
        long long10 = dateTimeZone7.previousTransition(1644572681716L);
        org.joda.time.Chronology chronology11 = chronology3.withZone(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.era();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withPeriodAdded(readablePeriod16, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.withPeriodAdded(readablePeriod19, 57);
        int[] intArray23 = chronology11.get((org.joda.time.ReadablePartial) localDateTime12, (long) (-292275054));
        org.joda.time.DurationField durationField24 = chronology11.weeks();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572681716L + "'", long10 == 1644572681716L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1969, 12, 30, 6524946]");
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test00756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00756");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int5 = timeZone1.getOffset((long) (-1));
        java.lang.Object obj6 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test00757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00757");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology3.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = chronology3.getDateTimeMillis(52, 73, 35122722, 35083095, 35083661, 70150840, 70150840);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35083095 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test00758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00758");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.era();
        org.joda.time.Chronology chronology5 = localDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekyear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology5.add(readablePeriod8, (long) (short) -1, (int) (byte) 100);
        org.joda.time.DurationField durationField12 = chronology5.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 696, chronology5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test00759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00759");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfFloorCopy();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test00760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00760");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(41);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusMinutes(0);
        int int11 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withCenturyOfEra((int) (byte) 100);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2018 + "'", int11 == 2018);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test00761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00761");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = timeZone1.getOffset((int) 'x', 1, 41, 39600001, 70, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId4);
    }

    @Test
    public void test00762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00762");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getExtension('a');
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.lang.String str9 = locale0.getDisplayLanguage(locale5);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale0.getDisplayLanguage(locale10);
        java.text.DateFormatSymbols dateFormatSymbols12 = java.text.DateFormatSymbols.getInstance(locale10);
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet13.stream();
        strSet13.clear();
        java.lang.String[] strArray36 = new java.lang.String[] { "CHN", "Hours", "ISOChronology[Etc/UTC]", "Etc/UTC", "\u65e5\u672c\u8a9e", "\u65e5\u672c\u8a9e", "2022-02-11T09:44:33.508", "575", "Japanese", "Hours", "Property[millisOfSecond]", "2022-02-11T09:44:34.137", "\u65e5\u6587", "958", "CHN", "2022-02-11T09:44:33.508", "", "2119-02-11T09:44:32.668", "822", "zho" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        strSet37.clear();
        boolean boolean40 = strSet13.removeAll((java.util.Collection<java.lang.String>) strSet37);
        java.util.Collection<java.lang.String> strCollection41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = strSet37.containsAll(strCollection41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Japanese" + "'", str1, "Japanese");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japanese" + "'", str6, "Japanese");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str9, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u6587" + "'", str11, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(dateFormatSymbols12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test00763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00763");
        java.text.DateFormatSymbols dateFormatSymbols0 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs();
        dateFormatSymbols0.setMonths(strArray1);
        java.text.DateFormatSymbols dateFormatSymbols3 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray4 = java.util.TimeZone.getAvailableIDs();
        dateFormatSymbols3.setMonths(strArray4);
        dateFormatSymbols0.setEras(strArray4);
        java.lang.String[] strArray8 = java.util.TimeZone.getAvailableIDs((int) (byte) 100);
        dateFormatSymbols0.setWeekdays(strArray8);
        java.lang.String[] strArray10 = dateFormatSymbols0.getWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols11 = new java.text.DateFormatSymbols();
        java.lang.String str12 = dateFormatSymbols11.getLocalPatternChars();
        java.lang.String[] strArray17 = new java.lang.String[] { "Property[millisOfSecond]", "hi!", "2119-02-11T09:44:32.668", "ISOChronology[Etc/UTC]" };
        dateFormatSymbols11.setShortWeekdays(strArray17);
        java.text.DateFormatSymbols dateFormatSymbols19 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols19.setWeekdays(strArray26);
        dateFormatSymbols11.setEras(strArray26);
        java.lang.String[] strArray29 = dateFormatSymbols11.getWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols30 = java.text.DateFormatSymbols.getInstance();
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Set<java.lang.String> strSet34 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet34);
        boolean boolean36 = dateFormatSymbols30.equals((java.lang.Object) strSet34);
        java.lang.String[] strArray37 = dateFormatSymbols30.getShortMonths();
        dateFormatSymbols11.setEras(strArray37);
        dateFormatSymbols0.setMonths(strArray37);
        dateFormatSymbols0.setLocalPatternChars("495");
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str12, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(dateFormatSymbols30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test00764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00764");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((int) (byte) 10, 985, 44, 35082614, 35139942);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35082614 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00765");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.lang.String str9 = locale5.getDisplayVariant();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str13 = locale10.getExtension('a');
        java.lang.String str14 = locale5.getDisplayLanguage(locale10);
        java.util.Locale locale15 = java.util.Locale.US;
        java.lang.String str16 = locale5.getDisplayName(locale15);
        int int17 = property3.getMaximumTextLength(locale5);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale locale20 = builder19.build();
        java.lang.String str21 = locale5.getDisplayName(locale20);
        java.lang.String str22 = locale20.getISO3Country();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japanese" + "'", str6, "Japanese");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Japanese" + "'", str11, "Japanese");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str14, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japanese" + "'", str16, "Japanese");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanese" + "'", str21, "Japanese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test00766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00766");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        int int6 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withSecondOfMinute((int) '#');
        java.lang.String str9 = localDateTime2.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 309 + "'", int6 == 309);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2119-02-11T09:45:41.309" + "'", str9, "2119-02-11T09:45:41.309");
    }

    @Test
    public void test00767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00767");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = builder9.build();
        java.util.Locale locale11 = builder9.build();
        java.lang.String str12 = locale0.getDisplayScript(locale11);
        java.lang.String str13 = locale11.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japanese" + "'", str3, "Japanese");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)" + "'", str7, "\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test00768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00768");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        int int2 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean4 = timeZone0.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = timeZone0.getOffset(20, 35106774, 35083051, 35082410, 39, 35082410);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00769");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = timeZone5.getOffset(20, (int) 'x', 612, 332, 0, 2002);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test00770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00770");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusYears(2171);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays(1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = property10.setCopy(2067);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2067 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test00771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00771");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setRegion("100");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguageTag("2022-02-11T09:45:08.232Z/2022-02-11T09:45:08.232Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00772");
        java.util.Locale locale0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(locale0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00773");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField11 = localDateTime9.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        long long16 = chronology3.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfYear();
        int int18 = property17.get();
        boolean boolean19 = property17.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField31 = localDateTime29.getField((int) (short) 1);
        int int32 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        int int38 = property33.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(dateTimeZone40);
        boolean boolean42 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        int int44 = property17.getDifference((org.joda.time.ReadableInstant) dateTime41);
        int int45 = property17.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4705551943000L + "'", long16 == 4705551943000L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 42 + "'", int18 == 42);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2119 + "'", int32 == 2119);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35428 + "'", int44 == 35428);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 366 + "'", int45 == 366);
    }

    @Test
    public void test00774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00774");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        int int7 = timeZone5.getOffset((long) 35082011);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone9.setRawOffset(1);
        java.time.ZoneId zoneId12 = timeZone9.toZoneId();
        timeZone9.setRawOffset((-1));
        timeZone9.setRawOffset((int) (short) -1);
        java.time.ZoneId zoneId17 = timeZone9.toZoneId();
        boolean boolean18 = timeZone5.hasSameRules(timeZone9);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale19.getVariant();
        java.lang.String str21 = timeZone5.getDisplayName(locale19);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u6642\u9593" + "'", str21, "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
    }

    @Test
    public void test00775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00775");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int5 = timeZone1.getOffset((long) (-1));
        java.lang.String str6 = timeZone1.getID();
        boolean boolean7 = timeZone1.observesDaylightTime();
        boolean boolean8 = timeZone1.observesDaylightTime();
        int int9 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00776");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        int int7 = timeZone5.getOffset((long) 35082011);
        java.time.ZoneId zoneId8 = timeZone5.toZoneId();
        boolean boolean9 = timeZone5.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00777");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        boolean boolean15 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((int) (short) 1);
        int int21 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        int int27 = property22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime14.getZone();
        long long32 = dateTimeZone29.convertLocalToUTC((long) '4', true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        long long36 = dateTimeZone29.adjustOffset((long) 999, true);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeUtils.getZone(dateTimeZone41);
        long long45 = dateTimeZone29.getMillisKeepLocal(dateTimeZone41, 7L);
        long long47 = dateTimeZone41.convertUTCToLocal((long) (byte) 100);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localDateTime52.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusYears(2171);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays(1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMinuteOfHour(0);
        boolean boolean60 = dateTimeZone41.isLocalDateTimeGap(localDateTime57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime62 = localDateTime57.withWeekOfWeekyear(431);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 431 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2119 + "'", int5 == 2119);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2119 + "'", int21 == 2119);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 999L + "'", long36 == 999L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 7L + "'", long45 == 7L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test00778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00778");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setID("Etc/UTC");
        timeZone1.setID("2074-03-24T19:29:10.161");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        java.util.TimeZone.setDefault(timeZone7);
        boolean boolean9 = timeZone1.hasSameRules(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone12);
        java.util.Date date14 = localDateTime13.toDate();
        boolean boolean15 = timeZone1.inDaylightTime(date14);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 02 11:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00779");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.secondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime0.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
    }

    @Test
    public void test00780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00780");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder5 = builder3.setRegion("759");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("197");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder6.setScript("2022-02-12T09:45:22.151");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-12T09:45:22.151 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00781");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        int int3 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.era();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readableDuration5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withDurationAdded(readableDuration7, (int) 'a');
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withPeriodAdded(readablePeriod15, (int) ' ');
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.monthOfYear();
        int int20 = localDateTime17.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        boolean boolean28 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime17.withYear((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField33 = localDateTime17.getField((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -292275054");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-11T09:45:43.044" + "'", str18, "2022-02-11T09:45:43.044");
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 45 + "'", int20 == 45);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test00782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00782");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 100, chronology8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        boolean boolean14 = localDateTime9.equals((java.lang.Object) chronology13);
        org.joda.time.DurationField durationField15 = chronology13.eras();
        long long19 = chronology13.add((long) 292278993, (long) 22, 2018);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(35126347, 2002, 24, 612, (int) (byte) 100, 10, 985, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 612 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 292323389L + "'", long19 == 292323389L);
    }

    @Test
    public void test00783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00783");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        int int3 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.era();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readableDuration5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withDurationAdded(readableDuration7, (int) 'a');
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.DateTime dateTime12 = readableInterval11.getStart();
        org.joda.time.DateTime dateTime13 = readableInterval11.getStart();
        org.joda.time.Period period14 = readableInterval11.toPeriod();
        org.joda.time.Interval interval15 = readableInterval11.toInterval();
        org.joda.time.Period period16 = interval15.toPeriod();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.year();
        java.text.DateFormatSymbols dateFormatSymbols19 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols19.setWeekdays(strArray26);
        java.lang.String[] strArray28 = dateFormatSymbols19.getShortWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols29 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols29.setWeekdays(strArray36);
        java.lang.String[] strArray38 = dateFormatSymbols29.getShortWeekdays();
        dateFormatSymbols19.setShortMonths(strArray38);
        java.lang.String[] strArray40 = dateFormatSymbols19.getWeekdays();
        java.lang.String[] strArray41 = dateFormatSymbols19.getAmPmStrings();
        java.lang.String[] strArray42 = dateFormatSymbols19.getShortMonths();
        java.text.DateFormatSymbols dateFormatSymbols43 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols43.setWeekdays(strArray50);
        dateFormatSymbols19.setShortMonths(strArray50);
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.lang.String str56 = locale53.getExtension('a');
        java.lang.String str57 = locale53.getDisplayVariant();
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.lang.String str61 = locale58.getExtension('a');
        java.lang.String str62 = locale53.getDisplayLanguage(locale58);
        java.util.Locale locale63 = java.util.Locale.PRC;
        java.lang.String str64 = locale53.getDisplayLanguage(locale63);
        boolean boolean65 = dateFormatSymbols19.equals((java.lang.Object) locale63);
        java.lang.String str66 = property18.getAsText(locale63);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(dateTimeZone68);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray70 = localDateTime67.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone72);
        int int74 = localDateTime67.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withPeriodAdded(readablePeriod77, 10);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.dayOfYear();
        boolean boolean81 = property80.isLeap();
        org.joda.time.LocalDateTime localDateTime82 = property80.getLocalDateTime();
        int int83 = property18.compareTo((org.joda.time.ReadablePartial) localDateTime82);
        int int84 = localDateTime82.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str54, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str59, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str62, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u6587" + "'", str64, "\u65e5\u6587");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970" + "'", str66, "1970");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test00784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00784");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.Chronology chronology7 = chronology4.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(6L, chronology7);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.text.DateFormatSymbols dateFormatSymbols14 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale11);
        java.lang.String str16 = locale11.getExtension('u');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = localDateTime9.toString("United States", locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: U");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test00785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00785");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("PeriodType[Minutes]", (double) 1644572742736L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644572742736E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00786");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusDays((int) 'u');
        java.lang.String str5 = localDateTime0.toString();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear(20);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        int int14 = localDateTime12.getEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusHours(2022);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMinutes(999);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.era();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField29 = localDateTime27.getField((int) (short) 1);
        int int30 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        int int36 = property31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(dateTimeZone38);
        boolean boolean40 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType44 = periodType42.getFieldType((int) (short) 0);
        boolean boolean45 = localDateTime24.isSupported(durationFieldType44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime18.withFieldAdded(durationFieldType44, 67);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime0.withFieldAdded(durationFieldType44, 35083525);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime0.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime0.withDayOfYear(41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType55 = localDateTime53.getFieldType(464);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 464");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:45:43.148" + "'", str5, "2022-02-11T09:45:43.148");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2119 + "'", int30 == 2119);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test00787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00787");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        int int3 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.lang.String str8 = property4.getAsShortText(locale6);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.era();
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("United States");
        java.lang.String str19 = dateTimeZone14.getName((long) (byte) 0, locale18);
        java.lang.String str20 = locale6.getDisplayScript(locale18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) str20, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str7, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test00788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00788");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        int int7 = timeZone5.getOffset((long) 35082011);
        java.time.ZoneId zoneId8 = timeZone5.toZoneId();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone(zoneId8);
        int int10 = timeZone9.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test00789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00789");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
    }

    @Test
    public void test00790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00790");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Japanese");
        timeZone1.setRawOffset(0);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int6 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test00791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00791");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withPeriodAdded(readablePeriod4, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withPeriodAdded(readablePeriod7, 57);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        boolean boolean14 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.era();
        long long24 = chronology18.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.era();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withPeriodAdded(readablePeriod30, 2119);
        long long34 = chronology18.set((org.joda.time.ReadablePartial) localDateTime29, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField39 = localDateTime37.getField((int) (short) 1);
        int int40 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime(dateTimeZone43);
        org.joda.time.Chronology chronology45 = dateTime44.getChronology();
        int int46 = property41.compareTo((org.joda.time.ReadableInstant) dateTime44);
        java.lang.String str47 = property41.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property41.getFieldType();
        int int49 = localDateTime29.get(dateTimeFieldType48);
        int int50 = localDateTime0.get(dateTimeFieldType48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType52 = localDateTime0.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-90L) + "'", long24 == (-90L));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-62135596800002L) + "'", long34 == (-62135596800002L));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2119 + "'", int40 == 2119);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "528" + "'", str47, "528");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 528 + "'", int50 == 528);
    }

    @Test
    public void test00792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00792");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 126000000);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        java.lang.String str13 = property11.getName();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfYear" + "'", str13, "dayOfYear");
    }

    @Test
    public void test00793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00793");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType1 = periodType0.withDaysRemoved();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.secondOfMinute();
        boolean boolean9 = periodType0.equals((java.lang.Object) property8);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00794");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear((int) (short) 100);
        int int10 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.millisOfSecond();
        java.lang.String str12 = property11.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2119 + "'", int10 == 2119);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
    }

    @Test
    public void test00795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00795");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644572740896L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType3 = localDateTime1.getFieldType(2066);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2066");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00796");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setExtension('a', "Deutsch (Deutschland)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: Deutsch (Deutschland) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test00797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00797");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(1644572739548L);
    }

    @Test
    public void test00798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00798");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet16);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet16);
        boolean boolean19 = strSet6.removeAll((java.util.Collection<java.lang.String>) strSet16);
        java.util.stream.Stream<java.lang.String> strStream20 = strSet16.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet16.parallelStream();
        boolean boolean22 = readableInterval1.equals((java.lang.Object) strSet16);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.MutableInterval mutableInterval25 = readableInterval24.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.MutableInterval mutableInterval28 = readableInterval27.toMutableInterval();
        boolean boolean29 = mutableInterval25.isBefore(readableInterval27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField34 = localDateTime32.getField((int) (short) 1);
        int int35 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        int int41 = property36.compareTo((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = readableInterval27.isAfter((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean43 = readableInterval1.isAfter(readableInterval27);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        org.joda.time.MutableInterval mutableInterval48 = readableInterval47.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.MutableInterval mutableInterval51 = readableInterval50.toMutableInterval();
        boolean boolean52 = mutableInterval48.isBefore(readableInterval50);
        boolean boolean53 = readableInterval45.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        boolean boolean54 = readableInterval27.isAfter((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Duration duration55 = readableInterval27.toDuration();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField60 = localDateTime58.getField((int) (short) 1);
        int int61 = localDateTime58.getWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withDurationAdded(readableDuration64, 67);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.minus(readableDuration67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval70 = null;
        org.joda.time.ReadableInterval readableInterval71 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval70);
        long long72 = readableInterval71.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Set<java.lang.String> strSet76 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str77 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.lang.String>) strSet76);
        java.util.Locale.LanguageRange[] languageRangeArray78 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList79 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList79, languageRangeArray78);
        java.util.Set<java.lang.String> strSet81 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str82 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, (java.util.Collection<java.lang.String>) strSet81);
        java.util.Locale.LanguageRange[] languageRangeArray83 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList84 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList84, languageRangeArray83);
        java.util.Set<java.lang.String> strSet86 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str87 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList84, (java.util.Collection<java.lang.String>) strSet86);
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, (java.util.Collection<java.lang.String>) strSet86);
        boolean boolean89 = strSet76.removeAll((java.util.Collection<java.lang.String>) strSet86);
        java.util.stream.Stream<java.lang.String> strStream90 = strSet86.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream91 = strSet86.parallelStream();
        boolean boolean92 = readableInterval71.equals((java.lang.Object) strSet86);
        org.joda.time.Duration duration93 = readableInterval71.toDuration();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime68.plus((org.joda.time.ReadableDuration) duration93);
        org.joda.time.Duration duration95 = duration93.toDuration();
        boolean boolean96 = duration55.isEqual((org.joda.time.ReadableDuration) duration93);
        org.joda.time.Duration duration97 = duration93.toDuration();
        long long98 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration93);
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3289145483714L + "'", long2 == 3289145483714L);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2171 + "'", int35 == 2171);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2171 + "'", int61 == 2171);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(readableInterval71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3289145483714L + "'", long72 == 3289145483714L);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(languageRangeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(languageRangeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strStream90);
        org.junit.Assert.assertNotNull(strStream91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 0L + "'", long98 == 0L);
    }

    @Test
    public void test00799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00799");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (short) 1);
        int int9 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDurationAdded(readableDuration12, 67);
        boolean boolean15 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears(35114856);
        java.lang.Class<?> wildcardClass18 = localDateTime17.getClass();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2171 + "'", int9 == 2171);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test00800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00800");
        java.util.Locale locale2 = new java.util.Locale("", "1970-01-01T00:00:00.415Z/1970-01-01T00:00:00.415Z");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.Object[] objArray4 = strSet3.toArray();
        org.junit.Assert.assertEquals(locale2.toString(), "_1970-01-01T00:00:00.415Z/1970-01-01T00:00:00.415Z");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test00801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00801");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguageTag("93");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 93 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00802");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.MutableInterval mutableInterval5 = readableInterval4.toMutableInterval();
        boolean boolean6 = mutableInterval2.isBefore(readableInterval4);
        org.joda.time.Interval interval7 = mutableInterval2.toInterval();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.DateTime dateTime10 = readableInterval9.getStart();
        org.joda.time.DateTime dateTime11 = readableInterval9.getStart();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(dateTimeZone16);
        int int18 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = readableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        boolean boolean20 = mutableInterval2.contains(readableInterval9);
        org.joda.time.Duration duration21 = mutableInterval2.toDuration();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        long long24 = readableInterval23.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Set<java.lang.String> strSet28 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet28);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Set<java.lang.String> strSet33 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Set<java.lang.String> strSet38 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet38);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet38);
        boolean boolean41 = strSet28.removeAll((java.util.Collection<java.lang.String>) strSet38);
        java.util.stream.Stream<java.lang.String> strStream42 = strSet38.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream43 = strSet38.parallelStream();
        boolean boolean44 = readableInterval23.equals((java.lang.Object) strSet38);
        org.joda.time.Duration duration45 = readableInterval23.toDuration();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        long long48 = readableInterval47.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Set<java.lang.String> strSet52 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Set<java.lang.String> strSet57 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet57);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Set<java.lang.String> strSet62 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.lang.String>) strSet62);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet62);
        boolean boolean65 = strSet52.removeAll((java.util.Collection<java.lang.String>) strSet62);
        java.util.stream.Stream<java.lang.String> strStream66 = strSet62.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream67 = strSet62.parallelStream();
        boolean boolean68 = readableInterval47.equals((java.lang.Object) strSet62);
        org.joda.time.Duration duration69 = readableInterval47.toDuration();
        boolean boolean70 = duration45.isEqual((org.joda.time.ReadableDuration) duration69);
        org.joda.time.ReadableInterval readableInterval71 = null;
        org.joda.time.ReadableInterval readableInterval72 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval71);
        long long73 = readableInterval72.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Set<java.lang.String> strSet77 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str78 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.lang.String>) strSet77);
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Set<java.lang.String> strSet82 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str83 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet82);
        java.util.Locale.LanguageRange[] languageRangeArray84 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList85 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85, languageRangeArray84);
        java.util.Set<java.lang.String> strSet87 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str88 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, (java.util.Collection<java.lang.String>) strSet87);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet87);
        boolean boolean90 = strSet77.removeAll((java.util.Collection<java.lang.String>) strSet87);
        java.util.stream.Stream<java.lang.String> strStream91 = strSet87.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream92 = strSet87.parallelStream();
        boolean boolean93 = readableInterval72.equals((java.lang.Object) strSet87);
        org.joda.time.Duration duration94 = readableInterval72.toDuration();
        int int95 = duration45.compareTo((org.joda.time.ReadableDuration) duration94);
        java.lang.String str96 = duration94.toString();
        boolean boolean97 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration94);
        org.joda.time.Duration duration98 = duration94.toDuration();
        java.lang.String str99 = duration94.toString();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(readableInterval23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3289145484654L + "'", long24 == 3289145484654L);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strList40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(readableInterval47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3289145484655L + "'", long48 == 3289145484655L);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(readableInterval72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3289145484655L + "'", long73 == 3289145484655L);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(languageRangeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strStream91);
        org.junit.Assert.assertNotNull(strStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "PT0S" + "'", str96, "PT0S");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(duration98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "PT0S" + "'", str99, "PT0S");
    }

    @Test
    public void test00803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00803");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        int int3 = localDateTime0.getYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withDayOfYear(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withHourOfDay(35139942);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35139942 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2074 + "'", int3 == 2074);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test00804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00804");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.Object obj1 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "ko");
    }

    @Test
    public void test00805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00805");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("GMT");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Set<java.lang.String> strSet5 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str6 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet5);
        java.util.Set<java.lang.String> strSet7 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Set<java.lang.String> strSet12 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str13 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strSet12);
        java.lang.Object[] objArray14 = strSet12.toArray();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Set<java.lang.String> strSet23 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str24 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Set<java.lang.String> strSet25 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet25);
        boolean boolean28 = strSet25.add("2074-03-24T19:29:10.486");
        int int29 = strSet25.size();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Set<java.lang.String> strSet34 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Set<java.lang.String> strSet39 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strSet39);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strMap42);
        java.util.Collection<java.util.Locale> localeCollection44 = null;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, localeCollection44);
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, localeCollection44);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter(languageRangeList1, localeCollection44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(localeList46);
    }

    @Test
    public void test00806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00806");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusDays((int) 'u');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(11);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfDay(2);
        java.util.Date date9 = localDateTime4.toDate();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromDateFields(date9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromDateFields(date9);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.MutableInterval mutableInterval14 = readableInterval13.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.MutableInterval mutableInterval17 = readableInterval16.toMutableInterval();
        boolean boolean18 = mutableInterval14.isBefore(readableInterval16);
        org.joda.time.Interval interval19 = mutableInterval14.toInterval();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.DateTime dateTime22 = readableInterval21.getStart();
        org.joda.time.DateTime dateTime23 = readableInterval21.getStart();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(dateTimeZone28);
        int int30 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime29);
        boolean boolean31 = readableInterval21.isAfter((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean32 = mutableInterval14.contains(readableInterval21);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.hours();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.DurationField durationField39 = chronology36.seconds();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField44 = localDateTime42.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localDateTime42.getFieldTypes();
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime47 = property46.roundCeilingCopy();
        long long49 = chronology36.set((org.joda.time.ReadablePartial) localDateTime47, (long) (short) 1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.dayOfYear();
        int int51 = property50.get();
        boolean boolean52 = property50.isLeap();
        org.joda.time.LocalDateTime localDateTime53 = property50.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.era();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField64 = localDateTime62.getField((int) (short) 1);
        int int65 = localDateTime62.getWeekyear();
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(dateTimeZone68);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        int int71 = property66.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = localDateTime72.toDateTime(dateTimeZone73);
        boolean boolean75 = dateTime69.isAfter((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = localDateTime59.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        int int77 = property50.getDifference((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean78 = readableInterval21.isAfter((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean79 = localDateTime11.equals((java.lang.Object) boolean78);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jul 19 19:31:26 GMT 2074");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 6350124686000L + "'", long49 == 6350124686000L);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 83 + "'", int51 == 83);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2171 + "'", int65 == 2171);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35428 + "'", int77 == 35428);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test00807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00807");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str4 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.lang.Object[] objArray5 = strSet3.toArray();
        boolean boolean7 = strSet3.add("2022-02-11T09:44:32.203");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str22 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet21);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet21);
        boolean boolean24 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.lang.String[] strArray42 = new java.lang.String[] { "\u65e5\u672c\u8a9e", "2074-03-24T19:29:07.916Z", "zho", "2074-03-24T19:29:09.830", "2074-03-24T19:29:09.804", "UTC", "hi!", "Japanese", "2022-02-11T09:44:33.508", "57", "2074-03-24T19:29:09.830", "\u65e5\u672c\u8a9e", "zh", "Etc/UTC", "236", "CN", "2022-02-11T09:44:32.203" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        boolean boolean45 = strSet21.addAll((java.util.Collection<java.lang.String>) strList43);
        boolean boolean46 = strSet3.containsAll((java.util.Collection<java.lang.String>) strList43);
        java.util.stream.Stream<java.lang.String> strStream47 = strSet3.parallelStream();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone48.isStandardOffset(1L);
        long long53 = dateTimeZone48.convertLocalToUTC(999L, true);
        long long55 = dateTimeZone48.convertUTCToLocal((-126000001L));
        boolean boolean56 = strSet3.equals((java.lang.Object) (-126000001L));
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(dateTimeZone58);
        int int60 = localDateTime57.getYear();
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.yearOfCentury();
        org.joda.time.Interval interval62 = property61.toInterval();
        org.joda.time.ReadableInterval readableInterval63 = null;
        org.joda.time.ReadableInterval readableInterval64 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval63);
        org.joda.time.MutableInterval mutableInterval65 = readableInterval64.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval66 = null;
        org.joda.time.ReadableInterval readableInterval67 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval66);
        org.joda.time.MutableInterval mutableInterval68 = readableInterval67.toMutableInterval();
        boolean boolean69 = mutableInterval65.isBefore(readableInterval67);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField74 = localDateTime72.getField((int) (short) 1);
        int int75 = localDateTime72.getWeekyear();
        org.joda.time.LocalDateTime.Property property76 = localDateTime72.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(dateTimeZone78);
        org.joda.time.Chronology chronology80 = dateTime79.getChronology();
        int int81 = property76.compareTo((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = readableInterval67.isAfter((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.ReadableInterval readableInterval83 = null;
        org.joda.time.ReadableInterval readableInterval84 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval83);
        org.joda.time.MutableInterval mutableInterval85 = readableInterval84.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval86 = null;
        org.joda.time.ReadableInterval readableInterval87 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval86);
        org.joda.time.MutableInterval mutableInterval88 = readableInterval87.toMutableInterval();
        boolean boolean89 = mutableInterval85.isBefore(readableInterval87);
        boolean boolean90 = readableInterval67.overlaps(readableInterval87);
        org.joda.time.Chronology chronology91 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval67);
        boolean boolean92 = interval62.contains(readableInterval67);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = strSet3.remove((java.lang.Object) readableInterval67);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(objArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 999L + "'", long53 == 999L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-126000001L) + "'", long55 == (-126000001L));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2074 + "'", int60 == 2074);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(readableInterval64);
        org.junit.Assert.assertNotNull(mutableInterval65);
        org.junit.Assert.assertNotNull(readableInterval67);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2171 + "'", int75 == 2171);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(readableInterval84);
        org.junit.Assert.assertNotNull(mutableInterval85);
        org.junit.Assert.assertNotNull(readableInterval87);
        org.junit.Assert.assertNotNull(mutableInterval88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test00808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00808");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:44:42.884", "2074-03-24T19:29:09.320", "zh-CN");
        java.text.DateFormatSymbols dateFormatSymbols4 = new java.text.DateFormatSymbols(locale3);
        java.lang.String str5 = locale3.getDisplayScript();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:44:42.884_2074-03-24T19:29:09.320_zh-CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test00809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00809");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (short) 1);
        int int9 = localDateTime6.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        int int11 = localDateTime6.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withHourOfDay((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 71 + "'", int9 == 71);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test00810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00810");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale7.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str15 = locale12.getExtension('a');
        java.lang.String str16 = locale7.getDisplayLanguage(locale12);
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.lang.String str18 = locale7.getDisplayLanguage(locale17);
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = property6.getAsText(locale17);
        int int21 = property6.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime22 = property6.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u6587" + "'", str18, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CHN" + "'", str19, "CHN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "575" + "'", str20, "575");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test00811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00811");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.MutableInterval mutableInterval5 = readableInterval4.toMutableInterval();
        boolean boolean6 = mutableInterval2.isBefore(readableInterval4);
        org.joda.time.Chronology chronology7 = readableInterval4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.minutes();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test00812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00812");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        long long9 = chronology3.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField10 = chronology3.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField12 = chronology3.minuteOfHour();
        org.joda.time.DurationField durationField13 = chronology3.minutes();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-90L) + "'", long9 == (-90L));
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test00813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00813");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = localDateTime7.getField(415);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 415");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00814");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 67);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        long long16 = readableInterval15.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Set<java.lang.String> strSet20 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Set<java.lang.String> strSet25 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str26 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Set<java.lang.String> strSet30 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet30);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet30);
        boolean boolean33 = strSet20.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.stream.Stream<java.lang.String> strStream34 = strSet30.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream35 = strSet30.parallelStream();
        boolean boolean36 = readableInterval15.equals((java.lang.Object) strSet30);
        org.joda.time.Duration duration37 = readableInterval15.toDuration();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime12.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.hourOfDay();
        int int40 = property39.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(readableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3289145486041L + "'", long16 == 3289145486041L);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test00815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00815");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 70150840);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusSeconds((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withDayOfWeek((int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test00816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00816");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", (double) 3289145486028L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=3.289145486028E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00817");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int5 = timeZone1.getOffset((long) (-1));
        java.lang.String str6 = timeZone1.getID();
        int int8 = timeZone1.getOffset(335L);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone10.setRawOffset(1);
        java.time.ZoneId zoneId13 = timeZone10.toZoneId();
        boolean boolean14 = timeZone10.observesDaylightTime();
        boolean boolean15 = timeZone10.observesDaylightTime();
        boolean boolean16 = timeZone1.hasSameRules(timeZone10);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale17.getDisplayLanguage(locale18);
        java.lang.String str20 = locale17.getDisplayLanguage();
        java.lang.String str21 = timeZone10.getDisplayName(locale17);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean" + "'", str19, "Korean");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u56fd\u8a9e" + "'", str20, "\u97d3\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str21, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test00818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00818");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        int int3 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 2171, dateTimeZone4);
        java.util.Locale locale10 = new java.util.Locale("2022-02-11T09:44:42.884", "2074-03-24T19:29:09.320", "zh-CN");
        java.text.DateFormatSymbols dateFormatSymbols11 = new java.text.DateFormatSymbols(locale10);
        java.text.DateFormatSymbols dateFormatSymbols12 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = localDateTime5.toString("1970-01-02T10:35:57.881", locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals(locale10.toString(), "2022-02-11t09:44:42.884_2074-03-24T19:29:09.320_zh-CN");
        org.junit.Assert.assertNotNull(dateFormatSymbols12);
    }

    @Test
    public void test00819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00819");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 67);
        int int11 = localDateTime10.size();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime12.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone17);
        int int19 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withPeriodAdded(readablePeriod22, 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withYear(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.dayOfMonth();
        boolean boolean28 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        int int29 = localDateTime10.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 327 + "'", int29 == 327);
    }

    @Test
    public void test00820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00820");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0, chronology4);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology4);
        org.joda.time.DurationField durationField10 = chronology4.millis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test00821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00821");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withPeriodAdded(readablePeriod4, (int) ' ');
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        int int10 = localDateTime6.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime6.getFieldType(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2074-03-24T19:31:26.444" + "'", str7, "2074-03-24T19:31:26.444");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test00822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00822");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getExtension('a');
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.lang.String str9 = locale0.getDisplayLanguage(locale5);
        java.util.Locale.setDefault(locale5);
        java.lang.String str11 = locale5.getCountry();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str15 = locale12.getExtension('a');
        java.lang.String str16 = locale12.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str20 = locale17.getExtension('a');
        java.lang.String str21 = locale12.getDisplayLanguage(locale17);
        java.util.Locale.setDefault(locale17);
        java.lang.String str23 = locale5.getDisplayVariant(locale17);
        java.lang.String str24 = locale17.getISO3Country();
        java.text.DateFormatSymbols dateFormatSymbols25 = new java.text.DateFormatSymbols(locale17);
        java.util.Set<java.lang.String> strSet26 = locale17.getUnicodeLocaleKeys();
        java.lang.Object obj27 = locale17.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str1, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str6, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str9, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str18, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str21, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "ja");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "ja");
    }

    @Test
    public void test00823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00823");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.era();
        org.joda.time.Chronology chronology11 = localDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology11.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.weekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology11.add(readablePeriod14, (long) (short) -1, (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology11.minuteOfHour();
        org.joda.time.DurationField durationField20 = chronology11.weekyears();
        org.joda.time.DurationField durationField21 = chronology11.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(35122099, 0, 1949, 44, (int) (short) -1, 834, 999, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test00824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00824");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(2022);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test00825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00825");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getDisplayScript();
        java.text.DateFormatSymbols dateFormatSymbols3 = new java.text.DateFormatSymbols(locale0);
        java.lang.Object obj4 = dateFormatSymbols3.clone();
        java.text.DateFormatSymbols dateFormatSymbols5 = new java.text.DateFormatSymbols();
        java.lang.String str6 = dateFormatSymbols5.getLocalPatternChars();
        java.lang.String[] strArray11 = new java.lang.String[] { "Property[millisOfSecond]", "hi!", "2119-02-11T09:44:32.668", "ISOChronology[Etc/UTC]" };
        dateFormatSymbols5.setShortWeekdays(strArray11);
        java.lang.Object obj13 = dateFormatSymbols5.clone();
        java.lang.String str14 = dateFormatSymbols5.getLocalPatternChars();
        java.text.DateFormatSymbols dateFormatSymbols15 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols15.setWeekdays(strArray22);
        java.lang.String[] strArray24 = dateFormatSymbols15.getShortWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols25 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols25.setWeekdays(strArray32);
        java.lang.String[] strArray34 = dateFormatSymbols25.getShortWeekdays();
        dateFormatSymbols15.setShortMonths(strArray34);
        java.lang.String[] strArray36 = dateFormatSymbols15.getWeekdays();
        java.lang.String[] strArray37 = dateFormatSymbols15.getAmPmStrings();
        java.text.DateFormatSymbols dateFormatSymbols38 = new java.text.DateFormatSymbols();
        java.lang.String str39 = dateFormatSymbols38.getLocalPatternChars();
        java.lang.String[] strArray44 = new java.lang.String[] { "Property[millisOfSecond]", "hi!", "2119-02-11T09:44:32.668", "ISOChronology[Etc/UTC]" };
        dateFormatSymbols38.setShortWeekdays(strArray44);
        java.text.DateFormatSymbols dateFormatSymbols46 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols46.setWeekdays(strArray53);
        dateFormatSymbols38.setEras(strArray53);
        dateFormatSymbols15.setWeekdays(strArray53);
        java.lang.String[] strArray57 = dateFormatSymbols15.getMonths();
        java.lang.String[] strArray58 = dateFormatSymbols15.getShortWeekdays();
        dateFormatSymbols5.setWeekdays(strArray58);
        dateFormatSymbols3.setEras(strArray58);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str6, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str14, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str39, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
    }

    @Test
    public void test00826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00826");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.weeks();
        int int1 = periodType0.size();
        java.lang.String str2 = periodType0.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PeriodType[Weeks]" + "'", str2, "PeriodType[Weeks]");
    }

    @Test
    public void test00827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00827");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.getAsText();
        java.lang.String str13 = property6.toString();
        java.lang.String str14 = property6.getAsString();
        int int15 = property6.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "152" + "'", str12, "152");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[millisOfSecond]" + "'", str13, "Property[millisOfSecond]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "152" + "'", str14, "152");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00828");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Japanese");
        timeZone1.setRawOffset(834);
        boolean boolean4 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00829");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        int int3 = localDateTime0.getYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfCentury();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.lang.String str9 = locale5.getDisplayVariant();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str13 = locale10.getExtension('a');
        java.lang.String str14 = locale5.getDisplayLanguage(locale10);
        java.util.Locale locale15 = java.util.Locale.US;
        java.lang.String str16 = locale5.getDisplayName(locale15);
        java.lang.String str17 = property4.getAsShortText(locale15);
        org.joda.time.LocalDateTime localDateTime18 = property4.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = property4.setCopy(773);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 773 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2074 + "'", int3 == 2074);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str6, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str14, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japanese" + "'", str16, "Japanese");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "74" + "'", str17, "74");
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test00830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00830");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField12 = localDateTime10.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        long long17 = chronology4.set((org.joda.time.ReadablePartial) localDateTime15, (long) (short) 1);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 2093, chronology4);
        int int19 = localDateTime18.getEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 6350124687998L + "'", long17 == 6350124687998L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test00831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00831");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone5);
        int int7 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 2119);
        int int18 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.plusMinutes(2171);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime26 = property24.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusYears((int) (short) 0);
        int int32 = localDateTime31.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusMonths(19);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField39 = localDateTime37.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField44 = localDateTime42.getField((int) (short) 1);
        int int45 = localDateTime42.getWeekyear();
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        int int51 = property46.compareTo((org.joda.time.ReadableInstant) dateTime49);
        java.lang.String str52 = property46.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property46.getFieldType();
        org.joda.time.LocalDateTime.Property property54 = localDateTime37.property(dateTimeFieldType53);
        boolean boolean55 = localDateTime34.isSupported(dateTimeFieldType53);
        boolean boolean56 = localDateTime26.isSupported(dateTimeFieldType53);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(dateTimeZone58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = localDateTime57.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone62);
        int int64 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withPeriodAdded(readablePeriod67, 10);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime66.minus(readableDuration70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = localDateTime72.toDateTime(dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.minusYears((int) (short) 0);
        int int77 = localDateTime76.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = localDateTime79.getFieldType(0);
        int int82 = localDateTime66.get(dateTimeFieldType81);
        org.joda.time.LocalDateTime.Property property83 = localDateTime26.property(dateTimeFieldType81);
        boolean boolean84 = localDateTime9.isSupported(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2171 + "'", int45 == 2171);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "638" + "'", str52, "638");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 20 + "'", int77 == 20);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1970 + "'", int82 == 1970);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test00832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00832");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis(2119);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears(834);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        long long10 = readableInterval9.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Set<java.lang.String> strSet19 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet24);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet24);
        boolean boolean27 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.stream.Stream<java.lang.String> strStream28 = strSet24.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet24.parallelStream();
        boolean boolean30 = readableInterval9.equals((java.lang.Object) strSet24);
        org.joda.time.Duration duration31 = readableInterval9.toDuration();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        long long34 = readableInterval33.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Set<java.lang.String> strSet38 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Set<java.lang.String> strSet43 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Set<java.lang.String> strSet48 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str49 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet48);
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet48);
        boolean boolean51 = strSet38.removeAll((java.util.Collection<java.lang.String>) strSet48);
        java.util.stream.Stream<java.lang.String> strStream52 = strSet48.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream53 = strSet48.parallelStream();
        boolean boolean54 = readableInterval33.equals((java.lang.Object) strSet48);
        org.joda.time.Duration duration55 = readableInterval33.toDuration();
        boolean boolean56 = duration31.isEqual((org.joda.time.ReadableDuration) duration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration31, 0);
        int[] intArray59 = localDateTime7.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(readableInterval9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3289145487777L + "'", long10 == 3289145487777L);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(readableInterval33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3289145487777L + "'", long34 == 3289145487777L);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1136, 1, 2, 39597881]");
    }

    @Test
    public void test00833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00833");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setID("Etc/UTC");
        int int4 = timeZone1.getRawOffset();
        java.lang.String str5 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str5, "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test00834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00834");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:45:06.509Z/2022-02-11T09:45:06.509Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:45:06.509Z/2022-02-11T09:45:06.509Z\" is malformed at \"Z/2022-02-11T09:45:06.509Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00835");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str4 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Set<java.lang.String> strSet5 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Set<java.lang.String> strSet10 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet10);
        java.lang.Object[] objArray12 = strSet10.toArray();
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet10);
        java.util.Collection<java.util.Locale> localeCollection14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Set<java.lang.String> strSet19 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Set<java.lang.String> strSet29 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet29);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet29);
        boolean boolean32 = strSet19.removeAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet19, filteringMode33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Set<java.lang.String> strSet40 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strSet40);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Set<java.lang.String> strSet45 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strSet45);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strSet45);
        boolean boolean49 = strSet45.add("415");
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet45.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Set<java.lang.String> strSet54 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str55 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strSet54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Set<java.lang.String> strSet59 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strSet59);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Set<java.lang.String> strSet64 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str65 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet64);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strSet64);
        boolean boolean67 = strSet54.removeAll((java.util.Collection<java.lang.String>) strSet64);
        java.util.stream.Stream<java.lang.String> strStream68 = strSet64.parallelStream();
        strSet64.clear();
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Set<java.lang.String> strSet73 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str74 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.lang.String>) strSet73);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Set<java.lang.String> strSet78 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str79 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.lang.String>) strSet78);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Set<java.lang.String> strSet83 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str84 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.lang.String>) strSet83);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.lang.String>) strSet83);
        boolean boolean86 = strSet73.removeAll((java.util.Collection<java.lang.String>) strSet83);
        java.util.stream.Stream<java.lang.String> strStream87 = strSet83.parallelStream();
        boolean boolean88 = strSet64.removeAll((java.util.Collection<java.lang.String>) strSet83);
        java.util.Iterator<java.lang.String> strItor89 = strSet64.iterator();
        boolean boolean91 = strSet64.add("2022-02-11T09:44:42.274");
        boolean boolean92 = strSet45.removeAll((java.util.Collection<java.lang.String>) strSet64);
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet64);
        java.util.Spliterator<java.lang.String> strSpliterator94 = strSet64.spliterator();
        strSet64.clear();
        org.joda.time.PeriodType periodType96 = org.joda.time.PeriodType.hours();
        java.lang.String str97 = periodType96.getName();
        org.joda.time.PeriodType periodType98 = periodType96.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = strSet64.contains((java.lang.Object) periodType96);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strStream87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strItor89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strSpliterator94);
        org.junit.Assert.assertNotNull(periodType96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Hours" + "'", str97, "Hours");
        org.junit.Assert.assertNotNull(periodType98);
    }

    @Test
    public void test00836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00836");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, chronology2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        boolean boolean8 = localDateTime3.equals((java.lang.Object) chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 57, chronology7);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfSecond(0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.era();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withPeriodAdded(readablePeriod18, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.withPeriodAdded(readablePeriod21, 57);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfSecond(100);
        int int26 = localDateTime23.getMinuteOfHour();
        boolean boolean27 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusDays(0);
        int int30 = localDateTime23.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 27 + "'", int30 == 27);
    }

    @Test
    public void test00837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00837");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("2022-02-11T09:45:40.620Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:45:40.620Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00838");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("698");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=698");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00839");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setLanguage("en-US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: en-US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00840");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setVariant("2074-03-24T19:31:24.910");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2074-03-24T19:31:24.910 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test00841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00841");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 67);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minus(readableDuration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(35098961);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusMillis(35083095);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 35082058);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test00842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00842");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int5 = timeZone1.getOffset((long) (-1));
        java.lang.String str6 = timeZone1.getID();
        boolean boolean7 = timeZone1.observesDaylightTime();
        java.lang.String str8 = timeZone1.getID();
        timeZone1.setRawOffset(292278993);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT" + "'", str8, "GMT");
    }

    @Test
    public void test00843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00843");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) (byte) 10);
        java.lang.String str3 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str3, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test00844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00844");
        org.joda.time.DurationFieldType[] durationFieldTypeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.forFields(durationFieldTypeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must not be null or empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00845");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withPeriodAdded(readablePeriod4, (int) ' ');
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField((int) (short) 1);
        int int15 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        int int21 = property16.compareTo((org.joda.time.ReadableInstant) dateTime19);
        java.lang.String str22 = property16.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property16.getFieldType();
        boolean boolean24 = localDateTime6.isSupported(dateTimeFieldType23);
        int int25 = localDateTime6.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime6.withMinuteOfHour(70284059);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70284059 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2074-03-24T19:31:28.719" + "'", str7, "2074-03-24T19:31:28.719");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2171 + "'", int15 == 2171);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "719" + "'", str22, "719");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
    }

    @Test
    public void test00846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00846");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.centuryOfEra();
        int int12 = localDateTime6.getSecondOfMinute();
        int int13 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minusMillis(35083051);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((int) (short) 1);
        int int21 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        int int27 = property22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime29 = property22.addWrapFieldToCopy(35072450);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withMinuteOfHour(7);
        int int32 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withHourOfDay(53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 28 + "'", int12 == 28);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2171 + "'", int21 == 2171);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test00847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00847");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:44:42.884", "2074-03-24T19:29:09.320", "zh-CN");
        java.text.DateFormatSymbols dateFormatSymbols4 = new java.text.DateFormatSymbols(locale3);
        java.text.DateFormatSymbols dateFormatSymbols5 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale3);
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayVariant();
        java.lang.String str8 = locale6.toLanguageTag();
        java.lang.String str9 = locale3.getDisplayLanguage(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale6.getUnicodeLocaleType("Hours");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Hours");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:44:42.884_2074-03-24T19:29:09.320_zh-CN");
        org.junit.Assert.assertNotNull(dateFormatSymbols5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "de-DE" + "'", str8, "de-DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11t09:44:42.884" + "'", str9, "2022-02-11t09:44:42.884");
    }

    @Test
    public void test00848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00848");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.DateTime dateTime2 = readableInterval1.getStart();
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeZone dateTimeZone4 = chronology3.getZone();
        org.joda.time.DurationField durationField5 = chronology3.seconds();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test00849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00849");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusSeconds(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withSecondOfMinute(6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = localDateTime7.getFieldType(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 12");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 71 + "'", int5 == 71);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test00850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00850");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder5 = builder3.setRegion("759");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("197");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder6.setUnicodeLocaleKeyword("2022-02-12T20:45:06.774", "+57:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-12T20:45:06.774 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00851");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime13 = property6.addWrapFieldToCopy(35072450);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.DateTime dateTime17 = readableInterval16.getStart();
        org.joda.time.DateTime dateTime18 = readableInterval16.getStart();
        org.joda.time.Period period19 = readableInterval16.toPeriod();
        org.joda.time.Interval interval20 = readableInterval16.toInterval();
        org.joda.time.Period period21 = interval20.toPeriod();
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePeriod) period21, 1644572680374L);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology14.getDateTimeMillis((long) 2022, 676, 21, 907, 35081087);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 676 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 2719, 1, 9, 44, 40, 374]");
    }

    @Test
    public void test00852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00852");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 67);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime7.getFieldType(292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 292278993");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test00853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00853");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setID("Etc/UTC");
        timeZone1.setID("2074-03-24T19:29:10.161");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        java.util.TimeZone.setDefault(timeZone7);
        boolean boolean9 = timeZone1.hasSameRules(timeZone7);
        boolean boolean10 = timeZone7.observesDaylightTime();
        int int12 = timeZone7.getOffset((long) 292278993);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test00854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00854");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(35098961);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35098961 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 71 + "'", int5 == 71);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test00855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00855");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        int int6 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.year();
        int int9 = property8.get();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 565 + "'", int6 == 565);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2171 + "'", int9 == 2171);
    }

    @Test
    public void test00856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00856");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(41);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField12 = localDateTime10.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField17 = localDateTime15.getField((int) (short) 1);
        int int18 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        int int24 = property19.compareTo((org.joda.time.ReadableInstant) dateTime22);
        java.lang.String str25 = property19.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property19.getFieldType();
        org.joda.time.LocalDateTime.Property property27 = localDateTime10.property(dateTimeFieldType26);
        int int28 = localDateTime4.indexOf(dateTimeFieldType26);
        java.lang.Class<?> wildcardClass29 = localDateTime4.getClass();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2171 + "'", int18 == 2171);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "668" + "'", str25, "668");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test00857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00857");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.DateTime dateTime5 = readableInterval4.getStart();
        org.joda.time.DateTime dateTime6 = readableInterval4.getStart();
        org.joda.time.Period period7 = readableInterval4.toPeriod();
        org.joda.time.Interval interval8 = readableInterval4.toInterval();
        boolean boolean9 = readableInterval1.overlaps((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Period period10 = interval8.toPeriod();
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval8);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.halfdayOfDay();
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3289145489720L + "'", long2 == 3289145489720L);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test00858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00858");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        int int6 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withSecondOfMinute((int) '#');
        int int9 = localDateTime8.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime.Property property11 = localDateTime8.property(dateTimeFieldType10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 770 + "'", int6 == 770);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test00859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00859");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        boolean boolean15 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((int) (short) 1);
        int int21 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        int int27 = property22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime14.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getNameKey(3289145349341L);
        long long35 = dateTimeZone29.convertLocalToUTC((long) 6, false);
        java.lang.String str36 = dateTimeZone29.getID();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.hours();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.era();
        long long46 = chronology40.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField47 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMillis(2119);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusYears(834);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(dateTimeZone58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = localDateTime57.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone62);
        int int64 = localDateTime57.compareTo((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withPeriodAdded(readablePeriod67, 10);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime66.minus(readableDuration70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = localDateTime72.toDateTime(dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.minusYears((int) (short) 0);
        int int77 = localDateTime76.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = localDateTime79.getFieldType(0);
        int int82 = localDateTime66.get(dateTimeFieldType81);
        int int83 = localDateTime54.get(dateTimeFieldType81);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime48.withField(dateTimeFieldType81, 834);
        boolean boolean86 = dateTimeZone29.isLocalDateTimeGap(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2171 + "'", int21 == 2171);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6L + "'", long35 == 6L);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-90L) + "'", long46 == (-90L));
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 20 + "'", int77 == 20);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1970 + "'", int82 == 1970);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1970 + "'", int83 == 1970);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test00860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00860");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        timeZone0.setID("2074-03-24T19:29:09.830");
        boolean boolean4 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00861");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 67);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) '4');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        int int14 = localDateTime12.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
    }

    @Test
    public void test00862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00862");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withPeriodAdded(readablePeriod4, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withPeriodAdded(readablePeriod7, 57);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField((int) (short) 1);
        int int15 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        int int21 = property16.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDateTime localDateTime23 = property16.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, (int) (short) 10);
        int int27 = localDateTime26.getYear();
        boolean boolean28 = localDateTime9.equals((java.lang.Object) localDateTime26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.centuryOfEra();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.hours();
        java.lang.String str31 = periodType30.getName();
        org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.era();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.secondOfMinute();
        int int40 = localDateTime38.getEra();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minusHours(2022);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMinutes(999);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.era();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField55 = localDateTime53.getField((int) (short) 1);
        int int56 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime.Property property57 = localDateTime53.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        int int62 = property57.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(dateTimeZone64);
        boolean boolean66 = dateTime60.isAfter((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = localDateTime50.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType70 = periodType68.getFieldType((int) (short) 0);
        boolean boolean71 = localDateTime50.isSupported(durationFieldType70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime44.withFieldAdded(durationFieldType70, 67);
        boolean boolean74 = periodType32.isSupported(durationFieldType70);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime26.withFieldAdded(durationFieldType70, 1902);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime26.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusWeeks((int) 'u');
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField85 = localDateTime83.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = localDateTime83.getFieldTypes();
        org.joda.time.LocalDateTime.Property property87 = localDateTime83.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval88 = null;
        org.joda.time.ReadableInterval readableInterval89 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval88);
        org.joda.time.DateTime dateTime90 = readableInterval89.getStart();
        org.joda.time.DateTime dateTime91 = readableInterval89.getStart();
        org.joda.time.Period period92 = readableInterval89.toPeriod();
        org.joda.time.Interval interval93 = readableInterval89.toInterval();
        org.joda.time.Period period94 = interval93.toPeriod();
        org.joda.time.LocalDateTime localDateTime96 = localDateTime83.withPeriodAdded((org.joda.time.ReadablePeriod) period94, 1900);
        org.joda.time.LocalDateTime localDateTime98 = localDateTime80.withPeriodAdded((org.joda.time.ReadablePeriod) period94, 648);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2171 + "'", int15 == 2171);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2171 + "'", int27 == 2171);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Hours" + "'", str31, "Hours");
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2171 + "'", int56 == 2171);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(readableInterval89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(localDateTime98);
    }

    @Test
    public void test00863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00863");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        long long9 = chronology3.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField10 = chronology3.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField16 = localDateTime14.getField((int) (short) 1);
        int int17 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusSeconds(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withSecondOfMinute(6);
        long long23 = chronology3.set((org.joda.time.ReadablePartial) localDateTime21, (long) 44);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(57);
        long long27 = dateTimeZone25.nextTransition((long) 7);
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime(dateTimeZone25);
        int int29 = localDateTime21.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-90L) + "'", long9 == (-90L));
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 71 + "'", int17 == 71);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 6350124666984L + "'", long23 == 6350124666984L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 7L + "'", long27 == 7L);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 984 + "'", int29 == 984);
    }

    @Test
    public void test00864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00864");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime13 = property6.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (short) 10);
        int int18 = localDateTime13.getValue(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime19.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone24);
        int int26 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths(6);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMillisOfDay(35122099);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 100, chronology35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        boolean boolean41 = localDateTime36.equals((java.lang.Object) chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 57, chronology40);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = localDateTime43.getFields();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withMillisOfSecond(0);
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.MutableInterval mutableInterval51 = readableInterval50.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.ReadableInterval readableInterval53 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval52);
        org.joda.time.MutableInterval mutableInterval54 = readableInterval53.toMutableInterval();
        boolean boolean55 = mutableInterval51.isBefore(readableInterval53);
        boolean boolean56 = readableInterval48.isAfter((org.joda.time.ReadableInterval) mutableInterval51);
        org.joda.time.Duration duration57 = readableInterval48.toDuration();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime46.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime30.minus((org.joda.time.ReadableDuration) duration57);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2171 + "'", int18 == 2171);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(readableInterval48);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(readableInterval53);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test00865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00865");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(21, (-1), (int) ' ', 634, 2066);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 634 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00866");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        long long8 = dateTimeZone5.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime22 = property15.addWrapFieldToCopy(35072450);
        boolean boolean23 = dateTimeZone5.isLocalDateTimeGap(localDateTime22);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale25.getDisplayVariant();
        java.lang.String str27 = dateTimeZone5.getShortName(10L, locale25);
        java.util.TimeZone timeZone28 = dateTimeZone5.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = timeZone28.getDisplayName(false, 275);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 275");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35072450L + "'", long8 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2171 + "'", int14 == 2171);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test00867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00867");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2074-03-24T19:29:10.486");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withTime((int) '4', 41, 214, 115);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test00868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00868");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder9 = builder3.clear();
        java.util.Locale.Builder builder10 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setRegion("4193-02-11T09:45:25.087");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 4193-02-11T09:45:25.087 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test00869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00869");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology5 = chronology3.withZone(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DurationField durationField7 = chronology3.weekyears();
        org.joda.time.DurationField durationField8 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test00870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00870");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getExtension('a');
        java.lang.String str6 = locale2.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.lang.String str11 = locale2.getDisplayLanguage(locale7);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale2.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale2);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale15.getExtension('a');
        java.lang.String str19 = locale15.getDisplayVariant();
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str23 = locale20.getExtension('a');
        java.lang.String str24 = locale15.getDisplayLanguage(locale20);
        java.util.Locale.Builder builder25 = builder14.setLocale(locale15);
        java.util.Locale.Builder builder26 = builder14.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder26.setUnicodeLocaleKeyword("404", "2074-03-24T19:31:25.730");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 404 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u6587" + "'", str13, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str16, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str21, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str24, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test00871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00871");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int5 = timeZone1.getOffset((long) (-1));
        java.lang.String str6 = timeZone1.getID();
        int int8 = timeZone1.getOffset(335L);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone10.setRawOffset(1);
        java.time.ZoneId zoneId13 = timeZone10.toZoneId();
        boolean boolean14 = timeZone10.observesDaylightTime();
        boolean boolean15 = timeZone10.observesDaylightTime();
        boolean boolean16 = timeZone1.hasSameRules(timeZone10);
        java.util.TimeZone.setDefault(timeZone10);
        boolean boolean18 = timeZone10.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00872");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.text.DateFormatSymbols dateFormatSymbols3 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale0);
        java.lang.String str5 = locale0.getExtension('u');
        java.lang.String str6 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh_CN" + "'", str6, "zh_CN");
    }

    @Test
    public void test00873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00873");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.era();
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        long long11 = dateTimeZone8.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField16 = localDateTime14.getField((int) (short) 1);
        int int17 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        int int23 = property18.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime25 = property18.addWrapFieldToCopy(35072450);
        boolean boolean26 = dateTimeZone8.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        boolean boolean29 = dateTimeZone8.isStandardOffset(1644572672009L);
        org.joda.time.DateTime dateTime30 = localDateTime0.toDateTime(dateTimeZone8);
        long long33 = dateTimeZone8.adjustOffset((long) ' ', false);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35072450L + "'", long11 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2171 + "'", int17 == 2171);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32L + "'", long33 == 32L);
    }

    @Test
    public void test00874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00874");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        long long8 = dateTimeZone5.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime22 = property15.addWrapFieldToCopy(35072450);
        boolean boolean23 = dateTimeZone5.isLocalDateTimeGap(localDateTime22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        boolean boolean26 = dateTimeZone5.isStandardOffset(1644572672009L);
        java.util.TimeZone timeZone27 = dateTimeZone5.toTimeZone();
        java.lang.String str29 = dateTimeZone5.getName(1644572722722L);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35072450L + "'", long8 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2171 + "'", int14 == 2171);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
    }

    @Test
    public void test00875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00875");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField5 = localDateTime3.getField((int) (short) 1);
        int int6 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        int int12 = property7.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime10.getZone();
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime10.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) "secondOfMinute", dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"secondOfMinute\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2171 + "'", int6 == 2171);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test00876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00876");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        long long9 = chronology3.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 2119);
        long long19 = chronology3.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 0);
        java.lang.String str20 = localDateTime14.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minusMonths(415);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-90L) + "'", long9 == (-90L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62135596800000L) + "'", long19 == (-62135596800000L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0001-01-01T00:00:00.000" + "'", str20, "0001-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test00877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00877");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withPeriodAdded(readablePeriod4, (int) ' ');
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withCenturyOfEra(71);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime11.getFields();
        int int13 = localDateTime11.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds(74708767);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2074-03-24T19:31:30.925" + "'", str7, "2074-03-24T19:31:30.925");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 24 + "'", int13 == 24);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test00878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00878");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusDays((int) 'u');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(11);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDurationAdded(readableDuration7, 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusMonths(881);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfSecond(2170);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2170 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test00879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00879");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.era();
        org.joda.time.Chronology chronology5 = localDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        long long9 = dateTimeZone6.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone6);
        boolean boolean12 = dateTimeZone6.isStandardOffset((long) 0);
        boolean boolean13 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(1644572706619L, dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury(774);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 774 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35072450L + "'", long9 == 35072450L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00880");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.toString();
        int int13 = property6.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField14 = property6.getField();
        org.joda.time.LocalDateTime localDateTime15 = property6.roundFloorCopy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 100, chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (short) 1);
        int int25 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withDurationAdded(readableDuration28, 67);
        boolean boolean31 = localDateTime18.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.era();
        org.joda.time.Chronology chronology36 = localDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology36.getZone();
        long long40 = dateTimeZone37.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = localDateTime18.toDateTime(dateTimeZone37);
        long long43 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime44 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2171 + "'", int25 == 2171);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 35072450L + "'", long40 == 35072450L);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 6350124690946L + "'", long43 == 6350124690946L);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test00881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00881");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str5 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet16);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Set<java.lang.String> strSet22 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str23 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Set<java.lang.String> strSet29 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet29);
        java.lang.Object[] objArray31 = strSet29.toArray();
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Collection<java.util.Locale> localeCollection33 = null;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, localeCollection33);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, localeCollection33);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 35072450);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        boolean boolean39 = localDateTime37.equals((java.lang.Object) filteringMode38);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, localeCollection33, filteringMode38);
        boolean boolean41 = locale0.equals((java.lang.Object) filteringMode38);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(objArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "\u65e5\u672c\u8a9e]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "\u65e5\u672c\u8a9e]");
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test00882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00882");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 2119);
        boolean boolean8 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusMonths((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDayOfWeek((int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test00883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00883");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DurationField durationField6 = chronology4.centuries();
        org.joda.time.Chronology chronology7 = chronology4.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(6L, chronology7);
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.MutableInterval mutableInterval12 = readableInterval11.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.MutableInterval mutableInterval15 = readableInterval14.toMutableInterval();
        boolean boolean16 = mutableInterval12.isBefore(readableInterval14);
        org.joda.time.Interval interval17 = mutableInterval12.toInterval();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.DateTime dateTime20 = readableInterval19.getStart();
        org.joda.time.DateTime dateTime21 = readableInterval19.getStart();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        int int28 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = readableInterval19.isAfter((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean30 = mutableInterval12.contains(readableInterval19);
        org.joda.time.DateTime dateTime31 = readableInterval19.getEnd();
        org.joda.time.DateTime dateTime32 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime9.withTime(576, 881, (int) 'u', (-38068));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 576 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test00884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00884");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime13 = property6.addWrapFieldToCopy(35072450);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str17 = locale14.getExtension('a');
        java.lang.String str18 = property6.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime19 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str15, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "441" + "'", str18, "441");
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test00885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00885");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime13 = property6.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (short) 10);
        int int18 = localDateTime13.getValue(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime19.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone24);
        int int26 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        int int30 = property28.getLeapAmount();
        java.lang.String str31 = property28.getAsString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2171 + "'", int18 == 2171);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
    }

    @Test
    public void test00886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00886");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        int int2 = timeZone0.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00887");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("2074-03-24T19:29:09.804");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("\u65e5\u672c\u8a9e");
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = readableInterval8.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.MutableInterval mutableInterval12 = readableInterval11.toMutableInterval();
        boolean boolean13 = mutableInterval9.isBefore(readableInterval11);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField18 = localDateTime16.getField((int) (short) 1);
        int int19 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        int int25 = property20.compareTo((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = readableInterval11.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration27 = readableInterval11.toDuration();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = strSet6.contains((java.lang.Object) readableInterval11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2171 + "'", int19 == 2171);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
    }

    @Test
    public void test00888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00888");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test00889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00889");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 2119);
        boolean boolean8 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.era();
        boolean boolean13 = property12.isLeap();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00890");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        int int6 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMonths(35083095);
        boolean boolean9 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 849 + "'", int6 == 849);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test00891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00891");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.MutableInterval mutableInterval5 = readableInterval4.toMutableInterval();
        boolean boolean6 = mutableInterval2.isBefore(readableInterval4);
        org.joda.time.Chronology chronology7 = readableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        boolean boolean24 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField29 = localDateTime27.getField((int) (short) 1);
        int int30 = localDateTime27.getWeekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        int int36 = property31.compareTo((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime23.getZone();
        java.lang.String str39 = dateTimeZone38.toString();
        java.lang.String str41 = dateTimeZone38.getNameKey(3289145349341L);
        long long44 = dateTimeZone38.convertLocalToUTC((long) 6, false);
        java.lang.String str45 = dateTimeZone38.getID();
        java.util.TimeZone timeZone46 = dateTimeZone38.toTimeZone();
        java.lang.String str48 = dateTimeZone38.getName(3289145349341L);
        org.joda.time.Chronology chronology49 = chronology7.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.clockhourOfDay();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2171 + "'", int14 == 2171);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2171 + "'", int30 == 2171);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+35:00" + "'", str39, "+35:00");
// flaky:         org.junit.Assert.assertNull(str41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-125999994L) + "'", long44 == (-125999994L));
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+35:00" + "'", str45, "+35:00");
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+35:00" + "'", str48, "+35:00");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test00892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00892");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0, 392, 25, 2074, 45, 70150840);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2074 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00893");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("1970", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00894");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        boolean boolean9 = localDateTime4.equals((java.lang.Object) chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 57, chronology8);
        boolean boolean12 = periodType0.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType13 = periodType0.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        boolean boolean20 = periodType13.equals((java.lang.Object) chronology17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.secondOfMinute();
        int int27 = localDateTime25.getEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 100, chronology29);
        int int31 = localDateTime30.getDayOfMonth();
        int[] intArray32 = localDateTime30.getValues();
        chronology17.validate((org.joda.time.ReadablePartial) localDateTime25, intArray32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime25.minusSeconds(43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType37 = localDateTime25.getFieldType(309);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 309");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 2, 39600100]");
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test00895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00895");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2074-03-24T19:29:09.804", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00896");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale2.getDisplayScript(locale5);
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale0.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "und" + "'", str1, "und");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str3, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test00897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00897");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.dayOfWeek();
        org.joda.time.DurationField durationField11 = chronology4.years();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test00898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00898");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale locale3 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setVariant("1970-01-01T00:00:00.415Z/1970-01-01T00:00:00.415Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1970-01-01T00:00:00.415Z/1970-01-01T00:00:00.415Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
    }

    @Test
    public void test00899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00899");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime(dateTimeZone4);
        int int6 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime12.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusYears(2171);
        int[] intArray17 = chronology7.get((org.joda.time.ReadablePartial) localDateTime12, (long) '4');
        org.joda.time.DateTimeField dateTimeField18 = chronology7.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 52]");
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test00900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00900");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder5 = builder3.setRegion("759");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("2022-02-11T09:45:39.647");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:45:39.647 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00901");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0, chronology4);
        int int9 = localDateTime8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test00902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00902");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        int int5 = timeZone1.getOffset((long) (-1));
        java.lang.String str6 = timeZone1.getID();
        int int8 = timeZone1.getOffset(335L);
        boolean boolean9 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test00903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00903");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (short) 1);
        int int9 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        int int15 = property10.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime17 = property10.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDurationAdded(readableDuration18, (int) (short) 10);
        int int22 = localDateTime17.getValue(0);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime23.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone28);
        int int30 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime17.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        int int34 = property32.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime35 = property32.roundHalfEvenCopy();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        int int37 = property32.getMaximumShortTextLength(locale36);
        java.util.Locale.Builder builder38 = builder0.setLocale(locale36);
        java.util.Locale locale39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder38.setLocale(locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2171 + "'", int9 == 2171);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2171 + "'", int22 == 2171);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test00904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00904");
        java.text.DateFormatSymbols dateFormatSymbols0 = java.text.DateFormatSymbols.getInstance();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str5 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet4);
        boolean boolean6 = dateFormatSymbols0.equals((java.lang.Object) strSet4);
        java.lang.String[] strArray7 = dateFormatSymbols0.getShortMonths();
        java.text.DateFormatSymbols dateFormatSymbols8 = new java.text.DateFormatSymbols();
        java.text.DateFormatSymbols dateFormatSymbols9 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols9.setWeekdays(strArray16);
        java.lang.String[] strArray18 = dateFormatSymbols9.getShortWeekdays();
        java.lang.String[][] strArray19 = dateFormatSymbols9.getZoneStrings();
        dateFormatSymbols8.setZoneStrings(strArray19);
        dateFormatSymbols0.setZoneStrings(strArray19);
        java.lang.Object obj22 = dateFormatSymbols0.clone();
        org.junit.Assert.assertNotNull(dateFormatSymbols0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test00905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00905");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("159");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=159");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00906");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2074-03-24T19:31:24.118", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2074-03-24t19:31:24.118");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00907");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) 'a');
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField26 = localDateTime24.getField((int) (short) 1);
        int int27 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        int int33 = property28.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(dateTimeZone35);
        boolean boolean37 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime(dateTimeZone42);
        int int44 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean45 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minusYears((int) (short) 0);
        int int51 = localDateTime50.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = localDateTime53.getFieldType(0);
        boolean boolean56 = dateTime36.isSupported(dateTimeFieldType55);
        org.joda.time.DateTime dateTime57 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime16.plusSeconds((int) (short) 100);
        boolean boolean60 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.era();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime61.withPeriodAdded(readablePeriod65, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime61.withPeriodAdded(readablePeriod68, 57);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withMillisOfSecond(100);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime70);
        int int74 = localDateTime15.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.era();
        org.joda.time.Chronology chronology79 = localDateTime75.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = chronology79.getZone();
        long long83 = dateTimeZone80.adjustOffset((long) 35072450, true);
        java.lang.String str84 = dateTimeZone80.toString();
        boolean boolean86 = dateTimeZone80.isStandardOffset(0L);
        org.joda.time.DateTime dateTime87 = localDateTime15.toDateTime(dateTimeZone80);
        long long89 = chronology10.set((org.joda.time.ReadablePartial) localDateTime15, 1644572701100L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime(999, 35100820, 74, (int) (byte) 0, (int) (short) -1, 35, 286, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2171 + "'", int27 == 2171);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 33 + "'", int74 == 33);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 35072450L + "'", long83 == 35072450L);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "UTC" + "'", str84, "UTC");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 6350124693240L + "'", long89 == 6350124693240L);
    }

    @Test
    public void test00908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00908");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.DateTime dateTime5 = readableInterval4.getStart();
        org.joda.time.DateTime dateTime6 = readableInterval4.getStart();
        org.joda.time.Period period7 = readableInterval4.toPeriod();
        org.joda.time.Interval interval8 = readableInterval4.toInterval();
        boolean boolean9 = readableInterval1.overlaps((org.joda.time.ReadableInterval) interval8);
        org.joda.time.DateTime dateTime10 = readableInterval1.getStart();
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        java.lang.String str12 = dateTime10.toString();
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3289145493284L + "'", long2 == 3289145493284L);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2074-03-24T19:31:33.284Z" + "'", str12, "2074-03-24T19:31:33.284Z");
    }

    @Test
    public void test00909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00909");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getInstantChronology(readableInstant0);
        org.junit.Assert.assertNotNull(chronology1);
    }

    @Test
    public void test00910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00910");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zho");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.lang.String str3 = timeZone1.getDisplayName(locale2);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str3, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test00911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00911");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-13T20:45:23.900", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00912");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime13 = property6.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (short) 10);
        int int18 = localDateTime13.getValue(0);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField23 = localDateTime21.getField((int) (short) 1);
        int int24 = localDateTime21.getWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        int int30 = property25.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDateTime localDateTime32 = property25.addWrapFieldToCopy(35072450);
        int int33 = localDateTime32.getWeekOfWeekyear();
        boolean boolean34 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMillis(2119);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.plus(readablePeriod41);
        int int43 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = property44.addWrapFieldToCopy(626);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withWeekyear((int) (byte) 10);
        int int49 = localDateTime48.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2171 + "'", int18 == 2171);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2171 + "'", int24 == 2171);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 12 + "'", int33 == 12);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19 + "'", int49 == 19);
    }

    @Test
    public void test00913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00913");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusSeconds(10);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.era();
        long long17 = chronology11.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.era();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, 2119);
        long long27 = chronology11.set((org.joda.time.ReadablePartial) localDateTime22, (long) (short) 0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField32 = localDateTime30.getField((int) (short) 1);
        int int33 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        int int39 = property34.compareTo((org.joda.time.ReadableInstant) dateTime37);
        java.lang.String str40 = property34.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property34.getFieldType();
        int int42 = localDateTime22.get(dateTimeFieldType41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime2.property(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localDateTime2.getValue(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 71 + "'", int5 == 71);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-90L) + "'", long17 == (-90L));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-62135596800000L) + "'", long27 == (-62135596800000L));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2171 + "'", int33 == 2171);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "587" + "'", str40, "587");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test00914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00914");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getExtension('a');
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.lang.String str9 = locale0.getDisplayLanguage(locale5);
        java.util.Locale.setDefault(locale5);
        java.lang.String str11 = locale5.getCountry();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str15 = locale12.getExtension('a');
        java.lang.String str16 = locale12.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.lang.String str20 = locale17.getExtension('a');
        java.lang.String str21 = locale12.getDisplayLanguage(locale17);
        java.util.Locale.setDefault(locale17);
        java.lang.String str23 = locale5.getDisplayVariant(locale17);
        java.lang.String str24 = locale17.getISO3Country();
        java.text.DateFormatSymbols dateFormatSymbols25 = new java.text.DateFormatSymbols(locale17);
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str27 = locale26.getLanguage();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale17.getDisplayName(locale26);
        java.lang.String str30 = locale17.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str1, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str6, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str9, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str13, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str18, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str21, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japanese" + "'", str29, "Japanese");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ja" + "'", str30, "ja");
    }

    @Test
    public void test00915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00915");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.Object obj1 = null;
        boolean boolean2 = locale0.equals(obj1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test00916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00916");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int1 = timeZone0.getRawOffset();
        java.lang.Object obj2 = timeZone0.clone();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test00917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00917");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.setExtension('a', "19");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("2022-02-11T09:45:39.409");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:45:39.409 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test00918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00918");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.MutableInterval mutableInterval5 = readableInterval4.toMutableInterval();
        boolean boolean6 = mutableInterval2.isBefore(readableInterval4);
        org.joda.time.Interval interval7 = mutableInterval2.toInterval();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.DateTime dateTime10 = readableInterval9.getStart();
        org.joda.time.DateTime dateTime11 = readableInterval9.getStart();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(dateTimeZone16);
        int int18 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime17);
        boolean boolean19 = readableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        boolean boolean20 = mutableInterval2.contains(readableInterval9);
        org.joda.time.Duration duration21 = mutableInterval2.toDuration();
        long long22 = duration21.getMillis();
        org.joda.time.Period period23 = duration21.toPeriod();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(dateTimeZone25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime24.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone29);
        int int31 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.withCenturyOfEra(67);
        org.joda.time.LocalDateTime.Property property34 = localDateTime24.monthOfYear();
        org.joda.time.Interval interval35 = property34.toInterval();
        org.joda.time.Duration duration36 = interval35.toDuration();
        boolean boolean37 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        boolean boolean39 = duration21.isLongerThan(readableDuration38);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test00919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00919");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.toString();
        int int13 = property6.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime14 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfYear((int) 'u');
        int int17 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.era();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 35072450);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        boolean boolean22 = localDateTime20.equals((java.lang.Object) filteringMode21);
        boolean boolean23 = property18.equals((java.lang.Object) boolean22);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2171 + "'", int17 == 2171);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00920");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("jpn");
        java.lang.String str2 = languageRange1.getRange();
        boolean boolean4 = languageRange1.equals((java.lang.Object) "de-DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00921");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setID("Etc/UTC");
        java.lang.String str4 = timeZone1.getID();
        java.lang.String str5 = timeZone1.getID();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = timeZone1.getOffset(0, 0, 985, 6, 773, 19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Etc/UTC" + "'", str4, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
    }

    @Test
    public void test00922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00922");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.millisOfDay();
        org.joda.time.DurationField durationField6 = chronology3.years();
        org.joda.time.DurationField durationField7 = chronology3.weekyears();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test00923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00923");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfMonth(235);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 235 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00924");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        timeZone1.setRawOffset((-1));
        timeZone1.setRawOffset((int) (short) -1);
        java.time.ZoneId zoneId9 = timeZone1.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("zho");
        boolean boolean12 = timeZone1.hasSameRules(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone15);
        java.util.Date date17 = localDateTime16.toDate();
        boolean boolean18 = timeZone11.inDaylightTime(date17);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Jan 02 11:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00925");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 2119);
        boolean boolean8 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.centuryOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField15 = localDateTime13.getField((int) (short) 1);
        int int16 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDurationAdded(readableDuration19, 67);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minus(readableDuration22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfMonth();
        int int25 = localDateTime23.getCenturyOfEra();
        boolean boolean26 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField31 = localDateTime29.getField((int) (short) 1);
        int int32 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        int int38 = property33.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(dateTimeZone40);
        boolean boolean42 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(dateTimeZone47);
        int int49 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str51 = dateTime41.toString();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(dateTimeZone56);
        int int58 = dateTime54.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean60 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime61 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean63 = dateTime41.equals((java.lang.Object) 1644572700194L);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2171 + "'", int16 == 2171);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21 + "'", int25 == 21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2171 + "'", int32 == 2171);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2074-03-24T19:31:34.679Z" + "'", str51, "2074-03-24T19:31:34.679Z");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test00926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00926");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField5 = localDateTime3.getField((int) (short) 1);
        int int6 = localDateTime3.getWeekyear();
        int int7 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMonths(35083095);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra(43);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology17 = chronology15.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeUtils.getZone(dateTimeZone16);
        java.lang.String str20 = dateTimeZone16.getNameKey((long) 834);
        java.lang.String str21 = dateTimeZone16.getID();
        org.joda.time.DateTime dateTime22 = localDateTime9.toDateTime(dateTimeZone16);
        int int24 = dateTimeZone16.getOffset(763L);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 93, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField30 = localDateTime28.getField((int) (short) 1);
        int int31 = localDateTime28.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDateTime28.getFieldType(0);
        int int34 = localDateTime25.get(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2171 + "'", int6 == 2171);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 737 + "'", int7 == 737);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 71 + "'", int31 == 71);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
    }

    @Test
    public void test00927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00927");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withPeriodAdded(readablePeriod5, 2119);
        boolean boolean8 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.era();
        int int13 = localDateTime11.size();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusWeeks(2067);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (short) 1);
        int int22 = localDateTime19.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.millisOfSecond();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.LocalDateTime localDateTime25 = property23.withMaximumValue();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.year();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale locale29 = locale27.stripExtensions();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(dateTimeZone31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime30.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone35);
        int int37 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withEra((int) (short) 1);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.lang.String str42 = locale41.getDisplayCountry();
        java.lang.String str43 = localDateTime36.toString("575", locale41);
        java.lang.String str44 = locale29.getDisplayName(locale41);
        java.text.DateFormatSymbols dateFormatSymbols45 = java.text.DateFormatSymbols.getInstance(locale41);
        java.lang.String str46 = property26.getAsShortText(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = localDateTime15.toString("Japanese", locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 71 + "'", int22 == 71);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "JP" + "'", str28, "JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "575" + "'", str43, "575");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str44, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(dateFormatSymbols45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2171" + "'", str46, "2171");
    }

    @Test
    public void test00928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00928");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str5 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet16);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Set<java.lang.String> strSet22 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str23 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Set<java.lang.String> strSet29 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet29);
        java.lang.Object[] objArray31 = strSet29.toArray();
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Collection<java.util.Locale> localeCollection33 = null;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, localeCollection33);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, localeCollection33);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 35072450);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        boolean boolean39 = localDateTime37.equals((java.lang.Object) filteringMode38);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, localeCollection33, filteringMode38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(objArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeList40);
    }

    @Test
    public void test00929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00929");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str5 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Set<java.lang.String> strSet9 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str10 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet9);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Set<java.lang.String> strSet19 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet24);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Set<java.lang.String> strSet30 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Set<java.lang.String> strSet32 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Set<java.lang.String> strSet37 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strSet37);
        java.lang.Object[] objArray39 = strSet37.toArray();
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Collection<java.util.Locale> localeCollection41 = null;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, localeCollection41);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, localeCollection41);
        java.util.Locale locale44 = java.util.Locale.lookup(languageRangeList15, (java.util.Collection<java.util.Locale>) localeList43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale45 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(objArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNull(locale44);
    }

    @Test
    public void test00930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00930");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone3.setID("Etc/UTC");
        timeZone3.setID("2074-03-24T19:29:10.161");
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        java.util.TimeZone.setDefault(timeZone9);
        boolean boolean11 = timeZone3.hasSameRules(timeZone9);
        boolean boolean12 = timeZone9.observesDaylightTime();
        boolean boolean13 = timeZone1.hasSameRules(timeZone9);
        java.util.Date date14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = timeZone1.inDaylightTime(date14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00931");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 67);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        long long16 = readableInterval15.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Set<java.lang.String> strSet20 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Set<java.lang.String> strSet25 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str26 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Set<java.lang.String> strSet30 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet30);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet30);
        boolean boolean33 = strSet20.removeAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.stream.Stream<java.lang.String> strStream34 = strSet30.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream35 = strSet30.parallelStream();
        boolean boolean36 = readableInterval15.equals((java.lang.Object) strSet30);
        org.joda.time.Duration duration37 = readableInterval15.toDuration();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime12.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = property39.setCopy("677");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 677 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(readableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3289145495064L + "'", long16 == 3289145495064L);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strList32);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test00932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00932");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis(2119);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears(834);
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        long long10 = readableInterval9.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Set<java.lang.String> strSet19 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Set<java.lang.String> strSet24 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet24);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet24);
        boolean boolean27 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet24);
        java.util.stream.Stream<java.lang.String> strStream28 = strSet24.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet24.parallelStream();
        boolean boolean30 = readableInterval9.equals((java.lang.Object) strSet24);
        org.joda.time.Duration duration31 = readableInterval9.toDuration();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        long long34 = readableInterval33.getStartMillis();
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Set<java.lang.String> strSet38 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Set<java.lang.String> strSet43 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Set<java.lang.String> strSet48 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str49 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet48);
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet48);
        boolean boolean51 = strSet38.removeAll((java.util.Collection<java.lang.String>) strSet48);
        java.util.stream.Stream<java.lang.String> strStream52 = strSet48.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream53 = strSet48.parallelStream();
        boolean boolean54 = readableInterval33.equals((java.lang.Object) strSet48);
        org.joda.time.Duration duration55 = readableInterval33.toDuration();
        boolean boolean56 = duration31.isEqual((org.joda.time.ReadableDuration) duration55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration31, 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime7.millisOfSecond();
        int int60 = property59.get();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(readableInterval9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3289145495102L + "'", long10 == 3289145495102L);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(readableInterval33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3289145495102L + "'", long34 == 3289145495102L);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 881 + "'", int60 == 881);
    }

    @Test
    public void test00933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00933");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        int int6 = localDateTime2.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withSecondOfMinute((int) '#');
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.plusMinutes(35126347);
        boolean boolean14 = localDateTime12.equals((java.lang.Object) "780");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 128 + "'", int6 == 128);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00934");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        int int3 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.era();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readableDuration5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusHours(43);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDateTime8.getValue(999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 999");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test00935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00935");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.minuteOfHour();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone13.setRawOffset(1);
        int int17 = timeZone13.getOffset((long) (-1));
        java.lang.String str18 = timeZone13.getID();
        boolean boolean19 = timeZone13.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) chronology4, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT" + "'", str18, "GMT");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test00936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00936");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 67);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withDayOfMonth((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2171 + "'", int5 == 2171);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test00937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00937");
        java.text.DateFormatSymbols dateFormatSymbols0 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols0.setWeekdays(strArray7);
        java.lang.String[] strArray9 = dateFormatSymbols0.getShortWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols10 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols10.setWeekdays(strArray17);
        java.lang.String[] strArray19 = dateFormatSymbols10.getShortWeekdays();
        dateFormatSymbols0.setShortMonths(strArray19);
        java.lang.String[] strArray21 = dateFormatSymbols0.getWeekdays();
        java.lang.String[] strArray22 = dateFormatSymbols0.getAmPmStrings();
        java.text.DateFormatSymbols dateFormatSymbols23 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols23.setWeekdays(strArray30);
        java.lang.String[] strArray32 = dateFormatSymbols23.getShortWeekdays();
        java.lang.String[][] strArray33 = dateFormatSymbols23.getZoneStrings();
        java.lang.String[] strArray34 = java.util.Locale.getISOLanguages();
        dateFormatSymbols23.setEras(strArray34);
        dateFormatSymbols0.setShortMonths(strArray34);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.text.DateFormatSymbols dateFormatSymbols39 = new java.text.DateFormatSymbols(locale37);
        java.text.DateFormatSymbols dateFormatSymbols40 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols40.setWeekdays(strArray47);
        java.lang.String[] strArray49 = dateFormatSymbols40.getShortWeekdays();
        java.lang.String[][] strArray50 = dateFormatSymbols40.getZoneStrings();
        java.lang.String[] strArray51 = java.util.Locale.getISOLanguages();
        dateFormatSymbols40.setEras(strArray51);
        dateFormatSymbols39.setWeekdays(strArray51);
        java.text.DateFormatSymbols dateFormatSymbols54 = new java.text.DateFormatSymbols();
        java.lang.String str55 = dateFormatSymbols54.getLocalPatternChars();
        java.lang.String[] strArray60 = new java.lang.String[] { "Property[millisOfSecond]", "hi!", "2119-02-11T09:44:32.668", "ISOChronology[Etc/UTC]" };
        dateFormatSymbols54.setShortWeekdays(strArray60);
        java.lang.Object obj62 = dateFormatSymbols54.clone();
        java.lang.String[] strArray63 = java.util.Locale.getISOCountries();
        dateFormatSymbols54.setAmPmStrings(strArray63);
        dateFormatSymbols39.setAmPmStrings(strArray63);
        dateFormatSymbols0.setShortWeekdays(strArray63);
        java.lang.String[] strArray67 = dateFormatSymbols0.getShortMonths();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GaMjkHmsSEDFwWxhKzZ" + "'", str55, "GaMjkHmsSEDFwWxhKzZ");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray67);
    }

    @Test
    public void test00938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00938");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        boolean boolean9 = localDateTime4.equals((java.lang.Object) chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 57, chronology8);
        boolean boolean12 = periodType0.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType13 = periodType0.withSecondsRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withDaysRemoved();
        org.joda.time.PeriodType periodType16 = periodType13.withMonthsRemoved();
        org.joda.time.PeriodType periodType17 = periodType13.withHoursRemoved();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 100, chronology20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        boolean boolean26 = localDateTime21.equals((java.lang.Object) chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 57, chronology25);
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localDateTime28.getFields();
        int int30 = localDateTime28.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.weekyear();
        boolean boolean34 = periodType13.equals((java.lang.Object) property33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType36 = periodType13.getFieldType(824);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 824");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test00939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00939");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 11);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis((int) '4');
        int int4 = localDateTime1.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00940");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.Date date2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = timeZone0.inDaylightTime(date2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test00941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00941");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str4 = locale1.getExtension('a');
        java.lang.String str5 = locale1.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.JAPANESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getExtension('a');
        java.lang.String str10 = locale1.getDisplayLanguage(locale6);
        java.lang.String str13 = nameProvider0.getShortName(locale1, "+35:00", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str17 = locale14.getExtension('a');
        java.lang.String str20 = nameProvider0.getShortName(locale14, "958", "CN");
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale.Builder builder24 = builder21.setLocale(locale23);
        java.lang.String str27 = nameProvider0.getName(locale23, "424", "Hours");
        java.lang.String str28 = locale23.getVariant();
        java.lang.String str29 = locale23.toString();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str2, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str7, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str10, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str15, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ja" + "'", str29, "ja");
    }

    @Test
    public void test00942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00942");
        org.joda.time.DateTimeUtils.setCurrentMillisFixed((long) (-38068));
    }

    @Test
    public void test00943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00943");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMaximumValue();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withSecondOfMinute(886);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 886 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 66 + "'", int5 == 66);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test00944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00944");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getOffsetFromLocal(467114000L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00945");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.toString();
        int int13 = property6.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField14 = property6.getField();
        org.joda.time.LocalDateTime localDateTime15 = property6.roundFloorCopy();
        java.lang.Class<?> wildcardClass16 = property6.getClass();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test00946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00946");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:45:40.620Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:45:40.620z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00947");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        int int3 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.era();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readableDuration5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withDurationAdded(readableDuration7, (int) 'a');
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withPeriodAdded(readablePeriod15, (int) ' ');
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.monthOfYear();
        int int20 = localDateTime17.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.era();
        org.joda.time.Chronology chronology25 = localDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(dateTimeZone26);
        boolean boolean28 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property30 = localDateTime2.year();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        long long33 = readableInterval32.getStartMillis();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.DateTime dateTime36 = readableInterval35.getStart();
        org.joda.time.DateTime dateTime37 = readableInterval35.getStart();
        org.joda.time.Period period38 = readableInterval35.toPeriod();
        org.joda.time.Interval interval39 = readableInterval35.toInterval();
        boolean boolean40 = readableInterval32.overlaps((org.joda.time.ReadableInterval) interval39);
        boolean boolean41 = property30.equals((java.lang.Object) interval39);
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.MutableInterval mutableInterval46 = readableInterval45.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        org.joda.time.MutableInterval mutableInterval49 = readableInterval48.toMutableInterval();
        boolean boolean50 = mutableInterval46.isBefore(readableInterval48);
        boolean boolean51 = readableInterval43.isAfter((org.joda.time.ReadableInterval) mutableInterval46);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField56 = localDateTime54.getField((int) (short) 1);
        int int57 = localDateTime54.getWeekyear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime(dateTimeZone60);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        int int63 = property58.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime(dateTimeZone65);
        boolean boolean67 = dateTime61.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime(dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = localDateTime71.toDateTime(dateTimeZone72);
        int int74 = dateTime70.compareTo((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean75 = dateTime66.isAfter((org.joda.time.ReadableInstant) dateTime70);
        java.lang.String str76 = dateTime66.toString();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateTime dateTime79 = localDateTime77.toDateTime(dateTimeZone78);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = localDateTime80.toDateTime(dateTimeZone81);
        int int83 = dateTime79.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Chronology chronology84 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean85 = dateTime66.isBefore((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean86 = readableInterval43.isAfter((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Interval interval87 = readableInterval43.toInterval();
        boolean boolean88 = interval39.overlaps(readableInterval43);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T23:59:21.932" + "'", str18, "1969-12-31T23:59:21.932");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-38068L) + "'", long33 == (-38068L));
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(readableInterval48);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2066 + "'", int57 == 2066);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1969-12-31T23:59:21.932Z" + "'", str76, "1969-12-31T23:59:21.932Z");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test00948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00948");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        int int2 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean4 = timeZone0.observesDaylightTime();
        timeZone0.setID("467");
        java.lang.Object obj7 = timeZone0.clone();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "sun.util.calendar.ZoneInfo[id=\"467\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "sun.util.calendar.ZoneInfo[id=\"467\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "sun.util.calendar.ZoneInfo[id=\"467\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test00949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00949");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-12T20:44:57.701+35:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-12T20:44:57.701+35:00\" is malformed at \"+35:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00950");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.MutableInterval mutableInterval5 = readableInterval4.toMutableInterval();
        boolean boolean6 = mutableInterval2.isBefore(readableInterval4);
        org.joda.time.Interval interval7 = mutableInterval2.toInterval();
        long long8 = mutableInterval2.getStartMillis();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-38068L) + "'", long8 == (-38068L));
    }

    @Test
    public void test00951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00951");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        java.lang.String str2 = localDateTime0.toString(dateTimeFormatter1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYear(35072450);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date6 = localDateTime0.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -68 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1969-12-31T23:59:21.932" + "'", str2, "1969-12-31T23:59:21.932");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test00952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00952");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusDays((int) 'u');
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra(11);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = localDateTime4.getValue(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test00953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00953");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
    }

    @Test
    public void test00954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00954");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getScript();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.era();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 2119);
        boolean boolean13 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMinutes(35082058);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.hours();
        org.joda.time.DurationField durationField21 = chronology19.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((java.lang.Object) locale0, chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en" + "'", str1, "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test00955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00955");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        int int6 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(849);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekOfWeekyear(74708767);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74708767 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test00956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00956");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        boolean boolean9 = localDateTime4.equals((java.lang.Object) chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 57, chronology8);
        boolean boolean12 = periodType0.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType13 = periodType0.withSecondsRemoved();
        org.joda.time.PeriodType periodType14 = periodType0.withMillisRemoved();
        java.lang.String str15 = periodType0.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PeriodType[DayTime]" + "'", str15, "PeriodType[DayTime]");
    }

    @Test
    public void test00957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00957");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, chronology2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        boolean boolean8 = localDateTime3.equals((java.lang.Object) chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 57, chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfMinute();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.era();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField26 = localDateTime24.getField((int) (short) 1);
        int int27 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        int int33 = property28.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(dateTimeZone35);
        boolean boolean37 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.Period period42 = readableInterval41.toPeriod();
        int[] intArray44 = chronology39.get((org.joda.time.ReadablePeriod) period42, (long) 999);
        int[] intArray47 = chronology15.get((org.joda.time.ReadablePeriod) period42, 1644572710257L, (long) 35100820);
        int[] intArray50 = chronology7.get((org.joda.time.ReadablePeriod) period42, 1644572698829L, 724L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 100, chronology52);
        int int54 = localDateTime53.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.era();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.plus(readableDuration56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.withDurationAdded(readableDuration58, (int) 'a');
        org.joda.time.LocalDateTime.Property property61 = localDateTime53.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.minusMinutes((int) 'x');
        long long65 = chronology7.set((org.joda.time.ReadablePartial) localDateTime63, 1644572705227L);
        org.joda.time.DateTimeField dateTimeField66 = chronology7.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2066 + "'", int27 == 2066);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 999]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-52, -1, -1, -3, 0, 0, -9, -437]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-52, -1, -1, -3, -9, -44, -58, -105]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-7199900L) + "'", long65 == (-7199900L));
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test00958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00958");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str12 = property6.toString();
        int int13 = property6.getMaximumValueOverall();
        org.joda.time.DurationField durationField14 = property6.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime15 = property6.roundHalfCeilingCopy();
        long long16 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField((int) (short) 1);
        int int23 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        int int29 = property24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        java.lang.String str30 = property24.getAsText();
        org.joda.time.LocalDateTime localDateTime31 = property24.roundHalfEvenCopy();
        org.joda.time.tz.NameProvider nameProvider32 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = locale33.getDisplayLanguage();
        java.lang.String str36 = locale33.getExtension('a');
        java.lang.String str37 = locale33.getDisplayVariant();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str41 = locale38.getExtension('a');
        java.lang.String str42 = locale33.getDisplayLanguage(locale38);
        java.lang.String str45 = nameProvider32.getShortName(locale33, "+35:00", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale46.getDisplayLanguage();
        java.lang.String str49 = locale46.getExtension('a');
        java.lang.String str52 = nameProvider32.getShortName(locale46, "958", "CN");
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale55 = java.util.Locale.getDefault(category54);
        java.util.Locale.Builder builder56 = builder53.setLocale(locale55);
        java.lang.String str59 = nameProvider32.getName(locale55, "424", "Hours");
        int int60 = property24.getMaximumShortTextLength(locale55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = property6.setCopy("DEU", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DEU\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfSecond]" + "'", str12, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2066 + "'", int23 == 2066);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "932" + "'", str30, "932");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(nameProvider32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u65e5\u6587" + "'", str34, "\u65e5\u6587");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u6587" + "'", str39, "\u65e5\u6587");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str42, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u65e5\u6587" + "'", str47, "\u65e5\u6587");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category54.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
    }

    @Test
    public void test00959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00959");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        int int3 = localDateTime0.getYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfCentury();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.lang.String str9 = locale5.getDisplayVariant();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str13 = locale10.getExtension('a');
        java.lang.String str14 = locale5.getDisplayLanguage(locale10);
        java.util.Locale locale15 = java.util.Locale.US;
        java.lang.String str16 = locale5.getDisplayName(locale15);
        java.lang.String str17 = property4.getAsShortText(locale15);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str21 = locale18.getExtension('a');
        java.lang.String str22 = locale18.getDisplayVariant();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str26 = locale23.getExtension('a');
        java.lang.String str27 = locale18.getDisplayLanguage(locale23);
        java.text.DateFormatSymbols dateFormatSymbols28 = new java.text.DateFormatSymbols(locale18);
        java.lang.String str29 = locale15.getDisplayScript(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = locale18.getUnicodeLocaleType("zho");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: zho");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1969 + "'", int3 == 1969);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u6587" + "'", str6, "\u65e5\u6587");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u6587" + "'", str11, "\u65e5\u6587");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str14, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japanese" + "'", str16, "Japanese");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "69" + "'", str17, "69");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u65e5\u6587" + "'", str19, "\u65e5\u6587");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65e5\u6587" + "'", str24, "\u65e5\u6587");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str27, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test00960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00960");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        long long9 = chronology3.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 2119);
        long long19 = chronology3.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 0);
        org.joda.time.DateTimeField dateTimeField20 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology3.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-90L) + "'", long9 == (-90L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62135596800000L) + "'", long19 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test00961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00961");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone5);
        int int7 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withEra((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withTime(252, 292278993, (int) (short) 10, 47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test00962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00962");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        int int6 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusHours(2022);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(999);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (short) 1);
        int int22 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        int int28 = property23.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(dateTimeZone30);
        boolean boolean32 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType36 = periodType34.getFieldType((int) (short) 0);
        boolean boolean37 = localDateTime16.isSupported(durationFieldType36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime10.withFieldAdded(durationFieldType36, 67);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime10.minusWeeks((int) (byte) 100);
        int int42 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.era();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withPeriodAdded(readablePeriod47, (int) ' ');
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime43.withPeriodAdded(readablePeriod50, 57);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField57 = localDateTime55.getField((int) (short) 1);
        int int58 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime(dateTimeZone61);
        org.joda.time.Chronology chronology63 = dateTime62.getChronology();
        int int64 = property59.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalDateTime localDateTime66 = property59.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withDurationAdded(readableDuration67, (int) (short) 10);
        int int70 = localDateTime69.getYear();
        boolean boolean71 = localDateTime52.equals((java.lang.Object) localDateTime69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.plusDays((int) '#');
        boolean boolean74 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField79 = localDateTime77.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField84 = localDateTime82.getField((int) (short) 1);
        int int85 = localDateTime82.getWeekyear();
        org.joda.time.LocalDateTime.Property property86 = localDateTime82.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateTime dateTime89 = localDateTime87.toDateTime(dateTimeZone88);
        org.joda.time.Chronology chronology90 = dateTime89.getChronology();
        int int91 = property86.compareTo((org.joda.time.ReadableInstant) dateTime89);
        java.lang.String str92 = property86.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property86.getFieldType();
        org.joda.time.LocalDateTime.Property property94 = localDateTime77.property(dateTimeFieldType93);
        org.joda.time.LocalDateTime localDateTime96 = localDateTime10.withField(dateTimeFieldType93, 26);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2066 + "'", int22 == 2066);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 7 + "'", int42 == 7);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2066 + "'", int58 == 2066);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2066 + "'", int70 == 2066);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2066 + "'", int85 == 2066);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "932" + "'", str92, "932");
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(localDateTime96);
    }

    @Test
    public void test00963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00963");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        boolean boolean15 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = localDateTime18.getField((int) (short) 1);
        int int21 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        int int27 = property22.compareTo((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime14.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        java.lang.String str32 = dateTimeZone29.getNameKey(3289145349341L);
        java.lang.String str33 = dateTimeZone29.getID();
        java.util.TimeZone timeZone34 = dateTimeZone29.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider35 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str39 = locale36.getExtension('a');
        java.lang.String str40 = locale36.getDisplayVariant();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.lang.String str44 = locale41.getExtension('a');
        java.lang.String str45 = locale36.getDisplayLanguage(locale41);
        java.lang.String str48 = nameProvider35.getShortName(locale36, "+35:00", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        java.lang.String str49 = timeZone34.getDisplayName(locale36);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2066 + "'", int21 == 2066);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(nameProvider35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u65e5\u6587" + "'", str37, "\u65e5\u6587");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u65e5\u6587" + "'", str42, "\u65e5\u6587");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str45, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str49, "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test00964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00964");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setUnicodeLocaleKeyword("ja", "2074-03-24T19:31:27.537");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: 2074-03-24T19:31:27.537 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test00965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00965");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setRegion("zh");
        java.util.Locale.Builder builder5 = builder3.setRegion("759");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("197");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder6.setVariant("2022-02-11T09:44:33.508");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:44:33.508 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test00966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00966");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setID("Etc/UTC");
        timeZone1.setID("2074-03-24T19:29:10.161");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId6 = timeZone1.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2074-03-24T19:29:10.161");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test00967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00967");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("jpn");
        java.lang.String str2 = languageRange1.getRange();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMinutes((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        boolean boolean24 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        int int26 = localDateTime8.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime8.withMinuteOfHour(19);
        org.joda.time.LocalDateTime.Property property29 = localDateTime8.dayOfYear();
        boolean boolean30 = languageRange1.equals((java.lang.Object) localDateTime8);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2066 + "'", int14 == 2066);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 86361932 + "'", int26 == 86361932);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test00968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00968");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, chronology3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        boolean boolean9 = localDateTime4.equals((java.lang.Object) chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 57, chronology8);
        boolean boolean12 = periodType0.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType13 = periodType0.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        boolean boolean20 = periodType13.equals((java.lang.Object) chronology17);
        org.joda.time.PeriodType periodType21 = periodType13.withMillisRemoved();
        org.joda.time.PeriodType periodType22 = periodType13.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType24 = periodType22.getFieldType(17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test00969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00969");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35081087, 70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 70");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00970");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology4.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology4.getDateTimeMillis(1644659126807L, 26, 35100820, 39600000, 35139408);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test00971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00971");
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 100, chronology10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        boolean boolean16 = localDateTime11.equals((java.lang.Object) chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 57, chronology15);
        boolean boolean19 = periodType7.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType20 = periodType7.withSecondsRemoved();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.hours();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.centuryOfEra();
        boolean boolean27 = periodType20.equals((java.lang.Object) chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(2093, 783, 431, 35100820, 35083868, 648, 86361932, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35100820 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test00972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00972");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        long long9 = chronology3.add((long) (short) 10, (long) (byte) 100, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 2119);
        long long19 = chronology3.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 0);
        org.joda.time.DateTimeField dateTimeField20 = chronology3.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-90L) + "'", long9 == (-90L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62135596800000L) + "'", long19 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test00973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00973");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime(dateTimeZone2);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 0, chronology4);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.era();
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        long long17 = dateTimeZone14.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField((int) (short) 1);
        int int23 = localDateTime20.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        int int29 = property24.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime31 = property24.addWrapFieldToCopy(35072450);
        boolean boolean32 = dateTimeZone14.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime33 = localDateTime8.toDateTime(dateTimeZone14);
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        long long36 = readableInterval35.getStartMillis();
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.DateTime dateTime39 = readableInterval38.getStart();
        org.joda.time.DateTime dateTime40 = readableInterval38.getStart();
        org.joda.time.Period period41 = readableInterval38.toPeriod();
        org.joda.time.Interval interval42 = readableInterval38.toInterval();
        boolean boolean43 = readableInterval35.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Period period44 = interval42.toPeriod();
        long long45 = interval42.getStartMillis();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField50 = localDateTime48.getField((int) (short) 1);
        int int51 = localDateTime48.getWeekyear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime48.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime(dateTimeZone54);
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        int int57 = property52.compareTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(dateTimeZone59);
        boolean boolean61 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField66 = localDateTime64.getField((int) (short) 1);
        int int67 = localDateTime64.getWeekyear();
        org.joda.time.LocalDateTime.Property property68 = localDateTime64.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(dateTimeZone70);
        org.joda.time.Chronology chronology72 = dateTime71.getChronology();
        int int73 = property68.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(dateTimeZone75);
        boolean boolean77 = dateTime71.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField82 = localDateTime80.getField((int) (short) 1);
        int int83 = localDateTime80.getWeekyear();
        org.joda.time.LocalDateTime.Property property84 = localDateTime80.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = localDateTime85.toDateTime(dateTimeZone86);
        org.joda.time.Chronology chronology88 = dateTime87.getChronology();
        int int89 = property84.compareTo((org.joda.time.ReadableInstant) dateTime87);
        boolean boolean90 = dateTime76.isAfter((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTimeZone dateTimeZone91 = dateTime76.getZone();
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone93 = null;
        org.joda.time.DateTime dateTime94 = localDateTime92.toDateTime(dateTimeZone93);
        org.joda.time.Chronology chronology95 = dateTime94.getChronology();
        int int96 = dateTime76.compareTo((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.Chronology chronology97 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime94);
        boolean boolean98 = interval42.isAfter((org.joda.time.ReadableInstant) dateTime94);
        int int99 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime94);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35072450L + "'", long17 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2066 + "'", int23 == 2066);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-38068L) + "'", long36 == (-38068L));
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-38068L) + "'", long45 == (-38068L));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2066 + "'", int51 == 2066);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2066 + "'", int67 == 2066);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2066 + "'", int83 == 2066);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test00974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00974");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMillis(2022);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 70150840, chronology12);
        org.joda.time.DurationField durationField17 = chronology12.minutes();
        java.lang.String str18 = chronology12.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 2022, chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
    }

    @Test
    public void test00975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00975");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        int int3 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.era();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readableDuration5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withDurationAdded(readableDuration7, (int) 'a');
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusMinutes((int) 'x');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes(16);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test00976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00976");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localDateTime0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone5);
        int int7 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withEra((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField18 = localDateTime16.getField((int) (short) 1);
        int int19 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        int int25 = property20.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime(dateTimeZone27);
        boolean boolean29 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField34 = localDateTime32.getField((int) (short) 1);
        int int35 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        int int41 = property36.compareTo((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = dateTime28.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime43 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Instant instant44 = dateTime39.toInstant();
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = instant44.isEqual(readableInstant45);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2066 + "'", int19 == 2066);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2066 + "'", int35 == 2066);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test00977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00977");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("261");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setVariant("2074-03-24T19:31:26.320");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2074-03-24T19:31:26.320 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test00978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00978");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField11 = localDateTime9.getField((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        long long16 = chronology3.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfYear();
        int int18 = property17.get();
        boolean boolean19 = property17.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime21 = property17.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField22 = property17.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3061065562000L + "'", long16 == 3061065562000L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 365 + "'", int18 == 365);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test00979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00979");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("jpn");
        java.lang.String str2 = languageRange1.getRange();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology6.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.era();
        boolean boolean13 = languageRange1.equals((java.lang.Object) dateTimeField12);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "jpn" + "'", str2, "jpn");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test00980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00980");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:44:42.884_2074-03-24T19:29:09.320_zh-CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
    }

    @Test
    public void test00981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00981");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test00982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00982");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.Chronology chronology6 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.months();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test00983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00983");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2162-03-24T19:31:32.275");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2162-03-24t19:31:32.275");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00984");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.Interval interval3 = readableInterval1.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, chronology7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        boolean boolean13 = localDateTime8.equals((java.lang.Object) chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 57, chronology12);
        boolean boolean16 = periodType4.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType17 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.Period period19 = readableInterval1.toPeriod(periodType18);
        java.lang.String str20 = readableInterval1.toString();
        org.joda.time.DateTime dateTime21 = readableInterval1.getEnd();
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology22.add(1644572709617L, 1644572704293L, 35126347);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572704293 * 35126347");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-38068L) + "'", long2 == (-38068L));
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969-12-31T23:59:21.932Z/1969-12-31T23:59:21.932Z" + "'", str20, "1969-12-31T23:59:21.932Z/1969-12-31T23:59:21.932Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test00985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00985");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.era();
        org.joda.time.Chronology chronology7 = localDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        long long11 = dateTimeZone8.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField16 = localDateTime14.getField((int) (short) 1);
        int int17 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        int int23 = property18.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime25 = property18.addWrapFieldToCopy(35072450);
        boolean boolean26 = dateTimeZone8.isLocalDateTimeGap(localDateTime25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        boolean boolean29 = dateTimeZone8.isStandardOffset(1644572672009L);
        org.joda.time.DateTime dateTime30 = localDateTime0.toDateTime(dateTimeZone8);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = dateTimeZone8.getName(97L, locale32);
        long long36 = dateTimeZone8.convertUTCToLocal((long) 34);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35072450L + "'", long11 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2066 + "'", int17 == 2066);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh" + "'", str33, "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 34L + "'", long36 == 34L);
    }

    @Test
    public void test00986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00986");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 100, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField7 = localDateTime5.getField((int) (short) 1);
        int int8 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.millisOfSecond();
        int int10 = localDateTime5.getWeekOfWeekyear();
        boolean boolean11 = localDateTime2.equals((java.lang.Object) int10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMonths((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType19 = localDateTime13.getFieldType(35081087);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35081087");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2066 + "'", int8 == 2066);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test00987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00987");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology4.months();
        org.joda.time.DurationField durationField10 = chronology4.weeks();
        org.joda.time.DurationField durationField11 = chronology4.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.weekyear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test00988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00988");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField9 = localDateTime7.getField((int) (short) 1);
        int int10 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        int int16 = property11.compareTo((org.joda.time.ReadableInstant) dateTime14);
        java.lang.String str17 = property11.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = property11.getFieldType();
        org.joda.time.LocalDateTime.Property property19 = localDateTime2.property(dateTimeFieldType18);
        java.lang.String str20 = property19.getAsText();
        java.lang.String str21 = property19.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2066 + "'", int10 == 2066);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "932" + "'", str17, "932");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "932" + "'", str20, "932");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "932" + "'", str21, "932");
    }

    @Test
    public void test00989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00989");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str5 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Set<java.lang.String> strSet6 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet11);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Collection<java.util.Locale> localeCollection15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, localeCollection15);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList16, filteringMode17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
    }

    @Test
    public void test00990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00990");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField((int) (short) 1);
        int int15 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        int int21 = property16.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(dateTimeZone23);
        boolean boolean25 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField30 = localDateTime28.getField((int) (short) 1);
        int int31 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        int int37 = property32.compareTo((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime24.getZone();
        int int41 = dateTimeZone39.getOffsetFromLocal((long) 16);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.Chronology chronology43 = chronology3.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfYear();
        org.joda.time.DurationField durationField45 = chronology43.halfdays();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2066 + "'", int15 == 2066);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2066 + "'", int31 == 2066);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test00991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00991");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:44:33.508");
        timeZone1.setRawOffset(1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        timeZone1.setRawOffset((-1));
        int int7 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test00992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00992");
        java.text.DateFormatSymbols dateFormatSymbols0 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs();
        dateFormatSymbols0.setMonths(strArray1);
        java.text.DateFormatSymbols dateFormatSymbols3 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray4 = java.util.TimeZone.getAvailableIDs();
        dateFormatSymbols3.setMonths(strArray4);
        dateFormatSymbols0.setEras(strArray4);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.text.DateFormatSymbols dateFormatSymbols10 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale7);
        java.text.DateFormatSymbols dateFormatSymbols11 = new java.text.DateFormatSymbols();
        java.lang.String str12 = dateFormatSymbols11.getLocalPatternChars();
        java.lang.String[] strArray17 = new java.lang.String[] { "Property[millisOfSecond]", "hi!", "2119-02-11T09:44:32.668", "ISOChronology[Etc/UTC]" };
        dateFormatSymbols11.setShortWeekdays(strArray17);
        java.text.DateFormatSymbols dateFormatSymbols19 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!", "", "hi!", "hi!", "hi!" };
        dateFormatSymbols19.setWeekdays(strArray26);
        dateFormatSymbols11.setEras(strArray26);
        java.lang.String[] strArray29 = dateFormatSymbols11.getWeekdays();
        dateFormatSymbols10.setShortMonths(strArray29);
        java.lang.String[] strArray31 = dateFormatSymbols10.getAmPmStrings();
        dateFormatSymbols0.setShortMonths(strArray31);
        java.lang.String[][] strArray33 = dateFormatSymbols0.getZoneStrings();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str12, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test00993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00993");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.Interval interval3 = readableInterval1.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, chronology7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        boolean boolean13 = localDateTime8.equals((java.lang.Object) chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 57, chronology12);
        boolean boolean16 = periodType4.equals((java.lang.Object) 57);
        org.joda.time.PeriodType periodType17 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.Period period19 = readableInterval1.toPeriod(periodType18);
        java.lang.String str20 = readableInterval1.toString();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.hours();
        org.joda.time.DurationField durationField26 = chronology24.seconds();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField31 = localDateTime29.getField((int) (short) 1);
        int int32 = localDateTime29.getWeekyear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        int int38 = property33.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime40 = property33.addWrapFieldToCopy(35072450);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withDurationAdded(readableDuration41, (int) (short) 10);
        int int45 = localDateTime40.getValue(0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = localDateTime46.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) 1, dateTimeZone51);
        int int53 = localDateTime46.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime40.withFields((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField59 = localDateTime57.getField((int) (short) 1);
        int int60 = localDateTime57.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = localDateTime57.getFieldType(0);
        int int63 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        long long65 = chronology24.set((org.joda.time.ReadablePartial) localDateTime52, (long) 2171);
        org.joda.time.DurationField durationField66 = chronology24.months();
        boolean boolean67 = readableInterval1.equals((java.lang.Object) chronology24);
        org.joda.time.DateTime dateTime68 = readableInterval1.getEnd();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getTimeZone("Japanese");
        timeZone70.setRawOffset(0);
        java.time.ZoneId zoneId73 = timeZone70.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        boolean boolean75 = readableInterval1.equals((java.lang.Object) dateTimeZone74);
        int int77 = dateTimeZone74.getOffset(3289145486199L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-38068L) + "'", long2 == (-38068L));
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1969-12-31T23:59:21.932Z/1969-12-31T23:59:21.932Z" + "'", str20, "1969-12-31T23:59:21.932Z/1969-12-31T23:59:21.932Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2066 + "'", int32 == 2066);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2066 + "'", int45 == 2066);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 66 + "'", int60 == 66);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test00994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00994");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfYear();
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 100, chronology10);
        int int12 = localDateTime11.getDayOfMonth();
        boolean boolean14 = localDateTime11.equals((java.lang.Object) false);
        long long16 = chronology8.set((org.joda.time.ReadablePartial) localDateTime11, (-62135596800000L));
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (short) 1);
        int int22 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        int int28 = property23.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime(dateTimeZone30);
        boolean boolean32 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField37 = localDateTime35.getField((int) (short) 1);
        int int38 = localDateTime35.getWeekyear();
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        int int44 = property39.compareTo((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean45 = dateTime31.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime31.getZone();
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        java.lang.String str49 = dateTimeZone46.toString();
        org.joda.time.Chronology chronology50 = chronology8.withZone(dateTimeZone46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2066 + "'", int22 == 2066);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2066 + "'", int38 == 2066);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test00995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00995");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(309, 774, 6, 431, (int) (byte) 0, 2067);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 431 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00996");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withPeriodAdded(readablePeriod4, (int) ' ');
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.monthOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField((int) (short) 1);
        int int15 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        int int21 = property16.compareTo((org.joda.time.ReadableInstant) dateTime19);
        java.lang.String str22 = property16.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property16.getFieldType();
        boolean boolean24 = localDateTime6.isSupported(dateTimeFieldType23);
        boolean boolean25 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.Chronology chronology26 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T23:59:21.932" + "'", str7, "1969-12-31T23:59:21.932");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2066 + "'", int15 == 2066);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "932" + "'", str22, "932");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test00997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00997");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField4 = localDateTime2.getField((int) (short) 1);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = property6.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime9.getZone();
        long long13 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField18 = localDateTime16.getField((int) (short) 1);
        int int19 = localDateTime16.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (short) 1);
        int int25 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        int int31 = property26.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(dateTimeZone33);
        boolean boolean35 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField40 = localDateTime38.getField((int) (short) 1);
        int int41 = localDateTime38.getWeekyear();
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        int int47 = property42.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime(dateTimeZone49);
        boolean boolean51 = dateTime45.isAfter((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(dateTimeZone56);
        int int58 = dateTime54.compareTo((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = dateTime50.isAfter((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean60 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime61 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 100, chronology63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField70 = localDateTime68.getField((int) (short) 1);
        int int71 = localDateTime68.getWeekyear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.minusMillis(2022);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withDurationAdded(readableDuration74, 67);
        boolean boolean77 = localDateTime64.isEqual((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.era();
        org.joda.time.Chronology chronology82 = localDateTime78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = chronology82.getZone();
        long long86 = dateTimeZone83.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(dateTimeZone83);
        org.joda.time.DateTime dateTime88 = localDateTime64.toDateTime(dateTimeZone83);
        org.joda.time.DateTime dateTime89 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2066 + "'", int5 == 2066);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-38068L) + "'", long13 == (-38068L));
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 66 + "'", int19 == 66);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2066 + "'", int25 == 2066);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2066 + "'", int41 == 2066);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2066 + "'", int71 == 2066);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 35072450L + "'", long86 == 35072450L);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test00998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00998");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.Interval interval3 = readableInterval1.toInterval();
        org.joda.time.Chronology chronology4 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology4);
        int int7 = localDateTime6.getWeekyear();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-38068L) + "'", long2 == (-38068L));
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
    }

    @Test
    public void test00999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test00999");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.era();
        org.joda.time.Chronology chronology4 = localDateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology4.getZone();
        long long8 = dateTimeZone5.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (short) 1);
        int int14 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = property15.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime22 = property15.addWrapFieldToCopy(35072450);
        boolean boolean23 = dateTimeZone5.isLocalDateTimeGap(localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusMinutes(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withMinuteOfHour(70289179);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70289179 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35072450L + "'", long8 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2066 + "'", int14 == 2066);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test01000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test01000");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusYears(2171);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        org.joda.time.Chronology chronology15 = localDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        long long19 = dateTimeZone16.adjustOffset((long) 35072450, true);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (short) 1);
        int int25 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(dateTimeZone28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        int int31 = property26.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime33 = property26.addWrapFieldToCopy(35072450);
        boolean boolean34 = dateTimeZone16.isLocalDateTimeGap(localDateTime33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        java.lang.String str41 = dateTime39.toString();
        boolean boolean43 = dateTime39.equals((java.lang.Object) false);
        org.joda.time.DateTime dateTime44 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusYears((int) 'a');
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.era();
        org.joda.time.Chronology chronology49 = localDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology49.getZone();
        long long53 = dateTimeZone50.convertLocalToUTC(52L, false);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusYears((int) 'a');
        org.joda.time.DateTimeField dateTimeField58 = localDateTime56.getField((int) (short) 1);
        int int59 = localDateTime56.getWeekyear();
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(dateTimeZone62);
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        int int65 = property60.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = localDateTime66.toDateTime(dateTimeZone67);
        boolean boolean69 = dateTime63.isAfter((org.joda.time.ReadableInstant) dateTime68);
        int int70 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 100, chronology72);
        int int74 = localDateTime73.getDayOfMonth();
        int[] intArray75 = localDateTime73.getValues();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(dateTimeZone77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.minusYears((int) (short) 0);
        int int81 = localDateTime80.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime80.plusMonths(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = localDateTime83.getFieldType(0);
        int int86 = localDateTime73.indexOf(dateTimeFieldType85);
        boolean boolean87 = dateTime68.isSupported(dateTimeFieldType85);
        boolean boolean88 = dateTime44.isBefore((org.joda.time.ReadableInstant) dateTime68);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = property10.getDifference((org.joda.time.ReadableInstant) dateTime44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 4087152000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35072450L + "'", long19 == 35072450L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2066 + "'", int25 == 2066);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1969-12-31T23:59:21.932Z" + "'", str41, "1969-12-31T23:59:21.932Z");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 52L + "'", long53 == 52L);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2066 + "'", int59 == 2066);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 19 + "'", int81 == 19);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }
}

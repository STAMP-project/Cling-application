import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        java.util.Locale locale2 = new java.util.Locale("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=60,endIndex=0]", "chinese (china)");
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.fieldposition[field=0,attribute=java.text.numberformat$field(exponent sign),beginindex=60,endindex=0]_CHINESE (CHINA)");
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category1, locale6);
        java.lang.String str8 = locale0.getDisplayLanguage(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.util.Set<java.lang.Character> charSet10 = locale6.getExtensionKeys();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.lang.String str13 = locale11.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale16.getDisplayName(locale19);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale16.getDisplayLanguage(locale25);
        java.util.Locale locale31 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.lang.String str32 = locale25.getDisplayVariant(locale31);
        java.lang.String str33 = locale11.getDisplayLanguage(locale31);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale34.getScript();
        java.lang.String str36 = locale34.getDisplayName();
        java.util.Locale locale37 = locale34.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale38);
        java.lang.String str40 = locale38.getISO3Language();
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault(category41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale43);
        java.util.Locale.setDefault(category41, locale43);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale49);
        java.lang.String str51 = locale49.getDisplayCountry();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getIntegerInstance(locale49);
        java.lang.String str53 = locale46.getDisplayCountry(locale49);
        java.lang.String str54 = locale46.getISO3Language();
        java.lang.String str55 = locale46.getDisplayName();
        java.util.Locale.setDefault(category41, locale46);
        java.lang.String str57 = locale38.getDisplayLanguage(locale46);
        java.lang.String str58 = locale37.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale37);
        java.lang.String str60 = locale31.getDisplayCountry(locale37);
        java.lang.String str61 = locale6.getDisplayScript(locale37);
        java.util.Locale locale62 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str64 = locale62.getISO3Language();
        java.lang.String str65 = locale62.getISO3Country();
        java.lang.String str66 = locale62.getDisplayScript();
        java.lang.String str67 = locale37.getDisplayScript(locale62);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Japanese (Japan)" + "'", str22, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str28, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertEquals(locale31.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Korean" + "'", str33, "Korean");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u97d3\u56fd\u8a9e" + "'", str36, "\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "France" + "'", str53, "France");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fra" + "'", str54, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)" + "'", str55, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30d5\u30e9\u30f3\u30b9)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Korean" + "'", str58, "Korean");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)" + "'", str60, "ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zho" + "'", str64, "zho");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "TWN" + "'", str65, "TWN");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.abs();
        int int26 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction12.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(fraction27);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.String str9 = numberFormat7.format((double) 1.0f);
        numberFormat7.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat7.setParseIntegerOnly(false);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.util.Locale.setDefault(category16, locale18);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category16, locale21);
        java.lang.String str23 = locale15.getDisplayLanguage(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getCurrencyInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction32 = properFractionFormat28.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition31);
        java.lang.Object obj33 = fractionFormat24.parseObject("214,748,364,700%", parsePosition31);
        java.lang.String str34 = parsePosition31.toString();
        java.lang.Object obj35 = numberFormat7.parseObject("600", parsePosition31);
        java.lang.String str36 = parsePosition31.toString();
        parsePosition31.setIndex((int) (short) -14400);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100%" + "'", str9, "100%");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "anglais" + "'", str23, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNull(fraction32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str34, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str36, "java.text.ParsePosition[index=1,errorIndex=3]");
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = fractionFormat5.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat8 = fractionFormat5.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.lang.String str15 = locale9.getDisplayName(locale12);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale9.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale9);
        fractionFormat5.setNumeratorFormat(numberFormat22);
        properFractionFormat2.setWholeFormat(numberFormat22);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getCurrencyInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj32 = properFractionFormat28.parseObject("", parsePosition31);
        parsePosition31.setErrorIndex((-1));
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        numberFormat39.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str43 = numberFormat39.format((double) 0.0f);
        int int44 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getInstance(locale45);
        java.util.Currency currency48 = numberFormat47.getCurrency();
        numberFormat47.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat51 = null;
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        numberFormat56.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean59 = numberFormat56.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat51, numberFormat56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat61 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39, numberFormat47, numberFormat51);
        boolean boolean62 = parsePosition31.equals((java.lang.Object) properFractionFormat61);
        org.apache.commons.math.fraction.Fraction fraction63 = properFractionFormat2.parse("", parsePosition31);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100 0 / 1" + "'", str7, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese (Japan)" + "'", str15, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str21, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0%" + "'", str43, "0%");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2147483647 + "'", int44 == 2147483647);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "TWD");
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(fraction63);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (-3200L));
        int int2 = fraction1.intValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3200) + "'", int2 == (-3200));
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale5.getCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale5);
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale16);
        java.util.Currency currency19 = numberFormat18.getCurrency();
        numberFormat18.setMinimumIntegerDigits(1);
        numberFormat18.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat18.parseObject("Japan", parsePosition26);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException31 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str32 = fractionConversionException31.getPattern();
        java.lang.Throwable[] throwableArray33 = fractionConversionException31.getSuppressed();
        java.lang.Object[] objArray34 = fractionConversionException31.getArguments();
        boolean boolean35 = parsePosition26.equals((java.lang.Object) objArray34);
        int int36 = parsePosition26.getIndex();
        int int37 = parsePosition26.getIndex();
        java.lang.Object obj38 = fractionFormat14.parseObject("\ud55c\uad6d\uc5b4", parsePosition26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getWholeFormat();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        numberFormat42.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40, numberFormat42);
        java.text.NumberFormat numberFormat47 = fractionFormat46.getNumeratorFormat();
        boolean boolean48 = parsePosition26.equals((java.lang.Object) fractionFormat46);
        java.util.Locale.Category category49 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale50 = java.util.Locale.getDefault(category49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale51);
        java.util.Locale.setDefault(category49, locale51);
        java.util.Locale locale54 = java.util.Locale.getDefault(category49);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.util.Locale.setDefault(category55, locale56);
        java.util.Locale.setDefault(category49, locale56);
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.lang.String str61 = locale60.getISO3Country();
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getIntegerInstance(locale60);
        java.util.Locale.setDefault(category49, locale60);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getNumberInstance(locale60);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale60);
        fractionFormat46.setNumeratorFormat(numberFormat65);
        boolean boolean67 = numberFormat65.isParseIntegerOnly();
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) 'a');
        java.lang.String str71 = parsePosition70.toString();
        java.util.Locale.Builder builder72 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder72.clearExtensions();
        java.util.Locale.Builder builder74 = builder72.clear();
        java.util.Locale.Builder builder75 = builder74.clear();
        boolean boolean76 = parsePosition70.equals((java.lang.Object) builder75);
        java.lang.Object obj77 = numberFormat65.parseObject("\u65e5\u672c,-1 / 100)", parsePosition70);
        java.lang.String str78 = parsePosition70.toString();
        java.lang.Object obj79 = numberFormat11.parseObject("cinese_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)", parsePosition70);
        java.lang.String str80 = parsePosition70.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "TWD");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str32, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + category49 + "' != '" + java.util.Locale.Category.FORMAT + "'", category49.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category55.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str71, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str78, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str80, "java.text.ParsePosition[index=97,errorIndex=97]");
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Japanese (Japan)", 0.6185567010309279d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=japanese (japan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        int int3 = fieldPosition1.getField();
        int int4 = fieldPosition1.getEndIndex();
        java.text.Format.Field field5 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(field5);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(GROUPING SEPARATOR),BEGININDEX=0,ENDINDEX=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(grouping separator),beginindex=0,endindex=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        java.text.ParseException parseException2 = new java.text.ParseException("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 10 to fraction after 120 iterations", 10000);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        numberFormat0.setGroupingUsed(true);
        int int4 = numberFormat0.getMaximumIntegerDigits();
        int int5 = numberFormat0.getMaximumFractionDigits();
        java.lang.String str7 = numberFormat0.format(60.0d);
        numberFormat0.setMaximumFractionDigits(97);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6.000%" + "'", str7, "6.000%");
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("de");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("kor");
        java.util.Locale locale7 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strCollection16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap18);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strSet28);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags(languageRangeList23, (java.util.Collection<java.lang.String>) strSet28, filteringMode30);
        java.lang.String str32 = java.util.Locale.lookupTag(languageRangeList21, (java.util.Collection<java.lang.String>) strList31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList21, strMap33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList42, strMap43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList50);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags(languageRangeList42, (java.util.Collection<java.lang.String>) strList50, filteringMode53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet59);
        java.util.Collection<java.lang.String> strCollection61 = null;
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, strCollection61);
        java.lang.String str63 = java.util.Locale.lookupTag(languageRangeList42, strCollection61);
        java.util.Collection<java.util.Locale> localeCollection64 = null;
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter(languageRangeList42, localeCollection64, filteringMode65);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter(languageRangeList21, (java.util.Collection<java.util.Locale>) localeList66);
        java.util.Locale locale68 = java.util.Locale.lookup(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale69 = java.util.Locale.lookup(languageRangeList3, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale70 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap71);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertEquals(locale7.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode30.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode53.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNull(locale68);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNull(locale70);
        org.junit.Assert.assertNotNull(languageRangeList72);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale14.getDisplayVariant(locale16);
        java.lang.String str21 = locale16.toLanguageTag();
        java.lang.String str22 = locale16.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale16);
        java.lang.String str24 = locale16.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japan" + "'", str18, "Japan");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "und" + "'", str21, "und");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("US");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = locale26.getDisplayScript(locale28);
        java.util.Set<java.lang.String> strSet31 = locale28.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet32 = locale28.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList34, (java.util.Collection<java.lang.String>) strSet39, filteringMode41);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet32, filteringMode41);
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap45 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strList55);
        java.util.Locale.FilteringMode filteringMode58 = null;
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList55, filteringMode58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale locale63 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strSet64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, strMap66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList67, strMap68);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.lang.String>) strList75);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags(languageRangeList67, (java.util.Collection<java.lang.String>) strList75, filteringMode78);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale locale83 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.lang.String>) strSet84);
        java.util.Collection<java.lang.String> strCollection86 = null;
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, strCollection86);
        java.lang.String str88 = java.util.Locale.lookupTag(languageRangeList67, strCollection86);
        java.util.Collection<java.util.Locale> localeCollection89 = null;
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList67, localeCollection89, filteringMode90);
        java.util.Locale locale92 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList46, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Locale locale94 = java.util.Locale.lookup(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList91);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode41.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode78.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(locale83);
// flaky:         org.junit.Assert.assertEquals(locale83.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + filteringMode90 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode90.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNull(locale92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNull(locale94);
        org.junit.Assert.assertNotNull(localeList95);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 100, 1);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        boolean boolean5 = fraction3.equals((java.lang.Object) 98.99174f);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        java.text.Format.Field field4 = fieldPosition2.getFieldAttribute();
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition(field4, 599);
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition(field4, (int) (short) 32);
        fieldPosition8.setBeginIndex((int) (byte) -120);
        fieldPosition8.setBeginIndex((int) (byte) -100);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(field4);
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) 'a');
        java.lang.String str12 = parsePosition11.toString();
        java.lang.String str13 = parsePosition11.toString();
        parsePosition11.setErrorIndex(3);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat8.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition11);
        java.lang.Object obj17 = properFractionFormat8.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str12, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str13, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.lang.String str10 = locale7.getISO3Country();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale7);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        int int24 = numberFormat16.getMaximumFractionDigits();
        java.lang.Object obj25 = numberFormat16.clone();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        numberFormat27.setMaximumFractionDigits(100);
        numberFormat27.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str34 = numberFormat27.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11, numberFormat16, numberFormat27);
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field37);
        java.lang.String str39 = fieldPosition38.toString();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = locale40.getDisplayName(locale41);
        boolean boolean44 = fieldPosition38.equals((java.lang.Object) locale41);
        fieldPosition38.setEndIndex((int) '#');
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        boolean boolean54 = fieldPosition38.equals((java.lang.Object) parsePosition52);
        int int55 = parsePosition52.getIndex();
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat35.parse("hi!", parsePosition52);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58, numberFormat60);
        boolean boolean62 = numberFormat60.isGroupingUsed();
        boolean boolean63 = numberFormat60.isGroupingUsed();
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj67 = numberFormat60.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition66);
        org.apache.commons.math.fraction.FractionFormat fractionFormat68 = new org.apache.commons.math.fraction.FractionFormat(numberFormat60);
        java.text.NumberFormat numberFormat69 = fractionFormat68.getNumeratorFormat();
        properFractionFormat35.setWholeFormat(numberFormat69);
        properFractionFormat2.setNumeratorFormat(numberFormat69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction73 = properFractionFormat2.parse("FRANZ\366SISCH (FRANKREICH)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"FRANZo?SISCH (FRANKREICH)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100%" + "'", str34, "100%");
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str39, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese (Taiwan)" + "'", str43, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(numberFormat69);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getScript();
        java.util.Locale locale9 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str10 = locale4.getDisplayScript(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        java.lang.String str12 = locale0.getDisplayCountry(locale9);
        java.lang.String str13 = locale0.toLanguageTag();
        java.lang.String str14 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale9.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr-CA" + "'", str13, "fr-CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = locale7.stripExtensions();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        java.util.Locale locale10 = locale8.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = locale8.getUnicodeLocaleType("en-CA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: en-CA");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale0.getDisplayVariant(locale7);
        java.lang.String str12 = locale7.getDisplayScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(fractionFormat13);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale4);
        java.lang.String str7 = locale4.getDisplayScript();
        java.lang.String str8 = locale0.getDisplayVariant(locale4);
        java.lang.String str9 = locale0.getDisplayVariant();
        java.lang.String str10 = locale0.getScript();
        java.lang.String str11 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TW" + "'", str11, "TW");
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        int int18 = fraction12.intValue();
        float float19 = fraction12.floatValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.divide(fraction23);
        org.apache.commons.math.fraction.Fraction fraction28 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str29 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction28);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction20.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction32 = new org.apache.commons.math.fraction.Fraction((double) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        double double41 = fraction39.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction39.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction36.divide(fraction39);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction32.add(fraction36);
        double double49 = fraction48.doubleValue();
        double double50 = fraction48.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction20.multiply(fraction48);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.016666668f + "'", float19 == 0.016666668f);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1 / 100" + "'", str29, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.008333333333333333d) + "'", double41 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(fraction51);
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        boolean boolean19 = numberFormat2.isParseIntegerOnly();
        numberFormat2.setMinimumFractionDigits(120);
        int int22 = numberFormat2.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        numberFormat2.setMinimumIntegerDigits((int) (byte) 0);
        int int8 = numberFormat2.getMaximumFractionDigits();
        java.util.Currency currency9 = numberFormat2.getCurrency();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet16 = locale12.getUnicodeLocaleKeys();
        java.lang.String str17 = locale12.toLanguageTag();
        java.lang.String str18 = locale12.getDisplayLanguage();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.AttributedCharacterIterator attributedCharacterIterator24 = numberFormat21.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj25 = numberFormat21.clone();
        numberFormat21.setMaximumFractionDigits(2147483647);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj37 = numberFormat32.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition36);
        java.lang.String str38 = parsePosition36.toString();
        java.lang.Number number39 = numberFormat21.parse("\ud55c\uad6d\uc5b4", parsePosition36);
        numberFormat21.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat19, numberFormat21);
        java.text.NumberFormat numberFormat43 = properFractionFormat42.getWholeFormat();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale46.getISO3Language();
        java.lang.String str48 = locale44.getDisplayScript(locale46);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet50 = locale46.getUnicodeLocaleKeys();
        java.lang.String str51 = locale46.toLanguageTag();
        java.lang.String str52 = locale46.getDisplayLanguage();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance(locale46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat53);
        int int55 = numberFormat53.getMaximumIntegerDigits();
        numberFormat53.setParseIntegerOnly(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "TWD");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko" + "'", str17, "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str18, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(attributedCharacterIterator24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str38, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number39);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "kor" + "'", str47, "kor");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ko" + "'", str51, "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str52, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (short) -32, (int) (byte) -1);
        double double3 = fraction2.doubleValue();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 32.0d + "'", double3 == 32.0d);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        java.util.Locale locale3 = new java.util.Locale("", "java.text.parseexception: cn", "30,000%");
        java.lang.String str4 = locale3.getScript();
        org.junit.Assert.assertEquals(locale3.toString(), "_JAVA.TEXT.PARSEEXCEPTION: CN_30,000%");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        boolean boolean13 = numberFormat11.isGroupingUsed();
        boolean boolean14 = numberFormat11.isGroupingUsed();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat20 = fractionFormat19.getNumeratorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat20);
        java.text.ParsePosition parsePosition23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number24 = numberFormat20.parse("100% / 120", parsePosition23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(119, 60);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str7 = locale4.getISO3Country();
        java.lang.String str8 = locale0.getDisplayScript(locale4);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Locale locale12 = locale9.stripExtensions();
        java.lang.String str13 = locale0.getDisplayVariant(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        numberFormat14.setMinimumIntegerDigits((int) (short) 97);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str3, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str6, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TWN" + "'", str7, "TWN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        boolean boolean8 = numberFormat7.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat13.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition17);
        properFractionFormat9.setNumeratorFormat(numberFormat13);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str27 = fractionFormat25.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat28 = fractionFormat25.getNumeratorFormat();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = locale29.getDisplayName(locale32);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = locale36.getDisplayScript(locale38);
        java.lang.String str41 = locale29.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale29);
        fractionFormat25.setNumeratorFormat(numberFormat42);
        properFractionFormat22.setWholeFormat(numberFormat42);
        properFractionFormat9.setWholeFormat(numberFormat42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        boolean boolean53 = numberFormat51.equals((java.lang.Object) strArray52);
        java.lang.String str55 = numberFormat51.format((double) (byte) -1);
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayCountry(locale57);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale56);
        numberFormat60.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42, numberFormat51, numberFormat60);
        java.text.NumberFormat.Field field65 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field65);
        java.lang.String str67 = fieldPosition66.toString();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.lang.String str70 = locale69.getDisplayScript();
        java.lang.String str71 = locale68.getDisplayName(locale69);
        boolean boolean72 = fieldPosition66.equals((java.lang.Object) locale69);
        fieldPosition66.setEndIndex((int) '#');
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getCurrencyInstance(locale75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction81 = properFractionFormat77.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition80);
        boolean boolean82 = fieldPosition66.equals((java.lang.Object) parsePosition80);
        int int83 = parsePosition80.getIndex();
        org.apache.commons.math.fraction.Fraction fraction84 = properFractionFormat63.parse("java.text.NumberFormat$Field(exponent symbol)", parsePosition80);
        int int85 = parsePosition80.getIndex();
        java.lang.Object obj86 = numberFormat1.parseObject("2,857", parsePosition80);
        int int87 = parsePosition80.getErrorIndex();
        int int88 = parsePosition80.getErrorIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100 0 / 1" + "'", str27, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Japanese (Japan)" + "'", str35, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "kor" + "'", str39, "kor");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc77c\ubcf8\uc5b4" + "'", str41, "\uc77c\ubcf8\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-100%" + "'", str55, "-100%");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japan" + "'", str59, "Japan");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str67, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (Taiwan)" + "'", str71, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNull(fraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNull(fraction84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (short) -10, (int) (short) 32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -10 to fraction (11/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.lang.String str4 = locale0.getDisplayVariant();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean6 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.Object obj7 = numberFormat5.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("cinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=cinese(taiwan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        java.util.Locale locale15 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder5.setExtension(' ', "chinois");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        boolean boolean29 = numberFormat28.isGroupingUsed();
        properFractionFormat26.setWholeFormat(numberFormat28);
        java.text.NumberFormat numberFormat31 = properFractionFormat26.getWholeFormat();
        java.lang.String str33 = numberFormat31.format((double) 1.0f);
        numberFormat31.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat31.setParseIntegerOnly(false);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale42);
        java.util.Locale.setDefault(category40, locale42);
        java.util.Locale locale45 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category40, locale45);
        java.lang.String str47 = locale39.getDisplayLanguage(locale45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getCurrencyInstance(locale50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat52.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition55);
        java.lang.Object obj57 = fractionFormat48.parseObject("214,748,364,700%", parsePosition55);
        java.lang.String str58 = parsePosition55.toString();
        java.lang.Object obj59 = numberFormat31.parseObject("600", parsePosition55);
        java.lang.String str60 = parsePosition55.toString();
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat7.parse("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 10 to fraction after 0 iterations", parsePosition55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction63 = properFractionFormat7.parse("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 0.008 to fraction after -120 iterations");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"org.apache.commons.math.fraction.FractionConversionException: Unable to convert 0.008 to fraction after -120 iterations\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100%" + "'", str33, "100%");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "anglais" + "'", str47, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str58, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str60, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(fraction61);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getNumeratorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.lang.Object obj18 = properFractionFormat17.clone();
        java.text.NumberFormat numberFormat19 = properFractionFormat17.getWholeFormat();
        int int20 = numberFormat19.getMaximumIntegerDigits();
        java.lang.Object obj21 = numberFormat19.clone();
        properFractionFormat3.setNumeratorFormat(numberFormat19);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        java.util.Currency currency32 = numberFormat30.getCurrency();
        numberFormat27.setCurrency(currency32);
        java.util.Currency currency34 = numberFormat27.getCurrency();
        int int35 = numberFormat27.getMaximumFractionDigits();
        java.lang.Object obj36 = numberFormat27.clone();
        numberFormat27.setMinimumFractionDigits((int) (short) 1);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = locale39.getScript();
        java.util.Locale locale44 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str45 = locale39.getDisplayScript(locale44);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale44);
        int int47 = numberFormat46.getMinimumIntegerDigits();
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        int int53 = numberFormat52.getMaximumIntegerDigits();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        boolean boolean56 = numberFormat55.isGroupingUsed();
        java.util.Currency currency57 = numberFormat55.getCurrency();
        numberFormat52.setCurrency(currency57);
        java.lang.Object obj59 = numberFormat52.clone();
        boolean boolean60 = numberFormat52.isGroupingUsed();
        int int61 = numberFormat52.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat46, numberFormat52);
        numberFormat27.setMinimumIntegerDigits(120);
        numberFormat27.setMinimumIntegerDigits((int) (byte) -1);
        properFractionFormat3.setDenominatorFormat(numberFormat27);
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getPercentInstance(locale68);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat70 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat69);
        java.text.AttributedCharacterIterator attributedCharacterIterator72 = numberFormat69.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj73 = numberFormat69.clone();
        numberFormat69.setMaximumFractionDigits(2147483647);
        numberFormat69.setParseIntegerOnly(true);
        int int78 = numberFormat69.getMaximumFractionDigits();
        properFractionFormat3.setNumeratorFormat(numberFormat69);
        int int80 = numberFormat69.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals(locale44.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(attributedCharacterIterator72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale locale10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setScript("2,147,483,647 / 1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2,147,483,647 / 1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        long long25 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str29 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction28);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction24.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.reciprocal();
        int int32 = fraction31.intValue();
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        long long43 = fraction41.longValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction37.multiply(fraction41);
        double double45 = fraction44.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction44.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        long long61 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.abs();
        long long73 = fraction71.longValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction67.multiply(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction59.subtract(fraction74);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction74.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.abs();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.negate();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction49.subtract(fraction78);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction44.add(fraction79);
        org.apache.commons.math.fraction.Fraction fraction81 = fraction31.subtract(fraction80);
        java.util.Locale locale85 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getPercentInstance(locale85);
        int int87 = numberFormat86.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat88 = new org.apache.commons.math.fraction.FractionFormat(numberFormat86);
        numberFormat86.setParseIntegerOnly(false);
        numberFormat86.setMaximumFractionDigits(52);
        numberFormat86.setGroupingUsed(false);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = fraction31.compareTo((java.lang.Object) numberFormat86);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 120L + "'", long25 == 120L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0 / 1" + "'", str29, "0 / 1");
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 6.944444444444444E-5d + "'", double45 == 6.944444444444444E-5d);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertEquals(locale85.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2147483647 + "'", int87 == 2147483647);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException(9.313225750491594E-10d, 0L, (long) (short) 10000);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        java.util.Locale locale1 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        numberFormat2.setMinimumIntegerDigits((int) (byte) 1);
        numberFormat2.setMinimumIntegerDigits((int) (short) 10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.text.NumberFormat numberFormat14 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.util.Set<java.lang.Character> charSet17 = locale15.getExtensionKeys();
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale15.getDisplayVariant(locale18);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale15);
        numberFormat21.setMinimumIntegerDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat14, numberFormat21);
        org.junit.Assert.assertEquals(locale1.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        java.text.ParseException parseException2 = new java.text.ParseException("1.0", 1);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        double double25 = fraction24.doubleValue();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale29 = locale26.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        java.lang.String str32 = locale29.getDisplayName(locale30);
        boolean boolean33 = fraction24.equals((java.lang.Object) locale29);
        java.lang.String str34 = locale29.getVariant();
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale29.getDisplayVariant(locale35);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayCountry();
        java.lang.String str40 = locale38.toLanguageTag();
        java.lang.String str41 = locale29.getDisplayVariant(locale38);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 120.0d + "'", double25 == 120.0d);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str32, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "und" + "'", str40, "und");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(numberFormat42);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        long long9 = fraction7.longValue();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction4.subtract(fraction7);
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction10.add(fraction17);
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction10);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale21.getISO3Language();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale21);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction27.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        long long59 = fraction57.longValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction53.multiply(fraction57);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction45.subtract(fraction60);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction60.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction36.add(fraction62);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction62.abs();
        java.lang.String str66 = numberFormat24.format((java.lang.Object) fraction65);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction10.subtract(fraction65);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = new org.apache.commons.math.fraction.Fraction((double) 117, (double) 13, 9);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction65.divide(fraction72);
        java.lang.String str74 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction73);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 / 60" + "'", str20, "1 / 60");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "14,400" + "'", str66, "14,400");
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1,600 / 13" + "'", str74, "1,600 / 13");
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        java.text.ParseException parseException2 = new java.text.ParseException("zho (chinese (taiwan),overflow trying to convert {0} to fraction ({1}/{2})) (FRA,java.text.NumberFormat$Field(exponent symbol))", 20);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field3);
        java.text.Format.Field field18 = fieldPosition17.getFieldAttribute();
        int int19 = fieldPosition17.getEndIndex();
        java.text.Format.Field field20 = fieldPosition17.getFieldAttribute();
        fieldPosition17.setBeginIndex((int) 'u');
        org.apache.commons.math.fraction.Fraction fraction25 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.reciprocal();
        int int27 = fraction26.getNumerator();
        boolean boolean28 = fieldPosition17.equals((java.lang.Object) int27);
        java.lang.String str29 = fieldPosition17.toString();
        java.text.Format.Field field30 = fieldPosition17.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-100) + "'", int27 == (-100));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=117,endIndex=0]" + "'", str29, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=117,endIndex=0]");
        org.junit.Assert.assertNotNull(field30);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder6 = builder4.setVariant("");
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder11 = builder4.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale14 = builder12.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese" + "'", str8, "Chinese");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-TW" + "'", str9, "zh-TW");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        int int14 = numberFormat12.getMaximumFractionDigits();
        boolean boolean15 = numberFormat5.equals((java.lang.Object) int14);
        java.lang.Object obj16 = null;
        java.lang.StringBuffer stringBuffer17 = null;
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field18);
        int int20 = fieldPosition19.getBeginIndex();
        int int21 = fieldPosition19.getField();
        java.text.Format.Field field22 = fieldPosition19.getFieldAttribute();
        fieldPosition19.setEndIndex(51);
        java.text.Format.Field field25 = fieldPosition19.getFieldAttribute();
        fieldPosition19.setBeginIndex((-100));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer28 = numberFormat5.format(obj16, stringBuffer17, fieldPosition19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertNotNull(field25);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.String str9 = numberFormat7.format((double) 1.0f);
        numberFormat7.setMaximumIntegerDigits((int) (byte) 100);
        int int12 = numberFormat7.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale13);
        java.util.Currency currency16 = numberFormat15.getCurrency();
        numberFormat15.setMinimumIntegerDigits(1);
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        int int24 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        java.util.Currency currency28 = numberFormat26.getCurrency();
        numberFormat23.setCurrency(currency28);
        java.util.Currency currency30 = numberFormat23.getCurrency();
        numberFormat15.setCurrency(currency30);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.util.Locale locale40 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        int int42 = numberFormat41.getMaximumIntegerDigits();
        fractionFormat36.setDenominatorFormat(numberFormat41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat41);
        numberFormat15.setGroupingUsed(true);
        int int47 = numberFormat15.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat15);
        numberFormat7.setMaximumIntegerDigits((int) (short) 0);
        boolean boolean51 = numberFormat7.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100%" + "'", str9, "100%");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "TWD");
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertEquals(locale40.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 10);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, 5);
        java.lang.String str6 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str6, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition13);
        java.text.NumberFormat numberFormat26 = fractionFormat1.getNumeratorFormat();
        int int27 = numberFormat26.getMaximumIntegerDigits();
        numberFormat26.setMinimumIntegerDigits((int) (byte) -119);
        numberFormat26.setMinimumFractionDigits(2147483647);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.util.Set<java.lang.Character> charSet34 = locale32.getExtensionKeys();
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale32.getDisplayVariant(locale35);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance(locale41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42, numberFormat44);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj49 = numberFormat44.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition48);
        java.lang.String str50 = parsePosition48.toString();
        boolean boolean52 = parsePosition48.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat39.parse("java.text.ParseException: zh_TW", parsePosition48);
        java.text.NumberFormat numberFormat54 = properFractionFormat39.getDenominatorFormat();
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getInstance(locale55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat56, numberFormat58);
        boolean boolean60 = numberFormat58.isGroupingUsed();
        java.lang.String str62 = numberFormat58.format((double) 100);
        java.lang.String str64 = numberFormat58.format((double) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54, numberFormat58);
        int int66 = numberFormat58.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode67 = numberFormat58.getRoundingMode();
        numberFormat26.setRoundingMode(roundingMode67);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str50, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "10,000%" + "'", str62, "10,000%");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1,000%" + "'", str64, "1,000%");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode67 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode67.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) 'a');
        java.lang.String str8 = parsePosition7.toString();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = parsePosition7.equals((java.lang.Object) builder12);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale19 = java.util.Locale.getDefault(category14);
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean22 = parsePosition7.equals((java.lang.Object) locale19);
        java.lang.String str23 = locale1.getDisplayScript(locale19);
        java.util.Set<java.lang.Character> charSet24 = locale1.getExtensionKeys();
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale30 = java.util.Locale.getDefault(category25);
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale.setDefault(category25, locale32);
        java.util.Locale locale39 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category25, locale39);
        java.util.Locale locale42 = java.util.Locale.getDefault(category25);
        java.util.Locale locale43 = java.util.Locale.getDefault(category25);
        java.util.Locale locale44 = java.util.Locale.getDefault(category25);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale44);
        java.lang.String str46 = locale1.getDisplayCountry(locale44);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str8, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category31.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals(locale39.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Japanese", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        java.text.NumberFormat numberFormat0 = null;
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale1);
        java.util.Currency currency4 = numberFormat3.getCurrency();
        numberFormat3.setMinimumIntegerDigits(1);
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        int int12 = numberFormat11.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        java.util.Currency currency16 = numberFormat14.getCurrency();
        numberFormat11.setCurrency(currency16);
        java.util.Currency currency18 = numberFormat11.getCurrency();
        numberFormat3.setCurrency(currency18);
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        fractionFormat24.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat29);
        java.util.Locale locale35 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale35);
        java.lang.String str38 = fractionFormat36.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat39 = fractionFormat36.getNumeratorFormat();
        numberFormat39.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency42 = numberFormat39.getCurrency();
        numberFormat29.setCurrency(currency42);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance(locale44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45, numberFormat47);
        boolean boolean49 = numberFormat47.isGroupingUsed();
        java.lang.Object obj50 = null;
        boolean boolean51 = numberFormat47.equals(obj50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29, numberFormat47);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) -1);
        int int56 = parsePosition55.getErrorIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = fractionFormat52.parseObject("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition55);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(currency4);
        org.junit.Assert.assertEquals(currency4.toString(), "TWD");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "100 0 / 1" + "'", str38, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 0);
        java.lang.String str3 = fieldPosition2.toString();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 100, 1);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits(2147483647);
        int int11 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setParseIntegerOnly(true);
        boolean boolean14 = fraction6.equals((java.lang.Object) numberFormat8);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean19 = numberFormat17.equals((java.lang.Object) numberFormat18);
        java.lang.Object obj20 = numberFormat18.clone();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean25 = numberFormat23.equals((java.lang.Object) numberFormat24);
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        int int32 = numberFormat31.getMaximumIntegerDigits();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        java.util.Currency currency36 = numberFormat34.getCurrency();
        numberFormat31.setCurrency(currency36);
        java.util.Currency currency38 = numberFormat31.getCurrency();
        java.math.RoundingMode roundingMode39 = numberFormat31.getRoundingMode();
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) 'a');
        java.lang.String str43 = parsePosition42.toString();
        java.lang.String str44 = parsePosition42.toString();
        java.lang.Object obj45 = numberFormat31.parseObject("zho", parsePosition42);
        java.lang.String str46 = parsePosition42.toString();
        java.lang.Number number47 = numberFormat24.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition42);
        java.lang.Object obj48 = numberFormat18.parseObject("cor\351en", parsePosition42);
        int int49 = parsePosition42.getErrorIndex();
        java.lang.Object obj50 = numberFormat8.parseObject("11,700%", parsePosition42);
        java.text.NumberFormat.Field field51 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field51);
        boolean boolean53 = parsePosition42.equals((java.lang.Object) field51);
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field51);
        boolean boolean55 = fieldPosition2.equals((java.lang.Object) field51);
        java.lang.Object obj56 = null;
        boolean boolean57 = field51.equals(obj56);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode39 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode39.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str43, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str44, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str46, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale2.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) '4');
        parsePosition10.setErrorIndex(600);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance(locale16);
        java.lang.String str20 = locale13.getDisplayCountry(locale16);
        java.lang.String str21 = locale13.getISO3Language();
        java.lang.String str22 = locale13.getDisplayName();
        java.lang.String str24 = locale13.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction28.abs();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        boolean boolean34 = numberFormat32.equals((java.lang.Object) locale33);
        boolean boolean35 = fraction30.equals((java.lang.Object) locale33);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction30.abs();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale37);
        boolean boolean39 = fraction36.equals((java.lang.Object) locale37);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale37);
        java.lang.String str41 = locale13.getDisplayScript(locale37);
        boolean boolean42 = parsePosition10.equals((java.lang.Object) str41);
        java.lang.Object obj43 = fractionFormat7.parseObject("60,000%", parsePosition10);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) '#');
        parsePosition46.setErrorIndex(600);
        java.lang.String str49 = parsePosition46.toString();
        java.lang.Object obj50 = fractionFormat7.parseObject("Japanese", parsePosition46);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance();
        fractionFormat7.setNumeratorFormat(numberFormat51);
        java.util.Locale locale57 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", "100%");
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale57);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getNumberInstance(locale57);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale61);
        java.text.NumberFormat numberFormat63 = fractionFormat62.getDenominatorFormat();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getCurrencyInstance(locale65);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat66);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction71 = properFractionFormat67.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition70);
        int int72 = parsePosition70.getIndex();
        parsePosition70.setErrorIndex(2147483647);
        java.lang.Object obj75 = fractionFormat62.parseObject("\u97d3\u6587", parsePosition70);
        java.lang.Object obj76 = numberFormat59.parseObject("en", parsePosition70);
        int int77 = parsePosition70.getErrorIndex();
        java.lang.Number number78 = numberFormat51.parse("-3\240200 %", parsePosition70);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "France" + "'", str20, "France");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str22, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str49, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals(locale57.toString(), "\u4e2d\u6587\u4e2d\u56fd)_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]_100%");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNull(fraction71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNull(number78);
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str1 = field0.toString();
        java.lang.String str2 = field0.toString();
        java.lang.String str3 = field0.toString();
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str1, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str2, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str3, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        java.util.Locale locale3 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat9.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition13);
        java.lang.String str15 = parsePosition13.toString();
        boolean boolean17 = parsePosition13.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        java.lang.Object obj18 = numberFormat4.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition13);
        int int19 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str24 = locale21.getDisplayVariant();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat25);
        java.util.Locale locale29 = new java.util.Locale("TWN");
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getISO3Language();
        java.lang.String str35 = locale31.getDisplayScript(locale33);
        java.lang.String str36 = locale31.toLanguageTag();
        java.lang.String str37 = locale31.getDisplayVariant();
        java.util.Locale locale38 = locale31.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale39.toLanguageTag();
        java.lang.String str42 = locale39.getExtension('x');
        java.lang.String str43 = locale38.getDisplayScript(locale39);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale38);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance();
        numberFormat45.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode48 = numberFormat45.getRoundingMode();
        numberFormat44.setRoundingMode(roundingMode48);
        numberFormat30.setRoundingMode(roundingMode48);
        numberFormat4.setRoundingMode(roundingMode48);
        java.lang.String str53 = numberFormat4.format((double) 96);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str15, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals(locale29.toString(), "twn");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "kor" + "'", str34, "kor");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "und" + "'", str36, "und");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh-TW" + "'", str40, "zh-TW");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + roundingMode48 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode48.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "96" + "'", str53, "96");
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((java.text.Format.Field) field0);
        fieldPosition7.setEndIndex((int) (byte) -92);
        int int10 = fieldPosition7.getField();
        fieldPosition7.setBeginIndex((int) (short) 119);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        int int12 = numberFormat11.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        java.util.Currency currency16 = numberFormat14.getCurrency();
        numberFormat11.setCurrency(currency16);
        java.util.Currency currency18 = numberFormat11.getCurrency();
        java.math.RoundingMode roundingMode19 = numberFormat11.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode19);
        boolean boolean21 = numberFormat4.isParseIntegerOnly();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Set<java.lang.Character> charSet24 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale22.getDisplayVariant(locale25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj39 = numberFormat34.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition38);
        java.lang.String str40 = parsePosition38.toString();
        boolean boolean42 = parsePosition38.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat29.parse("java.text.ParseException: zh_TW", parsePosition38);
        java.text.NumberFormat numberFormat44 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits(2147483647);
        int int48 = numberFormat45.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field49 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field49);
        int int51 = fieldPosition50.getBeginIndex();
        boolean boolean52 = numberFormat45.equals((java.lang.Object) int51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat44, numberFormat45);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getIntegerInstance(locale54);
        java.lang.String str57 = numberFormat55.format(0.0d);
        properFractionFormat53.setNumeratorFormat(numberFormat55);
        boolean boolean59 = numberFormat55.isGroupingUsed();
        numberFormat55.setGroupingUsed(true);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str40, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        java.util.Locale.Category category0 = null;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale locale8 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category1, locale8);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction13.add(fraction19);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.divide(fraction25);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale28.getDisplayScript();
        java.lang.String str30 = locale28.getScript();
        boolean boolean31 = fraction27.equals((java.lang.Object) locale28);
        java.util.Locale.setDefault(category1, locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        java.util.Locale locale1 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale4 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale1.getDisplayLanguage(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        numberFormat15.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str19 = numberFormat15.format((double) 0.0f);
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        int int25 = numberFormat24.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24);
        java.text.NumberFormat numberFormat27 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat24, numberFormat27);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException31 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean32 = numberFormat24.equals((java.lang.Object) 10);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat36);
        int int38 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = locale39.getDisplayCountry(locale40);
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getIntegerInstance(locale40);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance(locale40);
        java.util.Set<java.lang.Character> charSet46 = locale40.getExtensionKeys();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getIntegerInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat34, numberFormat47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale51.getISO3Language();
        java.lang.String str53 = locale49.getDisplayScript(locale51);
        java.lang.String str54 = locale49.getDisplayName();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat34, numberFormat55);
        fractionFormat10.setDenominatorFormat(numberFormat55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = fractionFormat10.parseObject("java.text.ParsePosition[index=6000,errorIndex=97]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale4.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinese (taiwan)" + "'", str9, "chinese (taiwan)");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0%" + "'", str19, "0%");
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Japan" + "'", str42, "Japan");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "kor" + "'", str52, "kor");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(numberFormat55);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.AttributedCharacterIterator attributedCharacterIterator11 = numberFormat8.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj12 = numberFormat8.clone();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat16.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition19);
        java.lang.Object obj21 = numberFormat8.parseObject("zh-TW", parsePosition19);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale25.getISO3Language();
        java.lang.String str28 = locale22.getDisplayScript(locale25);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale22.getDisplayCountry(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        boolean boolean32 = numberFormat8.equals((java.lang.Object) locale22);
        int int33 = numberFormat8.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction36 = fractionFormat34.parse("java.text.parseexception: zh_tw (60,000%)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.parseexception: zh_tw (60,000%)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(attributedCharacterIterator11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str23, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh-TW" + "'", str24, "zh-TW");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zho" + "'", str27, "zho");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Taiwan" + "'", str30, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) 'a');
        java.lang.String str2 = parsePosition1.toString();
        java.lang.Object obj3 = null;
        boolean boolean4 = parsePosition1.equals(obj3);
        int int5 = parsePosition1.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        long long16 = fraction14.longValue();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction10.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str21 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction10.add(fraction20);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        boolean boolean27 = numberFormat26.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj37 = numberFormat32.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition36);
        properFractionFormat28.setNumeratorFormat(numberFormat32);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale39);
        boolean boolean41 = numberFormat40.isParseIntegerOnly();
        numberFormat40.setGroupingUsed(false);
        properFractionFormat28.setWholeFormat(numberFormat40);
        numberFormat40.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = new org.apache.commons.math.fraction.FractionFormat(numberFormat50, numberFormat52);
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj57 = numberFormat52.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition56);
        org.apache.commons.math.fraction.Fraction fraction58 = properFractionFormat47.parse("214,748,364,700%", parsePosition56);
        boolean boolean59 = fraction20.equals((java.lang.Object) properFractionFormat47);
        boolean boolean60 = parsePosition1.equals((java.lang.Object) properFractionFormat47);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 / 100" + "'", str21, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(fraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder9 = builder2.setVariant("japan");
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        boolean boolean14 = field10.equals((java.lang.Object) locale12);
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale12.getISO3Country();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale12);
        java.util.Locale.Builder builder18 = builder9.setLocale(locale12);
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder9.setLocale(locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getISO3Country();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleKeys();
        java.lang.String str6 = locale2.getVariant();
        java.lang.String str7 = locale2.getDisplayScript();
        java.lang.String str8 = locale2.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(fractionFormat9);
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale5.toLanguageTag();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.lang.String str13 = locale12.getScript();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale14.getDisplayScript(locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale14.getDisplayCountry(locale21);
        java.util.Locale locale24 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str25 = locale21.getDisplayLanguage(locale24);
        java.lang.String str26 = locale12.getDisplayCountry(locale24);
        java.lang.String str27 = locale5.getDisplayVariant(locale12);
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.lang.String str36 = locale12.getDisplayVariant(locale29);
        java.lang.String str37 = locale29.getDisplayCountry();
        java.lang.String str38 = locale0.getDisplayName(locale29);
        java.util.Set<java.lang.Character> charSet39 = locale0.getExtensionKeys();
        java.lang.String str40 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str15, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Taiwan" + "'", str22, "Taiwan");
        org.junit.Assert.assertEquals(locale24.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Korean" + "'", str38, "Korean");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        boolean boolean4 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        boolean boolean6 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Currency currency11 = numberFormat9.getCurrency();
        fractionFormat7.setNumeratorFormat(numberFormat9);
        java.text.NumberFormat numberFormat13 = fractionFormat7.getDenominatorFormat();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.lang.String str18 = fractionFormat16.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat19 = fractionFormat16.getNumeratorFormat();
        numberFormat19.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency22 = numberFormat19.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        java.lang.Number number25 = numberFormat19.parse("9,700%");
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str29 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction28);
        float float30 = fraction28.floatValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction28.negate();
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        int int37 = numberFormat36.getMaximumIntegerDigits();
        int int38 = numberFormat36.getMaximumFractionDigits();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat40, numberFormat42);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36, numberFormat40);
        boolean boolean45 = fraction31.equals((java.lang.Object) fractionFormat44);
        java.text.NumberFormat numberFormat46 = fractionFormat44.getNumeratorFormat();
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale48);
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49, numberFormat51);
        numberFormat51.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field56);
        java.lang.String str58 = fieldPosition57.toString();
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale60.getDisplayScript();
        java.lang.String str62 = locale59.getDisplayName(locale60);
        boolean boolean63 = fieldPosition57.equals((java.lang.Object) locale60);
        fieldPosition57.setEndIndex((int) '#');
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getCurrencyInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction72 = properFractionFormat68.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition71);
        boolean boolean73 = fieldPosition57.equals((java.lang.Object) parsePosition71);
        java.lang.Number number74 = numberFormat51.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition71);
        int int75 = parsePosition71.getIndex();
        java.lang.String str76 = parsePosition71.toString();
        java.lang.Object obj77 = null;
        boolean boolean78 = parsePosition71.equals(obj77);
        java.lang.Object obj79 = numberFormat46.parseObject("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition71);
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getPercentInstance(locale80);
        boolean boolean82 = numberFormat81.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        numberFormat81.setMaximumFractionDigits((int) (byte) -120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat86 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat87 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat19, numberFormat46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat88 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        boolean boolean89 = numberFormat19.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "100 0 / 1" + "'", str18, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 9700L + "'", number25, 9700L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1 / 1" + "'", str29, "1 / 1");
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str58, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese (Taiwan)" + "'", str62, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNull(fraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(number74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str76, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("3,500.0000000000000000000000000000000000000000000000000000%");
        java.lang.String str2 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str8 = numberFormat1.format((double) (byte) 1);
        java.lang.Number number10 = numberFormat1.parse("100%");
        boolean boolean11 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj13 = null;
        java.lang.StringBuffer stringBuffer14 = null;
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field15);
        int int17 = fieldPosition16.getEndIndex();
        java.lang.String str18 = fieldPosition16.toString();
        int int19 = fieldPosition16.getBeginIndex();
        fieldPosition16.setBeginIndex(2147483647);
        fieldPosition16.setBeginIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer24 = properFractionFormat12.format(obj13, stringBuffer14, fieldPosition16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100%" + "'", str8, "100%");
        org.junit.Assert.assertEquals("'" + number10 + "' != '" + 1L + "'", number10, 1L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str18, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.lang.String str18 = locale11.getDisplayCountry(locale14);
        java.lang.String str19 = locale11.getISO3Language();
        java.lang.String str20 = locale11.getDisplayName();
        java.util.Locale.Builder builder21 = builder10.setLocale(locale11);
        java.util.Locale.Builder builder22 = builder10.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "France" + "'", str18, "France");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str20, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("zh-TW", 0.0d);
        java.lang.String str3 = languageRange2.getRange();
        double double4 = languageRange2.getWeight();
        java.lang.String str5 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-tw" + "'", str3, "zh-tw");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-tw" + "'", str5, "zh-tw");
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.abs();
        long long12 = fraction10.longValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction6.multiply(fraction10);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        long long24 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction10.subtract(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction1.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.divide(fraction43);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction40.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction40.reciprocal();
        java.lang.String str54 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction1.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction53.reciprocal();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category58 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale59 = java.util.Locale.getDefault(category58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale60);
        java.util.Locale.setDefault(category58, locale60);
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category58, locale63);
        java.lang.String str65 = locale57.getDisplayLanguage(locale63);
        java.lang.String str66 = locale57.getScript();
        java.util.Set<java.lang.String> strSet67 = locale57.getUnicodeLocaleAttributes();
        boolean boolean68 = fraction56.equals((java.lang.Object) locale57);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "60 / 1" + "'", str54, "60 / 1");
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.FORMAT + "'", category58.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "anglais" + "'", str65, "anglais");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat40.parse("6,000");
        java.text.NumberFormat numberFormat44 = properFractionFormat40.getWholeFormat();
        int int45 = numberFormat44.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "HI!" + "'", str29, "HI!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale7);
        java.util.Currency currency10 = numberFormat9.getCurrency();
        numberFormat9.setMinimumIntegerDigits(1);
        numberFormat9.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat9.parseObject("Japan", parsePosition17);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException22 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str23 = fractionConversionException22.getPattern();
        java.lang.Throwable[] throwableArray24 = fractionConversionException22.getSuppressed();
        java.lang.Object[] objArray25 = fractionConversionException22.getArguments();
        boolean boolean26 = parsePosition17.equals((java.lang.Object) objArray25);
        int int27 = parsePosition17.getIndex();
        int int28 = parsePosition17.getIndex();
        java.lang.Object obj29 = fractionFormat5.parseObject("\ud55c\uad6d\uc5b4", parsePosition17);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.lang.String str36 = numberFormat32.format(0.008333333333333333d);
        boolean boolean37 = numberFormat32.isParseIntegerOnly();
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj41 = numberFormat32.parseObject("\u65e5\u6587", parsePosition40);
        int int42 = parsePosition40.getIndex();
        java.lang.Object obj43 = fractionFormat5.parseObject("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition40);
        parsePosition40.setIndex(97);
        java.lang.String str46 = parsePosition40.toString();
        int int47 = parsePosition40.getIndex();
        java.lang.Object obj48 = fractionFormat2.parseObject("java.text.ParseException: fr_CA", parsePosition40);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "TWD");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str23, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1%" + "'", str36, "1%");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=1]" + "'", str46, "java.text.ParsePosition[index=97,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) 'u', 2);
        java.text.ParseException parseException5 = new java.text.ParseException("", (int) 'u');
        fractionConversionException2.addSuppressed((java.lang.Throwable) parseException5);
        java.lang.Object[] objArray7 = fractionConversionException2.getArguments();
        java.lang.Object[] objArray8 = fractionConversionException2.getArguments();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[117.0, 2]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[117.0, 2]");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[117.0, 2]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[117.0, 2]");
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        java.lang.String str5 = numberFormat1.format((double) 0.016666668f);
        java.util.Currency currency6 = numberFormat1.getCurrency();
        numberFormat1.setGroupingUsed(false);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj16 = properFractionFormat12.parseObject("", parsePosition15);
        int int17 = parsePosition15.getIndex();
        java.lang.Object obj18 = numberFormat1.parseObject("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 35 to fraction after 35 iterations", parsePosition15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2%" + "'", str5, "2%");
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        java.util.Locale locale2 = new java.util.Locale("\u4e2d\u56fd", "\244 1.00");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale2.getCountry();
        boolean boolean5 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "\u4e2d\u56fd_\244 1.00");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u56fd_\244 1.00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\244 1.00" + "'", str4, "\244 1.00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder6 = builder2.setLanguage("ita");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setExtension('a', "\uc77c\ubcf8");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        numberFormat0.setParseIntegerOnly(true);
        java.lang.Object obj3 = numberFormat0.clone();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) 'x');
        java.lang.Number number7 = numberFormat0.parse("30,000%", parsePosition6);
        int int8 = parsePosition6.getIndex();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(number7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120 + "'", int8 == 120);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.lang.String str9 = locale4.getDisplayCountry();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale9);
        java.lang.Object obj11 = locale9.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "fr_CA");
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.toLanguageTag();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale0);
        java.lang.String str6 = locale0.getVariant();
        java.lang.String str7 = locale0.getScript();
        java.lang.String str8 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TWN" + "'", str2, "TWN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-TW" + "'", str3, "zh-TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("taiwan (zh_tw,10,000%) (JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING),Chinesisch)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=taiwan(zh_tw");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str8 = locale4.getDisplayVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale10 = locale4.stripExtensions();
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Locale locale12 = locale10.stripExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        int int3 = numberFormat0.getMinimumFractionDigits();
        java.lang.Object obj4 = numberFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.multiply(fraction12);
        long long14 = fraction12.longValue();
        int int15 = fraction12.getNumerator();
        int int16 = fraction12.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.reciprocal();
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.NumberFormat.Field field19 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((java.text.Format.Field) field19);
        int int21 = fieldPosition20.getBeginIndex();
        int int22 = fieldPosition20.getField();
        int int23 = fieldPosition20.getBeginIndex();
        fieldPosition20.setBeginIndex((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer26 = fractionFormat5.format(fraction17, stringBuffer18, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(field19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setVariant("-2");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: -2 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.lang.String str10 = locale9.toLanguageTag();
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setScript("");
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayLanguage(locale17);
        java.util.Locale.Builder builder19 = builder14.setLocale(locale15);
        java.lang.String str20 = locale9.getDisplayVariant(locale15);
        java.util.Locale.Builder builder21 = builder5.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder21.setScript("taiwan");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: taiwan [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-TW" + "'", str10, "zh-TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinesisch" + "'", str18, "Chinesisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        boolean boolean10 = fieldPosition2.equals((java.lang.Object) locale3);
        java.util.Locale locale11 = locale3.stripExtensions();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.lang.Object obj58 = numberFormat36.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "HI!" + "'", str29, "HI!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(obj58);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("France");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.lang.String str13 = locale12.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (byte) 97);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale locale10 = builder9.build();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.lang.Object obj13 = properFractionFormat0.clone();
        java.text.NumberFormat.Field field14 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field14, (int) '#');
        java.text.Format.Field field17 = fieldPosition16.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction23.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction20.add(fraction27);
        boolean boolean30 = field17.equals((java.lang.Object) fraction20);
        int int31 = fraction20.intValue();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction35.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction44.divide(fraction47);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction44.subtract(fraction55);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction20.add(fraction55);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction55.negate();
        java.lang.StringBuffer stringBuffer59 = null;
        java.text.NumberFormat.Field field60 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field60);
        int int62 = fieldPosition61.getBeginIndex();
        java.lang.String str63 = fieldPosition61.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer64 = properFractionFormat0.format(fraction58, stringBuffer59, fieldPosition61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(field14);
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(field60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str63, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(17);
        fieldPosition1.setEndIndex((int) (short) -32);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str1 = field0.toString();
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str3 = fieldPosition2.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str1, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        java.util.Locale locale3 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", "100%");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) '4');
        parsePosition7.setErrorIndex(600);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getIntegerInstance(locale13);
        java.lang.String str17 = locale10.getDisplayCountry(locale13);
        java.lang.String str18 = locale10.getISO3Language();
        java.lang.String str19 = locale10.getDisplayName();
        java.lang.String str21 = locale10.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        boolean boolean31 = numberFormat29.equals((java.lang.Object) locale30);
        boolean boolean32 = fraction27.equals((java.lang.Object) locale30);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction27.abs();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale34);
        boolean boolean36 = fraction33.equals((java.lang.Object) locale34);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale34);
        java.lang.String str38 = locale10.getDisplayScript(locale34);
        boolean boolean39 = parsePosition7.equals((java.lang.Object) str38);
        java.lang.Number number40 = numberFormat4.parse("287%", parsePosition7);
        org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u56fd)_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]_100%");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "France" + "'", str17, "France");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str19, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(number40);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getDisplayCountry();
        java.lang.String str4 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder6 = builder4.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguageTag("java.text.FieldPosition[field=1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=10,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: java.text.FieldPosition[field=1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=10,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str35 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction34);
        float float36 = fraction34.floatValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction34.negate();
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        int int44 = numberFormat42.getMaximumFractionDigits();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = new org.apache.commons.math.fraction.FractionFormat(numberFormat46, numberFormat48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42, numberFormat46);
        boolean boolean51 = fraction37.equals((java.lang.Object) fractionFormat50);
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction53.add(fraction59);
        double double61 = fraction59.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction37.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction65 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str66 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction65);
        long long67 = fraction65.longValue();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction73 = fraction68.divide(fraction72);
        double double74 = fraction68.doubleValue();
        int int75 = fraction68.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction59.multiply(fraction68);
        org.apache.commons.math.fraction.Fraction fraction80 = new org.apache.commons.math.fraction.Fraction((double) 120L, (double) 35, 2);
        int int81 = fraction80.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction59.add(fraction80);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction31.subtract(fraction59);
        int int84 = fraction31.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1 / 1" + "'", str35, "1 / 1");
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 1.0f + "'", float36 == 1.0f);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.008333333333333333d + "'", double61 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-1 / 100" + "'", str66, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.01d + "'", double74 == 0.01d);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 100 + "'", int75 == 100);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 120 + "'", int81 == 120);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 120 + "'", int84 == 120);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale7);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale7.getDisplayCountry(locale11);
        java.lang.String str14 = locale4.getDisplayVariant(locale7);
        java.util.Locale locale18 = new java.util.Locale("java.text.NumberFormat$Field(per mille)", "ja-JP", "java.text.ParseException: ");
        java.lang.String str19 = locale7.getDisplayName(locale18);
        java.lang.String str20 = locale7.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ub300\ub9cc" + "'", str12, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale18.toString(), "java.text.numberformat$field(per mille)_JA-JP_java.text.ParseException: ");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4" + "'", str20, "\uc601\uc5b4");
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        double double7 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction2.subtract(fraction5);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        double double10 = fraction9.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.008333333333333333d) + "'", double7 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.008333333333333d + "'", double10 == 10.008333333333333d);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        boolean boolean16 = numberFormat14.equals((java.lang.Object) strArray15);
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        int int22 = numberFormat21.getMaximumIntegerDigits();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        java.util.Currency currency26 = numberFormat24.getCurrency();
        numberFormat21.setCurrency(currency26);
        java.util.Currency currency28 = numberFormat21.getCurrency();
        java.math.RoundingMode roundingMode29 = numberFormat21.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode29);
        java.lang.Object obj31 = numberFormat14.clone();
        fractionFormat9.setNumeratorFormat(numberFormat14);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        properFractionFormat35.setWholeFormat(numberFormat37);
        java.text.NumberFormat numberFormat40 = properFractionFormat35.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat40);
        numberFormat40.setParseIntegerOnly(false);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode29 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode29.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(numberFormat40);
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str8 = fractionFormat6.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat9 = fractionFormat6.getNumeratorFormat();
        fractionFormat3.setNumeratorFormat(numberFormat9);
        java.text.NumberFormat numberFormat11 = fractionFormat3.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100 0 / 1" + "'", str8, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException(121.0d, 84);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException5 = new org.apache.commons.math.fraction.FractionConversionException((-0.008333333333333333d), 2147483647);
        fractionConversionException2.addSuppressed((java.lang.Throwable) fractionConversionException5);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str4 = fractionConversionException3.getPattern();
        java.lang.String str5 = fractionConversionException3.getPattern();
        java.lang.Throwable[] throwableArray6 = fractionConversionException3.getSuppressed();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str4, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str5, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        boolean boolean15 = numberFormat14.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        properFractionFormat16.setNumeratorFormat(numberFormat20);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.lang.String str34 = fractionFormat32.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat35 = fractionFormat32.getNumeratorFormat();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str41 = locale39.getDisplayCountry();
        java.lang.String str42 = locale36.getDisplayName(locale39);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale45.getISO3Language();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        java.lang.String str48 = locale36.getDisplayLanguage(locale45);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getNumberInstance(locale36);
        fractionFormat32.setNumeratorFormat(numberFormat49);
        properFractionFormat29.setWholeFormat(numberFormat49);
        properFractionFormat16.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        numberFormat49.setGroupingUsed(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat49);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) 'a');
        java.lang.String str60 = parsePosition59.toString();
        java.lang.String str61 = parsePosition59.toString();
        parsePosition59.setErrorIndex(3);
        java.lang.Object obj64 = fractionFormat56.parseObject("40 / 39", parsePosition59);
        int int65 = parsePosition59.getIndex();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100 0 / 1" + "'", str34, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "HI!" + "'", str42, "HI!");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "kor" + "'", str46, "kor");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str60, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str61, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 97 + "'", int65 == 97);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        numberFormat1.setMaximumFractionDigits((int) (byte) 100);
        numberFormat1.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        numberFormat14.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str18 = numberFormat14.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        java.text.NumberFormat numberFormat20 = fractionFormat19.getNumeratorFormat();
        properFractionFormat9.setDenominatorFormat(numberFormat20);
        org.apache.commons.math.fraction.Fraction fraction24 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str25 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction24);
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction24.abs();
        int int28 = fraction24.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction24.abs();
        double double30 = fraction29.doubleValue();
        java.lang.StringBuffer stringBuffer31 = null;
        java.text.NumberFormat.Field field32 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        boolean boolean36 = field32.equals((java.lang.Object) locale34);
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field32, (int) '#');
        java.text.FieldPosition fieldPosition40 = new java.text.FieldPosition((java.text.Format.Field) field32, (int) (byte) -1);
        int int41 = fieldPosition40.getField();
        java.text.Format.Field field42 = fieldPosition40.getFieldAttribute();
        java.text.Format.Field field43 = fieldPosition40.getFieldAttribute();
        int int44 = fieldPosition40.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer45 = properFractionFormat9.format(fraction29, stringBuffer31, fieldPosition40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0%" + "'", str18, "0%");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1 / 100" + "'", str25, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.01d + "'", double30 == 0.01d);
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(field42);
        org.junit.Assert.assertNotNull(field43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        java.util.Locale locale2 = new java.util.Locale("kor", "Chinese (Taiwan)");
        org.junit.Assert.assertEquals(locale2.toString(), "kor_CHINESE (TAIWAN)");
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.AttributedCharacterIterator attributedCharacterIterator11 = numberFormat8.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj12 = numberFormat8.clone();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat16.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition19);
        java.lang.Object obj21 = numberFormat8.parseObject("zh-TW", parsePosition19);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale25.getISO3Language();
        java.lang.String str28 = locale22.getDisplayScript(locale25);
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.lang.String str30 = locale22.getDisplayCountry(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        boolean boolean32 = numberFormat8.equals((java.lang.Object) locale22);
        int int33 = numberFormat8.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat8);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        int int40 = numberFormat39.getMaximumIntegerDigits();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        java.util.Currency currency44 = numberFormat42.getCurrency();
        numberFormat39.setCurrency(currency44);
        java.lang.Object obj46 = numberFormat39.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat39);
        java.text.NumberFormat numberFormat48 = fractionFormat47.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = fractionFormat47.parseObject("100 0 / 1");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(attributedCharacterIterator11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese" + "'", str23, "Chinese");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh-TW" + "'", str24, "zh-TW");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zho" + "'", str27, "zho");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Taiwan" + "'", str30, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(numberFormat48);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getWholeFormat();
        java.text.NumberFormat numberFormat5 = properFractionFormat2.getWholeFormat();
        numberFormat5.setGroupingUsed(false);
        boolean boolean8 = numberFormat5.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(0.016666666666666666d, (int) (byte) 1);
        long long3 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) 35);
        org.apache.commons.math.fraction.Fraction fraction6 = fraction2.multiply(fraction5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat8 = properFractionFormat7.getDenominatorFormat();
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        boolean boolean17 = numberFormat16.isGroupingUsed();
        java.util.Currency currency18 = numberFormat16.getCurrency();
        numberFormat13.setCurrency(currency18);
        java.lang.Object obj20 = numberFormat13.clone();
        boolean boolean21 = numberFormat13.isGroupingUsed();
        properFractionFormat7.setDenominatorFormat(numberFormat13);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = fraction6.compareTo((java.lang.Object) numberFormat13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        float float23 = fraction22.floatValue();
        double double24 = fraction22.doubleValue();
        float float25 = fraction22.floatValue();
        long long26 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.0f + "'", float25 == 0.0f);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getDenominatorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        properFractionFormat17.setWholeFormat(numberFormat19);
        java.text.NumberFormat numberFormat22 = properFractionFormat17.getWholeFormat();
        java.lang.String str24 = numberFormat22.format((double) 1.0f);
        numberFormat22.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat22.setParseIntegerOnly(false);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale33);
        java.util.Locale.setDefault(category31, locale33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category31, locale36);
        java.lang.String str38 = locale30.getDisplayLanguage(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat43.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition46);
        java.lang.Object obj48 = fractionFormat39.parseObject("214,748,364,700%", parsePosition46);
        java.lang.String str49 = parsePosition46.toString();
        java.lang.Object obj50 = numberFormat22.parseObject("600", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat12.parse("\uc911\uad6d\uc5b4", parsePosition46);
        java.lang.Object obj52 = numberFormat3.parseObject("10,000%", parsePosition46);
        int int53 = parsePosition46.getIndex();
        int int54 = parsePosition46.getErrorIndex();
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale57.getISO3Language();
        java.lang.String str59 = locale55.getDisplayScript(locale57);
        java.lang.String str60 = locale57.getScript();
        java.util.Locale.setDefault(locale57);
        boolean boolean62 = parsePosition46.equals((java.lang.Object) locale57);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100%" + "'", str24, "100%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "anglais" + "'", str38, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str49, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + 0L + "'", obj52, 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "kor" + "'", str58, "kor");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale7);
        java.util.Currency currency10 = numberFormat9.getCurrency();
        numberFormat9.setMinimumIntegerDigits(1);
        numberFormat9.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat9.parseObject("Japan", parsePosition17);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException22 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str23 = fractionConversionException22.getPattern();
        java.lang.Throwable[] throwableArray24 = fractionConversionException22.getSuppressed();
        java.lang.Object[] objArray25 = fractionConversionException22.getArguments();
        boolean boolean26 = parsePosition17.equals((java.lang.Object) objArray25);
        int int27 = parsePosition17.getIndex();
        int int28 = parsePosition17.getIndex();
        java.lang.Object obj29 = fractionFormat5.parseObject("\ud55c\uad6d\uc5b4", parsePosition17);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.lang.String str36 = numberFormat32.format(0.008333333333333333d);
        boolean boolean37 = numberFormat32.isParseIntegerOnly();
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj41 = numberFormat32.parseObject("\u65e5\u6587", parsePosition40);
        int int42 = parsePosition40.getIndex();
        java.lang.Object obj43 = fractionFormat5.parseObject("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition40);
        java.lang.Object obj44 = fractionFormat1.parseObject("NT$2,147,483,647.00", parsePosition40);
        java.util.Locale locale48 = new java.util.Locale("Chinesisch (Taiwan)", "JP", "1 / 1");
        java.lang.String str49 = locale48.getDisplayName();
        java.lang.String str50 = locale48.getDisplayScript();
        boolean boolean51 = parsePosition40.equals((java.lang.Object) str50);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "TWD");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str23, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1%" + "'", str36, "1%");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals(locale48.toString(), "chinesisch (taiwan)_JP_1 / 1");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc77c\ubcf8,1 / 1)" + "'", str49, "\uc77c\ubcf8,1 / 1)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.lang.String str13 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale16 = new java.util.Locale("kor");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale23 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str24 = locale18.getDisplayScript(locale23);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet27 = locale23.getExtensionKeys();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = locale23.getDisplayName(locale28);
        java.util.Locale locale32 = locale28.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale32.getDisplayVariant(locale34);
        java.lang.String str39 = locale16.getDisplayCountry(locale34);
        java.lang.String str40 = locale34.getDisplayVariant();
        java.lang.String str41 = locale0.getDisplayScript(locale34);
        java.lang.String str42 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Korean" + "'", str6, "Korean");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ko" + "'", str13, "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals(locale16.toString(), "kor");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale23.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str30, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str31, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japan" + "'", str36, "Japan");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ko" + "'", str42, "ko");
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        int int7 = numberFormat5.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        org.apache.commons.math.fraction.Fraction fraction13 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        double double18 = fraction16.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction22 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction13.divide(fraction16);
        double double25 = fraction24.doubleValue();
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction24);
        java.lang.StringBuffer stringBuffer27 = null;
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field28, (int) '#');
        java.text.Format.Field field31 = fieldPosition30.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction37.multiply(fraction41);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction34.add(fraction41);
        boolean boolean44 = field31.equals((java.lang.Object) fraction34);
        java.text.FieldPosition fieldPosition46 = new java.text.FieldPosition(field31, (int) (short) 10000);
        java.text.FieldPosition fieldPosition48 = new java.text.FieldPosition(field31, 3);
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition(field31);
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition(field31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer51 = fractionFormat8.format(fraction24, stringBuffer27, fieldPosition50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.008333333333333333d) + "'", double18 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-120.0d) + "'", double25 == (-120.0d));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-120 / 1" + "'", str26, "-120 / 1");
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = locale4.getDisplayName(locale5);
        java.lang.String str8 = locale0.getDisplayLanguage(locale4);
        java.lang.String str9 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale0);
        java.util.Set<java.lang.String> strSet11 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale12);
        java.lang.String str18 = locale0.getDisplayCountry(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese (Taiwan)" + "'", str7, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u6587" + "'", str8, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ja-JP" + "'", str9, "ja-JP");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japan" + "'", str18, "Japan");
        org.junit.Assert.assertNotNull(fractionFormat19);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 60, (double) 214748364700L, (int) (byte) 88);
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.removeUnicodeLocaleAttribute("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=97,endIndex=10000]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=97,endIndex=10000] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.lang.String str7 = locale6.toLanguageTag();
        java.lang.String str9 = locale6.getExtension('x');
        boolean boolean10 = locale6.hasExtensions();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale6);
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-TW" + "'", str7, "zh-TW");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale.Builder builder6 = builder1.setRegion("en");
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale8.getDisplayCountry(locale10);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.lang.String str15 = locale12.getDisplayScript();
        java.lang.String str16 = locale8.getDisplayVariant(locale12);
        java.lang.String str18 = locale8.getExtension('a');
        java.lang.String str19 = locale7.getDisplayCountry(locale8);
        java.lang.String str20 = locale0.getDisplayName(locale8);
        java.lang.String str21 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "_EN");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str9, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "EN" + "'", str19, "EN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u6cd5\u6587" + "'", str20, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        double double4 = fraction2.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.util.Set<java.lang.String> strSet12 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        boolean boolean16 = locale13.hasExtensions();
        java.lang.String str17 = locale6.getDisplayVariant(locale13);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        numberFormat21.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field26);
        java.lang.String str28 = fieldPosition27.toString();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayName(locale30);
        boolean boolean33 = fieldPosition27.equals((java.lang.Object) locale30);
        fieldPosition27.setEndIndex((int) '#');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat38.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition41);
        boolean boolean43 = fieldPosition27.equals((java.lang.Object) parsePosition41);
        java.lang.Number number44 = numberFormat21.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition41);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction48.abs();
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale51);
        java.util.Locale locale53 = java.util.Locale.getDefault();
        boolean boolean54 = numberFormat52.equals((java.lang.Object) locale53);
        boolean boolean55 = fraction50.equals((java.lang.Object) locale53);
        boolean boolean56 = parsePosition41.equals((java.lang.Object) locale53);
        java.lang.String str57 = locale6.getDisplayScript(locale53);
        java.lang.String str58 = locale53.getLanguage();
        boolean boolean59 = fraction2.equals((java.lang.Object) locale53);
        java.lang.String str60 = locale53.getVariant();
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance(locale53);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.008333333333333333d) + "'", double4 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str28, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (Taiwan)" + "'", str32, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(number44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ko" + "'", str58, "ko");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(numberFormat61);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 600L, (double) 52, 14400);
        int int4 = fraction3.getDenominator();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(119);
        int int13 = parsePosition12.getIndex();
        org.apache.commons.math.fraction.Fraction fraction14 = properFractionFormat9.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)", parsePosition12);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.lang.String str18 = locale15.getISO3Country();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale15);
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        int int25 = numberFormat24.getMaximumIntegerDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        boolean boolean28 = numberFormat27.isGroupingUsed();
        java.util.Currency currency29 = numberFormat27.getCurrency();
        numberFormat24.setCurrency(currency29);
        java.util.Currency currency31 = numberFormat24.getCurrency();
        int int32 = numberFormat24.getMaximumFractionDigits();
        java.lang.Object obj33 = numberFormat24.clone();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        numberFormat35.setMaximumFractionDigits(100);
        numberFormat35.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str42 = numberFormat35.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19, numberFormat24, numberFormat35);
        java.util.Locale locale45 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.lang.String str48 = fractionFormat46.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat49 = fractionFormat46.getNumeratorFormat();
        java.text.NumberFormat numberFormat50 = fractionFormat46.getNumeratorFormat();
        java.text.NumberFormat numberFormat51 = fractionFormat46.getNumeratorFormat();
        java.lang.String str53 = numberFormat51.format((long) 2147483647);
        properFractionFormat43.setDenominatorFormat(numberFormat51);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        boolean boolean61 = numberFormat60.isGroupingUsed();
        properFractionFormat58.setWholeFormat(numberFormat60);
        java.text.NumberFormat numberFormat63 = properFractionFormat58.getWholeFormat();
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number67 = numberFormat63.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition66);
        parsePosition66.setErrorIndex(0);
        parsePosition66.setErrorIndex(1728000);
        java.lang.Object obj72 = properFractionFormat43.parseObject("\u97d3\u6587", parsePosition66);
        java.util.Locale locale73 = java.util.Locale.JAPAN;
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.lang.String str75 = locale74.getDisplayScript();
        java.lang.String str76 = locale73.getDisplayCountry(locale74);
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str78 = locale77.getDisplayLanguage();
        java.util.Locale locale79 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str80 = locale77.getDisplayCountry(locale79);
        java.lang.String str81 = locale74.getDisplayName(locale79);
        java.util.Set<java.lang.String> strSet82 = locale74.getUnicodeLocaleKeys();
        boolean boolean83 = parsePosition66.equals((java.lang.Object) locale74);
        java.lang.String str84 = parsePosition66.toString();
        boolean boolean85 = parsePosition12.equals((java.lang.Object) parsePosition66);
        int int86 = parsePosition12.getIndex();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 119 + "'", int13 == 119);
        org.junit.Assert.assertNull(fraction14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100%" + "'", str42, "100%");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100 0 / 1" + "'", str48, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2,147,483,647" + "'", str53, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNull(number67);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Japan" + "'", str76, "Japan");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str78, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Taiwan" + "'", str80, "Taiwan");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str84, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 119 + "'", int86 == 119);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("600 / 1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=600 / 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode11 = numberFormat1.getRoundingMode();
        numberFormat1.setGroupingUsed(false);
        java.lang.String str15 = numberFormat1.format(120.0d);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode11 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode11.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "12000%" + "'", str15, "12000%");
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder12 = builder9.setExtension('a', "TWN");
        java.util.Locale.Builder builder14 = builder12.setLanguageTag("Canada");
        boolean boolean15 = field0.equals((java.lang.Object) builder12);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 599);
        java.lang.String str18 = field0.toString();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        int int25 = numberFormat24.getMaximumIntegerDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        boolean boolean28 = numberFormat27.isGroupingUsed();
        java.util.Currency currency29 = numberFormat27.getCurrency();
        numberFormat24.setCurrency(currency29);
        properFractionFormat19.setWholeFormat(numberFormat24);
        java.util.Locale locale33 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getInstance(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat39.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition43);
        java.lang.String str45 = parsePosition43.toString();
        java.lang.Object obj46 = fractionFormat34.parseObject("\uc911\uad6d\uc5b4", parsePosition43);
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat19.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition43);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.util.Locale.setDefault(locale48);
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getIntegerInstance(locale48);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale48);
        properFractionFormat19.setDenominatorFormat(numberFormat52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale54.toLanguageTag();
        java.util.Set<java.lang.String> strSet60 = locale54.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale54);
        java.text.NumberFormat numberFormat62 = fractionFormat61.getDenominatorFormat();
        properFractionFormat19.setWholeFormat(numberFormat62);
        java.util.Locale.Builder builder64 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder66 = builder64.setScript("");
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str68 = locale67.getDisplayLanguage();
        java.lang.String str69 = locale67.toLanguageTag();
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.lang.String str72 = locale70.getISO3Language();
        java.lang.String str73 = locale67.getDisplayScript(locale70);
        java.util.Locale locale74 = java.util.Locale.ITALIAN;
        java.lang.String str75 = locale67.getDisplayCountry(locale74);
        java.util.Locale.Builder builder76 = builder64.setLocale(locale74);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str78 = locale77.getDisplayScript();
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.lang.String str80 = locale79.getISO3Language();
        java.lang.String str81 = locale77.getDisplayScript(locale79);
        java.lang.String str82 = locale77.toLanguageTag();
        java.lang.String str83 = locale77.getDisplayVariant();
        java.lang.String str84 = locale77.getVariant();
        java.util.Locale.Builder builder85 = builder76.setLocale(locale77);
        java.util.Locale locale86 = locale77.stripExtensions();
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getInstance(locale77);
        properFractionFormat19.setWholeFormat(numberFormat87);
        java.text.NumberFormat numberFormat89 = properFractionFormat19.getDenominatorFormat();
        boolean boolean90 = field0.equals((java.lang.Object) properFractionFormat19);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str18, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str45, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str49, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "und" + "'", str59, "und");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u4e2d\u6587" + "'", str68, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zh-TW" + "'", str69, "zh-TW");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zho" + "'", str72, "zho");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Taiwan" + "'", str75, "Taiwan");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "kor" + "'", str80, "kor");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "und" + "'", str82, "und");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(numberFormat89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str34 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction33);
        long long35 = fraction33.longValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.divide(fraction40);
        double double42 = fraction36.doubleValue();
        int int43 = fraction36.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction27.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction48 = new org.apache.commons.math.fraction.Fraction((double) 120L, (double) 35, 2);
        int int49 = fraction48.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction27.add(fraction48);
        float float51 = fraction50.floatValue();
        float float52 = fraction50.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 / 100" + "'", str34, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.01d + "'", double42 == 0.01d);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 120 + "'", int49 == 120);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 120.00833f + "'", float51 == 120.00833f);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 120.00833f + "'", float52 == 120.00833f);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        java.util.Locale locale2 = new java.util.Locale("java.text.ParsePosition[index=0,errorIndex=3]", "France");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale2.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseposition[index=0,errorindex=3]_FRANCE");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.parseposition[index=0,errorindex=3]" + "'", str4, "java.text.parseposition[index=0,errorindex=3]");
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale6 = new java.util.Locale("119", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", "");
        java.lang.String str7 = locale1.getDisplayVariant(locale6);
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale6.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals(locale6.toString(), "119_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=100,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "119" + "'", str8, "119");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("\ud55c\uad6d\uc5b4", parsePosition13);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale27);
        java.util.Currency currency30 = numberFormat29.getCurrency();
        numberFormat29.setMinimumIntegerDigits(1);
        numberFormat29.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj38 = numberFormat29.parseObject("Japan", parsePosition37);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException42 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str43 = fractionConversionException42.getPattern();
        java.lang.Throwable[] throwableArray44 = fractionConversionException42.getSuppressed();
        java.lang.Object[] objArray45 = fractionConversionException42.getArguments();
        boolean boolean46 = parsePosition37.equals((java.lang.Object) objArray45);
        int int47 = parsePosition37.getIndex();
        java.lang.String str48 = parsePosition37.toString();
        org.apache.commons.math.fraction.Fraction fraction49 = fractionFormat1.parse("0%", parsePosition37);
        parsePosition37.setErrorIndex(600);
        java.lang.String str52 = parsePosition37.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "TWD");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str43, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str48, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(fraction49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=600]" + "'", str52, "java.text.ParsePosition[index=1,errorIndex=600]");
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        int int17 = fraction6.intValue();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction21.add(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.divide(fraction33);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction30.subtract(fraction41);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction6.add(fraction41);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        long long54 = fraction52.longValue();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction48.multiply(fraction52);
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        long long66 = fraction64.longValue();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction60.multiply(fraction64);
        org.apache.commons.math.fraction.Fraction fraction68 = fraction48.divide(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction41.subtract(fraction67);
        int int70 = fraction41.intValue();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(96, (int) (short) 119);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.lang.String str3 = locale2.getScript();
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale7.getISO3Language();
        java.lang.String str10 = locale4.getDisplayScript(locale7);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale4.getDisplayCountry(locale11);
        java.util.Locale locale14 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str15 = locale11.getDisplayLanguage(locale14);
        java.lang.String str16 = locale2.getDisplayCountry(locale14);
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale22 = locale20.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        boolean boolean26 = locale23.hasExtensions();
        java.lang.String str27 = locale20.getDisplayScript(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.lang.String str29 = locale23.getISO3Country();
        java.lang.String str30 = locale23.getISO3Country();
        java.lang.String str31 = locale2.getDisplayScript(locale23);
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale2.getDisplayLanguage(locale32);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u4e2d\u6587" + "'", str5, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-TW" + "'", str6, "zh-TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Taiwan" + "'", str12, "Taiwan");
        org.junit.Assert.assertEquals(locale14.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CAN" + "'", str29, "CAN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CAN" + "'", str30, "CAN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 97);
        java.lang.Throwable[] throwableArray3 = fractionConversionException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale7.getISO3Language();
        java.lang.String str10 = locale4.getDisplayScript(locale7);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale4.getDisplayCountry(locale11);
        java.util.Locale.Builder builder13 = builder1.setLocale(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        boolean boolean15 = field0.equals((java.lang.Object) locale11);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale18.getDisplayCountry();
        java.lang.String str22 = locale18.getISO3Country();
        java.util.Locale locale23 = locale18.stripExtensions();
        boolean boolean24 = field0.equals((java.lang.Object) locale23);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field0, 120);
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 599);
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field0, 35);
        java.text.Format.Field field31 = fieldPosition30.getFieldAttribute();
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition(field31, (int) (byte) 16);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u4e2d\u6587" + "'", str5, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-TW" + "'", str6, "zh-TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Taiwan" + "'", str12, "Taiwan");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u53f0\u7063" + "'", str21, "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "TWN" + "'", str22, "TWN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(field31);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.lang.String str6 = locale0.getDisplayVariant();
        java.lang.String str7 = locale0.getVariant();
        java.util.Locale locale8 = locale0.stripExtensions();
        java.lang.String str9 = locale0.getVariant();
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        int int12 = fieldPosition11.getEndIndex();
        java.lang.String str13 = fieldPosition11.toString();
        boolean boolean14 = locale0.equals((java.lang.Object) fieldPosition11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str13, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("zh-TW");
        java.lang.String str10 = locale0.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale9);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale9);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.util.Locale.setDefault(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for HI!");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat4.getDenominatorFormat();
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        int int38 = numberFormat37.getMaximumIntegerDigits();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean41 = numberFormat40.isGroupingUsed();
        java.util.Currency currency42 = numberFormat40.getCurrency();
        numberFormat37.setCurrency(currency42);
        java.util.Currency currency44 = numberFormat37.getCurrency();
        int int45 = numberFormat37.getMaximumFractionDigits();
        java.lang.Object obj46 = numberFormat37.clone();
        java.lang.Object obj47 = numberFormat37.clone();
        int int48 = numberFormat37.getMaximumIntegerDigits();
        int int49 = numberFormat37.getMinimumIntegerDigits();
        int int50 = numberFormat37.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat37);
        java.lang.Object obj52 = fractionFormat51.clone();
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.getDefault(category53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale55);
        java.util.Locale.setDefault(category53, locale55);
        java.util.Locale locale58 = java.util.Locale.getDefault(category53);
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale60.getISO3Language();
        java.util.Locale.setDefault(category59, locale60);
        java.util.Locale.setDefault(category53, locale60);
        java.util.Locale locale67 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category53, locale67);
        java.util.Locale locale70 = java.util.Locale.getDefault(category53);
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getIntegerInstance(locale70);
        fractionFormat51.setDenominatorFormat(numberFormat71);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "HI!" + "'", str20, "HI!");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.FORMAT + "'", category53.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category59.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals(locale67.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(numberFormat71);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str6 = numberFormat4.format((double) 10L);
        java.util.Currency currency7 = numberFormat4.getCurrency();
        numberFormat4.setMaximumIntegerDigits((int) (short) 0);
        java.lang.String str11 = numberFormat4.format((long) 2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000%" + "'", str6, "1,000%");
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0%" + "'", str11, "0%");
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getIntegerInstance(locale34);
        numberFormat37.setMinimumIntegerDigits(0);
        numberFormat37.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str46 = numberFormat37.format((java.lang.Object) 100.0f);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale47.getISO3Language();
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = locale47.getISO3Country();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getNumberInstance(locale47);
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        int int57 = numberFormat56.getMaximumIntegerDigits();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        boolean boolean60 = numberFormat59.isGroupingUsed();
        java.util.Currency currency61 = numberFormat59.getCurrency();
        numberFormat56.setCurrency(currency61);
        java.util.Currency currency63 = numberFormat56.getCurrency();
        int int64 = numberFormat56.getMaximumFractionDigits();
        java.lang.Object obj65 = numberFormat56.clone();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        numberFormat67.setMaximumFractionDigits(100);
        numberFormat67.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str74 = numberFormat67.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51, numberFormat56, numberFormat67);
        int int76 = numberFormat56.getMaximumIntegerDigits();
        boolean boolean77 = numberFormat56.isGroupingUsed();
        java.lang.Object obj78 = numberFormat56.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat37, numberFormat56);
        numberFormat2.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100" + "'", str46, "100");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "kor" + "'", str48, "kor");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2147483647 + "'", int57 == 2147483647);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency63);
        org.junit.Assert.assertEquals(currency63.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "100%" + "'", str74, "100%");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2147483647 + "'", int76 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(obj78);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayName(locale1);
        java.lang.String str4 = locale0.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str7 = locale5.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = locale5.getDisplayScript(locale8);
        java.lang.String str12 = locale0.getDisplayName(locale8);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese (Taiwan)" + "'", str3, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TWN" + "'", str4, "TWN");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str6, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-TW" + "'", str7, "zh-TW");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str12, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.Format.Field field2 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition(field2, (-100));
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition(field2, 121);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field2);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat3.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.Number number26 = numberFormat3.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition23);
        parsePosition23.setErrorIndex(17);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        java.util.Locale.Builder builder31 = builder29.clear();
        java.util.Locale.Builder builder32 = builder29.clear();
        java.util.Locale.Builder builder35 = builder32.setExtension('a', "TWN");
        boolean boolean36 = parsePosition23.equals((java.lang.Object) builder32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field3);
        java.text.Format.Field field18 = fieldPosition17.getFieldAttribute();
        fieldPosition17.setBeginIndex((int) 'u');
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str25 = fractionFormat23.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat26 = fractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat27 = fractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat28 = fractionFormat23.getNumeratorFormat();
        boolean boolean29 = fieldPosition17.equals((java.lang.Object) numberFormat28);
        boolean boolean30 = numberFormat28.isParseIntegerOnly();
        numberFormat28.setParseIntegerOnly(false);
        java.util.Locale locale35 = new java.util.Locale("Chinese", "java.text.parseposition[index=35,errorindex=600]");
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        java.lang.String str37 = locale35.getVariant();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean39 = numberFormat28.equals((java.lang.Object) locale35);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100 0 / 1" + "'", str25, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals(locale35.toString(), "chinese_JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.lang.String str6 = field0.toString();
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int8 = fieldPosition7.getField();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str6, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction3.divide(fraction7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        boolean boolean11 = numberFormat10.isGroupingUsed();
        java.util.Currency currency12 = numberFormat10.getCurrency();
        int int13 = numberFormat10.getMinimumFractionDigits();
        int int14 = numberFormat10.getMinimumIntegerDigits();
        java.lang.Object obj15 = numberFormat10.clone();
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat16);
        boolean boolean18 = fraction7.equals((java.lang.Object) numberFormat10);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str20 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction24.add(fraction30);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction19.multiply(fraction30);
        float float35 = fraction30.floatValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction7.subtract(fraction30);
        long long37 = fraction30.longValue();
        int int38 = fraction30.intValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1 / 1" + "'", str20, "1 / 1");
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + float35 + "' != '" + 0.008333334f + "'", float35 == 0.008333334f);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        double double25 = fraction24.doubleValue();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale29 = locale26.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        java.lang.String str32 = locale29.getDisplayName(locale30);
        boolean boolean33 = fraction24.equals((java.lang.Object) locale29);
        java.lang.String str34 = locale29.getVariant();
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale29.getDisplayVariant(locale35);
        boolean boolean38 = locale35.hasExtensions();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 120.0d + "'", double25 == 120.0d);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str32, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        int int3 = numberFormat0.getMaximumIntegerDigits();
        numberFormat0.setMaximumIntegerDigits((int) (short) 32);
        numberFormat0.setMaximumFractionDigits(34);
        java.util.Currency currency8 = numberFormat0.getCurrency();
        numberFormat0.setParseIntegerOnly(true);
        java.text.ParseException parseException13 = new java.text.ParseException("100", 1);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException17 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException21 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str22 = fractionConversionException21.getPattern();
        java.lang.Throwable[] throwableArray23 = fractionConversionException21.getSuppressed();
        fractionConversionException17.addSuppressed((java.lang.Throwable) fractionConversionException21);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException28 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException32 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str33 = fractionConversionException32.getPattern();
        java.lang.Throwable[] throwableArray34 = fractionConversionException32.getSuppressed();
        fractionConversionException28.addSuppressed((java.lang.Throwable) fractionConversionException32);
        fractionConversionException21.addSuppressed((java.lang.Throwable) fractionConversionException32);
        java.lang.String str37 = fractionConversionException32.getPattern();
        java.text.ParseException parseException40 = new java.text.ParseException("10,000%", 10);
        fractionConversionException32.addSuppressed((java.lang.Throwable) parseException40);
        java.lang.Throwable[] throwableArray42 = fractionConversionException32.getSuppressed();
        java.text.NumberFormat.Field field43 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition((java.text.Format.Field) field43);
        java.lang.String str45 = fieldPosition44.toString();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale47.getDisplayScript();
        java.lang.String str49 = locale46.getDisplayName(locale47);
        boolean boolean50 = fieldPosition44.equals((java.lang.Object) locale47);
        fieldPosition44.setEndIndex((int) '#');
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getCurrencyInstance(locale53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction59 = properFractionFormat55.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition58);
        boolean boolean60 = fieldPosition44.equals((java.lang.Object) parsePosition58);
        int int61 = fieldPosition44.getEndIndex();
        int int62 = fieldPosition44.getEndIndex();
        java.text.ParseException parseException65 = new java.text.ParseException("10,000%", 10);
        int int66 = parseException65.getErrorOffset();
        boolean boolean67 = fieldPosition44.equals((java.lang.Object) parseException65);
        fractionConversionException32.addSuppressed((java.lang.Throwable) parseException65);
        parseException13.addSuppressed((java.lang.Throwable) fractionConversionException32);
        java.text.ParseException parseException72 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        java.lang.Throwable[] throwableArray73 = parseException72.getSuppressed();
        int int74 = parseException72.getErrorOffset();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException78 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.Object[] objArray79 = fractionConversionException78.getArguments();
        java.lang.Object[] objArray80 = fractionConversionException78.getArguments();
        parseException72.addSuppressed((java.lang.Throwable) fractionConversionException78);
        parseException13.addSuppressed((java.lang.Throwable) fractionConversionException78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = numberFormat0.format((java.lang.Object) parseException13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str22, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str33, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str37, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(field43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str45, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (Taiwan)" + "'", str49, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNull(fraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[0.0, 0, -1]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[0.0, 0, -1]");
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder6 = builder4.setVariant("");
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder11 = builder4.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder11.setExtension('a', "francese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setVariant("\uc77c\ubcf8");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str8, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-TW" + "'", str9, "zh-TW");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        java.util.Locale locale2 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str7 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        float float8 = fraction6.floatValue();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction6.negate();
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        int int15 = numberFormat14.getMaximumIntegerDigits();
        int int16 = numberFormat14.getMaximumFractionDigits();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat18);
        boolean boolean23 = fraction9.equals((java.lang.Object) fractionFormat22);
        java.text.NumberFormat numberFormat24 = fractionFormat22.getNumeratorFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24);
        fractionFormat3.setNumeratorFormat(numberFormat24);
        numberFormat24.setMinimumIntegerDigits((int) (byte) 87);
        numberFormat24.setGroupingUsed(false);
        java.util.Currency currency31 = numberFormat24.getCurrency();
        java.lang.String str33 = numberFormat24.format((long) 10000);
        org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1 / 1" + "'", str7, "1 / 1");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000%" + "'", str33, "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000%");
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException7 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str8 = fractionConversionException7.getPattern();
        java.lang.Throwable[] throwableArray9 = fractionConversionException7.getSuppressed();
        fractionConversionException3.addSuppressed((java.lang.Throwable) fractionConversionException7);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException14 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        fractionConversionException14.addSuppressed((java.lang.Throwable) fractionConversionException18);
        fractionConversionException7.addSuppressed((java.lang.Throwable) fractionConversionException18);
        java.lang.String str23 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray24 = fractionConversionException18.getSuppressed();
        java.lang.String str25 = fractionConversionException18.getPattern();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException29 = new org.apache.commons.math.fraction.FractionConversionException((double) 0L, (long) ' ', (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException33 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException37 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str38 = fractionConversionException37.getPattern();
        java.lang.Throwable[] throwableArray39 = fractionConversionException37.getSuppressed();
        fractionConversionException33.addSuppressed((java.lang.Throwable) fractionConversionException37);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException44 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException48 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str49 = fractionConversionException48.getPattern();
        java.lang.Throwable[] throwableArray50 = fractionConversionException48.getSuppressed();
        fractionConversionException44.addSuppressed((java.lang.Throwable) fractionConversionException48);
        fractionConversionException37.addSuppressed((java.lang.Throwable) fractionConversionException48);
        java.lang.String str53 = fractionConversionException48.getPattern();
        java.lang.Throwable[] throwableArray54 = fractionConversionException48.getSuppressed();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException58 = new org.apache.commons.math.fraction.FractionConversionException((double) 100L, 100L, (long) (byte) -1);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException62 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str63 = fractionConversionException62.getPattern();
        fractionConversionException58.addSuppressed((java.lang.Throwable) fractionConversionException62);
        fractionConversionException48.addSuppressed((java.lang.Throwable) fractionConversionException62);
        java.lang.Throwable[] throwableArray66 = fractionConversionException62.getSuppressed();
        fractionConversionException29.addSuppressed((java.lang.Throwable) fractionConversionException62);
        fractionConversionException18.addSuppressed((java.lang.Throwable) fractionConversionException62);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str8, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str23, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str25, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str38, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str49, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str53, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str63, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "TWN");
        java.text.NumberFormat.Field field9 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field9);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        boolean boolean12 = field9.equals((java.lang.Object) locale11);
        java.lang.String str13 = locale11.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.util.Locale.Builder builder15 = builder8.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setRegion("\u53f0\u6e7e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 0 / 1_?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CN" + "'", str13, "CN");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zho");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList17);
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strList17, filteringMode20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet26);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strCollection28);
        java.util.Locale.LanguageRange languageRange31 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str32 = languageRange31.getRange();
        java.util.Locale.LanguageRange languageRange34 = new java.util.Locale.LanguageRange("zh-TW");
        double double35 = languageRange34.getWeight();
        double double36 = languageRange34.getWeight();
        java.util.Locale.LanguageRange languageRange38 = new java.util.Locale.LanguageRange("eng");
        java.util.Locale.LanguageRange languageRange40 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str41 = languageRange40.getRange();
        java.lang.String str42 = languageRange40.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] { languageRange31, languageRange34, languageRange38, languageRange40 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, strMap46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList56);
        java.util.Locale.FilteringMode filteringMode59 = null;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList56, filteringMode59);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale locale64 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet65);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, strMap67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList68, strMap69);
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.lang.String>) strList76);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList68, (java.util.Collection<java.lang.String>) strList76, filteringMode79);
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.util.Locale locale84 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet85 = locale84.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strSet85);
        java.util.Collection<java.lang.String> strCollection87 = null;
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, strCollection87);
        java.lang.String str89 = java.util.Locale.lookupTag(languageRangeList68, strCollection87);
        java.util.Collection<java.util.Locale> localeCollection90 = null;
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter(languageRangeList68, localeCollection90, filteringMode91);
        java.util.Locale locale93 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.Locale locale94 = java.util.Locale.lookup(languageRangeList47, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.Locale locale95 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.Locale.FilteringMode filteringMode96 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList92, filteringMode96);
        java.util.Locale locale98 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList97);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode20.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh-tw" + "'", str32, "zh-tw");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh-tw" + "'", str41, "zh-tw");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh-tw" + "'", str42, "zh-tw");
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode91.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNull(locale93);
        org.junit.Assert.assertNull(locale94);
        org.junit.Assert.assertNull(locale95);
        org.junit.Assert.assertTrue("'" + filteringMode96 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode96.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList97);
        org.junit.Assert.assertNull(locale98);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.setScript("");
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.getISO3Language();
        java.lang.String str26 = locale20.getDisplayScript(locale23);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale20.getDisplayCountry(locale27);
        java.util.Locale.Builder builder29 = builder17.setLocale(locale27);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale30.toLanguageTag();
        java.lang.String str36 = locale30.getDisplayVariant();
        java.lang.String str37 = locale30.getVariant();
        java.util.Locale.Builder builder38 = builder29.setLocale(locale30);
        java.util.Locale locale39 = locale30.stripExtensions();
        java.lang.String str40 = locale14.getDisplayName(locale39);
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale41.getDisplayVariant();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale44);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale44);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str50 = locale44.getDisplayScript(locale49);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale51.getISO3Language();
        java.lang.String str54 = locale51.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale51);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getInstance(locale51);
        java.lang.String str57 = locale44.getDisplayScript(locale51);
        java.lang.String str58 = locale41.getDisplayName(locale51);
        java.util.Locale locale61 = new java.util.Locale("CN", "10 / 1");
        java.lang.String str62 = locale41.getDisplayName(locale61);
        java.lang.String str63 = locale14.getDisplayName(locale41);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale64);
        java.lang.String str66 = locale64.getISO3Language();
        java.util.Locale locale70 = new java.util.Locale("en", "11,700%", "zho");
        java.lang.String str71 = locale64.getDisplayScript(locale70);
        java.lang.String str72 = locale14.getDisplayName(locale64);
        boolean boolean73 = locale64.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en-CA" + "'", str16, "en-CA");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str21, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-TW" + "'", str22, "zh-TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Taiwan" + "'", str28, "Taiwan");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English (Canada)" + "'", str40, "English (Canada)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "jpn" + "'", str42, "jpn");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zho" + "'", str53, "zho");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zho" + "'", str54, "zho");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str58, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals(locale61.toString(), "cn_10 / 1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Japanese (Japan)" + "'", str62, "Japanese (Japan)");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u82f1\u8a9e\u30ab\u30ca\u30c0)" + "'", str63, "\u82f1\u8a9e\u30ab\u30ca\u30c0)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "kor" + "'", str66, "kor");
        org.junit.Assert.assertEquals(locale70.toString(), "en_11,700%_zho");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str72, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.Object obj3 = fractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.Object obj11 = numberFormat10.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator12 = fractionFormat2.formatToCharacterIterator(obj11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japan" + "'", str8, "Japan");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat31.getNumeratorFormat();
        java.lang.String str38 = numberFormat36.format((long) 2147483647);
        properFractionFormat28.setDenominatorFormat(numberFormat36);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.text.AttributedCharacterIterator attributedCharacterIterator44 = numberFormat41.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj45 = numberFormat41.clone();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        java.lang.Object obj54 = numberFormat41.parseObject("zh-TW", parsePosition52);
        properFractionFormat28.setDenominatorFormat(numberFormat41);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance();
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale58);
        java.lang.String str62 = locale58.getISO3Language();
        boolean boolean63 = numberFormat57.equals((java.lang.Object) locale58);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat66.getDenominatorFormat();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale69);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = new org.apache.commons.math.fraction.FractionFormat(numberFormat70, numberFormat72);
        java.text.ParsePosition parsePosition76 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj77 = numberFormat72.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition76);
        java.lang.String str78 = parsePosition76.toString();
        boolean boolean80 = parsePosition76.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        parsePosition76.setErrorIndex(2147483647);
        java.lang.Object obj83 = numberFormat67.parseObject("\u4e2d\u6587\u4e2d\u570b)", parsePosition76);
        parsePosition76.setIndex(10);
        org.apache.commons.math.fraction.Fraction fraction86 = properFractionFormat64.parse("2,147,483,647", parsePosition76);
        java.lang.Object obj87 = numberFormat41.parseObject("120", parsePosition76);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2,147,483,647" + "'", str38, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(attributedCharacterIterator44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str78, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNull(obj87);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=11]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.fieldposition[field=-1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale4);
        java.lang.String str7 = locale4.getDisplayScript();
        java.lang.String str8 = locale0.getDisplayVariant(locale4);
        java.util.Set<java.lang.Character> charSet9 = locale4.getExtensionKeys();
        java.lang.String str10 = locale4.getISO3Country();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder11.setVariant("");
        java.util.Locale.Builder builder16 = builder14.setLanguage("Japan");
        java.util.Locale.Builder builder18 = builder16.setLanguage("France");
        java.util.Locale.Builder builder19 = builder16.clear();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.util.Locale.Builder builder23 = builder19.setLocale(locale21);
        java.util.Locale.Builder builder24 = builder19.clearExtensions();
        java.util.Locale.Builder builder26 = builder19.setLanguage("CHN");
        java.util.Locale.Builder builder29 = builder26.setExtension('a', "");
        java.util.Locale.Builder builder30 = builder29.clear();
        java.util.Locale locale32 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.lang.String str34 = locale32.getExtension('x');
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale35.getDisplayName(locale36);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale39.toLanguageTag();
        java.lang.String str41 = locale39.getVariant();
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder42.setScript("");
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.lang.String str48 = locale45.getDisplayLanguage(locale47);
        java.util.Locale.Builder builder49 = builder44.setLocale(locale45);
        java.lang.String str50 = locale39.getDisplayVariant(locale45);
        java.lang.String str51 = locale45.getDisplayName();
        java.lang.String str52 = locale45.getDisplayName();
        java.lang.String str53 = locale36.getDisplayScript(locale45);
        java.lang.String str54 = locale32.getDisplayScript(locale36);
        java.util.Locale.Builder builder55 = builder30.setLocale(locale36);
        java.util.Locale locale56 = builder55.build();
        java.lang.String str57 = locale4.getDisplayScript(locale56);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "TWN" + "'", str10, "TWN");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals(locale32.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "francese (Francia)" + "'", str38, "francese (Francia)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh-TW" + "'", str40, "zh-TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinesisch" + "'", str48, "Chinesisch");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str51, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str52, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\244 87.00", (double) 96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=96.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet6, filteringMode8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode8.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) 'x');
        java.lang.String str2 = parsePosition1.toString();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        long long13 = fraction11.longValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction7.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction7.divide(fraction26);
        int int28 = fraction26.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str30 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction34.add(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction29.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ONE;
        long long46 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction29.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction26.divide(fraction29);
        int int49 = fraction29.getNumerator();
        boolean boolean50 = parsePosition1.equals((java.lang.Object) int49);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=120,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=120,errorIndex=-1]");
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1 / 1" + "'", str30, "1 / 1");
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 0.35f, (double) (byte) 88, 39);
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "TWN");
        java.text.NumberFormat.Field field9 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field9);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        boolean boolean12 = field9.equals((java.lang.Object) locale11);
        java.lang.String str13 = locale11.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.util.Locale.Builder builder15 = builder8.setLocale(locale11);
        java.util.Locale locale16 = builder8.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CN" + "'", str13, "CN");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getDisplayCountry();
        java.util.Locale.Builder builder11 = builder6.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setRegion("-000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,060,000.0%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: -000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,060,000.0% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        java.util.Locale locale1 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayCountry(locale4);
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale6);
        java.lang.String str9 = locale6.getDisplayScript();
        java.lang.String str10 = locale2.getDisplayVariant(locale6);
        java.lang.String str11 = locale1.getDisplayCountry(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.text.NumberFormat numberFormat13 = fractionFormat12.getNumeratorFormat();
        java.lang.String str15 = numberFormat13.format((double) (-119));
        boolean boolean16 = numberFormat13.isGroupingUsed();
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str3, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Taiwan" + "'", str5, "Taiwan");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-119" + "'", str15, "-119");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        numberFormat4.setMaximumFractionDigits(3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        int int20 = numberFormat4.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = fractionFormat21.parseObject("\u671d\u9c9c\u6587");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction8.subtract(fraction27);
        int int30 = fraction27.getDenominator();
        int int31 = fraction27.getDenominator();
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale34);
        java.util.Locale.setDefault(category32, locale34);
        java.util.Locale locale37 = java.util.Locale.getDefault(category32);
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.util.Locale.setDefault(category38, locale39);
        java.util.Locale.setDefault(category32, locale39);
        boolean boolean43 = fraction27.equals((java.lang.Object) locale39);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction27.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fraction44);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-TW");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        double double7 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-tw" + "'", str4, "zh-tw");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-tw" + "'", str5, "zh-tw");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-tw" + "'", str6, "zh-tw");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale20 = java.util.Locale.getDefault(category0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.clear();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        java.util.Locale.Builder builder27 = builder25.clear();
        java.util.Locale.Builder builder29 = builder27.addUnicodeLocaleAttribute("ita");
        java.util.Locale locale30 = builder27.build();
        java.util.Locale.setDefault(locale30);
        java.lang.String str32 = locale20.getDisplayScript(locale30);
        java.lang.String str33 = locale30.getCountry();
        java.lang.String str34 = locale30.toLanguageTag();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und-u-ita" + "'", str34, "und-u-ita");
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        java.util.Locale locale3 = new java.util.Locale("Chinese (China)", "cor\351en", "100%");
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction7.abs();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        boolean boolean13 = numberFormat11.equals((java.lang.Object) locale12);
        boolean boolean14 = fraction9.equals((java.lang.Object) locale12);
        java.lang.String str15 = locale3.getDisplayVariant(locale12);
        boolean boolean16 = locale12.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale12.getUnicodeLocaleType("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Chinese (China)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "chinese (china)_COR\351EN_100%");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100%" + "'", str15, "100%");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat44 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        boolean boolean48 = numberFormat46.equals((java.lang.Object) locale47);
        java.util.Locale locale50 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale50.getDisplayCountry();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance(locale50);
        java.lang.String str54 = locale47.getDisplayVariant(locale50);
        java.lang.String str55 = locale50.toLanguageTag();
        java.lang.String str56 = locale50.getDisplayScript();
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale50);
        properFractionFormat28.setWholeFormat(numberFormat57);
        java.text.NumberFormat numberFormat59 = properFractionFormat28.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "und" + "'", str55, "und");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(numberFormat59);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        int int15 = numberFormat14.getMinimumFractionDigits();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance();
        numberFormat16.setParseIntegerOnly(true);
        java.lang.Object obj19 = numberFormat16.clone();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat16, numberFormat20);
        org.apache.commons.math.fraction.Fraction fraction23 = properFractionFormat21.parse("000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,014,400");
        byte byte24 = fraction23.byteValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 64 + "'", byte24 == (byte) 64);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.lang.Object obj10 = numberFormat5.clone();
        java.lang.Object obj11 = numberFormat5.clone();
        boolean boolean12 = numberFormat5.isParseIntegerOnly();
        boolean boolean13 = numberFormat5.isGroupingUsed();
        int int14 = numberFormat5.getMaximumIntegerDigits();
        numberFormat5.setMinimumIntegerDigits((int) (byte) 24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        int int6 = numberFormat2.getMaximumFractionDigits();
        numberFormat2.setParseIntegerOnly(true);
        int int9 = numberFormat2.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale16.getDisplayLanguage(locale20);
        java.lang.String str25 = locale16.getDisplayName();
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale27 = java.util.Locale.getDefault(category0);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.lang.String str37 = locale31.getDisplayName(locale34);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = locale38.getDisplayScript(locale40);
        java.lang.String str43 = locale31.getDisplayLanguage(locale40);
        java.lang.String str44 = locale31.toLanguageTag();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale31);
        java.lang.String str46 = locale31.toLanguageTag();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale31);
        java.lang.String str48 = locale29.getDisplayVariant(locale31);
        java.util.Locale.setDefault(category0, locale29);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str56 = locale50.getDisplayScript(locale55);
        java.util.Set<java.lang.String> strSet57 = locale50.getUnicodeLocaleKeys();
        java.lang.String str58 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getCurrencyInstance(locale50);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French (France)" + "'", str14, "French (France)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (Taiwan)" + "'", str25, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "kor" + "'", str41, "kor");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "und-u-ita" + "'", str44, "und-u-ita");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "und-u-ita" + "'", str46, "und-u-ita");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(numberFormat60);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode6 = numberFormat4.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) '4');
        parsePosition10.setIndex(0);
        java.lang.Object obj13 = fractionFormat7.parseObject("\uc774\ud0c8\ub9ac\uc544\uc5b4_US", parsePosition10);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        java.util.Locale locale1 = new java.util.Locale("-000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,060,000.0%");
        org.junit.Assert.assertEquals(locale1.toString(), "-000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,060,000.0%");
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(40);
        java.lang.String str2 = parsePosition1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=40,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=40,errorIndex=-1]");
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        numberFormat3.setGroupingUsed(false);
        int int13 = numberFormat3.getMinimumIntegerDigits();
        java.lang.Object obj14 = numberFormat3.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getDenominatorFormat();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat26);
        boolean boolean28 = numberFormat26.isGroupingUsed();
        java.lang.String str30 = numberFormat26.format((double) 100);
        java.lang.String str32 = numberFormat26.format((double) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat26);
        java.util.Locale locale37 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.util.Locale locale39 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale42 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str43 = locale39.getDisplayCountry(locale42);
        java.util.Locale.setDefault(locale42);
        java.lang.String str45 = locale37.getDisplayScript(locale42);
        java.lang.String str46 = locale42.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale42);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getCurrencyInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction55 = properFractionFormat51.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition54);
        java.util.Locale locale58 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale58);
        java.lang.String str61 = fractionFormat59.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat62 = fractionFormat59.getNumeratorFormat();
        numberFormat62.setMaximumFractionDigits((int) (short) -1);
        int int65 = numberFormat62.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat62);
        numberFormat62.setGroupingUsed(true);
        java.util.Currency currency69 = numberFormat62.getCurrency();
        java.text.NumberFormat.Field field71 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field71);
        java.lang.String str73 = fieldPosition72.toString();
        java.util.Locale locale74 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale75 = java.util.Locale.ROOT;
        java.lang.String str76 = locale75.getDisplayScript();
        java.lang.String str77 = locale74.getDisplayName(locale75);
        boolean boolean78 = fieldPosition72.equals((java.lang.Object) locale75);
        fieldPosition72.setEndIndex((int) '#');
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getCurrencyInstance(locale81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat82);
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat83.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition86);
        boolean boolean88 = fieldPosition72.equals((java.lang.Object) parsePosition86);
        parsePosition86.setErrorIndex((int) '#');
        java.lang.Object obj91 = numberFormat62.parseObject("ja-JP", parsePosition86);
        org.apache.commons.math.fraction.Fraction fraction92 = properFractionFormat51.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition86);
        org.apache.commons.math.fraction.Fraction fraction93 = fractionFormat47.parse("\u4e2d\u6587", parsePosition86);
        java.lang.Object obj94 = numberFormat22.parseObject("java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]", parsePosition86);
        java.math.RoundingMode roundingMode95 = numberFormat22.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10,000%" + "'", str30, "10,000%");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1,000%" + "'", str32, "1,000%");
        org.junit.Assert.assertEquals(locale37.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertEquals(locale39.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale42.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "chinese" + "'", str46, "chinese");
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNull(fraction55);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100 0 / 1" + "'", str61, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(currency69);
        org.junit.Assert.assertEquals(currency69.toString(), "XXX");
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str73, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Chinese (Taiwan)" + "'", str77, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNull(fraction87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(fraction92);
        org.junit.Assert.assertNull(fraction93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertTrue("'" + roundingMode95 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode95.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str7 = locale5.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = locale5.getDisplayScript(locale8);
        java.lang.String str12 = locale0.getDisplayScript(locale8);
        java.lang.String str13 = locale0.getVariant();
        java.lang.String str14 = locale0.getDisplayLanguage();
        java.lang.String str15 = locale0.toLanguageTag();
        java.lang.String str16 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str6, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-TW" + "'", str7, "zh-TW");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ko" + "'", str15, "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        java.text.ParseException parseException2 = new java.text.ParseException("\uc911\uad6d\uc5b4", 0);
        int int3 = parseException2.getErrorOffset();
        int int4 = parseException2.getErrorOffset();
        int int5 = parseException2.getErrorOffset();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException9 = new org.apache.commons.math.fraction.FractionConversionException((double) (short) 10, (long) (short) 100, (long) (short) 1);
        parseException2.addSuppressed((java.lang.Throwable) fractionConversionException9);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException14 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        fractionConversionException14.addSuppressed((java.lang.Throwable) fractionConversionException18);
        java.lang.Object[] objArray22 = fractionConversionException14.getArguments();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException26 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str31 = fractionConversionException30.getPattern();
        java.lang.Throwable[] throwableArray32 = fractionConversionException30.getSuppressed();
        fractionConversionException26.addSuppressed((java.lang.Throwable) fractionConversionException30);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException37 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException41 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str42 = fractionConversionException41.getPattern();
        java.lang.Throwable[] throwableArray43 = fractionConversionException41.getSuppressed();
        fractionConversionException37.addSuppressed((java.lang.Throwable) fractionConversionException41);
        fractionConversionException30.addSuppressed((java.lang.Throwable) fractionConversionException41);
        java.lang.String str46 = fractionConversionException41.getPattern();
        java.lang.Throwable[] throwableArray47 = fractionConversionException41.getSuppressed();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException51 = new org.apache.commons.math.fraction.FractionConversionException((double) 100L, 100L, (long) (byte) -1);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException55 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str56 = fractionConversionException55.getPattern();
        fractionConversionException51.addSuppressed((java.lang.Throwable) fractionConversionException55);
        fractionConversionException41.addSuppressed((java.lang.Throwable) fractionConversionException55);
        fractionConversionException14.addSuppressed((java.lang.Throwable) fractionConversionException55);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException63 = new org.apache.commons.math.fraction.FractionConversionException((double) 100L, (long) 96, (long) (short) -32);
        fractionConversionException14.addSuppressed((java.lang.Throwable) fractionConversionException63);
        java.lang.String str65 = fractionConversionException14.getPattern();
        parseException2.addSuppressed((java.lang.Throwable) fractionConversionException14);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str42, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str46, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str56, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str65, "Overflow trying to convert {0} to fraction ({1}/{2})");
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.Object obj8 = numberFormat7.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction20.subtract(fraction35);
        org.apache.commons.math.fraction.Fraction fraction37 = fraction11.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction41.add(fraction47);
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction50.divide(fraction53);
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction59.abs();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction50.subtract(fraction61);
        org.apache.commons.math.fraction.Fraction fraction63 = fraction50.reciprocal();
        java.lang.String str64 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction63);
        org.apache.commons.math.fraction.Fraction fraction65 = fraction11.subtract(fraction63);
        java.lang.StringBuffer stringBuffer66 = null;
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition(1);
        java.text.NumberFormat.Field field69 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition70 = new java.text.FieldPosition((java.text.Format.Field) field69);
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field69, 1);
        int int73 = fieldPosition72.getEndIndex();
        boolean boolean74 = fieldPosition68.equals((java.lang.Object) fieldPosition72);
        fieldPosition72.setBeginIndex(0);
        int int77 = fieldPosition72.getField();
        java.text.Format.Field field78 = fieldPosition72.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer79 = properFractionFormat9.format(fraction11, stringBuffer66, fieldPosition72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "60 / 1" + "'", str64, "60 / 1");
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(field69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(field78);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        boolean boolean9 = numberFormat8.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getWholeFormat();
        numberFormat11.setMinimumFractionDigits((int) (byte) 0);
        numberFormat11.setMinimumFractionDigits(60);
        numberFormat11.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode18 = numberFormat11.getRoundingMode();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.util.Locale.setDefault(locale19);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale19.getDisplayName(locale22);
        java.lang.String str25 = locale19.getISO3Language();
        java.lang.String str26 = locale19.getCountry();
        boolean boolean27 = numberFormat11.equals((java.lang.Object) locale19);
        java.util.Locale.Builder builder28 = builder6.setLocale(locale19);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cor\351en" + "'", str24, "cor\351en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) (short) -600, (long) (short) -600, (long) 599);
        java.lang.Object[] objArray4 = fractionConversionException3.getArguments();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-600.0, -600, 599]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-600.0, -600, 599]");
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getISO3Country();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strList22, filteringMode25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap27);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale30);
        java.lang.String str34 = locale30.toLanguageTag();
        java.util.Set<java.lang.String> strSet35 = locale30.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap37);
        boolean boolean39 = locale5.equals((java.lang.Object) languageRangeList38);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str6, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode25.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        java.text.ParseException parseException2 = new java.text.ParseException("", 1727999);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("0,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000.0%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 0,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000.0% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) 'u', 2);
        java.lang.Throwable[] throwableArray3 = fractionConversionException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = fractionConversionException2.getSuppressed();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException7 = new org.apache.commons.math.fraction.FractionConversionException((double) 2L, (int) 'a');
        fractionConversionException2.addSuppressed((java.lang.Throwable) fractionConversionException7);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException12 = new org.apache.commons.math.fraction.FractionConversionException(10.0d, 2147483647L, (long) 52);
        java.lang.Object[] objArray13 = fractionConversionException12.getArguments();
        java.lang.String str14 = fractionConversionException12.getPattern();
        fractionConversionException7.addSuppressed((java.lang.Throwable) fractionConversionException12);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[10.0, 2147483647, 52]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[10.0, 2147483647, 52]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str14, "Overflow trying to convert {0} to fraction ({1}/{2})");
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(8654399, 600);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        int int11 = numberFormat4.getMaximumIntegerDigits();
        java.util.Currency currency12 = numberFormat4.getCurrency();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "XXX");
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (short) -14400);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.abs();
        long long12 = fraction10.longValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction6.multiply(fraction10);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        long long24 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction6.divide(fraction25);
        double double27 = fraction26.doubleValue();
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale28);
        java.util.Locale locale31 = locale28.stripExtensions();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        java.lang.String str34 = locale31.getDisplayName(locale32);
        boolean boolean35 = fraction26.equals((java.lang.Object) locale31);
        java.lang.String str36 = locale31.getVariant();
        java.util.Locale locale37 = java.util.Locale.US;
        java.lang.String str38 = locale37.getDisplayScript();
        java.lang.String str39 = locale31.getDisplayVariant(locale37);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayCountry();
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = locale31.getDisplayVariant(locale40);
        boolean boolean44 = fieldPosition1.equals((java.lang.Object) locale40);
        java.lang.String str45 = locale40.getDisplayName();
        java.util.Set<java.lang.String> strSet46 = locale40.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 120.0d + "'", double27 == 120.0d);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str34, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str7 = locale4.getISO3Country();
        java.lang.String str8 = locale0.getDisplayScript(locale4);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Locale locale12 = locale9.stripExtensions();
        java.lang.String str13 = locale0.getDisplayVariant(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        java.util.Currency currency16 = numberFormat14.getCurrency();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str22 = fractionFormat20.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat23 = fractionFormat20.getNumeratorFormat();
        numberFormat23.setMaximumFractionDigits((int) (short) -1);
        int int26 = numberFormat23.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        numberFormat23.setGroupingUsed(true);
        java.util.Currency currency30 = numberFormat23.getCurrency();
        java.text.NumberFormat.Field field32 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field32);
        java.lang.String str34 = fieldPosition33.toString();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str38 = locale35.getDisplayName(locale36);
        boolean boolean39 = fieldPosition33.equals((java.lang.Object) locale36);
        fieldPosition33.setEndIndex((int) '#');
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat44.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition47);
        boolean boolean49 = fieldPosition33.equals((java.lang.Object) parsePosition47);
        parsePosition47.setErrorIndex((int) '#');
        java.lang.Object obj52 = numberFormat23.parseObject("ja-JP", parsePosition47);
        java.lang.Number number53 = numberFormat14.parse("Frankreich", parsePosition47);
        java.util.Currency currency54 = numberFormat14.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str3, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str6, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TWN" + "'", str7, "TWN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "CNY");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100 0 / 1" + "'", str22, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str34, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (Taiwan)" + "'", str38, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(number53);
        org.junit.Assert.assertNotNull(currency54);
        org.junit.Assert.assertEquals(currency54.toString(), "CNY");
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setMinimumIntegerDigits(0);
        java.lang.String str10 = numberFormat6.format(1.0d);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale11.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        boolean boolean38 = numberFormat24.equals((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat24);
        java.text.NumberFormat numberFormat40 = properFractionFormat39.getNumeratorFormat();
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        int int46 = numberFormat45.getMaximumIntegerDigits();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        boolean boolean49 = numberFormat48.isGroupingUsed();
        java.util.Currency currency50 = numberFormat48.getCurrency();
        numberFormat45.setCurrency(currency50);
        java.util.Currency currency52 = numberFormat45.getCurrency();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = new org.apache.commons.math.fraction.FractionFormat(numberFormat55, numberFormat57);
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj62 = numberFormat57.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition61);
        java.lang.String str63 = parsePosition61.toString();
        java.lang.Number number64 = numberFormat45.parse("Chinese", parsePosition61);
        java.lang.String str66 = numberFormat45.format((double) (short) 10);
        java.util.Locale locale71 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        int int73 = numberFormat72.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat72);
        java.util.Locale locale79 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        int int81 = numberFormat80.getMaximumIntegerDigits();
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getPercentInstance(locale82);
        boolean boolean84 = numberFormat83.isGroupingUsed();
        java.util.Currency currency85 = numberFormat83.getCurrency();
        numberFormat80.setCurrency(currency85);
        java.util.Currency currency87 = numberFormat80.getCurrency();
        java.math.RoundingMode roundingMode88 = numberFormat80.getRoundingMode();
        java.text.ParsePosition parsePosition91 = new java.text.ParsePosition((int) 'a');
        java.lang.String str92 = parsePosition91.toString();
        java.lang.String str93 = parsePosition91.toString();
        java.lang.Object obj94 = numberFormat80.parseObject("zho", parsePosition91);
        java.lang.Object obj95 = fractionFormat74.parseObject("java.text.NumberFormat$Field(currency)", parsePosition91);
        java.lang.Object obj96 = numberFormat45.parseObject("java.text.ParsePosition[index=1,errorIndex=0]", parsePosition91);
        properFractionFormat39.setWholeFormat(numberFormat45);
        java.math.RoundingMode roundingMode98 = numberFormat45.getRoundingMode();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Korean" + "'", str17, "Korean");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str63, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1,000%" + "'", str66, "1,000%");
        org.junit.Assert.assertEquals(locale71.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertEquals(locale79.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2147483647 + "'", int81 == 2147483647);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(currency85);
        org.junit.Assert.assertEquals(currency85.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency87);
        org.junit.Assert.assertEquals(currency87.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode88 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode88.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str92, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str93, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNull(obj96);
        org.junit.Assert.assertTrue("'" + roundingMode98 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode98.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.lang.String str11 = locale0.getDisplayName(locale8);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.lang.String str17 = locale16.getDisplayName();
        java.util.Locale.setDefault(category12, locale16);
        java.lang.String str19 = locale0.getDisplayName(locale16);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getIntegerInstance(locale0);
        int int21 = numberFormat20.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc77c\ubcf8" + "'", str6, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Japanese (Japan)" + "'", str11, "Japanese (Japan)");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale16.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1 / 1 (zh-tw)" + "'", str17, "1 / 1 (zh-tw)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japanese (Japan)" + "'", str19, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("0");
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale1.getDisplayCountry(locale2);
        java.lang.String str6 = locale1.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = locale1.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        boolean boolean12 = numberFormat10.isGroupingUsed();
        boolean boolean13 = numberFormat10.isGroupingUsed();
        fractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.Object obj43 = fractionFormat22.parseObject("java.text.NumberFormat$Field(currency)", parsePosition39);
        java.lang.Object obj44 = numberFormat10.parseObject("Italian", parsePosition39);
        java.lang.Object obj45 = numberFormat1.parseObject("600", parsePosition39);
        java.util.Locale locale47 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        int int61 = numberFormat51.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat48, numberFormat51);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str65 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction64);
        int int66 = fraction64.getNumerator();
        long long67 = fraction64.longValue();
        java.text.AttributedCharacterIterator attributedCharacterIterator68 = properFractionFormat63.formatToCharacterIterator((java.lang.Object) long67);
        java.text.NumberFormat numberFormat69 = properFractionFormat63.getNumeratorFormat();
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale70);
        java.text.NumberFormat numberFormat72 = fractionFormat71.getDenominatorFormat();
        numberFormat72.setMinimumIntegerDigits(1728000);
        java.util.Currency currency75 = numberFormat72.getCurrency();
        properFractionFormat63.setWholeFormat(numberFormat72);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals(locale47.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1 / 1" + "'", str65, "1 / 1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(attributedCharacterIterator68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertNotNull(currency75);
        org.junit.Assert.assertEquals(currency75.toString(), "XXX");
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) 'a');
        java.lang.String str2 = parsePosition1.toString();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder6 = builder5.clear();
        boolean boolean7 = parsePosition1.equals((java.lang.Object) builder6);
        java.util.Locale.Builder builder9 = builder6.setVariant("Japan");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale16 = new java.util.Locale("TWN", "14,400", "coreano");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder12.setLocale(locale16);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 14,400 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals(locale16.toString(), "twn_14,400_coreano");
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) 24);
        parsePosition1.setErrorIndex((-120));
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        java.text.ParseException parseException2 = new java.text.ParseException("-1,440,000%", 840);
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder6.setRegion("US");
        java.util.Locale locale11 = builder10.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "canada_US");
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.CHINA;
        boolean boolean3 = field0.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getCountry();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale5.getDisplayScript(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.lang.String str10 = locale2.getDisplayVariant(locale5);
        java.lang.String str11 = locale5.toLanguageTag();
        java.lang.String str12 = locale5.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CN" + "'", str4, "CN");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh-TW" + "'", str11, "zh-TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh_TW" + "'", str12, "zh_TW");
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        java.util.Locale locale1 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale4 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale1.getDisplayLanguage(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.text.NumberFormat numberFormat11 = fractionFormat10.getNumeratorFormat();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(60);
        java.lang.Object obj15 = numberFormat11.parseObject("-1,936,600%", parsePosition14);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.setLanguageTag("en");
        java.util.Locale.Builder builder21 = builder16.setExtension('a', "Korean");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getISO3Language();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        java.lang.String str27 = locale22.toLanguageTag();
        java.lang.String str28 = locale22.getDisplayVariant();
        boolean boolean29 = locale22.hasExtensions();
        java.util.Locale.Builder builder30 = builder21.setLocale(locale22);
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.lang.String str34 = locale31.getISO3Language();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale35.getScript();
        java.util.Locale locale40 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str41 = locale35.getDisplayScript(locale40);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale40);
        java.lang.String str43 = locale31.getDisplayCountry(locale40);
        java.lang.String str44 = locale22.getDisplayCountry(locale31);
        java.lang.StringBuffer stringBuffer45 = null;
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((int) (short) -1);
        int int48 = fieldPosition47.getEndIndex();
        int int49 = fieldPosition47.getField();
        java.lang.String str50 = fieldPosition47.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer51 = numberFormat11.format((java.lang.Object) locale31, stringBuffer45, fieldPosition47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale4.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinese (taiwan)" + "'", str9, "chinese (taiwan)");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale40.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Canada" + "'", str43, "Canada");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]" + "'", str50, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        int int4 = numberFormat0.getMinimumIntegerDigits();
        int int5 = numberFormat0.getMinimumFractionDigits();
        java.lang.String str7 = numberFormat0.format((long) (byte) -101);
        java.lang.String str9 = numberFormat0.format(0.8735637970945083d);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
// flaky:         org.junit.Assert.assertEquals(currency1.toString(), "CAD");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100 %" + "'", str3, "100 %");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-10\240100 %" + "'", str7, "-10\240100 %");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "87 %" + "'", str9, "87 %");
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("France");
        java.util.Locale.Builder builder10 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setScript("chinese (JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600])");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: chinese (JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet6, filteringMode8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList22, strMap23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap25);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale27);
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str32 = java.util.Locale.lookupTag(languageRangeList26, (java.util.Collection<java.lang.String>) strSet31);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode8.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.Object obj2 = null;
        boolean boolean3 = field0.equals(obj2);
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.clear();
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "TWN");
        boolean boolean11 = field0.equals((java.lang.Object) "TWN");
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((-1));
        java.text.Format.Field field14 = fieldPosition13.getFieldAttribute();
        boolean boolean15 = field0.equals((java.lang.Object) fieldPosition13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat19 = properFractionFormat18.getWholeFormat();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean23 = numberFormat21.equals((java.lang.Object) numberFormat22);
        properFractionFormat18.setWholeFormat(numberFormat21);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26, numberFormat28);
        int int30 = numberFormat26.getMaximumIntegerDigits();
        properFractionFormat18.setDenominatorFormat(numberFormat26);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.String str34 = locale32.getVariant();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.setScript("");
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale38.getDisplayLanguage(locale40);
        java.util.Locale.Builder builder42 = builder37.setLocale(locale38);
        java.lang.String str43 = locale32.getDisplayVariant(locale38);
        java.lang.String str44 = locale38.getScript();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance(locale38);
        properFractionFormat18.setWholeFormat(numberFormat45);
        boolean boolean47 = field0.equals((java.lang.Object) numberFormat45);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale48.getISO3Language();
        java.util.Set<java.lang.Character> charSet50 = locale48.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale48);
        java.text.NumberFormat numberFormat52 = fractionFormat51.getNumeratorFormat();
        java.lang.Object obj53 = numberFormat52.clone();
        java.lang.StringBuffer stringBuffer54 = null;
        java.text.NumberFormat.Field field55 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition56 = new java.text.FieldPosition((java.text.Format.Field) field55);
        int int57 = fieldPosition56.getEndIndex();
        fieldPosition56.setBeginIndex((int) (byte) 100);
        java.util.Locale locale61 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale61);
        java.lang.String str64 = fractionFormat62.format((java.lang.Object) 100);
        boolean boolean65 = fieldPosition56.equals((java.lang.Object) fractionFormat62);
        java.text.Format.Field field66 = fieldPosition56.getFieldAttribute();
        fieldPosition56.setEndIndex((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer69 = numberFormat45.format((java.lang.Object) numberFormat52, stringBuffer54, fieldPosition56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(field14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh-TW" + "'", str33, "zh-TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinesisch" + "'", str41, "Chinesisch");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "kor" + "'", str49, "kor");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(field55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "100 0 / 1" + "'", str64, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(field66);
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.lang.String str11 = locale5.getExtension('a');
        java.lang.String str12 = locale5.getDisplayVariant();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.Object obj14 = numberFormat13.clone();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet9 = locale5.getExtensionKeys();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale5.getDisplayName(locale10);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale10.getDisplayVariant(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fractionFormat17);
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder9 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder2.setLanguageTag("JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) '4');
        parsePosition6.setErrorIndex(600);
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale9.getDisplayCountry(locale12);
        java.lang.String str17 = locale9.getISO3Language();
        java.lang.String str18 = locale9.getDisplayName();
        java.lang.String str20 = locale9.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction24.abs();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        boolean boolean30 = numberFormat28.equals((java.lang.Object) locale29);
        boolean boolean31 = fraction26.equals((java.lang.Object) locale29);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction26.abs();
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale33);
        boolean boolean35 = fraction32.equals((java.lang.Object) locale33);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale33);
        java.lang.String str37 = locale9.getDisplayScript(locale33);
        boolean boolean38 = parsePosition6.equals((java.lang.Object) str37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        java.text.NumberFormat numberFormat46 = properFractionFormat41.getWholeFormat();
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number50 = numberFormat46.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition49);
        int int51 = parsePosition49.getIndex();
        int int52 = parsePosition49.getErrorIndex();
        boolean boolean53 = parsePosition6.equals((java.lang.Object) parsePosition49);
        org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat2.parse("", parsePosition49);
        java.text.NumberFormat numberFormat55 = properFractionFormat2.getWholeFormat();
        boolean boolean56 = numberFormat55.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "France" + "'", str16, "France");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fra" + "'", str17, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str18, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(number50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale7.toLanguageTag();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.lang.String str15 = locale14.getScript();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.toLanguageTag();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale16.getDisplayScript(locale19);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale16.getDisplayCountry(locale23);
        java.util.Locale locale26 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str27 = locale23.getDisplayLanguage(locale26);
        java.lang.String str28 = locale14.getDisplayCountry(locale26);
        java.lang.String str29 = locale7.getDisplayVariant(locale14);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale32);
        java.util.Locale locale35 = java.util.Locale.getDefault(category0);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale36.getDisplayCountry();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale36.getDisplayCountry(locale38);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = locale42.getDisplayLanguage();
        java.lang.String str46 = locale36.getDisplayScript(locale42);
        java.text.NumberFormat.Field field47 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition48 = new java.text.FieldPosition((java.text.Format.Field) field47);
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field47, 1);
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field47, (int) (short) 100);
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.lang.String str56 = locale53.getDisplayCountry(locale54);
        java.util.Set<java.lang.String> strSet57 = locale54.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        boolean boolean59 = field47.equals((java.lang.Object) locale54);
        boolean boolean60 = locale54.hasExtensions();
        java.lang.String str61 = locale36.getDisplayLanguage(locale54);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale54);
        java.util.Locale locale63 = locale54.stripExtensions();
        java.util.Locale locale64 = locale63.stripExtensions();
        java.util.Locale.setDefault(category0, locale64);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str17, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-TW" + "'", str18, "zh-TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Taiwan" + "'", str24, "Taiwan");
        org.junit.Assert.assertEquals(locale26.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italian" + "'", str27, "Italian");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str40, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str45, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(field47);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Japan" + "'", str56, "Japan");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Italian" + "'", str61, "Italian");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException(120.0d, (int) (short) 1);
        java.lang.String str3 = fractionConversionException2.getPattern();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Unable to convert {0} to fraction after {1} iterations" + "'", str3, "Unable to convert {0} to fraction after {1} iterations");
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        properFractionFormat9.setWholeFormat(numberFormat11);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        properFractionFormat2.setWholeFormat(numberFormat14);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.AttributedCharacterIterator attributedCharacterIterator21 = numberFormat18.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj22 = numberFormat18.clone();
        numberFormat18.setMaximumFractionDigits(2147483647);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj34 = numberFormat29.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition33);
        java.lang.String str35 = parsePosition33.toString();
        java.lang.Number number36 = numberFormat18.parse("\ud55c\uad6d\uc5b4", parsePosition33);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str45 = fractionFormat43.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat46 = fractionFormat43.getNumeratorFormat();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale50 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale50.getDisplayCountry();
        java.lang.String str53 = locale47.getDisplayName(locale50);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale47.getDisplayLanguage(locale56);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale47);
        fractionFormat43.setNumeratorFormat(numberFormat60);
        properFractionFormat40.setWholeFormat(numberFormat60);
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getInstance(locale64);
        boolean boolean66 = numberFormat65.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat67 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction71 = properFractionFormat67.parse("0%", parsePosition70);
        java.lang.Object obj72 = properFractionFormat40.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition70);
        java.text.NumberFormat.Field field74 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition75 = new java.text.FieldPosition((java.text.Format.Field) field74);
        java.lang.String str76 = fieldPosition75.toString();
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale78 = java.util.Locale.ROOT;
        java.lang.String str79 = locale78.getDisplayScript();
        java.lang.String str80 = locale77.getDisplayName(locale78);
        boolean boolean81 = fieldPosition75.equals((java.lang.Object) locale78);
        fieldPosition75.setEndIndex((int) '#');
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getCurrencyInstance(locale84);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat85);
        java.text.ParsePosition parsePosition89 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction90 = properFractionFormat86.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition89);
        boolean boolean91 = fieldPosition75.equals((java.lang.Object) parsePosition89);
        java.lang.String str92 = parsePosition89.toString();
        int int93 = parsePosition89.getIndex();
        org.apache.commons.math.fraction.Fraction fraction94 = properFractionFormat40.parse("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition89);
        java.lang.Number number95 = numberFormat18.parse("-1 / 1", parsePosition89);
        org.apache.commons.math.fraction.Fraction fraction96 = properFractionFormat2.parse("\u97d3\u6587", parsePosition89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction98 = properFractionFormat2.parse("java.text.NumberFormat$Field(sign)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.NumberFormat$Field(sign)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(attributedCharacterIterator21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str35, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100 0 / 1" + "'", str45, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Korean" + "'", str53, "Korean");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str59, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(fraction71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(field74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str76, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Chinese (Taiwan)" + "'", str80, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNull(fraction90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str92, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNull(fraction94);
        org.junit.Assert.assertNull(number95);
        org.junit.Assert.assertNull(fraction96);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.lang.Object obj10 = numberFormat5.clone();
        java.lang.Object obj11 = numberFormat5.clone();
        boolean boolean12 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat17.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition20);
        int int22 = parsePosition20.getIndex();
        parsePosition20.setErrorIndex(2147483647);
        java.lang.Object obj25 = numberFormat5.parseObject("anglais (KOR)", parsePosition20);
        java.lang.String str26 = parsePosition20.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=2147483647,endIndex=0]", (int) (short) 1);
        int int3 = parseException2.getErrorOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getField();
        java.text.Format.Field field3 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition(field3);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition(field3, (int) 'u');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        double double11 = fraction9.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        long long24 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        long long37 = fraction35.longValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction31.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction18.multiply(fraction38);
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition42 = new java.text.FieldPosition((java.text.Format.Field) field40, (int) '#');
        java.text.Format.Field field43 = fieldPosition42.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction49.multiply(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction46.add(fraction53);
        boolean boolean56 = field43.equals((java.lang.Object) fraction46);
        java.lang.String str57 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction46);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction39.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction12.add(fraction46);
        boolean boolean60 = field3.equals((java.lang.Object) fraction59);
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition(field3);
        fieldPosition61.setBeginIndex((-3200));
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.008333333333333333d) + "'", double11 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertNotNull(field43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1 / 120" + "'", str57, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(0, (int) 'u');
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setScript("");
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.lang.String str8 = locale6.toLanguageTag();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale6.getDisplayScript(locale9);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.lang.String str14 = locale6.getDisplayCountry(locale13);
        java.util.Locale.Builder builder15 = builder3.setLocale(locale13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale13);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.multiply(fraction23);
        java.lang.String str25 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction19);
        java.lang.String str26 = numberFormat16.format((java.lang.Object) fraction19);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.divide(fraction43);
        int int46 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction40.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction40.abs();
        int int49 = fraction40.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction19.subtract(fraction40);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction2.subtract(fraction50);
        org.apache.commons.math.fraction.Fraction fraction52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction53 = fraction50.subtract(fraction52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The fraction must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str7, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh-TW" + "'", str8, "zh-TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zho" + "'", str11, "zho");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Taiwan" + "'", str14, "Taiwan");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "20 / 7" + "'", str25, "20 / 7");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2,857" + "'", str26, "2,857");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 60 + "'", int49 == 60);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.util.Locale.setDefault(locale2);
        java.lang.String str13 = locale2.getExtension('u');
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance();
        int int16 = numberFormat15.getMaximumFractionDigits();
        boolean boolean17 = numberFormat15.isParseIntegerOnly();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str23 = fractionFormat21.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat24 = fractionFormat21.getNumeratorFormat();
        numberFormat24.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat18, numberFormat24);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        numberFormat29.setMaximumFractionDigits(100);
        java.lang.String str34 = numberFormat29.format((long) 100);
        int int35 = numberFormat29.getMaximumFractionDigits();
        numberFormat29.setMinimumFractionDigits((int) (short) 0);
        int int38 = numberFormat29.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode39 = numberFormat29.getRoundingMode();
        numberFormat29.setGroupingUsed(false);
        java.lang.Object obj42 = numberFormat29.clone();
        properFractionFormat27.setNumeratorFormat(numberFormat29);
        java.text.NumberFormat numberFormat44 = properFractionFormat27.getDenominatorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat27.getDenominatorFormat();
        java.lang.Object obj46 = properFractionFormat27.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator47 = numberFormat14.formatToCharacterIterator((java.lang.Object) properFractionFormat27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100 0 / 1" + "'", str23, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "10,000%" + "'", str34, "10,000%");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode39 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode39.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(obj46);
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str5 = languageRange4.getRange();
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("zh-TW");
        double double8 = languageRange7.getWeight();
        double double9 = languageRange7.getWeight();
        java.util.Locale.LanguageRange languageRange11 = new java.util.Locale.LanguageRange("eng");
        java.util.Locale.LanguageRange languageRange13 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str14 = languageRange13.getRange();
        java.lang.String str15 = languageRange13.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] { languageRange4, languageRange7, languageRange11, languageRange13 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList29);
        java.util.Locale.FilteringMode filteringMode32 = null;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList29, filteringMode32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strSet38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList41, strMap42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strList49, filteringMode52);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Collection<java.lang.String> strCollection60 = null;
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strCollection60);
        java.lang.String str62 = java.util.Locale.lookupTag(languageRangeList41, strCollection60);
        java.util.Collection<java.util.Locale> localeCollection63 = null;
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter(languageRangeList41, localeCollection63, filteringMode64);
        java.util.Locale locale66 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.Locale locale67 = java.util.Locale.lookup(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.Locale locale69 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str70 = locale69.getDisplayLanguage();
        java.lang.String str71 = locale69.getISO3Language();
        java.util.Set<java.lang.String> strSet72 = locale69.getUnicodeLocaleKeys();
        java.lang.String str73 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet72);
        java.util.Locale locale76 = new java.util.Locale("1%", "\ub300\ub9cc");
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet77);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-tw" + "'", str5, "zh-tw");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-tw" + "'", str14, "zh-tw");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh-tw" + "'", str15, "zh-tw");
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode52.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode64.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNull(locale66);
        org.junit.Assert.assertNull(locale67);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str70, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zho" + "'", str71, "zho");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNull(str73);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strList78);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        int int7 = numberFormat4.getMinimumIntegerDigits();
        java.util.Currency currency8 = numberFormat4.getCurrency();
        java.util.Locale locale9 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat14);
        boolean boolean16 = numberFormat14.isGroupingUsed();
        boolean boolean17 = numberFormat14.isGroupingUsed();
        fractionFormat10.setNumeratorFormat(numberFormat14);
        java.lang.Object obj19 = numberFormat14.clone();
        java.lang.Object obj20 = numberFormat14.clone();
        java.util.Currency currency21 = numberFormat14.getCurrency();
        java.util.Locale locale25 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        int int27 = numberFormat26.getMaximumIntegerDigits();
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        numberFormat32.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency35 = numberFormat32.getCurrency();
        numberFormat26.setCurrency(currency35);
        numberFormat14.setCurrency(currency35);
        numberFormat4.setCurrency(currency35);
        java.math.RoundingMode roundingMode39 = numberFormat4.getRoundingMode();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode39 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode39.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.util.Locale locale4 = locale0.stripExtensions();
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale4.getScript();
        java.lang.String str7 = locale4.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\ub300\ub9cc" + "'", str3, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TW" + "'", str7, "TW");
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale locale57 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale57);
        java.lang.String str59 = locale57.getDisplayCountry();
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getIntegerInstance(locale57);
        java.lang.String str61 = locale54.getDisplayCountry(locale57);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale54);
        properFractionFormat53.setWholeFormat(numberFormat62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale64.getISO3Language();
        java.lang.String str66 = locale64.getDisplayCountry();
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str69 = locale67.getISO3Language();
        java.lang.String str70 = locale64.getDisplayScript(locale67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale64);
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getCurrencyInstance(locale64);
        java.lang.String str73 = locale64.getDisplayName();
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getInstance(locale64);
        int int75 = numberFormat74.getMinimumFractionDigits();
        properFractionFormat53.setWholeFormat(numberFormat74);
        java.text.ParsePosition parsePosition79 = new java.text.ParsePosition(8654399);
        org.apache.commons.math.fraction.Fraction fraction80 = properFractionFormat53.parse("java.text.ParsePosition[index=1,errorIndex=0]", parsePosition79);
        org.apache.commons.math.fraction.Fraction fraction84 = new org.apache.commons.math.fraction.Fraction((double) (short) 1, (double) (byte) 100, 117);
        int int85 = fraction84.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction88 = new org.apache.commons.math.fraction.Fraction(11, (int) (byte) 87);
        org.apache.commons.math.fraction.Fraction fraction89 = fraction84.subtract(fraction88);
        org.apache.commons.math.fraction.Fraction fraction90 = fraction89.abs();
        java.lang.StringBuffer stringBuffer91 = null;
        java.text.FieldPosition fieldPosition93 = new java.text.FieldPosition(121);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer94 = properFractionFormat53.format(fraction89, stringBuffer91, fieldPosition93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "France" + "'", str61, "France");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "kor" + "'", str65, "kor");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zho" + "'", str69, "zho");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str73, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(fraction80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(fraction89);
        org.junit.Assert.assertNotNull(fraction90);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 87L, (long) (-17), 1L);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat10 = properFractionFormat9.getNumeratorFormat();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale13.getISO3Language();
        java.lang.String str15 = locale11.getDisplayScript(locale13);
        java.lang.String str16 = locale11.toLanguageTag();
        java.lang.String str17 = locale11.getISO3Country();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.lang.String str20 = numberFormat18.format((double) (short) -1);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str25 = fractionFormat23.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat26 = fractionFormat23.getNumeratorFormat();
        numberFormat26.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency29 = numberFormat26.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        boolean boolean37 = numberFormat35.equals((java.lang.Object) strArray36);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        java.math.RoundingMode roundingMode50 = numberFormat42.getRoundingMode();
        numberFormat35.setRoundingMode(roundingMode50);
        numberFormat26.setRoundingMode(roundingMode50);
        numberFormat18.setRoundingMode(roundingMode50);
        properFractionFormat9.setWholeFormat(numberFormat18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = properFractionFormat9.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1" + "'", str20, "-1");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100 0 / 1" + "'", str25, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap10);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.FilteringMode filteringMode25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList22, filteringMode25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList34, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList34, (java.util.Collection<java.lang.String>) strList42, filteringMode45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strSet51);
        java.util.Collection<java.lang.String> strCollection53 = null;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, strCollection53);
        java.lang.String str55 = java.util.Locale.lookupTag(languageRangeList34, strCollection53);
        java.util.Collection<java.util.Locale> localeCollection56 = null;
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter(languageRangeList34, localeCollection56, filteringMode57);
        java.util.Locale locale59 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter(languageRangeList13, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter(languageRangeList11, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Collection<java.lang.String> strCollection62 = null;
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags(languageRangeList11, strCollection62);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode45.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNull(locale59);
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(strList63);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str4 = locale1.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.lang.String str7 = locale5.getDisplayLanguage();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        java.lang.String str13 = locale8.toLanguageTag();
        java.util.Set<java.lang.String> strSet14 = locale8.getUnicodeLocaleKeys();
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        boolean boolean18 = locale15.hasExtensions();
        java.lang.String str19 = locale8.getDisplayVariant(locale15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat23);
        numberFormat23.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field28);
        java.lang.String str30 = fieldPosition29.toString();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = locale31.getDisplayName(locale32);
        boolean boolean35 = fieldPosition29.equals((java.lang.Object) locale32);
        fieldPosition29.setEndIndex((int) '#');
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat40.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition43);
        boolean boolean45 = fieldPosition29.equals((java.lang.Object) parsePosition43);
        java.lang.Number number46 = numberFormat23.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition43);
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.abs();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getInstance(locale53);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        boolean boolean56 = numberFormat54.equals((java.lang.Object) locale55);
        boolean boolean57 = fraction52.equals((java.lang.Object) locale55);
        boolean boolean58 = parsePosition43.equals((java.lang.Object) locale55);
        java.lang.String str59 = locale8.getDisplayScript(locale55);
        java.lang.String str60 = locale5.getDisplayName(locale55);
        java.lang.String str61 = locale55.getVariant();
        java.lang.String str62 = locale1.getDisplayName(locale55);
        java.lang.String str63 = locale1.toLanguageTag();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ub300\ub9cc" + "'", str6, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str7, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str30, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (Taiwan)" + "'", str34, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str60, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str62, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ko" + "'", str63, "ko");
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.abs();
        long long26 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction27.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction27.negate();
        long long44 = fraction43.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.add(fraction52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction43.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.add(fraction64);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.divide(fraction70);
        int int73 = fraction67.intValue();
        float float74 = fraction67.floatValue();
        int int75 = fraction67.intValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction67.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction46.divide(fraction76);
        org.apache.commons.math.fraction.Fraction fraction79 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.abs();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction77.add(fraction80);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction12.subtract(fraction77);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction77.abs();
        long long84 = fraction77.longValue();
        int int85 = fraction77.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1 / 1" + "'", str28, "1 / 1");
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.016666668f + "'", float74 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 60 + "'", int85 == 60);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) 1.0f, 0);
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("\ub3c5\uc77c");
        java.util.Locale.setDefault(category0, locale11);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat3.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.Number number26 = numberFormat3.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition23);
        int int27 = numberFormat3.getMaximumIntegerDigits();
        java.lang.Object obj28 = numberFormat3.clone();
        boolean boolean29 = numberFormat3.isGroupingUsed();
        boolean boolean30 = numberFormat3.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("JPN", strMap1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale10 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category3, locale10);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction15.add(fraction21);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction24.divide(fraction27);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale30.getScript();
        boolean boolean33 = fraction29.equals((java.lang.Object) locale30);
        java.util.Locale.setDefault(category3, locale30);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36, numberFormat38);
        numberFormat38.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field43 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition((java.text.Format.Field) field43);
        java.lang.String str45 = fieldPosition44.toString();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale47.getDisplayScript();
        java.lang.String str49 = locale46.getDisplayName(locale47);
        boolean boolean50 = fieldPosition44.equals((java.lang.Object) locale47);
        fieldPosition44.setEndIndex((int) '#');
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getCurrencyInstance(locale53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction59 = properFractionFormat55.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition58);
        boolean boolean60 = fieldPosition44.equals((java.lang.Object) parsePosition58);
        java.lang.Number number61 = numberFormat38.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition58);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction65.abs();
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getInstance(locale68);
        java.util.Locale locale70 = java.util.Locale.getDefault();
        boolean boolean71 = numberFormat69.equals((java.lang.Object) locale70);
        boolean boolean72 = fraction67.equals((java.lang.Object) locale70);
        boolean boolean73 = parsePosition58.equals((java.lang.Object) locale70);
        java.util.Locale.setDefault(category3, locale70);
        java.lang.String str75 = locale70.getVariant();
        java.util.Set<java.lang.String> strSet76 = locale70.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet76);
        java.util.Locale locale79 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale79);
        java.lang.String str81 = locale79.getDisplayCountry();
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getIntegerInstance(locale79);
        java.util.Set<java.lang.String> strSet83 = locale79.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet83);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals(locale10.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(field43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str45, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese (Taiwan)" + "'", str49, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNull(fraction59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(number61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertEquals(locale79.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strList84);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category10, locale15);
        java.lang.String str17 = locale9.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale9);
        int int19 = numberFormat18.getMinimumIntegerDigits();
        properFractionFormat8.setWholeFormat(numberFormat18);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25, numberFormat27);
        boolean boolean29 = numberFormat27.isGroupingUsed();
        boolean boolean30 = numberFormat27.isGroupingUsed();
        fractionFormat23.setNumeratorFormat(numberFormat27);
        java.lang.Object obj32 = numberFormat27.clone();
        java.lang.Object obj33 = numberFormat27.clone();
        boolean boolean34 = numberFormat27.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat39.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition42);
        int int44 = parsePosition42.getIndex();
        parsePosition42.setErrorIndex(2147483647);
        java.lang.Object obj47 = numberFormat27.parseObject("anglais (KOR)", parsePosition42);
        parsePosition42.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction50 = properFractionFormat8.parse("NT$2,147,483,647.00", parsePosition42);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException54 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.Object[] objArray55 = fractionConversionException54.getArguments();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator56 = properFractionFormat8.formatToCharacterIterator((java.lang.Object) fractionConversionException54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "anglais" + "'", str17, "anglais");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(fraction50);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 0, -1]");
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale2);
        numberFormat11.setMinimumIntegerDigits((int) (byte) 1);
        java.lang.StringBuffer stringBuffer15 = null;
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer18 = numberFormat11.format((long) 600, stringBuffer15, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.Object[] objArray4 = fractionConversionException3.getArguments();
        java.lang.Object[] objArray5 = fractionConversionException3.getArguments();
        java.lang.String str6 = fractionConversionException3.getPattern();
        java.lang.String str7 = fractionConversionException3.getPattern();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException10 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 100);
        java.lang.Object[] objArray11 = fractionConversionException10.getArguments();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException15 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException19 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str20 = fractionConversionException19.getPattern();
        java.lang.Throwable[] throwableArray21 = fractionConversionException19.getSuppressed();
        fractionConversionException15.addSuppressed((java.lang.Throwable) fractionConversionException19);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException26 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str31 = fractionConversionException30.getPattern();
        java.lang.Throwable[] throwableArray32 = fractionConversionException30.getSuppressed();
        fractionConversionException26.addSuppressed((java.lang.Throwable) fractionConversionException30);
        fractionConversionException19.addSuppressed((java.lang.Throwable) fractionConversionException30);
        fractionConversionException10.addSuppressed((java.lang.Throwable) fractionConversionException30);
        java.lang.Object[] objArray36 = fractionConversionException10.getArguments();
        java.lang.String str37 = fractionConversionException10.getPattern();
        fractionConversionException3.addSuppressed((java.lang.Throwable) fractionConversionException10);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[0.0, 0, -1]");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str6, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str7, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[0.0, 100]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[0.0, 100]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str20, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[0.0, 100]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[0.0, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Unable to convert {0} to fraction after {1} iterations" + "'", str37, "Unable to convert {0} to fraction after {1} iterations");
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.divide(fraction9);
        double double11 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 10, 119);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction5.subtract(fraction14);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.01d + "'", double11 == 0.01d);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        java.util.Locale locale1 = new java.util.Locale("zh_tw");
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale2.getScript();
        java.util.Locale locale7 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str8 = locale2.getDisplayScript(locale7);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale7);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        java.lang.String str11 = locale1.getDisplayScript(locale7);
        java.lang.String str12 = locale7.getScript();
        java.lang.String str13 = locale7.getDisplayName();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale14.getDisplayName(locale15);
        java.lang.String str18 = locale7.getDisplayScript(locale15);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_tw");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale7.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str13, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) 87, (int) (short) 60);
        java.lang.String str3 = fractionConversionException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.fraction.FractionConversionException: Unable to convert 87 to fraction after 60 iterations" + "'", str3, "org.apache.commons.math.fraction.FractionConversionException: Unable to convert 87 to fraction after 60 iterations");
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction(10.0d);
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.negate();
        int int3 = fraction1.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.text.NumberFormat.Field field3 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        boolean boolean6 = field3.equals((java.lang.Object) locale5);
        java.lang.String str7 = locale5.getDisplayVariant();
        java.util.Locale.Builder builder8 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder11 = builder8.removeUnicodeLocaleAttribute("und");
        java.util.Locale locale12 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setRegion("canada");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: canada [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat6.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition9);
        org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat2.parse("zh_TW", parsePosition9);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        numberFormat16.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str20 = numberFormat16.format((double) 0.0f);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        int int26 = numberFormat25.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.text.NumberFormat numberFormat28 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat25, numberFormat28);
        java.math.RoundingMode roundingMode30 = numberFormat16.getRoundingMode();
        int int31 = numberFormat16.getMaximumFractionDigits();
        properFractionFormat2.setDenominatorFormat(numberFormat16);
        java.text.NumberFormat numberFormat33 = properFractionFormat2.getDenominatorFormat();
        numberFormat33.setMaximumIntegerDigits(7);
        numberFormat33.setMinimumFractionDigits((int) (byte) 24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0%" + "'", str20, "0%");
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(numberFormat33);
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "taiwan");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert -2 to fraction (599/17)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert -2 to fraction (599/17) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        boolean boolean12 = numberFormat10.isGroupingUsed();
        boolean boolean13 = numberFormat10.isGroupingUsed();
        fractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.lang.Object obj43 = fractionFormat22.parseObject("java.text.NumberFormat$Field(currency)", parsePosition39);
        java.lang.Object obj44 = numberFormat10.parseObject("Italian", parsePosition39);
        java.lang.Object obj45 = numberFormat1.parseObject("600", parsePosition39);
        java.util.Locale locale47 = new java.util.Locale("Chinese (Taiwan)");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        int int61 = numberFormat51.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat48, numberFormat51);
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str65 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction64);
        int int66 = fraction64.getNumerator();
        long long67 = fraction64.longValue();
        java.text.AttributedCharacterIterator attributedCharacterIterator68 = properFractionFormat63.formatToCharacterIterator((java.lang.Object) long67);
        java.util.Locale locale72 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale72);
        java.lang.String str75 = numberFormat73.format((double) 10L);
        java.util.Currency currency76 = numberFormat73.getCurrency();
        numberFormat73.setMaximumIntegerDigits((int) (short) 0);
        java.lang.String str80 = numberFormat73.format((long) 2);
        properFractionFormat63.setWholeFormat(numberFormat73);
        java.lang.String str83 = numberFormat73.format((double) 'x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals(locale47.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1 / 1" + "'", str65, "1 / 1");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(attributedCharacterIterator68);
        org.junit.Assert.assertEquals(locale72.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1,000%" + "'", str75, "1,000%");
        org.junit.Assert.assertNotNull(currency76);
        org.junit.Assert.assertEquals(currency76.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0%" + "'", str80, "0%");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0%" + "'", str83, "0%");
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("10");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Currency currency8 = numberFormat7.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        numberFormat15.setMinimumIntegerDigits(0);
        java.lang.String str19 = numberFormat15.format(1.0d);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat24);
        boolean boolean26 = numberFormat24.isGroupingUsed();
        boolean boolean27 = numberFormat24.isGroupingUsed();
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj31 = numberFormat24.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition30);
        java.lang.Object obj32 = numberFormat15.parseObject("Taiwan", parsePosition30);
        org.apache.commons.math.fraction.Fraction fraction33 = fractionFormat9.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)", parsePosition30);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat37);
        boolean boolean39 = numberFormat37.isGroupingUsed();
        boolean boolean40 = numberFormat37.isGroupingUsed();
        int int41 = numberFormat37.getMaximumIntegerDigits();
        fractionFormat9.setNumeratorFormat(numberFormat37);
        java.text.NumberFormat numberFormat43 = fractionFormat9.getNumeratorFormat();
        java.util.Locale locale46 = new java.util.Locale("java.text.ParseException: zh_TW", "zh-CN");
        java.lang.String str47 = locale46.getDisplayScript();
        java.lang.Object obj48 = locale46.clone();
        java.lang.StringBuffer stringBuffer49 = null;
        java.text.NumberFormat.Field field50 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition51 = new java.text.FieldPosition((java.text.Format.Field) field50);
        int int52 = fieldPosition51.getField();
        java.text.Format.Field field53 = fieldPosition51.getFieldAttribute();
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale54.getVariant();
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder57.setScript("");
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.lang.String str63 = locale60.getDisplayLanguage(locale62);
        java.util.Locale.Builder builder64 = builder59.setLocale(locale60);
        java.lang.String str65 = locale54.getDisplayVariant(locale60);
        java.lang.String str66 = locale60.getScript();
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getInstance(locale60);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getInstance(locale60);
        boolean boolean69 = fieldPosition51.equals((java.lang.Object) numberFormat68);
        java.text.NumberFormat.Field field70 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition71 = new java.text.FieldPosition((java.text.Format.Field) field70);
        int int72 = fieldPosition71.getEndIndex();
        fieldPosition71.setBeginIndex((int) (byte) 100);
        java.util.Locale locale76 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale76);
        java.lang.String str79 = fractionFormat77.format((java.lang.Object) 100);
        boolean boolean80 = fieldPosition71.equals((java.lang.Object) fractionFormat77);
        java.text.Format.Field field81 = fieldPosition71.getFieldAttribute();
        java.text.Format.Field field82 = fieldPosition71.getFieldAttribute();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException86 = new org.apache.commons.math.fraction.FractionConversionException((double) (short) 100, 0L, (long) 3);
        java.lang.Object[] objArray87 = fractionConversionException86.getArguments();
        boolean boolean88 = fieldPosition71.equals((java.lang.Object) objArray87);
        java.text.Format.Field field89 = fieldPosition71.getFieldAttribute();
        boolean boolean90 = fieldPosition51.equals((java.lang.Object) field89);
        java.lang.String str91 = fieldPosition51.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer92 = fractionFormat9.format((java.lang.Object) locale46, stringBuffer49, fieldPosition51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(fraction33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale46.toString(), "java.text.parseexception: zh_tw_ZH-CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "java.text.parseexception: zh_tw_ZH-CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "java.text.parseexception: zh_tw_ZH-CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "java.text.parseexception: zh_tw_ZH-CN");
        org.junit.Assert.assertNotNull(field50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(field53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zh-TW" + "'", str55, "zh-TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinesisch" + "'", str63, "Chinesisch");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(field70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals(locale76.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "100 0 / 1" + "'", str79, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(field81);
        org.junit.Assert.assertNotNull(field82);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[100.0, 0, 3]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[100.0, 0, 3]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(field89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]" + "'", str91, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str2 = locale0.getExtension('a');
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getScript();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        java.util.Locale locale3 = new java.util.Locale("1 / 100", "france (CHINESE (TAIWAN))", "java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category4);
        java.lang.String str7 = locale6.getLanguage();
        java.lang.String str8 = locale3.getDisplayCountry(locale6);
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale9.getDisplayCountry(locale11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.util.Locale.setDefault(category13, locale15);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category13, locale18);
        java.lang.String str20 = locale18.getISO3Language();
        java.lang.String str21 = locale9.getDisplayLanguage(locale18);
        java.lang.String str22 = locale6.getDisplayCountry(locale9);
        org.junit.Assert.assertEquals(locale3.toString(), "1 / 100_FRANCE (CHINESE (TAIWAN))_java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=0]");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr" + "'", str7, "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FRANCE (CHINESE (TAIWAN))" + "'", str8, "FRANCE (CHINESE (TAIWAN))");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str10, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Taiwan" + "'", str12, "Taiwan");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "chinois" + "'", str21, "chinois");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u52a0\u62ff\u5927" + "'", str22, "\u52a0\u62ff\u5927");
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        int int5 = numberFormat1.getMaximumIntegerDigits();
        numberFormat1.setGroupingUsed(true);
        java.lang.String str9 = numberFormat1.format((long) 119);
        numberFormat1.setMinimumFractionDigits(0);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        boolean boolean19 = numberFormat17.isGroupingUsed();
        boolean boolean20 = numberFormat17.isGroupingUsed();
        fractionFormat13.setNumeratorFormat(numberFormat17);
        java.lang.Object obj22 = numberFormat17.clone();
        java.text.ParseException parseException25 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        boolean boolean26 = numberFormat17.equals((java.lang.Object) parseException25);
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        numberFormat32.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency35 = numberFormat32.getCurrency();
        numberFormat17.setCurrency(currency35);
        int int37 = numberFormat17.getMinimumIntegerDigits();
        java.text.AttributedCharacterIterator attributedCharacterIterator38 = numberFormat1.formatToCharacterIterator((java.lang.Object) int37);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str43 = fractionFormat41.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat44 = fractionFormat41.getNumeratorFormat();
        numberFormat44.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency47 = numberFormat44.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44);
        java.util.Locale locale52 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        boolean boolean55 = numberFormat53.equals((java.lang.Object) strArray54);
        java.util.Locale locale59 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        int int61 = numberFormat60.getMaximumIntegerDigits();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        boolean boolean64 = numberFormat63.isGroupingUsed();
        java.util.Currency currency65 = numberFormat63.getCurrency();
        numberFormat60.setCurrency(currency65);
        java.util.Currency currency67 = numberFormat60.getCurrency();
        java.math.RoundingMode roundingMode68 = numberFormat60.getRoundingMode();
        numberFormat53.setRoundingMode(roundingMode68);
        numberFormat44.setRoundingMode(roundingMode68);
        numberFormat1.setRoundingMode(roundingMode68);
        java.util.Currency currency72 = numberFormat1.getCurrency();
        java.util.Locale locale74 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleAttributes();
        java.lang.String str76 = locale74.getISO3Language();
        java.util.Locale locale78 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat79 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale78);
        java.lang.String str80 = locale78.getDisplayCountry();
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getIntegerInstance(locale78);
        java.lang.String str82 = locale74.getDisplayLanguage(locale78);
        java.util.Set<java.lang.String> strSet83 = locale78.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat84 = java.text.NumberFormat.getIntegerInstance(locale78);
        java.text.ParsePosition parsePosition87 = new java.text.ParsePosition((int) '#');
        parsePosition87.setErrorIndex(600);
        int int90 = parsePosition87.getIndex();
        java.lang.Object obj91 = numberFormat84.parseObject("\u610f\u5927\u5229\u6587", parsePosition87);
        java.lang.Number number92 = numberFormat1.parse("java.text.ParsePosition[index=52,errorIndex=52]", parsePosition87);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "119" + "'", str9, "119");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator38);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100 0 / 1" + "'", str43, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals(locale59.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2147483647 + "'", int61 == 2147483647);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(currency65);
        org.junit.Assert.assertEquals(currency65.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency67);
        org.junit.Assert.assertEquals(currency67.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode68 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode68.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency72);
        org.junit.Assert.assertEquals(currency72.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zho" + "'", str76, "zho");
        org.junit.Assert.assertEquals(locale78.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Chinese" + "'", str82, "Chinese");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(numberFormat84);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(number92);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat13 = fractionFormat10.getNumeratorFormat();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale17 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayName(locale17);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale14.getDisplayLanguage(locale23);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale14);
        fractionFormat10.setNumeratorFormat(numberFormat27);
        properFractionFormat7.setWholeFormat(numberFormat27);
        fractionFormat4.setNumeratorFormat(numberFormat27);
        java.text.NumberFormat numberFormat31 = fractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat32 = fractionFormat4.getDenominatorFormat();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance();
        numberFormat33.setMaximumIntegerDigits(2147483647);
        java.lang.String str37 = numberFormat33.format((long) 'a');
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        numberFormat40.setMinimumIntegerDigits(1728000);
        numberFormat40.setMaximumIntegerDigits(600);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32, numberFormat33, numberFormat40);
        java.lang.Object obj46 = numberFormat32.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Korean" + "'", str20, "Korean");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str26, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9\240700 %" + "'", str37, "9\240700 %");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(obj46);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale5);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale5);
        java.util.Locale locale13 = new java.util.Locale("kor", "chinois", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str14 = locale13.getDisplayLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.lang.String str16 = locale13.getVariant();
        java.lang.String str17 = locale5.getDisplayVariant(locale13);
        java.lang.String str18 = locale13.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "kor_CHINOIS_java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str14, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str16, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10,000%" + "'", str17, "10,000%");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale7.getISO3Language();
        java.lang.String str10 = locale4.getDisplayScript(locale7);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale4.getDisplayCountry(locale11);
        java.util.Locale.Builder builder13 = builder1.setLocale(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        boolean boolean15 = field0.equals((java.lang.Object) locale11);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale18.getDisplayCountry();
        java.lang.String str22 = locale18.getISO3Country();
        java.util.Locale locale23 = locale18.stripExtensions();
        boolean boolean24 = field0.equals((java.lang.Object) locale23);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field0, 120);
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 599);
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field0, 35);
        java.text.Format.Field field31 = fieldPosition30.getFieldAttribute();
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition(field31, (int) (short) 2);
        java.lang.String str34 = field31.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str5, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-TW" + "'", str6, "zh-TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Taiwan" + "'", str12, "Taiwan");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ub300\ub9cc" + "'", str21, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "TWN" + "'", str22, "TWN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(field31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str34, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        properFractionFormat9.setWholeFormat(numberFormat11);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        properFractionFormat2.setWholeFormat(numberFormat14);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction19.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.divide(fraction31);
        int int34 = fraction28.intValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction28.abs();
        java.lang.StringBuffer stringBuffer37 = null;
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field39 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean40 = field38.equals((java.lang.Object) field39);
        java.text.FieldPosition fieldPosition42 = new java.text.FieldPosition((java.text.Format.Field) field38, (-1));
        java.text.NumberFormat.Field field43 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field43, (int) '#');
        boolean boolean46 = field38.equals((java.lang.Object) fieldPosition45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer47 = properFractionFormat2.format(fraction28, stringBuffer37, fieldPosition45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertNotNull(field39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(field43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        java.util.Locale locale3 = new java.util.Locale("java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_US", "\uc911\uad6d\uc5b4\ub300\ub9cc)", "it-IT");
        java.util.Locale locale4 = locale3.stripExtensions();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4\ub300\ub9cc)_it-IT");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "\uc911\uad6d\uc5b4\ub300\ub9cc)_it-IT");
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction6 = properFractionFormat2.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition5);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        boolean boolean13 = numberFormat11.isGroupingUsed();
        boolean boolean14 = numberFormat11.isGroupingUsed();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat20 = fractionFormat19.getNumeratorFormat();
        properFractionFormat2.setNumeratorFormat(numberFormat20);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getISO3Country();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        int int33 = numberFormat32.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        java.util.Currency currency37 = numberFormat35.getCurrency();
        numberFormat32.setCurrency(currency37);
        java.util.Currency currency39 = numberFormat32.getCurrency();
        int int40 = numberFormat32.getMaximumFractionDigits();
        java.lang.Object obj41 = numberFormat32.clone();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        numberFormat43.setMaximumFractionDigits(100);
        numberFormat43.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str50 = numberFormat43.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat32, numberFormat43);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getWholeFormat();
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        int int58 = numberFormat57.getMaximumIntegerDigits();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        boolean boolean61 = numberFormat60.isGroupingUsed();
        java.util.Currency currency62 = numberFormat60.getCurrency();
        numberFormat57.setCurrency(currency62);
        java.util.Currency currency64 = numberFormat57.getCurrency();
        java.math.RoundingMode roundingMode65 = numberFormat57.getRoundingMode();
        properFractionFormat51.setWholeFormat(numberFormat57);
        java.text.NumberFormat numberFormat67 = properFractionFormat51.getWholeFormat();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getInstance(locale69);
        boolean boolean71 = numberFormat70.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition((int) '4');
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat72.parse("0%", parsePosition75);
        java.lang.Object obj77 = properFractionFormat51.parseObject("", parsePosition75);
        org.apache.commons.math.fraction.Fraction fraction78 = properFractionFormat2.parse("60,000%", parsePosition75);
        parsePosition75.setIndex(2);
        java.lang.String str81 = parsePosition75.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNull(fraction6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100%" + "'", str50, "100%");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode65 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode65.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(fraction78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "java.text.ParsePosition[index=2,errorIndex=51]" + "'", str81, "java.text.ParsePosition[index=2,errorIndex=51]");
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        java.util.Locale locale1 = new java.util.Locale("1,100%");
        java.lang.String str2 = locale1.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "1,100%");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,100%" + "'", str2, "1,100%");
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getBeginIndex();
        java.text.NumberFormat.Field field3 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean4 = fieldPosition1.equals((java.lang.Object) field3);
        java.text.Format.Field field5 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition(field5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.lang.Object obj10 = properFractionFormat9.clone();
        java.text.NumberFormat numberFormat11 = properFractionFormat9.getWholeFormat();
        int int12 = numberFormat11.getMaximumIntegerDigits();
        java.lang.Object obj13 = numberFormat11.clone();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale14);
        java.util.Currency currency17 = numberFormat16.getCurrency();
        numberFormat16.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        int int25 = numberFormat24.getMaximumIntegerDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        boolean boolean28 = numberFormat27.isGroupingUsed();
        java.util.Currency currency29 = numberFormat27.getCurrency();
        numberFormat24.setCurrency(currency29);
        java.util.Currency currency31 = numberFormat24.getCurrency();
        numberFormat16.setCurrency(currency31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        numberFormat34.setMaximumFractionDigits(100);
        java.lang.String str39 = numberFormat34.format((long) 100);
        int int40 = numberFormat34.getMaximumFractionDigits();
        numberFormat34.setMinimumFractionDigits((int) (short) 0);
        int int43 = numberFormat34.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode44 = numberFormat34.getRoundingMode();
        numberFormat34.setGroupingUsed(false);
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        boolean boolean59 = numberFormat58.isGroupingUsed();
        properFractionFormat56.setWholeFormat(numberFormat58);
        java.text.NumberFormat numberFormat61 = properFractionFormat56.getWholeFormat();
        properFractionFormat49.setWholeFormat(numberFormat61);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat34, numberFormat61);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat34);
        boolean boolean66 = field5.equals((java.lang.Object) numberFormat11);
        java.math.RoundingMode roundingMode67 = numberFormat11.getRoundingMode();
        int int68 = numberFormat11.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "TWD");
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "10,000%" + "'", str39, "10,000%");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
        org.junit.Assert.assertTrue("'" + roundingMode44 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode44.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + roundingMode67 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode67.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.lang.String str1 = field0.toString();
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale5.getDisplayLanguage(locale7);
        java.util.Locale.Builder builder9 = builder4.setLocale(locale5);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("100%");
        java.lang.String str12 = locale5.getDisplayScript(locale11);
        boolean boolean13 = field0.equals((java.lang.Object) str12);
        java.lang.String str14 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str1, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinesisch" + "'", str8, "Chinesisch");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str14, "java.text.NumberFormat$Field(grouping separator)");
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.lang.Object obj5 = fractionFormat4.clone();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        boolean boolean8 = numberFormat7.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj18 = numberFormat13.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition17);
        properFractionFormat9.setNumeratorFormat(numberFormat13);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Locale locale24 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale24);
        java.lang.String str27 = fractionFormat25.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat28 = fractionFormat25.getNumeratorFormat();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = locale29.getDisplayName(locale32);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = locale36.getDisplayScript(locale38);
        java.lang.String str41 = locale29.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale29);
        fractionFormat25.setNumeratorFormat(numberFormat42);
        properFractionFormat22.setWholeFormat(numberFormat42);
        properFractionFormat9.setWholeFormat(numberFormat42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.NumberFormat numberFormat47 = properFractionFormat46.getDenominatorFormat();
        java.text.NumberFormat numberFormat48 = properFractionFormat46.getWholeFormat();
        java.util.Locale locale52 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        int int54 = numberFormat53.getMaximumIntegerDigits();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        boolean boolean57 = numberFormat56.isGroupingUsed();
        java.util.Currency currency58 = numberFormat56.getCurrency();
        numberFormat53.setCurrency(currency58);
        java.util.Currency currency60 = numberFormat53.getCurrency();
        java.math.RoundingMode roundingMode61 = numberFormat53.getRoundingMode();
        numberFormat48.setRoundingMode(roundingMode61);
        fractionFormat4.setNumeratorFormat(numberFormat48);
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.lang.String str66 = locale65.getDisplayScript();
        java.lang.String str67 = locale64.getDisplayCountry(locale65);
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getNumberInstance(locale64);
        int int69 = numberFormat68.getMinimumFractionDigits();
        java.lang.String str71 = numberFormat68.format((-1.0d));
        fractionFormat4.setDenominatorFormat(numberFormat68);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100 0 / 1" + "'", str27, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Korean" + "'", str35, "Korean");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "kor" + "'", str39, "kor");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str41, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(currency58);
        org.junit.Assert.assertEquals(currency58.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency60);
        org.junit.Assert.assertEquals(currency60.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Japan" + "'", str67, "Japan");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1" + "'", str71, "-1");
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        numberFormat5.setMaximumIntegerDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        numberFormat13.setMaximumFractionDigits(100);
        java.lang.String str18 = numberFormat13.format((long) 100);
        int int19 = numberFormat13.getMaximumFractionDigits();
        numberFormat13.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean31 = numberFormat30.isGroupingUsed();
        properFractionFormat28.setWholeFormat(numberFormat30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat23, numberFormat30);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getCurrencyInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction41 = properFractionFormat37.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean47 = numberFormat46.isGroupingUsed();
        properFractionFormat44.setWholeFormat(numberFormat46);
        java.text.NumberFormat numberFormat49 = properFractionFormat44.getWholeFormat();
        properFractionFormat37.setWholeFormat(numberFormat49);
        java.text.NumberFormat numberFormat51 = properFractionFormat37.getNumeratorFormat();
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale53);
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale56);
        java.util.Currency currency59 = numberFormat58.getCurrency();
        numberFormat58.setMinimumIntegerDigits(1);
        numberFormat58.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition66 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj67 = numberFormat58.parseObject("Japan", parsePosition66);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException71 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str72 = fractionConversionException71.getPattern();
        java.lang.Throwable[] throwableArray73 = fractionConversionException71.getSuppressed();
        java.lang.Object[] objArray74 = fractionConversionException71.getArguments();
        boolean boolean75 = parsePosition66.equals((java.lang.Object) objArray74);
        int int76 = parsePosition66.getIndex();
        int int77 = parsePosition66.getIndex();
        java.lang.Object obj78 = fractionFormat54.parseObject("\ud55c\uad6d\uc5b4", parsePosition66);
        org.apache.commons.math.fraction.Fraction fraction79 = properFractionFormat37.parse("und", parsePosition66);
        parsePosition66.setIndex((int) 'u');
        parsePosition66.setErrorIndex(0);
        java.lang.Number number84 = numberFormat13.parse("japan", parsePosition66);
        org.apache.commons.math.fraction.Fraction fraction85 = properFractionFormat10.parse("-120 / 1", parsePosition66);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "10,000%" + "'", str18, "10,000%");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNull(fraction41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "TWD");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str72, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(fraction79);
        org.junit.Assert.assertNull(number84);
        org.junit.Assert.assertNull(fraction85);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.Object obj7 = numberFormat2.clone();
        java.lang.String str9 = numberFormat2.format((long) '4');
        java.lang.Class<?> wildcardClass10 = numberFormat2.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "52" + "'", str9, "52");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        java.text.NumberFormat numberFormat32 = fractionFormat31.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat32);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category4, locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        fractionFormat13.setDenominatorFormat(numberFormat17);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.setScript("");
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale26.getDisplayLanguage(locale28);
        java.util.Locale.Builder builder30 = builder25.setLocale(locale26);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("chinois (Taiwan)");
        java.util.Locale.Builder builder33 = builder30.setLocale(locale32);
        boolean boolean34 = numberFormat17.equals((java.lang.Object) builder30);
        numberFormat17.setMaximumFractionDigits(96);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "chinois" + "'", str12, "chinois");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinesisch" + "'", str29, "Chinesisch");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.lang.Object obj10 = numberFormat5.clone();
        java.text.ParseException parseException13 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        boolean boolean14 = numberFormat5.equals((java.lang.Object) parseException13);
        java.util.Locale locale16 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str19 = fractionFormat17.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat20 = fractionFormat17.getNumeratorFormat();
        numberFormat20.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency23 = numberFormat20.getCurrency();
        numberFormat5.setCurrency(currency23);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        boolean boolean27 = numberFormat26.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj37 = numberFormat32.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition36);
        properFractionFormat28.setNumeratorFormat(numberFormat32);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale43 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale43);
        java.lang.String str46 = fractionFormat44.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat47 = fractionFormat44.getNumeratorFormat();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.util.Locale locale49 = locale48.stripExtensions();
        java.util.Locale locale51 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale51);
        java.lang.String str53 = locale51.getDisplayCountry();
        java.lang.String str54 = locale48.getDisplayName(locale51);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale57.getISO3Language();
        java.lang.String str59 = locale55.getDisplayScript(locale57);
        java.lang.String str60 = locale48.getDisplayLanguage(locale57);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getNumberInstance(locale48);
        fractionFormat44.setNumeratorFormat(numberFormat61);
        properFractionFormat41.setWholeFormat(numberFormat61);
        properFractionFormat28.setWholeFormat(numberFormat61);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.text.NumberFormat numberFormat66 = properFractionFormat65.getDenominatorFormat();
        java.text.NumberFormat numberFormat67 = properFractionFormat65.getNumeratorFormat();
        java.text.NumberFormat numberFormat68 = properFractionFormat65.getNumeratorFormat();
        java.util.Locale locale72 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale72);
        java.lang.String str75 = numberFormat73.format((double) 10L);
        properFractionFormat65.setDenominatorFormat(numberFormat73);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat73);
        numberFormat5.setMaximumFractionDigits((int) (byte) -119);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100 0 / 1" + "'", str19, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100 0 / 1" + "'", str46, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Korean" + "'", str54, "Korean");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "kor" + "'", str58, "kor");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertEquals(locale72.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1,000%" + "'", str75, "1,000%");
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.text.NumberFormat numberFormat16 = fractionFormat15.getNumeratorFormat();
        java.text.NumberFormat numberFormat17 = fractionFormat15.getNumeratorFormat();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        java.lang.String str10 = locale9.getDisplayScript();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Locale locale12 = locale9.stripExtensions();
        java.lang.String str13 = locale9.getISO3Language();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        double double17 = fraction6.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        float float21 = fraction20.floatValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction6.subtract(fraction20);
        java.text.NumberFormat.Field field23 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition((java.text.Format.Field) field23, (int) '#');
        java.text.Format.Field field26 = fieldPosition25.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction29.add(fraction36);
        boolean boolean39 = field26.equals((java.lang.Object) fraction29);
        double double40 = fraction29.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        float float44 = fraction43.floatValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction29.subtract(fraction43);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction6.subtract(fraction45);
        long long47 = fraction46.longValue();
        org.apache.commons.math.fraction.Fraction fraction49 = new org.apache.commons.math.fraction.Fraction((-0.1d));
        org.apache.commons.math.fraction.Fraction fraction50 = fraction46.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.abs();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.008333333333333333d) + "'", double17 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 1.0f + "'", float21 == 1.0f);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-0.008333333333333333d) + "'", double40 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 1.0f + "'", float44 == 1.0f);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        boolean boolean8 = numberFormat6.equals((java.lang.Object) locale7);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setScript("");
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale12.getDisplayCountry(locale19);
        java.util.Locale.Builder builder21 = builder9.setLocale(locale19);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str23 = locale7.getDisplayVariant(locale19);
        java.lang.String str24 = locale7.getISO3Country();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        java.util.Locale locale27 = builder25.build();
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        boolean boolean31 = field28.equals((java.lang.Object) locale30);
        java.lang.String str32 = locale30.getDisplayVariant();
        java.util.Locale.Builder builder33 = builder25.setLocale(locale30);
        java.util.Locale.Builder builder34 = builder33.clear();
        boolean boolean35 = locale7.equals((java.lang.Object) builder33);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        numberFormat4.setMinimumFractionDigits((int) (short) 1);
        boolean boolean16 = numberFormat4.isGroupingUsed();
        boolean boolean17 = numberFormat4.isParseIntegerOnly();
        boolean boolean18 = numberFormat4.isParseIntegerOnly();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean21 = numberFormat20.isGroupingUsed();
        numberFormat20.setGroupingUsed(true);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        numberFormat20.setRoundingMode(roundingMode36);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode44 = numberFormat42.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42);
        numberFormat42.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat20, numberFormat42);
        numberFormat4.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getWholeFormat();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode44 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode44.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat52);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction8.subtract(fraction27);
        int int30 = fraction27.getDenominator();
        int int31 = fraction27.getDenominator();
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale34);
        java.util.Locale.setDefault(category32, locale34);
        java.util.Locale locale37 = java.util.Locale.getDefault(category32);
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.util.Locale.setDefault(category38, locale39);
        java.util.Locale.setDefault(category32, locale39);
        boolean boolean43 = fraction27.equals((java.lang.Object) locale39);
        int int44 = fraction27.intValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getDisplayName();
        java.lang.String str3 = locale0.getDisplayVariant();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumFractionDigits(34);
        java.text.NumberFormat.Field field9 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field9, (int) (byte) 0);
        java.lang.String str12 = fieldPosition11.toString();
        fieldPosition11.setBeginIndex(0);
        java.lang.StringBuffer stringBuffer15 = null;
        java.text.NumberFormat.Field field16 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field16);
        int int18 = fieldPosition17.getEndIndex();
        int int19 = fieldPosition17.getField();
        fieldPosition17.setEndIndex(0);
        int int22 = fieldPosition17.getField();
        int int23 = fieldPosition17.getEndIndex();
        int int24 = fieldPosition17.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer25 = numberFormat5.format((java.lang.Object) fieldPosition11, stringBuffer15, fieldPosition17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str2, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "XXX");
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str12, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Collection<java.lang.String> strCollection6 = null;
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList27);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strList27, filteringMode30);
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strList27);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Collection<java.lang.String> strCollection39 = null;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strMap41);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strSet51);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags(languageRangeList46, (java.util.Collection<java.lang.String>) strSet51, filteringMode53);
        java.lang.String str55 = java.util.Locale.lookupTag(languageRangeList44, (java.util.Collection<java.lang.String>) strList54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList44, strMap56);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strSet62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, strMap64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList65, strMap66);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.lang.String>) strList73);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags(languageRangeList65, (java.util.Collection<java.lang.String>) strList73, filteringMode76);
        java.util.Locale.LanguageRange[] languageRangeArray78 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList79 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList79, languageRangeArray78);
        java.util.Locale locale81 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, (java.util.Collection<java.lang.String>) strSet82);
        java.util.Collection<java.lang.String> strCollection84 = null;
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, strCollection84);
        java.lang.String str86 = java.util.Locale.lookupTag(languageRangeList65, strCollection84);
        java.util.Collection<java.util.Locale> localeCollection87 = null;
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter(languageRangeList65, localeCollection87, filteringMode88);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter(languageRangeList44, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.Locale locale91 = java.util.Locale.lookup(languageRangeList42, (java.util.Collection<java.util.Locale>) localeList90);
        java.util.Locale locale92 = java.util.Locale.lookup(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList90);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap93 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList94 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap93);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode30.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode53.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode76.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(languageRangeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode88.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNull(locale91);
        org.junit.Assert.assertNull(locale92);
        org.junit.Assert.assertNotNull(languageRangeList94);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (byte) 10);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) field8);
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field13, (int) '#');
        java.text.Format.Field field16 = fieldPosition15.getFieldAttribute();
        boolean boolean17 = field8.equals((java.lang.Object) fieldPosition15);
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str19 = field8.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str19, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        java.lang.String str6 = locale5.getDisplayCountry();
        java.lang.String str7 = locale5.getVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "HI!" + "'", str6, "HI!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str6 = numberFormat4.format((double) 10L);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.abs();
        long long18 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction12.multiply(fraction16);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction12.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        int int38 = fraction37.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction33.subtract(fraction37);
        java.lang.StringBuffer stringBuffer40 = null;
        java.text.NumberFormat.Field field41 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field42 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean43 = field41.equals((java.lang.Object) field42);
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field41, (-1));
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition((java.text.Format.Field) field41, 0);
        java.text.FieldPosition fieldPosition48 = new java.text.FieldPosition((java.text.Format.Field) field41);
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field41, (int) (short) 1);
        java.text.Format.Field field51 = fieldPosition50.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer52 = properFractionFormat7.format(fraction37, stringBuffer40, fieldPosition50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000%" + "'", str6, "1,000%");
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(field41);
        org.junit.Assert.assertNotNull(field42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(field51);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency8 = numberFormat5.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.lang.Object obj10 = numberFormat5.clone();
        java.lang.String str12 = numberFormat5.format((double) 300L);
        java.lang.String str14 = numberFormat5.format(0.0d);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "300" + "'", str12, "300");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getIntegerInstance();
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat2 = fractionFormat1.getNumeratorFormat();
        java.lang.String str4 = numberFormat2.format((double) (-2));
        int int5 = numberFormat2.getMaximumFractionDigits();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance();
        numberFormat6.setMaximumIntegerDigits(2147483647);
        int int9 = numberFormat6.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0, numberFormat2, numberFormat6);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.util.Set<java.lang.Character> charSet14 = locale12.getExtensionKeys();
        java.util.Locale locale15 = java.util.Locale.US;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale12.getDisplayVariant(locale15);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat24);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj29 = numberFormat24.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition28);
        java.lang.String str30 = parsePosition28.toString();
        boolean boolean32 = parsePosition28.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction33 = properFractionFormat19.parse("java.text.ParseException: zh_TW", parsePosition28);
        java.text.NumberFormat numberFormat34 = properFractionFormat19.getDenominatorFormat();
        int int35 = numberFormat34.getMinimumIntegerDigits();
        java.lang.Object obj36 = numberFormat34.clone();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("3,500.0000000000000000000000000000000000000000000000000000%");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        boolean boolean41 = numberFormat34.equals((java.lang.Object) locale38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = numberFormat0.format((java.lang.Object) locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-2" + "'", str4, "-2");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str30, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(fraction33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale7.getDisplayCountry(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale.Builder builder14 = builder6.setLocale(locale8);
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder14.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setLanguage("java.text.FieldPosition[field=35,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: java.text.FieldPosition[field=35,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japan" + "'", str10, "Japan");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.CHINA;
        boolean boolean3 = field0.equals((java.lang.Object) locale2);
        java.lang.String str4 = locale2.getDisplayVariant();
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category6, locale11);
        java.lang.String str13 = locale5.getDisplayLanguage(locale11);
        java.util.Set<java.lang.String> strSet14 = locale5.getUnicodeLocaleKeys();
        java.lang.String str15 = locale2.getDisplayName(locale5);
        java.util.Locale.setDefault(locale5);
        java.lang.String str17 = locale5.getLanguage();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "anglais" + "'", str13, "anglais");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (China)" + "'", str15, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction4.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction25.divide(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction27.reciprocal();
        int int30 = fraction29.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction33.add(fraction40);
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        int int47 = fraction46.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction33.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction29.add(fraction33);
        float float50 = fraction29.floatValue();
        int int51 = fraction29.intValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        java.util.Locale locale2 = new java.util.Locale("Taiwan", "Chinesisch (Taiwan)");
        java.lang.String str3 = locale2.getDisplayVariant();
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getDisplayVariant();
        java.lang.String str6 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "taiwan_CHINESISCH (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CHINESISCH (TAIWAN)" + "'", str6, "CHINESISCH (TAIWAN)");
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setLanguage("TWN");
        java.util.Locale.Builder builder10 = builder7.clearExtensions();
        java.util.Locale locale12 = new java.util.Locale("TWN");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale.Builder builder14 = builder7.setLocale(locale12);
        java.lang.String str15 = locale12.getVariant();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale12.toString(), "twn");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) locale15);
        java.lang.String str18 = locale15.getISO3Language();
        java.lang.String str19 = locale15.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean25 = numberFormat23.equals((java.lang.Object) numberFormat24);
        java.lang.Object obj26 = numberFormat24.clone();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean31 = numberFormat29.equals((java.lang.Object) numberFormat30);
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        int int38 = numberFormat37.getMaximumIntegerDigits();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean41 = numberFormat40.isGroupingUsed();
        java.util.Currency currency42 = numberFormat40.getCurrency();
        numberFormat37.setCurrency(currency42);
        java.util.Currency currency44 = numberFormat37.getCurrency();
        java.math.RoundingMode roundingMode45 = numberFormat37.getRoundingMode();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) 'a');
        java.lang.String str49 = parsePosition48.toString();
        java.lang.String str50 = parsePosition48.toString();
        java.lang.Object obj51 = numberFormat37.parseObject("zho", parsePosition48);
        java.lang.String str52 = parsePosition48.toString();
        java.lang.Number number53 = numberFormat30.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition48);
        java.lang.Object obj54 = numberFormat24.parseObject("cor\351en", parsePosition48);
        parsePosition48.setIndex((int) (byte) 100);
        java.lang.Object obj57 = fractionFormat20.parseObject("JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)", parsePosition48);
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayScript();
        java.lang.String str61 = locale58.getDisplayCountry(locale59);
        java.util.Set<java.lang.String> strSet62 = locale59.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale59);
        int int64 = numberFormat63.getMaximumIntegerDigits();
        int int65 = numberFormat63.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = new org.apache.commons.math.fraction.FractionFormat(numberFormat63);
        numberFormat63.setParseIntegerOnly(false);
        boolean boolean69 = parsePosition48.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode45.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str49, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str50, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str52, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Japan" + "'", str61, "Japan");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        java.util.Locale locale3 = new java.util.Locale("French (Canada)", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=0,endIndex=0]", "97");
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder4.build();
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String str8 = locale3.getDisplayLanguage(locale6);
        org.junit.Assert.assertEquals(locale3.toString(), "french (canada)_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT SIGN),BEGININDEX=0,ENDINDEX=0]_97");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "french (canada)" + "'", str8, "french (canada)");
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.Format.Field field2 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        boolean boolean5 = numberFormat4.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8, numberFormat10);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj15 = numberFormat10.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition14);
        properFractionFormat6.setNumeratorFormat(numberFormat10);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale17);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str24 = fractionFormat22.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat25 = fractionFormat22.getNumeratorFormat();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.lang.String str32 = locale26.getDisplayName(locale29);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayScript();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = locale33.getDisplayScript(locale35);
        java.lang.String str38 = locale26.getDisplayLanguage(locale35);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getNumberInstance(locale26);
        fractionFormat22.setNumeratorFormat(numberFormat39);
        properFractionFormat19.setWholeFormat(numberFormat39);
        properFractionFormat6.setWholeFormat(numberFormat39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.NumberFormat numberFormat44 = properFractionFormat43.getDenominatorFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat43.getNumeratorFormat();
        java.text.NumberFormat numberFormat47 = properFractionFormat43.getNumeratorFormat();
        boolean boolean48 = field2.equals((java.lang.Object) numberFormat47);
        java.lang.String str49 = field2.toString();
        java.text.FieldPosition fieldPosition51 = new java.text.FieldPosition(field2, (int) (short) -1);
        java.text.Format.Field field52 = fieldPosition51.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100 0 / 1" + "'", str24, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Korean" + "'", str32, "Korean");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "kor" + "'", str36, "kor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str38, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.NumberFormat$Field(exponent sign)" + "'", str49, "java.text.NumberFormat$Field(exponent sign)");
        org.junit.Assert.assertNotNull(field52);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        parsePosition7.setIndex(119);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        boolean boolean14 = parsePosition7.equals((java.lang.Object) category11);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.util.Locale.setDefault(category11, locale18);
        java.util.Set<java.lang.String> strSet24 = locale18.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getNumberInstance(locale18);
        numberFormat25.setMinimumFractionDigits(11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(numberFormat25);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.lang.Class<?> wildcardClass7 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.fraction.fractionconversionexception:overflowtryingtoconvert0tofraction(0/-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.lang.String str7 = locale2.getDisplayScript(locale5);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale10.getISO3Language();
        java.lang.String str12 = locale8.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale8);
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale18.getDisplayCountry(locale20);
        java.lang.String str22 = locale15.getDisplayName(locale20);
        java.lang.String str23 = locale20.getScript();
        java.lang.String str24 = locale8.getDisplayVariant(locale20);
        java.lang.String str25 = locale5.getDisplayScript(locale8);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale5);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Japan" + "'", str17, "Japan");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese" + "'", str19, "Chinese");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Taiwan" + "'", str21, "Taiwan");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str6 = locale0.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(locale7);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale7.getDisplayName(locale10);
        java.lang.String str14 = locale7.getExtension('x');
        java.lang.String str15 = locale0.getDisplayCountry(locale7);
        boolean boolean16 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "cor\351en" + "'", str12, "cor\351en");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ub300\ub9cc" + "'", str15, "\ub300\ub9cc");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) (-0.01f), (long) (short) 17, (-120L));
        java.lang.Object[] objArray4 = fractionConversionException3.getArguments();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-0.009999999776482582, 17, -120]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-0.009999999776482582, 17, -120]");
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number7 = numberFormat5.parse("000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,970,000");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,970,000\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale7.getDisplayCountry(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale.Builder builder14 = builder6.setLocale(locale8);
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.clear();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder17.setUnicodeLocaleKeyword("cor\351en", "-1 / 864,000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: core?en [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japan" + "'", str10, "Japan");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr-CA" + "'", str2, "fr-CA");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Canada" + "'", str3, "Canada");
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (byte) 10);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) field8);
        fieldPosition1.setEndIndex((-100));
        int int15 = fieldPosition1.getField();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        fractionFormat4.setDenominatorFormat(numberFormat9);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str16 = fractionFormat14.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat17 = fractionFormat14.getNumeratorFormat();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.lang.String str24 = locale18.getDisplayName(locale21);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale25.getDisplayScript(locale27);
        java.lang.String str30 = locale18.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale18);
        fractionFormat14.setNumeratorFormat(numberFormat31);
        numberFormat31.setMinimumIntegerDigits(2);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        numberFormat36.setGroupingUsed(true);
        java.util.Locale locale43 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        int int45 = numberFormat44.getMaximumIntegerDigits();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        boolean boolean48 = numberFormat47.isGroupingUsed();
        java.util.Currency currency49 = numberFormat47.getCurrency();
        numberFormat44.setCurrency(currency49);
        java.util.Currency currency51 = numberFormat44.getCurrency();
        java.math.RoundingMode roundingMode52 = numberFormat44.getRoundingMode();
        numberFormat36.setRoundingMode(roundingMode52);
        numberFormat31.setRoundingMode(roundingMode52);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57, numberFormat59);
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj64 = numberFormat59.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition63);
        java.lang.String str65 = parsePosition63.toString();
        java.lang.String str66 = parsePosition63.toString();
        java.lang.Object obj67 = numberFormat31.parseObject("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", parsePosition63);
        fractionFormat4.setNumeratorFormat(numberFormat31);
        numberFormat31.setMinimumFractionDigits(0);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100 0 / 1" + "'", str16, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "French (France)" + "'", str24, "French (France)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str30, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals(locale43.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2147483647 + "'", int45 == 2147483647);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode52 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode52.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str65, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str66, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        java.util.Locale locale3 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = locale8.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.lang.String str17 = locale3.getDisplayScript(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.lang.String str25 = locale19.getDisplayName(locale22);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = locale26.getDisplayScript(locale28);
        java.lang.String str31 = locale19.getDisplayLanguage(locale28);
        java.lang.String str32 = locale19.toLanguageTag();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale19);
        int int34 = numberFormat33.getMinimumFractionDigits();
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        int int41 = numberFormat40.getMaximumIntegerDigits();
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        numberFormat46.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency49 = numberFormat46.getCurrency();
        numberFormat40.setCurrency(currency49);
        numberFormat40.setGroupingUsed(false);
        java.lang.String str54 = numberFormat40.format((double) (short) 2);
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj58 = numberFormat40.parseObject("1%", parsePosition57);
        java.lang.Number number59 = numberFormat33.parse("TAIWAN", parsePosition57);
        fractionFormat18.setDenominatorFormat(numberFormat33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number62 = numberFormat33.parse("NT$2,147,483,647.00");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"NT$2,147,483,647.00\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10,000%" + "'", str4, "10,000%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "French (France)" + "'", str25, "French (France)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str31, "\ud504\ub791\uc2a4\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr-FR" + "'", str32, "fr-FR");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "200%" + "'", str54, "200%");
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + 0.01d + "'", obj58, 0.01d);
        org.junit.Assert.assertNull(number59);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 10L, (long) (byte) -101, (-120L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException7 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) (byte) 100, (long) (short) 100);
        java.lang.Throwable[] throwableArray8 = fractionConversionException7.getSuppressed();
        fractionConversionException3.addSuppressed((java.lang.Throwable) fractionConversionException7);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException13 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, (long) (short) 1, 1L);
        java.lang.Throwable[] throwableArray14 = fractionConversionException13.getSuppressed();
        fractionConversionException3.addSuppressed((java.lang.Throwable) fractionConversionException13);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale.Builder builder10 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setVariant("java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=35]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=35] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale.setDefault(category0, locale12);
        java.lang.String str20 = locale12.getISO3Country();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc77c\ubcf8" + "'", str6, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JP" + "'", str8, "JP");
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str16 = locale6.toLanguageTag();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale6);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction21.add(fraction27);
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction30.divide(fraction33);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction30.subtract(fraction41);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction30.abs();
        long long44 = fraction30.longValue();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale45.getISO3Language();
        java.lang.String str48 = locale45.getISO3Country();
        java.lang.String str49 = locale45.getDisplayScript();
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = locale45.getDisplayName(locale50);
        boolean boolean53 = fraction30.equals((java.lang.Object) locale50);
        java.lang.String str54 = locale50.getCountry();
        java.lang.StringBuffer stringBuffer55 = null;
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field56);
        int int58 = fieldPosition57.getBeginIndex();
        int int59 = fieldPosition57.getField();
        int int60 = fieldPosition57.getEndIndex();
        java.text.Format.Field field61 = fieldPosition57.getFieldAttribute();
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition(field61, (-120));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer64 = numberFormat17.format((java.lang.Object) str54, stringBuffer55, fieldPosition63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zho" + "'", str47, "zho");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "TWN" + "'", str48, "TWN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh-TW" + "'", str51, "zh-TW");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str52, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "TW" + "'", str54, "TW");
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(field61);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        boolean boolean9 = locale6.hasExtensions();
        java.lang.String str10 = locale3.getDisplayScript(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Set<java.lang.String> strSet12 = locale6.getUnicodeLocaleKeys();
        java.lang.String str13 = locale6.getCountry();
        java.lang.String str14 = locale6.getDisplayLanguage();
        java.lang.String str15 = locale6.getISO3Country();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CA" + "'", str13, "CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str14, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CAN" + "'", str15, "CAN");
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.multiply(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        long long21 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction22.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction2.subtract(fraction22);
        java.text.NumberFormat.Field field33 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field33);
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition((java.text.Format.Field) field33, 1);
        int int37 = fieldPosition36.getEndIndex();
        java.text.Format.Field field38 = fieldPosition36.getFieldAttribute();
        boolean boolean39 = fraction32.equals((java.lang.Object) fieldPosition36);
        fieldPosition36.setEndIndex((int) (short) 0);
        java.text.Format.Field field42 = fieldPosition36.getFieldAttribute();
        int int43 = fieldPosition36.getBeginIndex();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(field42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.lang.String str10 = locale9.toLanguageTag();
        java.lang.String str11 = locale9.getVariant();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setScript("");
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayLanguage(locale17);
        java.util.Locale.Builder builder19 = builder14.setLocale(locale15);
        java.lang.String str20 = locale9.getDisplayVariant(locale15);
        java.util.Locale.Builder builder21 = builder5.setLocale(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str23 = locale9.getVariant();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.clear();
        java.util.Locale.Builder builder27 = builder24.clear();
        java.util.Locale.Builder builder30 = builder27.setExtension('a', "TWN");
        java.util.Locale.Builder builder32 = builder30.setLanguageTag("Canada");
        java.util.Locale.Builder builder34 = builder30.setRegion("US");
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale37 = java.util.Locale.getDefault(category36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.util.Locale.setDefault(category36, locale38);
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category36, locale41);
        java.lang.String str43 = locale35.getDisplayLanguage(locale41);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale35);
        java.lang.String str45 = locale35.getScript();
        java.util.Locale.Builder builder46 = builder34.setLocale(locale35);
        java.util.Locale locale47 = builder34.build();
        java.lang.String str48 = locale9.getDisplayLanguage(locale47);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-TW" + "'", str10, "zh-TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinesisch" + "'", str18, "Chinesisch");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "anglais" + "'", str43, "anglais");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.divide(fraction20);
        int int23 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction4.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.reciprocal();
        float float29 = fraction28.floatValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + float29 + "' != '" + (-0.98333335f) + "'", float29 == (-0.98333335f));
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean12 = numberFormat10.equals((java.lang.Object) numberFormat11);
        java.lang.Object obj13 = numberFormat11.clone();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean18 = numberFormat16.equals((java.lang.Object) numberFormat17);
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        int int25 = numberFormat24.getMaximumIntegerDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        boolean boolean28 = numberFormat27.isGroupingUsed();
        java.util.Currency currency29 = numberFormat27.getCurrency();
        numberFormat24.setCurrency(currency29);
        java.util.Currency currency31 = numberFormat24.getCurrency();
        java.math.RoundingMode roundingMode32 = numberFormat24.getRoundingMode();
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) 'a');
        java.lang.String str36 = parsePosition35.toString();
        java.lang.String str37 = parsePosition35.toString();
        java.lang.Object obj38 = numberFormat24.parseObject("zho", parsePosition35);
        java.lang.String str39 = parsePosition35.toString();
        java.lang.Number number40 = numberFormat17.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition35);
        java.lang.Object obj41 = numberFormat11.parseObject("cor\351en", parsePosition35);
        int int42 = parsePosition35.getErrorIndex();
        java.lang.StringBuffer stringBuffer43 = null;
        java.text.NumberFormat.Field field44 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field44);
        java.lang.String str46 = fieldPosition45.toString();
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayScript();
        java.lang.String str50 = locale47.getDisplayName(locale48);
        boolean boolean51 = fieldPosition45.equals((java.lang.Object) locale48);
        fieldPosition45.setEndIndex((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer54 = numberFormat8.format((java.lang.Object) int42, stringBuffer43, fieldPosition45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2147483647 + "'", int25 == 2147483647);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode32 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode32.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str36, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str37, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str39, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str46, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese (Taiwan)" + "'", str50, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getExtension('x');
        boolean boolean4 = locale0.hasExtensions();
        java.util.Locale locale5 = locale0.stripExtensions();
        java.lang.String str6 = locale0.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale7.toLanguageTag();
        java.lang.String str13 = locale7.getDisplayVariant();
        java.util.Locale locale14 = locale7.stripExtensions();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str18 = locale15.getExtension('x');
        java.lang.String str19 = locale14.getDisplayScript(locale15);
        java.lang.String str20 = locale0.getDisplayCountry(locale14);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder22.setScript("");
        java.util.Locale locale25 = builder22.build();
        java.util.Locale.Builder builder27 = builder22.setRegion("en");
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale29.getScript();
        java.util.Locale.Builder builder31 = builder22.setLocale(locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = numberFormat21.format((java.lang.Object) builder31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TWN" + "'", str6, "TWN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und" + "'", str12, "und");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat35 = fractionFormat31.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat31.getNumeratorFormat();
        numberFormat36.setMinimumIntegerDigits(600);
        properFractionFormat28.setNumeratorFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        int int46 = numberFormat45.getMaximumIntegerDigits();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        boolean boolean49 = numberFormat48.isGroupingUsed();
        java.util.Currency currency50 = numberFormat48.getCurrency();
        numberFormat45.setCurrency(currency50);
        java.util.Currency currency52 = numberFormat45.getCurrency();
        java.math.RoundingMode roundingMode53 = numberFormat45.getRoundingMode();
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) 'a');
        java.lang.String str57 = parsePosition56.toString();
        java.lang.String str58 = parsePosition56.toString();
        java.lang.Object obj59 = numberFormat45.parseObject("zho", parsePosition56);
        java.lang.String str60 = parsePosition56.toString();
        parsePosition56.setErrorIndex(0);
        org.apache.commons.math.fraction.Fraction fraction63 = properFractionFormat28.parse("\u53f0\u6e7e", parsePosition56);
        java.text.NumberFormat numberFormat64 = properFractionFormat28.getNumeratorFormat();
        int int65 = numberFormat64.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode53 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode53.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str57, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str58, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str60, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(fraction63);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'x', 10);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        int int8 = numberFormat7.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode9 = numberFormat7.getRoundingMode();
        boolean boolean10 = numberFormat7.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat7);
        numberFormat7.setMaximumFractionDigits((int) (byte) 0);
        int int14 = numberFormat7.getMinimumIntegerDigits();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = numberFormat7.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode9.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException(2.0d, (-120));
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction(2.0d);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        boolean boolean6 = locale1.hasExtensions();
        java.util.Locale locale9 = new java.util.Locale("anglais", "kor");
        java.lang.String str10 = locale1.getDisplayLanguage(locale9);
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        boolean boolean15 = field11.equals((java.lang.Object) locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale13.getISO3Language();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.lang.String str19 = locale9.getDisplayName(locale18);
        java.lang.String str20 = locale18.getDisplayLanguage();
        java.lang.String str22 = locale18.getExtension('x');
        java.lang.Object obj23 = locale18.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais (KOR)" + "'", str19, "anglais (KOR)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4" + "'", str20, "\uc601\uc5b4");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "en");
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(100);
        fieldPosition1.setBeginIndex((int) 'u');
        java.lang.Object obj4 = null;
        boolean boolean5 = fieldPosition1.equals(obj4);
        fieldPosition1.setEndIndex(5);
        java.lang.String str8 = fieldPosition1.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=5]" + "'", str8, "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=5]");
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        java.lang.Number number19 = numberFormat1.parse("\ud55c\uad6d\uc5b4", parsePosition16);
        numberFormat1.setParseIntegerOnly(false);
        int int22 = numberFormat1.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale locale5 = builder4.build();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale5);
        int int7 = numberFormat6.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        numberFormat4.setMinimumFractionDigits(0);
        java.util.Currency currency7 = numberFormat4.getCurrency();
        java.lang.Object obj8 = numberFormat4.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.util.Set<java.lang.Character> charSet13 = locale11.getExtensionKeys();
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale11.getDisplayVariant(locale14);
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getCurrencyInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat23);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj28 = numberFormat23.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition27);
        java.lang.String str29 = parsePosition27.toString();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction32 = properFractionFormat18.parse("java.text.ParseException: zh_TW", parsePosition27);
        java.text.NumberFormat numberFormat33 = properFractionFormat18.getDenominatorFormat();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat37);
        boolean boolean39 = numberFormat37.isGroupingUsed();
        java.lang.String str41 = numberFormat37.format((double) 100);
        java.lang.String str43 = numberFormat37.format((double) (short) 10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat37);
        int int45 = numberFormat37.getMaximumFractionDigits();
        java.math.RoundingMode roundingMode46 = numberFormat37.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getCurrencyInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction55 = properFractionFormat51.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition54);
        int int56 = parsePosition54.getIndex();
        int int57 = parsePosition54.getErrorIndex();
        parsePosition54.setIndex((int) (short) 2);
        int int60 = parsePosition54.getErrorIndex();
        int int61 = parsePosition54.getIndex();
        java.lang.Object obj62 = numberFormat37.parseObject("-10%", parsePosition54);
        java.lang.Number number63 = numberFormat4.parse("cinese (Taiwan)", parsePosition54);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str29, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(fraction32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10,000%" + "'", str41, "10,000%");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1,000%" + "'", str43, "1,000%");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode46 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode46.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNull(fraction55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + 0L + "'", obj62, 0L);
        org.junit.Assert.assertNull(number63);
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field3);
        int int18 = fieldPosition17.getField();
        fieldPosition17.setBeginIndex((int) 'a');
        fieldPosition17.setEndIndex(10);
        java.util.Locale locale26 = new java.util.Locale("zho (CHINESE (TAIWAN),Overflow trying to convert {0} to fraction ({1}/{2}))", "fra", "java.text.NumberFormat$Field(exponent symbol)");
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale.Builder builder29 = builder27.clear();
        java.util.Locale.Builder builder30 = builder27.clear();
        java.util.Locale.Builder builder33 = builder30.setExtension('a', "TWN");
        java.util.Locale.Builder builder35 = builder33.setLanguageTag("Canada");
        java.util.Locale.Builder builder36 = builder35.clear();
        java.util.Locale.Builder builder37 = builder35.clear();
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = locale26.getDisplayVariant(locale38);
        boolean boolean40 = fieldPosition17.equals((java.lang.Object) str39);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals(locale26.toString(), "zho (chinese (taiwan),overflow trying to convert {0} to fraction ({1}/{2}))_FRA_java.text.NumberFormat$Field(exponent symbol)");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.NumberFormat$Field(exponent symbol)" + "'", str39, "java.text.NumberFormat$Field(exponent symbol)");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale locale6 = builder3.build();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale6);
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction11.divide(fraction15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        java.util.Currency currency20 = numberFormat18.getCurrency();
        int int21 = numberFormat18.getMinimumFractionDigits();
        int int22 = numberFormat18.getMinimumIntegerDigits();
        java.lang.Object obj23 = numberFormat18.clone();
        java.text.NumberFormat numberFormat24 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat24);
        boolean boolean26 = fraction15.equals((java.lang.Object) numberFormat18);
        java.math.RoundingMode roundingMode27 = numberFormat18.getRoundingMode();
        numberFormat7.setRoundingMode(roundingMode27);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + roundingMode27 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode27.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale14.getDisplayName(locale15);
        java.lang.String str18 = locale10.getDisplayLanguage(locale14);
        java.lang.String str19 = locale14.getDisplayName();
        java.util.Locale.Builder builder20 = builder9.setLocale(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder20.setUnicodeLocaleKeyword("CHN", "Englisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: CHN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u6587" + "'", str18, "\u65e5\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str19, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        java.util.Locale locale2 = new java.util.Locale("French (Canada)", "java.text.NumberFormat$Field(currency)");
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.getScript();
        java.util.Set<java.lang.Character> charSet5 = locale2.getExtensionKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "french (canada)_JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((-1.9841270113829523E-4d), (long) (short) 100, 0L);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        boolean boolean12 = locale10.hasExtensions();
        java.lang.String str13 = locale10.getDisplayScript();
        java.lang.String str14 = locale7.getDisplayName(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        boolean boolean16 = fieldPosition6.equals((java.lang.Object) locale10);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str8, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-TW" + "'", str9, "zh-TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "chinois (Taiwan)" + "'", str14, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        java.util.Locale locale2 = new java.util.Locale("java.text.parseexception: zh_tw (60,000%)", "zho");
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.parseexception: zh_tw (60,000%)_ZHO");
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction3 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction3);
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction3.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.ONE;
        long long20 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction3.multiply(fraction19);
        org.apache.commons.math.fraction.Fraction fraction22 = fraction2.subtract(fraction21);
        java.lang.String str23 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction21);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        long long34 = fraction32.longValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction28.multiply(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction28.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction21.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        long long62 = fraction60.longValue();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction56.multiply(fraction60);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.abs();
        long long74 = fraction72.longValue();
        org.apache.commons.math.fraction.Fraction fraction75 = fraction68.multiply(fraction72);
        org.apache.commons.math.fraction.Fraction fraction76 = fraction56.divide(fraction75);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction51.divide(fraction77);
        int int79 = fraction51.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1 / 1" + "'", str4, "1 / 1");
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1 / 1" + "'", str23, "1 / 1");
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1728001) + "'", int79 == (-1728001));
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale7.getISO3Language();
        java.lang.String str10 = locale7.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale7);
        java.lang.String str13 = locale0.getDisplayScript(locale7);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getCurrencyInstance(locale7);
        java.lang.String str15 = locale7.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str15, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        int int4 = numberFormat3.getMinimumFractionDigits();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.lang.Object obj8 = numberFormat6.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat6);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str17 = fractionFormat15.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat18 = fractionFormat15.getNumeratorFormat();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.lang.String str25 = locale19.getDisplayName(locale22);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = locale26.getDisplayScript(locale28);
        java.lang.String str31 = locale19.getDisplayLanguage(locale28);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getNumberInstance(locale19);
        fractionFormat15.setNumeratorFormat(numberFormat32);
        properFractionFormat12.setWholeFormat(numberFormat32);
        fractionFormat9.setNumeratorFormat(numberFormat32);
        java.text.NumberFormat numberFormat36 = fractionFormat9.getNumeratorFormat();
        java.text.NumberFormat numberFormat37 = fractionFormat9.getDenominatorFormat();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance();
        numberFormat38.setMaximumIntegerDigits(2147483647);
        java.lang.String str42 = numberFormat38.format((long) 'a');
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale43);
        java.text.NumberFormat numberFormat45 = fractionFormat44.getDenominatorFormat();
        numberFormat45.setMinimumIntegerDigits(1728000);
        numberFormat45.setMaximumIntegerDigits(600);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37, numberFormat38, numberFormat45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat45);
        java.util.Locale locale54 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.lang.String str57 = fractionFormat55.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat58 = fractionFormat55.getNumeratorFormat();
        numberFormat58.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency61 = numberFormat58.getCurrency();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean66 = numberFormat64.equals((java.lang.Object) numberFormat65);
        java.util.Locale locale71 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        int int73 = numberFormat72.getMaximumIntegerDigits();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        boolean boolean76 = numberFormat75.isGroupingUsed();
        java.util.Currency currency77 = numberFormat75.getCurrency();
        numberFormat72.setCurrency(currency77);
        java.util.Currency currency79 = numberFormat72.getCurrency();
        java.math.RoundingMode roundingMode80 = numberFormat72.getRoundingMode();
        java.text.ParsePosition parsePosition83 = new java.text.ParsePosition((int) 'a');
        java.lang.String str84 = parsePosition83.toString();
        java.lang.String str85 = parsePosition83.toString();
        java.lang.Object obj86 = numberFormat72.parseObject("zho", parsePosition83);
        java.lang.String str87 = parsePosition83.toString();
        java.lang.Number number88 = numberFormat65.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition83);
        java.lang.Number number89 = numberFormat58.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition83);
        numberFormat58.setParseIntegerOnly(true);
        java.util.Currency currency92 = numberFormat58.getCurrency();
        numberFormat3.setCurrency(currency92);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "100 0 / 1" + "'", str17, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "French (France)" + "'", str25, "French (France)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str31, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(numberFormat38);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9,700%" + "'", str42, "9,700%");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "100 0 / 1" + "'", str57, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(currency61);
        org.junit.Assert.assertEquals(currency61.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals(locale71.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2147483647 + "'", int73 == 2147483647);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(currency77);
        org.junit.Assert.assertEquals(currency77.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency79);
        org.junit.Assert.assertEquals(currency79.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode80 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode80.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str84, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str85, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str87, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number88);
        org.junit.Assert.assertNull(number89);
        org.junit.Assert.assertNotNull(currency92);
        org.junit.Assert.assertEquals(currency92.toString(), "XXX");
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getISO3Country();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleKeys();
        java.lang.String str6 = locale2.getVariant();
        java.lang.String str7 = locale2.getCountry();
        java.lang.String str8 = locale2.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str8, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) (byte) 10, (int) (short) 2);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException6 = new org.apache.commons.math.fraction.FractionConversionException((double) 11, 0L, (long) ' ');
        java.lang.String str7 = fractionConversionException6.getPattern();
        fractionConversionException2.addSuppressed((java.lang.Throwable) fractionConversionException6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str7, "Overflow trying to convert {0} to fraction ({1}/{2})");
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale7.getISO3Language();
        java.lang.String str10 = locale4.getDisplayScript(locale7);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale4.getDisplayCountry(locale11);
        java.util.Locale.Builder builder13 = builder1.setLocale(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        boolean boolean15 = field0.equals((java.lang.Object) locale11);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale18.getDisplayCountry();
        java.lang.String str22 = locale18.getISO3Country();
        java.util.Locale locale23 = locale18.stripExtensions();
        boolean boolean24 = field0.equals((java.lang.Object) locale23);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field0, 120);
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 599);
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field0, 35);
        java.text.Format.Field field31 = fieldPosition30.getFieldAttribute();
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition(field31);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str5, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-TW" + "'", str6, "zh-TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Taiwan" + "'", str12, "Taiwan");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ub300\ub9cc" + "'", str21, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "TWN" + "'", str22, "TWN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(field31);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder12 = builder9.removeUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder14 = builder12.setVariant("Japan");
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale.Builder builder16 = builder12.clearExtensions();
        java.util.Locale.Builder builder18 = builder12.addUnicodeLocaleAttribute("French");
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str24 = locale19.getDisplayLanguage(locale23);
        java.lang.String str25 = locale19.getDisplayScript();
        java.util.Locale.Builder builder26 = builder12.setLocale(locale19);
        java.util.Locale.Builder builder27 = builder26.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale23.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japanese" + "'", str24, "Japanese");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(100);
        fieldPosition1.setBeginIndex((int) 'u');
        java.lang.String str4 = fieldPosition1.toString();
        int int5 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((java.text.Format.Field) field5, (int) '#');
        java.text.Format.Field field8 = fieldPosition7.getFieldAttribute();
        java.text.Format.Field field9 = fieldPosition7.getFieldAttribute();
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition(field9, 599);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition(field9, (int) (short) 32);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) 'a');
        java.lang.String str16 = parsePosition15.toString();
        java.lang.Object obj17 = null;
        boolean boolean18 = parsePosition15.equals(obj17);
        boolean boolean19 = field9.equals((java.lang.Object) parsePosition15);
        org.apache.commons.math.fraction.Fraction fraction20 = properFractionFormat2.parse("\ud55c\uad6d\uc5b4 (JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0],overflow trying to convert {0} to fraction ({1}/{2}))", parsePosition15);
        org.apache.commons.math.fraction.Fraction fraction23 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        float float28 = fraction27.floatValue();
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        long long52 = fraction50.longValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.multiply(fraction50);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction34.divide(fraction53);
        org.apache.commons.math.fraction.Fraction fraction55 = fraction34.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction34.negate();
        int int57 = fraction34.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction27.subtract(fraction34);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction23.multiply(fraction58);
        int int60 = fraction23.getDenominator();
        java.lang.StringBuffer stringBuffer61 = null;
        java.text.NumberFormat.Field field62 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field62);
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field62, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer66 = properFractionFormat2.format(fraction23, stringBuffer61, fieldPosition65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str16, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(fraction20);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 1.0f + "'", float28 == 1.0f);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(field62);
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        int int12 = fieldPosition1.getField();
        fieldPosition1.setEndIndex((int) (byte) -2);
        java.text.Format.Field field15 = fieldPosition1.getFieldAttribute();
        int int16 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert -120 to fraction (10/10)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str5, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        java.text.ParseException parseException2 = new java.text.ParseException("france (CHINESE (TAIWAN))", 100);
        int int3 = parseException2.getErrorOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        java.util.Locale locale3 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat9.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition13);
        java.lang.String str15 = parsePosition13.toString();
        boolean boolean17 = parsePosition13.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        java.lang.Object obj18 = numberFormat4.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat20 = properFractionFormat19.getWholeFormat();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = locale21.getScript();
        java.util.Locale locale26 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str27 = locale21.getDisplayScript(locale26);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getNumberInstance(locale26);
        int int29 = numberFormat28.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Currency currency32 = numberFormat28.getCurrency();
        numberFormat20.setCurrency(currency32);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str15, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale26.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(currency32);
        org.junit.Assert.assertEquals(currency32.toString(), "XXX");
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        int int10 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMaximumIntegerDigits((-1));
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.lang.String str19 = numberFormat17.format((double) 10L);
        java.util.Currency currency20 = numberFormat17.getCurrency();
        numberFormat1.setCurrency(currency20);
        java.lang.String str23 = numberFormat1.format((long) 97);
        java.lang.String str25 = numberFormat1.format(0L);
        int int26 = numberFormat1.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1,000%" + "'", str19, "1,000%");
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0%" + "'", str23, "0%");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0%" + "'", str25, "0%");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 0.87356323f, (double) 51, (-14400));
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.abs();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale locale10 = builder7.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        boolean boolean18 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getCurrencyInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.util.Currency currency23 = numberFormat21.getCurrency();
        fractionFormat19.setNumeratorFormat(numberFormat21);
        fractionFormat11.setDenominatorFormat(numberFormat21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        org.apache.commons.math.fraction.Fraction fraction28 = null;
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field30);
        int int32 = fieldPosition31.getEndIndex();
        int int33 = fieldPosition31.getBeginIndex();
        int int34 = fieldPosition31.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer35 = properFractionFormat27.format(fraction28, stringBuffer29, fieldPosition31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        java.util.Locale locale1 = new java.util.Locale("java.text.ParsePosition[index=35,errorIndex=600]");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale2.getDisplayName();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.lang.String str7 = locale6.toLanguageTag();
        java.lang.String str8 = locale6.getDisplayLanguage();
        java.lang.String str9 = locale6.getISO3Country();
        java.lang.String str10 = locale2.getDisplayScript(locale6);
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Locale locale13 = locale11.stripExtensions();
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale2.getDisplayVariant(locale14);
        java.lang.String str16 = locale1.getDisplayCountry(locale14);
        java.lang.String str17 = locale14.getCountry();
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseposition[index=35,errorindex=600]");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str5, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-TW" + "'", str7, "zh-TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str8, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TWN" + "'", str9, "TWN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CN" + "'", str17, "CN");
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=chinese (china)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        java.util.Locale locale2 = new java.util.Locale("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT SIGN),BEGININDEX=0,ENDINDEX=0]", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=0]");
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(exponent sign),beginindex=0,endindex=0]_JAVA.TEXT.FIELDPOSITION[FIELD=7,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]");
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.lang.Object obj5 = fractionFormat4.clone();
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        fractionFormat10.setDenominatorFormat(numberFormat15);
        fractionFormat4.setNumeratorFormat(numberFormat15);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.lang.String str23 = locale19.getDisplayScript(locale21);
        java.lang.String str24 = locale19.toLanguageTag();
        java.util.Set<java.lang.String> strSet25 = locale19.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale19);
        java.lang.Object obj27 = numberFormat26.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        fractionFormat4.setNumeratorFormat(numberFormat26);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        boolean boolean34 = numberFormat31.isGroupingUsed();
        fractionFormat4.setDenominatorFormat(numberFormat31);
        java.util.Locale locale40 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        int int42 = numberFormat41.getMaximumIntegerDigits();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        java.util.Currency currency46 = numberFormat44.getCurrency();
        numberFormat41.setCurrency(currency46);
        java.util.Currency currency48 = numberFormat41.getCurrency();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat51, numberFormat53);
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj58 = numberFormat53.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition57);
        java.lang.String str59 = parsePosition57.toString();
        java.lang.Number number60 = numberFormat41.parse("Chinese", parsePosition57);
        int int61 = parsePosition57.getErrorIndex();
        int int62 = parsePosition57.getIndex();
        java.lang.Object obj63 = numberFormat31.parseObject("java.text.ParseException: ", parsePosition57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass64 = obj63.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals(locale40.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str59, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNull(obj63);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean7 = numberFormat5.equals((java.lang.Object) numberFormat6);
        properFractionFormat2.setWholeFormat(numberFormat5);
        java.text.NumberFormat numberFormat9 = properFractionFormat2.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zh");
        java.util.Locale.setDefault(locale1);
        java.lang.String str3 = locale1.getDisplayVariant();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Currency currency11 = numberFormat9.getCurrency();
        numberFormat9.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        numberFormat18.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str22 = numberFormat18.format((double) 0.0f);
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        int int28 = numberFormat27.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        java.text.NumberFormat numberFormat30 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat27, numberFormat30);
        java.math.RoundingMode roundingMode32 = numberFormat18.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode32);
        numberFormat9.setMinimumFractionDigits(11);
        fractionFormat7.setNumeratorFormat(numberFormat9);
        java.text.NumberFormat numberFormat37 = fractionFormat7.getDenominatorFormat();
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str43 = locale38.getDisplayLanguage(locale42);
        java.util.Locale locale44 = locale38.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str46 = locale45.getDisplayLanguage();
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str48 = locale45.getDisplayCountry(locale47);
        java.util.Set<java.lang.String> strSet49 = locale47.getUnicodeLocaleKeys();
        java.lang.String str50 = locale44.getDisplayName(locale47);
        java.lang.String str51 = locale44.getScript();
        java.lang.StringBuffer stringBuffer52 = null;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer55 = numberFormat37.format((java.lang.Object) str51, stringBuffer52, fieldPosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2147483647 + "'", int28 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode32 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode32.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale42.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japanese" + "'", str43, "Japanese");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u6587" + "'", str46, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Taiwan" + "'", str48, "Taiwan");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "japonais (Japon)" + "'", str50, "japonais (Japon)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean7 = numberFormat5.equals((java.lang.Object) numberFormat6);
        properFractionFormat2.setWholeFormat(numberFormat5);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        int int14 = numberFormat10.getMaximumIntegerDigits();
        properFractionFormat2.setDenominatorFormat(numberFormat10);
        java.text.NumberFormat numberFormat16 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat.Field field17 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition((java.text.Format.Field) field17);
        java.lang.String str19 = fieldPosition18.toString();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.lang.String str23 = locale20.getDisplayName(locale21);
        boolean boolean24 = fieldPosition18.equals((java.lang.Object) locale21);
        java.text.NumberFormat.Field field25 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition((java.text.Format.Field) field25);
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition((java.text.Format.Field) field25, (int) (byte) 10);
        boolean boolean29 = fieldPosition18.equals((java.lang.Object) field25);
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field25);
        boolean boolean31 = numberFormat16.equals((java.lang.Object) fieldPosition30);
        fieldPosition30.setBeginIndex(52);
        org.apache.commons.math.fraction.Fraction fraction35 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        double double41 = fraction39.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction36.subtract(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        double double44 = fraction42.doubleValue();
        boolean boolean45 = fieldPosition30.equals((java.lang.Object) double44);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str19, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (Taiwan)" + "'", str23, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(field25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.008333333333333333d) + "'", double41 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.008333333333333d + "'", double44 == 10.008333333333333d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        float float8 = fraction7.floatValue();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction12.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.ONE;
        long long29 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction12.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction11.subtract(fraction30);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        long long54 = fraction52.longValue();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction48.multiply(fraction52);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction40.subtract(fraction55);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction31.subtract(fraction56);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction7.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction3.add(fraction59);
        long long61 = fraction60.longValue();
        org.apache.commons.math.fraction.Fraction fraction65 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction60.divide(fraction65);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.add(fraction71);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 10.0f + "'", float8 == 10.0f);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1 / 1" + "'", str13, "1 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("zh-TW");
        java.lang.String str10 = locale0.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        boolean boolean14 = fraction11.equals((java.lang.Object) locale12);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        long long37 = fraction35.longValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction31.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction19.divide(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction19.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction11.subtract(fraction40);
        int int42 = fraction40.intValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 120 + "'", int42 == 120);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction4.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction25.divide(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction27.reciprocal();
        long long30 = fraction27.longValue();
        short short31 = fraction27.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 1 + "'", short31 == (short) 1);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale5);
        java.util.Currency currency8 = numberFormat7.getCurrency();
        numberFormat7.setMinimumIntegerDigits(1);
        numberFormat7.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj16 = numberFormat7.parseObject("Japan", parsePosition15);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str21 = fractionConversionException20.getPattern();
        java.lang.Throwable[] throwableArray22 = fractionConversionException20.getSuppressed();
        java.lang.Object[] objArray23 = fractionConversionException20.getArguments();
        boolean boolean24 = parsePosition15.equals((java.lang.Object) objArray23);
        int int25 = parsePosition15.getIndex();
        java.lang.String str26 = parsePosition15.toString();
        java.lang.Object obj27 = numberFormat0.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition15);
        java.lang.Object obj28 = numberFormat0.clone();
        int int29 = numberFormat0.getMinimumIntegerDigits();
        java.math.RoundingMode roundingMode30 = numberFormat0.getRoundingMode();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "TWD");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str21, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("KOR", 1.0d);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat7 = fractionFormat6.getDenominatorFormat();
        java.lang.Class<?> wildcardClass8 = numberFormat7.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c" + "'", str5, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        boolean boolean11 = numberFormat9.equals((java.lang.Object) strArray10);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        java.math.RoundingMode roundingMode24 = numberFormat16.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode24);
        boolean boolean26 = numberFormat9.isParseIntegerOnly();
        properFractionFormat4.setWholeFormat(numberFormat9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        java.lang.String str30 = numberFormat9.format((double) 2.8654761f);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "287%" + "'", str30, "287%");
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        java.text.NumberFormat numberFormat0 = null;
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale1);
        java.util.Currency currency4 = numberFormat3.getCurrency();
        numberFormat3.setMinimumIntegerDigits(1);
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        int int12 = numberFormat11.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        java.util.Currency currency16 = numberFormat14.getCurrency();
        numberFormat11.setCurrency(currency16);
        java.util.Currency currency18 = numberFormat11.getCurrency();
        numberFormat3.setCurrency(currency18);
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        fractionFormat24.setDenominatorFormat(numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0, numberFormat29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency35 = numberFormat34.getCurrency();
        numberFormat29.setCurrency(currency35);
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str38 = locale37.toLanguageTag();
        java.lang.String str39 = locale37.getVariant();
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder40.setScript("");
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale43.getDisplayLanguage(locale45);
        java.util.Locale.Builder builder47 = builder42.setLocale(locale43);
        java.lang.String str48 = locale37.getDisplayVariant(locale43);
        java.lang.String str49 = locale43.getDisplayName();
        java.lang.String str50 = locale43.getISO3Country();
        java.lang.String str51 = locale43.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getInstance(locale52);
        java.util.Locale locale55 = locale52.stripExtensions();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        java.lang.String str58 = locale55.getDisplayName(locale56);
        java.text.NumberFormat.Field field59 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field59);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale61);
        boolean boolean63 = field59.equals((java.lang.Object) locale61);
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = locale64.getDisplayCountry();
        java.lang.String str66 = locale61.getDisplayVariant(locale64);
        java.lang.String str67 = locale55.getDisplayLanguage(locale64);
        java.lang.String str68 = locale43.getDisplayScript(locale64);
        java.lang.String str69 = locale64.getDisplayScript();
        java.lang.String str70 = locale64.getDisplayScript();
        java.lang.String str71 = locale64.getVariant();
        java.lang.StringBuffer stringBuffer72 = null;
        java.text.NumberFormat.Field field73 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((java.text.Format.Field) field73);
        java.lang.String str75 = fieldPosition74.toString();
        java.util.Locale locale76 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str78 = locale77.getDisplayScript();
        java.lang.String str79 = locale76.getDisplayName(locale77);
        boolean boolean80 = fieldPosition74.equals((java.lang.Object) locale77);
        int int81 = fieldPosition74.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer82 = numberFormat29.format((java.lang.Object) str71, stringBuffer72, fieldPosition74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(currency4);
        org.junit.Assert.assertEquals(currency4.toString(), "TWD");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-TW" + "'", str38, "zh-TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinesisch" + "'", str46, "Chinesisch");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str49, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "TWN" + "'", str50, "TWN");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str58, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(field59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "cinese" + "'", str67, "cinese");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(field73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str75, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Chinese (Taiwan)" + "'", str79, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder10 = builder7.setExtension('a', "taiwan");
        java.util.Locale.Builder builder11 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setUnicodeLocaleKeyword("1 / 60", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 1 / 60 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(fractionFormat1);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean8 = numberFormat7.isParseIntegerOnly();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str12 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction11);
        float float13 = fraction11.floatValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction11.negate();
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        int int20 = numberFormat19.getMaximumIntegerDigits();
        int int21 = numberFormat19.getMaximumFractionDigits();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat23);
        boolean boolean28 = fraction14.equals((java.lang.Object) fractionFormat27);
        java.text.NumberFormat numberFormat29 = fractionFormat27.getNumeratorFormat();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat34);
        numberFormat34.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field39 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition40 = new java.text.FieldPosition((java.text.Format.Field) field39);
        java.lang.String str41 = fieldPosition40.toString();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.lang.String str45 = locale42.getDisplayName(locale43);
        boolean boolean46 = fieldPosition40.equals((java.lang.Object) locale43);
        fieldPosition40.setEndIndex((int) '#');
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getCurrencyInstance(locale49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50);
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction55 = properFractionFormat51.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition54);
        boolean boolean56 = fieldPosition40.equals((java.lang.Object) parsePosition54);
        java.lang.Number number57 = numberFormat34.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition54);
        int int58 = parsePosition54.getIndex();
        java.lang.String str59 = parsePosition54.toString();
        java.lang.Object obj60 = null;
        boolean boolean61 = parsePosition54.equals(obj60);
        java.lang.Object obj62 = numberFormat29.parseObject("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition54);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        boolean boolean65 = numberFormat64.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        numberFormat64.setMaximumFractionDigits((int) (byte) -120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29, numberFormat64);
        java.math.RoundingMode roundingMode70 = numberFormat64.getRoundingMode();
        numberFormat7.setRoundingMode(roundingMode70);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException75 = new org.apache.commons.math.fraction.FractionConversionException((double) 1L, (long) (short) -1, (long) (byte) -120);
        java.lang.Object[] objArray76 = fractionConversionException75.getArguments();
        java.lang.StringBuffer stringBuffer77 = null;
        java.text.NumberFormat.Field field78 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field78);
        java.text.FieldPosition fieldPosition81 = new java.text.FieldPosition((java.text.Format.Field) field78, (int) '#');
        boolean boolean83 = fieldPosition81.equals((java.lang.Object) (byte) -1);
        fieldPosition81.setEndIndex((int) ' ');
        int int86 = fieldPosition81.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer87 = numberFormat7.format((java.lang.Object) fractionConversionException75, stringBuffer77, fieldPosition81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1 / 1" + "'", str12, "1 / 1");
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(field39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str41, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (Taiwan)" + "'", str45, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNull(fraction55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(number57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str59, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + roundingMode70 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode70.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[1.0, -1, -120]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[1.0, -1, -120]");
        org.junit.Assert.assertNotNull(field78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException(10.0d, (long) 600, (long) 'a');
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException7 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) 117, (long) 0);
        java.lang.String str8 = fractionConversionException7.getPattern();
        java.lang.Object[] objArray9 = fractionConversionException7.getArguments();
        fractionConversionException3.addSuppressed((java.lang.Throwable) fractionConversionException7);
        java.lang.String str11 = fractionConversionException7.getPattern();
        java.lang.Throwable[] throwableArray12 = fractionConversionException7.getSuppressed();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str8, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[120.0, 117, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[120.0, 117, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str11, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale3.toLanguageTag();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale3.getDisplayCountry();
        java.lang.String str7 = locale3.getISO3Country();
        java.util.Locale locale8 = locale3.stripExtensions();
        java.lang.String str9 = locale0.getDisplayCountry(locale8);
        java.util.Set<java.lang.String> strSet10 = locale0.getUnicodeLocaleKeys();
        java.lang.String str11 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-TW" + "'", str4, "zh-TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str6, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TWN" + "'", str7, "TWN");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u53f0\u7063" + "'", str9, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        java.text.ParseException parseException2 = new java.text.ParseException("java.text.NumberFormat$Field(exponent sign)", (-101));
        java.lang.String str3 = parseException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParseException: java.text.NumberFormat$Field(exponent sign)" + "'", str3, "java.text.ParseException: java.text.NumberFormat$Field(exponent sign)");
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        java.text.ParseException parseException2 = new java.text.ParseException("1", (int) (byte) 52);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        java.text.NumberFormat numberFormat17 = properFractionFormat12.getWholeFormat();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat21);
        boolean boolean23 = numberFormat21.isGroupingUsed();
        boolean boolean24 = numberFormat21.isGroupingUsed();
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj28 = numberFormat21.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition27);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21);
        java.text.NumberFormat numberFormat30 = fractionFormat29.getNumeratorFormat();
        properFractionFormat12.setNumeratorFormat(numberFormat30);
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        boolean boolean38 = numberFormat36.equals((java.lang.Object) strArray37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9, numberFormat30, numberFormat36);
        boolean boolean40 = numberFormat9.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getCurrencyInstance(locale46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction52 = properFractionFormat48.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition51);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat44.parse("zh_TW", parsePosition51);
        java.text.NumberFormat numberFormat54 = properFractionFormat44.getWholeFormat();
        java.util.Locale locale58 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getPercentInstance(locale58);
        int int60 = numberFormat59.getMaximumIntegerDigits();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale61);
        boolean boolean63 = numberFormat62.isGroupingUsed();
        java.util.Currency currency64 = numberFormat62.getCurrency();
        numberFormat59.setCurrency(currency64);
        java.util.Currency currency66 = numberFormat59.getCurrency();
        int int67 = numberFormat59.getMaximumFractionDigits();
        properFractionFormat44.setNumeratorFormat(numberFormat59);
        properFractionFormat41.setWholeFormat(numberFormat59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction71 = properFractionFormat41.parse("hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65e5\u672c" + "'", str5, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNull(fraction52);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals(locale58.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2147483647 + "'", int60 == 2147483647);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 1727999);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field5);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        boolean boolean9 = field5.equals((java.lang.Object) locale7);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale7.getISO3Language();
        java.util.Locale locale12 = locale7.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str15 = locale7.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder16 = builder3.setLocale(locale7);
        java.lang.String str17 = locale7.getISO3Language();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        properFractionFormat2.setWholeFormat(numberFormat4);
        java.text.NumberFormat numberFormat7 = properFractionFormat2.getWholeFormat();
        java.lang.String str9 = numberFormat7.format((double) 1.0f);
        numberFormat7.setMaximumIntegerDigits((int) (byte) 100);
        int int12 = numberFormat7.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        boolean boolean20 = numberFormat18.isGroupingUsed();
        boolean boolean21 = numberFormat18.isGroupingUsed();
        fractionFormat14.setNumeratorFormat(numberFormat18);
        java.lang.Object obj23 = numberFormat18.clone();
        java.lang.Object obj24 = numberFormat18.clone();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        numberFormat26.setMaximumFractionDigits(100);
        java.lang.String str31 = numberFormat26.format((long) 100);
        int int32 = numberFormat26.getMaximumFractionDigits();
        numberFormat26.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        boolean boolean44 = numberFormat43.isGroupingUsed();
        properFractionFormat41.setWholeFormat(numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26, numberFormat36, numberFormat43);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat18, numberFormat26);
        numberFormat26.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100%" + "'", str9, "100%");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10,000%" + "'", str31, "10,000%");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = locale6.getDisplayCountry(locale7);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        boolean boolean12 = field0.equals((java.lang.Object) locale7);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int14 = fieldPosition13.getBeginIndex();
        fieldPosition13.setBeginIndex(9);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale2.getScript();
        java.lang.String str4 = locale2.getISO3Country();
        java.util.Locale locale8 = new java.util.Locale("", "97", "java.text.ParseException: 20 / 7");
        java.lang.String str9 = locale2.getDisplayLanguage(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale2.getUnicodeLocaleType("java.text.NumberFormat$Field(currency)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.NumberFormat$Field(currency)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale8.toString(), "_97_java.text.ParseException: 20 / 7");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinese" + "'", str9, "Chinese");
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        double double25 = fraction24.doubleValue();
        int int26 = fraction24.getDenominator();
        double double27 = fraction24.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction24.reciprocal();
        double double29 = fraction24.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 120.0d + "'", double25 == 120.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 120.0d + "'", double27 == 120.0d);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 120.0d + "'", double29 == 120.0d);
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction0.negate();
        byte byte17 = fraction16.byteValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) -1 + "'", byte17 == (byte) -1);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        long long4 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        int int7 = fraction6.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction11.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction20.divide(fraction23);
        int int26 = fraction20.intValue();
        float float27 = fraction20.floatValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction28.divide(fraction31);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction28.subtract(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction6.divide(fraction36);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.text.AttributedCharacterIterator attributedCharacterIterator44 = numberFormat41.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj45 = numberFormat41.clone();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat48);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction53 = properFractionFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        java.lang.Object obj54 = numberFormat41.parseObject("zh-TW", parsePosition52);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.lang.String str57 = locale55.toLanguageTag();
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale58.getISO3Language();
        java.lang.String str61 = locale55.getDisplayScript(locale58);
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.lang.String str63 = locale55.getDisplayCountry(locale62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale55);
        boolean boolean65 = numberFormat41.equals((java.lang.Object) locale55);
        java.util.Locale locale67 = new java.util.Locale("kor");
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance(locale67);
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = locale69.getScript();
        java.util.Locale locale74 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str75 = locale69.getDisplayScript(locale74);
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getNumberInstance(locale74);
        java.util.Set<java.lang.String> strSet77 = locale74.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet78 = locale74.getExtensionKeys();
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.util.Locale locale80 = java.util.Locale.PRC;
        java.lang.String str81 = locale79.getDisplayName(locale80);
        java.lang.String str82 = locale74.getDisplayName(locale79);
        java.util.Locale locale83 = locale79.stripExtensions();
        java.util.Locale locale84 = java.util.Locale.JAPAN;
        java.util.Locale locale85 = java.util.Locale.ROOT;
        java.lang.String str86 = locale85.getDisplayScript();
        java.lang.String str87 = locale84.getDisplayCountry(locale85);
        java.util.Set<java.lang.String> strSet88 = locale85.getUnicodeLocaleAttributes();
        java.lang.String str89 = locale83.getDisplayVariant(locale85);
        java.lang.String str90 = locale67.getDisplayCountry(locale85);
        java.lang.String str91 = locale85.getDisplayVariant();
        java.lang.String str92 = locale55.getDisplayLanguage(locale85);
        boolean boolean93 = fraction6.equals((java.lang.Object) locale85);
        java.util.Set<java.lang.String> strSet94 = locale85.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1 / 100" + "'", str3, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.016666668f + "'", float27 == 0.016666668f);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(attributedCharacterIterator44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNull(fraction53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587" + "'", str56, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh-TW" + "'", str57, "zh-TW");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zho" + "'", str60, "zho");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Taiwan" + "'", str63, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals(locale67.toString(), "kor");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals(locale74.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(charSet78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str81, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str82, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Japan" + "'", str87, "Japan");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Chinese" + "'", str92, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strSet94);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        java.lang.String str26 = parsePosition24.toString();
        java.lang.Object obj27 = fractionFormat15.parseObject("\uc911\uad6d\uc5b4", parsePosition24);
        org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat0.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition24);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale.setDefault(locale29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale29);
        properFractionFormat0.setDenominatorFormat(numberFormat33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale35.getDisplayScript(locale37);
        java.lang.String str40 = locale35.toLanguageTag();
        java.util.Set<java.lang.String> strSet41 = locale35.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        properFractionFormat0.setWholeFormat(numberFormat43);
        java.text.NumberFormat numberFormat45 = properFractionFormat0.getWholeFormat();
        java.text.ParsePosition parsePosition47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = properFractionFormat0.parseObject("french (canada) (JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY))", parsePosition47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(fraction28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u6587" + "'", str30, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "und" + "'", str40, "und");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat45);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        fieldPosition5.setEndIndex(3);
        java.text.Format.Field field8 = fieldPosition5.getFieldAttribute();
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str11 = languageRange10.getRange();
        java.lang.String str12 = languageRange10.getRange();
        java.lang.String str13 = languageRange10.getRange();
        boolean boolean14 = field8.equals((java.lang.Object) str13);
        java.text.NumberFormat.Field field15 = java.text.NumberFormat.Field.CURRENCY;
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.setScript("");
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.lang.String str21 = locale19.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getISO3Language();
        java.lang.String str25 = locale19.getDisplayScript(locale22);
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.lang.String str27 = locale19.getDisplayCountry(locale26);
        java.util.Locale.Builder builder28 = builder16.setLocale(locale26);
        java.lang.String str29 = locale26.getDisplayScript();
        boolean boolean30 = field15.equals((java.lang.Object) locale26);
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field15, 0);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Set<java.lang.String> strSet35 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale33.getDisplayCountry();
        java.lang.String str37 = locale33.getISO3Country();
        java.util.Locale locale38 = locale33.stripExtensions();
        boolean boolean39 = field15.equals((java.lang.Object) locale38);
        java.text.NumberFormat.Field field40 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition((java.text.Format.Field) field40);
        java.lang.String str42 = fieldPosition41.toString();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale43.getDisplayName(locale44);
        boolean boolean47 = fieldPosition41.equals((java.lang.Object) locale44);
        fieldPosition41.setEndIndex((int) '#');
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getCurrencyInstance(locale50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat51);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction56 = properFractionFormat52.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition55);
        boolean boolean57 = fieldPosition41.equals((java.lang.Object) parsePosition55);
        boolean boolean58 = field15.equals((java.lang.Object) parsePosition55);
        boolean boolean59 = field8.equals((java.lang.Object) field15);
        java.lang.String str60 = field15.toString();
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition((java.text.Format.Field) field15, (-14400));
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(field15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587" + "'", str20, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-TW" + "'", str21, "zh-TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zho" + "'", str24, "zho");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Taiwan" + "'", str27, "Taiwan");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh-TW" + "'", str34, "zh-TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u53f0\u7063" + "'", str36, "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TWN" + "'", str37, "TWN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str42, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (Taiwan)" + "'", str46, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNull(fraction56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str60, "java.text.NumberFormat$Field(currency)");
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(2147483647, 599);
        int int3 = fraction2.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction2.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        boolean boolean14 = numberFormat12.equals((java.lang.Object) locale13);
        boolean boolean15 = fraction10.equals((java.lang.Object) locale13);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction10.abs();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        boolean boolean19 = fraction16.equals((java.lang.Object) locale17);
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        long long30 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction24.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction24.divide(fraction43);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction24.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction16.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction4.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction51.abs();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getInstance(locale54);
        java.util.Locale locale56 = java.util.Locale.getDefault();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) locale56);
        boolean boolean58 = fraction53.equals((java.lang.Object) locale56);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction53.reciprocal();
        int int60 = fraction53.getDenominator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction61 = fraction4.add(fraction53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: overflow: add");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 120 + "'", int60 == 120);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        numberFormat4.setMinimumFractionDigits(0);
        numberFormat4.setMaximumIntegerDigits(1728000);
        java.lang.String str10 = numberFormat4.format((long) 120);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = numberFormat4.parseObject("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=100,ENDINDEX=0]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "120" + "'", str10, "120");
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) 'a');
        java.lang.String str18 = parsePosition17.toString();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder19.clear();
        java.util.Locale.Builder builder22 = builder21.clear();
        boolean boolean23 = parsePosition17.equals((java.lang.Object) builder22);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale29 = java.util.Locale.getDefault(category24);
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean32 = parsePosition17.equals((java.lang.Object) locale29);
        java.lang.String str33 = locale11.getDisplayScript(locale29);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getDisplayCountry();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale34.getDisplayCountry(locale36);
        java.lang.String str40 = locale29.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance(locale29);
        boolean boolean42 = locale29.hasExtensions();
        java.lang.String str43 = locale5.getDisplayVariant(locale29);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance(locale5);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Currency currency46 = numberFormat45.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str18, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str38, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "coreano" + "'", str40, "coreano");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        float float3 = fraction2.floatValue();
        double double4 = fraction2.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        long long15 = fraction13.longValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        long long27 = fraction25.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.multiply(fraction25);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction9.divide(fraction28);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction9.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction9.negate();
        int int32 = fraction9.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction2.subtract(fraction9);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction9.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction9.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        fractionFormat4.setDenominatorFormat(numberFormat9);
        int int12 = numberFormat9.getMinimumIntegerDigits();
        boolean boolean13 = numberFormat9.isGroupingUsed();
        numberFormat9.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9);
        java.math.RoundingMode roundingMode17 = numberFormat9.getRoundingMode();
        java.lang.StringBuffer stringBuffer19 = null;
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field20);
        java.text.Format.Field field22 = fieldPosition21.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer23 = numberFormat9.format((double) 7, stringBuffer19, fieldPosition21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertNotNull(field22);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 60, 117);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 60 to fraction (-59/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        boolean boolean16 = numberFormat14.equals((java.lang.Object) strArray15);
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        int int22 = numberFormat21.getMaximumIntegerDigits();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        java.util.Currency currency26 = numberFormat24.getCurrency();
        numberFormat21.setCurrency(currency26);
        java.util.Currency currency28 = numberFormat21.getCurrency();
        java.math.RoundingMode roundingMode29 = numberFormat21.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode29);
        java.lang.Object obj31 = numberFormat14.clone();
        fractionFormat9.setNumeratorFormat(numberFormat14);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        properFractionFormat35.setWholeFormat(numberFormat37);
        java.text.NumberFormat numberFormat40 = properFractionFormat35.getWholeFormat();
        fractionFormat9.setDenominatorFormat(numberFormat40);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder42.clearExtensions();
        java.util.Locale.Builder builder45 = builder42.setVariant("");
        java.util.Locale.Builder builder47 = builder45.setLanguage("Japan");
        java.util.Locale.Builder builder49 = builder47.setLanguage("France");
        java.util.Locale.Builder builder50 = builder47.clear();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str53 = locale52.getDisplayLanguage();
        java.util.Locale.Builder builder54 = builder50.setLocale(locale52);
        java.util.Locale.Builder builder55 = builder50.clearExtensions();
        java.util.Locale.Builder builder57 = builder50.setLanguage("CHN");
        java.util.Locale.Builder builder60 = builder57.setExtension('a', "");
        java.util.Locale.Builder builder61 = builder60.clear();
        java.util.Locale.Builder builder62 = builder60.clear();
        java.lang.StringBuffer stringBuffer63 = null;
        java.text.NumberFormat.Field field64 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field64, (int) '#');
        java.text.Format.Field field67 = fieldPosition66.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction73 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.negate();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction73.multiply(fraction77);
        org.apache.commons.math.fraction.Fraction fraction79 = fraction70.add(fraction77);
        boolean boolean80 = field67.equals((java.lang.Object) fraction70);
        java.text.FieldPosition fieldPosition81 = new java.text.FieldPosition(field67);
        java.text.Format.Field field82 = fieldPosition81.getFieldAttribute();
        int int83 = fieldPosition81.getEndIndex();
        java.text.Format.Field field84 = fieldPosition81.getFieldAttribute();
        java.text.FieldPosition fieldPosition85 = new java.text.FieldPosition(field84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer86 = fractionFormat9.format((java.lang.Object) builder62, stringBuffer63, fieldPosition85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode29 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode29.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(field64);
        org.junit.Assert.assertNotNull(field67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(field82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(field84);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert -120 to fraction (10/10)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.fraction.fractionconversionexception: overflow trying to convert -120 to fraction (10/10)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("java.text.FieldPosition[field=35,attribute=java.text.NumberFormat$Field(currency),beginIndex=-120,endIndex=0]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.fieldposition[field=35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj7 = properFractionFormat2.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition6);
        java.util.Locale locale8 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        boolean boolean15 = numberFormat13.isGroupingUsed();
        boolean boolean16 = numberFormat13.isGroupingUsed();
        fractionFormat9.setNumeratorFormat(numberFormat13);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale21.getISO3Language();
        java.lang.String str24 = locale18.getDisplayScript(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat13.setCurrency(currency27);
        properFractionFormat2.setWholeFormat(numberFormat13);
        java.text.NumberFormat numberFormat30 = properFractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat31 = properFractionFormat2.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat31);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str7 = locale5.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = locale5.getDisplayScript(locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = locale5.getDisplayCountry(locale12);
        java.lang.String str14 = locale3.getDisplayLanguage(locale5);
        java.lang.Object obj15 = locale5.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e2d\u6587" + "'", str6, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-TW" + "'", str7, "zh-TW");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Taiwan" + "'", str13, "Taiwan");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "zh_TW");
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str7 = locale4.getISO3Country();
        java.lang.String str8 = locale0.getDisplayScript(locale4);
        java.util.Set<java.lang.String> strSet9 = locale4.getUnicodeLocaleKeys();
        java.lang.String str10 = locale4.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str3, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e2d\u6587" + "'", str6, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TWN" + "'", str7, "TWN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.apache.commons.math.fraction.Fraction fraction11 = fractionFormat9.parse("100%");
        double double12 = fraction11.doubleValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency8 = numberFormat5.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        java.lang.Object obj11 = numberFormat10.clone();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale12.getDisplayScript(locale14);
        java.lang.String str17 = locale12.toLanguageTag();
        java.lang.String str18 = locale12.getDisplayVariant();
        java.util.Locale locale19 = locale12.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale20.toLanguageTag();
        java.lang.String str23 = locale20.getExtension('x');
        java.lang.String str24 = locale19.getDisplayScript(locale20);
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getCurrencyInstance(locale19);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance();
        numberFormat26.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode29 = numberFormat26.getRoundingMode();
        numberFormat25.setRoundingMode(roundingMode29);
        numberFormat10.setRoundingMode(roundingMode29);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "kor" + "'", str15, "kor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "und" + "'", str17, "und");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-TW" + "'", str21, "zh-TW");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + roundingMode29 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode29.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        numberFormat4.setMaximumFractionDigits(3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        int int20 = numberFormat4.getMaximumIntegerDigits();
        boolean boolean21 = numberFormat4.isGroupingUsed();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat24 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        boolean boolean27 = numberFormat26.isGroupingUsed();
        properFractionFormat24.setWholeFormat(numberFormat26);
        java.text.NumberFormat numberFormat29 = properFractionFormat24.getWholeFormat();
        java.util.Currency currency30 = numberFormat29.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29);
        java.lang.Object obj32 = numberFormat29.clone();
        int int33 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale34.getISO3Language();
        java.util.Set<java.lang.Character> charSet36 = locale34.getExtensionKeys();
        java.util.Locale locale37 = java.util.Locale.US;
        java.lang.String str38 = locale37.getDisplayScript();
        java.lang.String str39 = locale34.getDisplayVariant(locale37);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat44, numberFormat46);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj51 = numberFormat46.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition50);
        java.lang.String str52 = parsePosition50.toString();
        boolean boolean54 = parsePosition50.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction55 = properFractionFormat41.parse("java.text.ParseException: zh_TW", parsePosition50);
        java.text.NumberFormat numberFormat56 = properFractionFormat41.getWholeFormat();
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition(119);
        int int60 = parsePosition59.getIndex();
        java.lang.Object obj61 = null;
        boolean boolean62 = parsePosition59.equals(obj61);
        java.lang.Object obj63 = numberFormat56.parseObject("zh_tw", parsePosition59);
        java.math.RoundingMode roundingMode64 = numberFormat56.getRoundingMode();
        numberFormat29.setRoundingMode(roundingMode64);
        numberFormat4.setRoundingMode(roundingMode64);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "kor" + "'", str35, "kor");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str52, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(fraction55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 119 + "'", int60 == 119);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + roundingMode64 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode64.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        properFractionFormat10.setWholeFormat(numberFormat12);
        java.text.NumberFormat numberFormat15 = properFractionFormat10.getWholeFormat();
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number19 = numberFormat15.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition18);
        parsePosition18.setErrorIndex(0);
        parsePosition18.setIndex(1);
        parsePosition18.setErrorIndex(32);
        java.lang.Object obj26 = numberFormat4.parseObject("\u53f0\u6e7e\u5730\u533a", parsePosition18);
        int int27 = numberFormat4.getMaximumIntegerDigits();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        java.lang.Object obj16 = numberFormat4.parseObject("-100%");
        numberFormat4.setMaximumFractionDigits(3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str24 = locale21.getDisplayVariant();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale21);
        numberFormat25.setMaximumIntegerDigits((int) (byte) 0);
        properFractionFormat19.setDenominatorFormat(numberFormat25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance();
        numberFormat29.setMaximumIntegerDigits(2147483647);
        int int32 = numberFormat29.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field33 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field33);
        int int35 = fieldPosition34.getBeginIndex();
        boolean boolean36 = numberFormat29.equals((java.lang.Object) int35);
        properFractionFormat19.setWholeFormat(numberFormat29);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getCurrencyInstance(locale45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat47.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition50);
        int int52 = parsePosition50.getIndex();
        java.lang.Object obj53 = numberFormat40.parseObject("0%", parsePosition50);
        int int54 = parsePosition50.getErrorIndex();
        java.lang.Object obj55 = properFractionFormat19.parseObject("", parsePosition50);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getPercentInstance(locale56);
        boolean boolean58 = numberFormat57.isGroupingUsed();
        java.lang.Object obj59 = numberFormat57.clone();
        java.lang.String str61 = numberFormat57.format((long) 117);
        java.lang.Object obj62 = numberFormat57.clone();
        numberFormat57.setMinimumFractionDigits(51);
        properFractionFormat19.setWholeFormat(numberFormat57);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1L) + "'", obj16, (-1L));
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "11,700%" + "'", str61, "11,700%");
        org.junit.Assert.assertNotNull(obj62);
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.add(fraction27);
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction5.multiply(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.008333333333333333d + "'", double29 == 0.008333333333333333d);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        int int7 = numberFormat5.getMaximumFractionDigits();
        int int8 = numberFormat5.getMaximumIntegerDigits();
        int int9 = numberFormat5.getMinimumFractionDigits();
        java.lang.Object obj10 = numberFormat5.clone();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getExtension('x');
        boolean boolean4 = locale0.hasExtensions();
        java.util.Locale locale5 = locale0.stripExtensions();
        java.lang.String str6 = locale0.getDisplayVariant();
        java.lang.String str8 = locale0.getExtension('x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMinimumIntegerDigits();
        java.lang.String str23 = numberFormat20.format((long) 1);
        int int24 = numberFormat20.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field26);
        java.lang.String str28 = fieldPosition27.toString();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayName(locale30);
        boolean boolean33 = fieldPosition27.equals((java.lang.Object) locale30);
        fieldPosition27.setEndIndex((int) '#');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat38.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition41);
        boolean boolean43 = fieldPosition27.equals((java.lang.Object) parsePosition41);
        int int44 = parsePosition41.getIndex();
        java.lang.Number number45 = numberFormat20.parse("", parsePosition41);
        properFractionFormat3.setWholeFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale48);
        boolean boolean50 = numberFormat49.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.text.NumberFormat numberFormat52 = properFractionFormat51.getWholeFormat();
        numberFormat52.setMinimumFractionDigits((int) (byte) 0);
        numberFormat52.setMinimumFractionDigits(60);
        numberFormat52.setParseIntegerOnly(true);
        java.util.Locale locale59 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale59);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale61);
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        org.apache.commons.math.fraction.FractionFormat fractionFormat65 = new org.apache.commons.math.fraction.FractionFormat(numberFormat62, numberFormat64);
        boolean boolean66 = numberFormat64.isGroupingUsed();
        boolean boolean67 = numberFormat64.isGroupingUsed();
        fractionFormat60.setNumeratorFormat(numberFormat64);
        java.lang.Object obj69 = numberFormat64.clone();
        java.text.ParseException parseException72 = new java.text.ParseException("Taiwan", (int) (byte) 100);
        boolean boolean73 = numberFormat64.equals((java.lang.Object) parseException72);
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance();
        numberFormat74.setMaximumIntegerDigits(2147483647);
        java.lang.String str78 = numberFormat74.format((long) 2147483647);
        java.util.Locale locale82 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat83 = java.text.NumberFormat.getPercentInstance(locale82);
        int int84 = numberFormat83.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat85 = new org.apache.commons.math.fraction.FractionFormat(numberFormat83);
        numberFormat83.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode88 = numberFormat83.getRoundingMode();
        numberFormat74.setRoundingMode(roundingMode88);
        numberFormat64.setRoundingMode(roundingMode88);
        numberFormat64.setMaximumIntegerDigits(120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = new org.apache.commons.math.fraction.FractionFormat(numberFormat64);
        java.util.Currency currency94 = numberFormat64.getCurrency();
        numberFormat52.setCurrency(currency94);
        numberFormat20.setCurrency(currency94);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100%" + "'", str23, "100%");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str28, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (Taiwan)" + "'", str32, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "214,748,364,700%" + "'", str78, "214,748,364,700%");
        org.junit.Assert.assertEquals(locale82.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2147483647 + "'", int84 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode88 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode88.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency94);
        org.junit.Assert.assertEquals(currency94.toString(), "XXX");
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.setExtension('u', "en");
        java.util.Locale locale10 = builder9.build();
        java.util.Locale locale11 = builder9.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction12.abs();
        long long26 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction32.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction27.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction27.negate();
        long long44 = fraction43.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction50.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.add(fraction52);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction43.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction58.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.add(fraction64);
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction67.divide(fraction70);
        int int73 = fraction67.intValue();
        float float74 = fraction67.floatValue();
        int int75 = fraction67.intValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction67.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction46.divide(fraction76);
        org.apache.commons.math.fraction.Fraction fraction79 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.abs();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction77.add(fraction80);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction12.subtract(fraction77);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction77.abs();
        long long84 = fraction77.longValue();
        int int85 = fraction77.intValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1 / 1" + "'", str28, "1 / 1");
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + float74 + "' != '" + 0.016666668f + "'", float74 == 0.016666668f);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = locale12.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-TW" + "'", str10, "zh-TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese" + "'", str14, "Chinese");
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.NumberFormat numberFormat6 = properFractionFormat5.getWholeFormat();
        java.text.NumberFormat numberFormat7 = properFractionFormat5.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat19);
        boolean boolean21 = numberFormat19.isGroupingUsed();
        boolean boolean22 = numberFormat19.isGroupingUsed();
        fractionFormat15.setNumeratorFormat(numberFormat19);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29);
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        int int38 = numberFormat37.getMaximumIntegerDigits();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean41 = numberFormat40.isGroupingUsed();
        java.util.Currency currency42 = numberFormat40.getCurrency();
        numberFormat37.setCurrency(currency42);
        java.util.Currency currency44 = numberFormat37.getCurrency();
        java.math.RoundingMode roundingMode45 = numberFormat37.getRoundingMode();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) 'a');
        java.lang.String str49 = parsePosition48.toString();
        java.lang.String str50 = parsePosition48.toString();
        java.lang.Object obj51 = numberFormat37.parseObject("zho", parsePosition48);
        java.lang.Object obj52 = fractionFormat31.parseObject("java.text.NumberFormat$Field(currency)", parsePosition48);
        java.lang.Object obj53 = numberFormat19.parseObject("Italian", parsePosition48);
        java.lang.Object obj54 = numberFormat10.parseObject("600", parsePosition48);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strSet61);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList56, (java.util.Collection<java.lang.String>) strSet61, filteringMode63);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.lang.String[] strArray69 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.lang.String>) strList70);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList56, (java.util.Collection<java.lang.String>) strList70);
        boolean boolean74 = parsePosition48.equals((java.lang.Object) strList70);
        org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat5.parse("java.text.ParsePosition[index=100,errorIndex=99]", parsePosition48);
        java.util.Locale locale76 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getCurrencyInstance(locale76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        java.util.Currency currency79 = numberFormat77.getCurrency();
        numberFormat77.setMinimumFractionDigits((int) '#');
        int int82 = numberFormat77.getMaximumIntegerDigits();
        java.util.Locale locale86 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getPercentInstance(locale86);
        numberFormat87.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency90 = numberFormat87.getCurrency();
        numberFormat77.setCurrency(currency90);
        properFractionFormat5.setNumeratorFormat(numberFormat77);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2147483647 + "'", int38 == 2147483647);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(currency42);
        org.junit.Assert.assertEquals(currency42.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency44);
        org.junit.Assert.assertEquals(currency44.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode45 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode45.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str49, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str50, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(currency79);
        org.junit.Assert.assertEquals(currency79.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2147483647 + "'", int82 == 2147483647);
        org.junit.Assert.assertEquals(locale86.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(currency90);
        org.junit.Assert.assertEquals(currency90.toString(), "XXX");
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        long long1 = fraction0.longValue();
        org.apache.commons.math.fraction.Fraction fraction2 = fraction0.reciprocal();
        byte byte3 = fraction2.byteValue();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 1 + "'", byte3 == (byte) 1);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        int int10 = fieldPosition1.getField();
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition(field11);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat18);
        boolean boolean20 = numberFormat18.isGroupingUsed();
        boolean boolean21 = numberFormat18.isGroupingUsed();
        fractionFormat14.setNumeratorFormat(numberFormat18);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale23);
        java.lang.String str26 = numberFormat24.format(0.0d);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        boolean boolean29 = numberFormat24.equals((java.lang.Object) strSet28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat30 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat24);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        boolean boolean33 = numberFormat32.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        int int35 = numberFormat32.getMaximumIntegerDigits();
        numberFormat32.setMaximumFractionDigits(100);
        fractionFormat30.setNumeratorFormat(numberFormat32);
        numberFormat32.setGroupingUsed(true);
        boolean boolean41 = field11.equals((java.lang.Object) numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        int int15 = numberFormat14.getMinimumFractionDigits();
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance();
        numberFormat16.setParseIntegerOnly(true);
        java.lang.Object obj19 = numberFormat16.clone();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat16, numberFormat20);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getISO3Country();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        int int33 = numberFormat32.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        java.util.Currency currency37 = numberFormat35.getCurrency();
        numberFormat32.setCurrency(currency37);
        java.util.Currency currency39 = numberFormat32.getCurrency();
        int int40 = numberFormat32.getMaximumFractionDigits();
        java.lang.Object obj41 = numberFormat32.clone();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        numberFormat43.setMaximumFractionDigits(100);
        numberFormat43.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str50 = numberFormat43.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat32, numberFormat43);
        java.text.NumberFormat.Field field53 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field53);
        java.lang.String str55 = fieldPosition54.toString();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.lang.String str58 = locale57.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayName(locale57);
        boolean boolean60 = fieldPosition54.equals((java.lang.Object) locale57);
        fieldPosition54.setEndIndex((int) '#');
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getCurrencyInstance(locale63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction69 = properFractionFormat65.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition68);
        boolean boolean70 = fieldPosition54.equals((java.lang.Object) parsePosition68);
        int int71 = parsePosition68.getIndex();
        org.apache.commons.math.fraction.Fraction fraction72 = properFractionFormat51.parse("hi!", parsePosition68);
        java.lang.String str73 = parsePosition68.toString();
        org.apache.commons.math.fraction.Fraction fraction74 = properFractionFormat21.parse("TAIWAN", parsePosition68);
        java.lang.String str75 = parsePosition68.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100%" + "'", str50, "100%");
        org.junit.Assert.assertNotNull(field53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str55, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese (Taiwan)" + "'", str59, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNull(fraction69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNull(fraction72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str73, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(fraction74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str75, "java.text.ParsePosition[index=1,errorIndex=1]");
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getDenominatorFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat40.getNumeratorFormat();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale43);
        boolean boolean45 = numberFormat44.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat44);
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat48, numberFormat50);
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj55 = numberFormat50.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition54);
        properFractionFormat46.setNumeratorFormat(numberFormat50);
        java.util.Locale locale60 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getPercentInstance(locale60);
        int int62 = numberFormat61.getMaximumIntegerDigits();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        boolean boolean65 = numberFormat64.isGroupingUsed();
        java.util.Currency currency66 = numberFormat64.getCurrency();
        numberFormat61.setCurrency(currency66);
        java.util.Currency currency68 = numberFormat61.getCurrency();
        java.math.RoundingMode roundingMode69 = numberFormat61.getRoundingMode();
        java.text.ParsePosition parsePosition72 = new java.text.ParsePosition((int) 'a');
        java.lang.String str73 = parsePosition72.toString();
        java.lang.String str74 = parsePosition72.toString();
        java.lang.Object obj75 = numberFormat61.parseObject("zho", parsePosition72);
        properFractionFormat46.setWholeFormat(numberFormat61);
        java.text.NumberFormat numberFormat77 = properFractionFormat46.getWholeFormat();
        properFractionFormat40.setWholeFormat(numberFormat77);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException81 = new org.apache.commons.math.fraction.FractionConversionException((double) 14748364700L, (-2));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = properFractionFormat40.format((java.lang.Object) fractionConversionException81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2147483647 + "'", int62 == 2147483647);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode69 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode69.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str73, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str74, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(numberFormat77);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException6 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 100);
        boolean boolean7 = numberFormat3.equals((java.lang.Object) 0.0d);
        int int8 = numberFormat3.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale5.getDisplayName(locale8);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("chinois");
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.lang.String str17 = locale16.getISO3Language();
        java.util.Locale.setDefault(category0, locale16);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cor\351en" + "'", str10, "cor\351en");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "chinois");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.Format.Field field7 = fieldPosition6.getFieldAttribute();
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition(field7);
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction26.divide(fraction29);
        int int32 = fraction26.intValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction26.abs();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction13.add(fraction26);
        boolean boolean36 = field7.equals((java.lang.Object) fraction35);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        int int4 = numberFormat0.getMinimumIntegerDigits();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        java.lang.Object obj7 = numberFormat0.clone();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.getExtension('x');
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.lang.String str7 = locale5.getVariant();
        java.lang.String str8 = locale0.getDisplayVariant(locale5);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction14.multiply(fraction18);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction11.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        long long30 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction25.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction11.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction43 = new org.apache.commons.math.fraction.Fraction((double) 600);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction11.add(fraction43);
        int int45 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction44.abs();
        boolean boolean47 = locale5.equals((java.lang.Object) fraction46);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 599 + "'", int45 == 599);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.lang.String str6 = locale0.getDisplayName();
        java.lang.String str7 = locale0.getCountry();
        boolean boolean8 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(7);
        java.lang.String str2 = fieldPosition1.toString();
        fieldPosition1.setEndIndex((int) (byte) -51);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder6.setLanguage("Japan");
        java.util.Locale.Builder builder10 = builder8.setLanguage("France");
        java.util.Locale.Builder builder12 = builder8.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder14 = builder12.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder14.clear();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder16.build();
        java.lang.String str19 = locale1.getDisplayLanguage(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "france__#u-fra");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "france");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean" + "'", str19, "Korean");
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str17 = locale11.getDisplayScript(locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale11.getDisplayCountry(locale18);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale21.toLanguageTag();
        java.lang.String str27 = locale21.getDisplayVariant();
        java.lang.String str28 = locale21.getVariant();
        java.util.Locale.Builder builder29 = builder20.setLocale(locale21);
        java.util.Locale locale30 = locale21.stripExtensions();
        java.lang.String str31 = locale0.getDisplayName(locale21);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.Object obj33 = numberFormat32.clone();
        java.lang.String str35 = numberFormat32.format(0.6185567010309279d);
        java.lang.Number number37 = numberFormat32.parse("-120");
        numberFormat32.setMinimumIntegerDigits(200);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese" + "'", str12, "Chinese");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "French (France)" + "'", str31, "French (France)");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + (-120L) + "'", number37, (-120L));
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) '#');
        parsePosition1.setErrorIndex(600);
        java.lang.String str4 = parsePosition1.toString();
        parsePosition1.setIndex(2);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("en");
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale.Builder builder13 = builder7.setLocale(locale11);
        java.util.Locale locale14 = builder13.build();
        java.util.Locale.Builder builder16 = builder13.setLanguage("");
        boolean boolean17 = parsePosition1.equals((java.lang.Object) builder16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.addUnicodeLocaleAttribute("62%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 62% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.ParsePosition[index=35,errorIndex=600]" + "'", str4, "java.text.ParsePosition[index=35,errorIndex=600]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str12, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.lang.String str4 = locale2.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale2.getDisplayName(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str11 = locale0.getDisplayVariant(locale5);
        java.util.Locale locale12 = locale5.stripExtensions();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = locale13.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale13.getDisplayScript(locale16);
        java.lang.String str20 = locale13.toLanguageTag();
        java.util.Locale locale21 = locale13.stripExtensions();
        java.util.Set<java.lang.String> strSet22 = locale13.getUnicodeLocaleKeys();
        boolean boolean23 = locale13.hasExtensions();
        java.lang.String str24 = locale12.getDisplayLanguage(locale13);
        java.lang.String str25 = locale13.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ja" + "'", str1, "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese" + "'", str3, "Chinese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-TW" + "'", str4, "zh-TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois (Taiwan)" + "'", str9, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese" + "'", str14, "Chinese");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh-TW" + "'", str15, "zh-TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-TW" + "'", str20, "zh-TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u6cd5\u6587" + "'", str24, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 0);
        java.lang.String str3 = fieldPosition2.toString();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) 100, 1);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        numberFormat8.setMaximumIntegerDigits(2147483647);
        int int11 = numberFormat8.getMinimumFractionDigits();
        numberFormat8.setParseIntegerOnly(true);
        boolean boolean14 = fraction6.equals((java.lang.Object) numberFormat8);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean19 = numberFormat17.equals((java.lang.Object) numberFormat18);
        java.lang.Object obj20 = numberFormat18.clone();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean25 = numberFormat23.equals((java.lang.Object) numberFormat24);
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        int int32 = numberFormat31.getMaximumIntegerDigits();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        boolean boolean35 = numberFormat34.isGroupingUsed();
        java.util.Currency currency36 = numberFormat34.getCurrency();
        numberFormat31.setCurrency(currency36);
        java.util.Currency currency38 = numberFormat31.getCurrency();
        java.math.RoundingMode roundingMode39 = numberFormat31.getRoundingMode();
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) 'a');
        java.lang.String str43 = parsePosition42.toString();
        java.lang.String str44 = parsePosition42.toString();
        java.lang.Object obj45 = numberFormat31.parseObject("zho", parsePosition42);
        java.lang.String str46 = parsePosition42.toString();
        java.lang.Number number47 = numberFormat24.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition42);
        java.lang.Object obj48 = numberFormat18.parseObject("cor\351en", parsePosition42);
        int int49 = parsePosition42.getErrorIndex();
        java.lang.Object obj50 = numberFormat8.parseObject("11,700%", parsePosition42);
        java.text.NumberFormat.Field field51 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field51);
        boolean boolean53 = parsePosition42.equals((java.lang.Object) field51);
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field51);
        boolean boolean55 = fieldPosition2.equals((java.lang.Object) field51);
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((java.text.Format.Field) field51, (int) (byte) -119);
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition((java.text.Format.Field) field51, (int) (short) 32);
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field51, (int) (byte) 37);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2147483647 + "'", int32 == 2147483647);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode39 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode39.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str43, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str44, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str46, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        java.util.Locale locale1 = new java.util.Locale("java.text.ParsePosition[index=1,errorIndex=-14399]");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseposition[index=1,errorindex=-14399]");
        org.junit.Assert.assertNotNull(numberFormat2);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction1 = fraction0.negate();
        java.util.Locale locale5 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale5);
        numberFormat6.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str10 = numberFormat6.format((double) 0.0f);
        int int11 = numberFormat6.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat18 = null;
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        numberFormat23.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean26 = numberFormat23.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat14, numberFormat18);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        boolean boolean30 = numberFormat29.isParseIntegerOnly();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = fraction0.compareTo((java.lang.Object) numberFormat29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.text.DecimalFormat cannot be cast to org.apache.commons.math.fraction.Fraction");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertNotNull(fraction1);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0%" + "'", str10, "0%");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.lang.String str6 = locale0.getDisplayVariant();
        java.util.Locale locale7 = locale0.stripExtensions();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = locale8.getScript();
        java.util.Locale locale13 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str14 = locale8.getDisplayScript(locale13);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean20 = numberFormat18.equals((java.lang.Object) numberFormat19);
        java.util.Locale locale25 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getPercentInstance(locale25);
        int int27 = numberFormat26.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        boolean boolean30 = numberFormat29.isGroupingUsed();
        java.util.Currency currency31 = numberFormat29.getCurrency();
        numberFormat26.setCurrency(currency31);
        java.util.Currency currency33 = numberFormat26.getCurrency();
        java.math.RoundingMode roundingMode34 = numberFormat26.getRoundingMode();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) 'a');
        java.lang.String str38 = parsePosition37.toString();
        java.lang.String str39 = parsePosition37.toString();
        java.lang.Object obj40 = numberFormat26.parseObject("zho", parsePosition37);
        java.lang.String str41 = parsePosition37.toString();
        java.lang.Number number42 = numberFormat19.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        java.lang.Object obj43 = fractionFormat15.parseObject("zho", parsePosition37);
        boolean boolean44 = locale0.equals(obj43);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale13.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode34 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode34.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str38, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str39, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        java.lang.String str3 = fieldPosition1.toString();
        int int4 = fieldPosition1.getBeginIndex();
        fieldPosition1.setBeginIndex(2147483647);
        java.text.Format.Field field7 = fieldPosition1.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        long long14 = fraction13.longValue();
        boolean boolean15 = field7.equals((java.lang.Object) long14);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field7, 0);
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition(field7, (int) (byte) 119);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-tw" + "'", str2, "zh-tw");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-tw" + "'", str3, "zh-tw");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-tw" + "'", str4, "zh-tw");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-tw" + "'", str6, "zh-tw");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-tw" + "'", str7, "zh-tw");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh-tw" + "'", str8, "zh-tw");
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        int int11 = fieldPosition1.getField();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction12.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction12.negate();
        boolean boolean29 = fieldPosition1.equals((java.lang.Object) fraction28);
        fieldPosition1.setEndIndex((int) (short) 1);
        java.lang.String str32 = fieldPosition1.toString();
        fieldPosition1.setEndIndex(10);
        int int35 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1 / 1" + "'", str13, "1 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=1]" + "'", str32, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) (-1728001), (long) (byte) -101, (long) 97);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("France");
        java.lang.String str3 = locale1.getUnicodeLocaleType("87");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.Object obj5 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "france");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "france");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "france");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "france");
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction12.subtract(fraction23);
        long long25 = fraction23.longValue();
        int int26 = fraction23.getDenominator();
        int int27 = fraction23.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120 + "'", int26 == 120);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setRegion("java.text.ParseException: 14,400 / 1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: java.text.ParseException: 14,400 / 1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        java.util.Locale locale3 = new java.util.Locale("6,000", "\24435.00", "1 / 1");
        org.junit.Assert.assertEquals(locale3.toString(), "6,000_\24435.00_1 / 1");
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        java.util.Locale locale3 = new java.util.Locale("3,500.0%_2,147,483,647 / 1_100% (ZH-TW)", "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us", "zh_tw");
        java.lang.Object obj4 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "3,500.0%_2,147,483,647 / 1_100% (zh-tw)_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]_US_zh_tw");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "3,500.0%_2,147,483,647 / 1_100% (zh-tw)_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]_US_zh_tw");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "3,500.0%_2,147,483,647 / 1_100% (zh-tw)_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]_US_zh_tw");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "3,500.0%_2,147,483,647 / 1_100% (zh-tw)_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]_US_zh_tw");
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale7.getDisplayCountry(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale.Builder builder14 = builder6.setLocale(locale8);
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.clear();
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.getDefault(category17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale19);
        java.util.Locale.setDefault(category17, locale19);
        java.util.Locale locale22 = java.util.Locale.getDefault(category17);
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getISO3Language();
        java.util.Locale.setDefault(category23, locale24);
        java.util.Locale.setDefault(category17, locale24);
        java.util.Locale locale28 = java.util.Locale.getDefault(category17);
        java.util.Locale locale29 = java.util.Locale.getDefault(category17);
        java.util.Locale locale30 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category17, locale30);
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale38 = java.util.Locale.getDefault(category33);
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale40.getISO3Language();
        java.util.Locale.setDefault(category39, locale40);
        java.util.Locale.setDefault(category33, locale40);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = locale44.getISO3Country();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getIntegerInstance(locale44);
        java.util.Locale.setDefault(category33, locale44);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.util.Locale locale49 = locale48.stripExtensions();
        java.util.Locale.setDefault(category33, locale48);
        java.util.Locale.setDefault(category17, locale48);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        java.util.Locale.setDefault(category17, locale53);
        java.util.Locale.Builder builder55 = builder16.setLocale(locale53);
        java.util.Locale.Builder builder57 = builder16.removeUnicodeLocaleAttribute("Japanese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder59 = builder57.setRegion("KOR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: KOR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japan" + "'", str10, "Japan");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "kor" + "'", str41, "kor");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        numberFormat0.setMaximumIntegerDigits(2147483647);
        int int3 = numberFormat0.getMinimumFractionDigits();
        java.lang.Object obj4 = numberFormat0.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat0);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getScript();
        java.util.Locale locale12 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str13 = locale7.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale12);
        int int15 = numberFormat14.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        org.apache.commons.math.fraction.Fraction fraction18 = fractionFormat16.parse("100%");
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        numberFormat24.setMinimumIntegerDigits((int) (short) -1);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        properFractionFormat30.setWholeFormat(numberFormat32);
        java.text.NumberFormat numberFormat35 = properFractionFormat30.getWholeFormat();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number39 = numberFormat35.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition38);
        parsePosition38.setErrorIndex(0);
        parsePosition38.setIndex(1);
        parsePosition38.setErrorIndex(32);
        java.lang.Object obj46 = numberFormat24.parseObject("\u53f0\u6e7e\u5730\u533a", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction47 = fractionFormat16.parse("2%", parsePosition38);
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.reciprocal();
        boolean boolean52 = parsePosition38.equals((java.lang.Object) fraction50);
        int int53 = parsePosition38.getIndex();
        java.lang.Object obj54 = fractionFormat5.parseObject("ZH_TW", parsePosition38);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale12.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(number39);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(0, 11);
        java.text.NumberFormat.Field field3 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field3);
        int int5 = fieldPosition4.getEndIndex();
        fieldPosition4.setBeginIndex((int) (byte) 100);
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str12 = fractionFormat10.format((java.lang.Object) 100);
        boolean boolean13 = fieldPosition4.equals((java.lang.Object) fractionFormat10);
        fieldPosition4.setBeginIndex(2147483647);
        boolean boolean16 = fraction2.equals((java.lang.Object) fieldPosition4);
        java.text.Format.Field field17 = fieldPosition4.getFieldAttribute();
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "100 0 / 1" + "'", str12, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(field17);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        numberFormat15.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.Object obj23 = numberFormat15.clone();
        java.lang.Number number25 = numberFormat15.parse("2,147,483,647.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        properFractionFormat29.setWholeFormat(numberFormat31);
        java.text.NumberFormat numberFormat34 = properFractionFormat29.getWholeFormat();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number38 = numberFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        int int39 = parsePosition37.getIndex();
        java.lang.String str40 = parsePosition37.toString();
        java.lang.Object obj41 = numberFormat15.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]", parsePosition37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 2L + "'", number25, 2L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(number38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str40, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder12 = builder7.setExtension('u', "600");
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguage("fr-fr");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: fr-fr [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getDenominatorFormat();
        java.lang.String str3 = numberFormat1.format((long) (short) 60);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "60" + "'", str3, "60");
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.text.NumberFormat numberFormat58 = properFractionFormat57.getWholeFormat();
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj62 = properFractionFormat57.parseObject("chinois (Taiwan)", parsePosition61);
        java.text.NumberFormat numberFormat63 = properFractionFormat57.getNumeratorFormat();
        numberFormat63.setMinimumFractionDigits((-119));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(numberFormat63);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setScript("-000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: -000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj50 = properFractionFormat46.parseObject("", parsePosition49);
        parsePosition49.setErrorIndex((-1));
        parsePosition49.setIndex(120);
        java.lang.Object obj55 = numberFormat28.parseObject("", parsePosition49);
        java.lang.Object obj56 = numberFormat22.parseObject("20 / 7", parsePosition49);
        numberFormat22.setParseIntegerOnly(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getCurrencyInstance();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat1 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        int int2 = numberFormat0.getMinimumFractionDigits();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.lang.String str9 = locale3.getDisplayName(locale6);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.lang.String str15 = locale3.getDisplayLanguage(locale12);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale3);
        java.util.Currency currency17 = numberFormat16.getCurrency();
        java.util.Locale locale21 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        int int23 = numberFormat22.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22);
        numberFormat22.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode27 = numberFormat22.getRoundingMode();
        numberFormat16.setRoundingMode(roundingMode27);
        numberFormat16.setParseIntegerOnly(false);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        properFractionFormat33.setWholeFormat(numberFormat35);
        java.text.NumberFormat numberFormat38 = properFractionFormat33.getWholeFormat();
        java.lang.String str40 = numberFormat38.format((double) 1.0f);
        numberFormat38.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat38.setParseIntegerOnly(false);
        java.util.Locale locale47 = new java.util.Locale("java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=0]", "US");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getCurrencyInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale49.toLanguageTag();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale52.getISO3Language();
        java.lang.String str55 = locale49.getDisplayScript(locale52);
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        java.lang.String str57 = locale49.getDisplayCountry(locale56);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale49);
        java.text.NumberFormat numberFormat59 = fractionFormat58.getDenominatorFormat();
        java.math.RoundingMode roundingMode60 = numberFormat59.getRoundingMode();
        numberFormat48.setRoundingMode(roundingMode60);
        numberFormat38.setRoundingMode(roundingMode60);
        numberFormat16.setRoundingMode(roundingMode60);
        numberFormat0.setRoundingMode(roundingMode60);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean" + "'", str9, "Korean");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str15, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode27 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode27.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100%" + "'", str40, "100%");
        org.junit.Assert.assertEquals(locale47.toString(), "java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_US");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str50, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh-TW" + "'", str51, "zh-TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zho" + "'", str54, "zho");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Taiwan" + "'", str57, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertTrue("'" + roundingMode60 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode60.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getScript();
        java.util.Locale locale12 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str13 = locale7.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale12);
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet16 = locale12.getExtensionKeys();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale12.getDisplayName(locale17);
        java.util.Locale locale21 = locale17.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = locale22.getDisplayCountry(locale23);
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale21.getDisplayVariant(locale23);
        java.lang.String str29 = locale21.getExtension('a');
        java.lang.String str30 = locale4.getDisplayCountry(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getNumberInstance(locale4);
        numberFormat32.setParseIntegerOnly(false);
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getISO3Language();
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet42 = locale39.getExtensionKeys();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) '4');
        parsePosition47.setIndex(0);
        java.lang.Object obj50 = properFractionFormat44.parseObject("und", parsePosition47);
        java.lang.Object obj51 = fractionFormat37.parseObject("1 / 100", parsePosition47);
        java.lang.String str52 = parsePosition47.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = numberFormat32.format((java.lang.Object) parsePosition47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale12.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str19, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str20, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Japan" + "'", str25, "Japan");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Canada" + "'", str30, "Canada");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "kor" + "'", str40, "kor");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.text.ParsePosition[index=7,errorIndex=0]" + "'", str52, "java.text.ParsePosition[index=7,errorIndex=0]");
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Currency currency14 = numberFormat13.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        boolean boolean27 = numberFormat13.equals((java.lang.Object) fraction19);
        numberFormat13.setGroupingUsed(false);
        int int30 = numberFormat13.getMaximumFractionDigits();
        numberFormat13.setMaximumFractionDigits((int) (short) 14400);
        numberFormat13.setMinimumFractionDigits(8);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Korean" + "'", str6, "Korean");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str12, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale2.getExtension('u');
        java.util.Set<java.lang.String> strSet6 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale2.getDisplayName();
        java.lang.String str8 = locale2.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\ud504\ub791\uc2a4\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder6 = builder4.setVariant("");
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder4.setUnicodeLocaleKeyword("java.text.ParsePosition[index=100,errorIndex=100]", "java.text.ParsePosition[index=97,errorIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.ParsePosition[index=100,errorIndex=100] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str8, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-TW" + "'", str9, "zh-TW");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = new java.util.Locale("-1 / 120");
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setScript("");
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale10.getDisplayCountry(locale17);
        java.util.Locale.Builder builder19 = builder7.setLocale(locale17);
        java.lang.String str20 = locale17.getDisplayScript();
        java.lang.String str21 = locale6.getDisplayLanguage(locale17);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale17);
        java.lang.String str23 = locale3.getDisplayScript(locale17);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals(locale6.toString(), "-1 / 120");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str11, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1 / 120" + "'", str21, "-1 / 120");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getDisplayScript();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.setScript("");
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale7.getDisplayLanguage(locale9);
        java.util.Locale.Builder builder11 = builder6.setLocale(locale7);
        java.util.Locale.Builder builder12 = builder6.clearExtensions();
        java.util.Locale.Builder builder13 = builder6.clearExtensions();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        numberFormat17.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        java.lang.Number number40 = numberFormat17.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction44.abs();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getInstance(locale47);
        java.util.Locale locale49 = java.util.Locale.getDefault();
        boolean boolean50 = numberFormat48.equals((java.lang.Object) locale49);
        boolean boolean51 = fraction46.equals((java.lang.Object) locale49);
        boolean boolean52 = parsePosition37.equals((java.lang.Object) locale49);
        java.lang.String str54 = locale49.getUnicodeLocaleType("US");
        java.util.Locale.Builder builder55 = builder6.setLocale(locale49);
        java.lang.String str56 = locale1.getDisplayScript(locale49);
        java.util.Locale locale59 = new java.util.Locale("0 / 1", "\u53f0\u6e7e");
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.lang.String str61 = locale60.getScript();
        java.util.Locale locale65 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str66 = locale60.getDisplayScript(locale65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale60);
        java.lang.String str68 = locale60.getCountry();
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.lang.String str70 = locale69.getDisplayCountry();
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Locale locale72 = java.util.Locale.PRC;
        java.lang.String str73 = locale71.getDisplayName(locale72);
        java.lang.String str74 = locale69.getDisplayCountry(locale71);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = locale75.getISO3Language();
        java.util.Set<java.lang.String> strSet77 = locale75.getUnicodeLocaleKeys();
        java.lang.String str78 = locale75.getDisplayLanguage();
        java.lang.String str79 = locale69.getDisplayScript(locale75);
        java.lang.String str80 = locale60.getDisplayScript(locale69);
        java.lang.String str81 = locale59.getDisplayName(locale60);
        java.lang.String str82 = locale59.getDisplayScript();
        java.lang.String str83 = locale49.getDisplayName(locale59);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinesisch" + "'", str10, "Chinesisch");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(number40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals(locale65.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str73, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "kor" + "'", str76, "kor");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str78, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u53f0\u6e7e)" + "'", str81, "\u53f0\u6e7e)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Korean" + "'", str83, "Korean");
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        int int7 = numberFormat5.getMaximumFractionDigits();
        int int8 = numberFormat5.getMaximumIntegerDigits();
        numberFormat5.setMinimumIntegerDigits((int) (short) 1);
        numberFormat5.setMinimumFractionDigits(0);
        numberFormat5.setMaximumFractionDigits((int) (byte) 60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale14 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.util.Locale locale23 = locale18.stripExtensions();
        java.util.Locale.setDefault(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.lang.String str26 = locale23.getDisplayName();
        java.lang.String str27 = locale23.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals(locale14.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japan" + "'", str20, "Japan");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        java.util.Locale locale3 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        java.util.Locale locale8 = java.util.Locale.US;
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale5.getDisplayVariant(locale8);
        java.lang.String str11 = locale5.getDisplayCountry();
        java.lang.String str12 = locale5.getLanguage();
        java.lang.String str13 = locale4.getDisplayName(locale5);
        boolean boolean14 = locale5.hasExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "119 (2,857,ita)" + "'", str13, "119 (2,857,ita)");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 120, (double) (short) 32, 0);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap6);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("zho");
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList18);
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList20);
        java.util.Collection<java.lang.String> strCollection22 = null;
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strCollection22, filteringMode23);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet26);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strSet34, filteringMode36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strList43);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList29, strMap47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList29, strMap49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList50, strMap51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList52, strMap53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList52, strMap55);
        java.util.Locale locale60 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strSet66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, strMap68);
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.lang.String str71 = locale70.getDisplayCountry();
        java.util.Set<java.lang.String> strSet72 = locale70.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.lang.String[] strArray77 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.lang.String>) strList78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, strMap81);
        java.util.Locale locale83 = java.util.Locale.ROOT;
        java.lang.String str84 = locale83.getDisplayScript();
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = locale85.getISO3Language();
        java.lang.String str87 = locale83.getDisplayScript(locale85);
        java.lang.String str88 = locale83.toLanguageTag();
        java.util.Set<java.lang.String> strSet89 = locale83.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.lang.String>) strSet89, filteringMode90);
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags(languageRangeList69, (java.util.Collection<java.lang.String>) strSet72, filteringMode90);
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags(languageRangeList52, (java.util.Collection<java.lang.String>) strSet61, filteringMode90);
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strSet26, filteringMode90);
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList94);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode23.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode36.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Taiwan" + "'", str71, "Taiwan");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "kor" + "'", str86, "kor");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "und" + "'", str88, "und");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + filteringMode90 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode90.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(strList95);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat9 = fractionFormat8.getDenominatorFormat();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        properFractionFormat12.setWholeFormat(numberFormat14);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.lang.String str23 = locale17.getDisplayName(locale20);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        java.lang.String str29 = locale17.getDisplayLanguage(locale26);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale17);
        java.util.Currency currency31 = numberFormat30.getCurrency();
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        int int37 = numberFormat36.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat36);
        numberFormat36.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode41 = numberFormat36.getRoundingMode();
        numberFormat30.setRoundingMode(roundingMode41);
        numberFormat14.setRoundingMode(roundingMode41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat9, numberFormat14);
        org.apache.commons.math.fraction.Fraction fraction46 = properFractionFormat44.parse("1,100%");
        double double47 = fraction46.doubleValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(currency31);
        org.junit.Assert.assertEquals(currency31.toString(), "XXX");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1100.0d + "'", double47 == 1100.0d);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        java.util.Locale locale3 = new java.util.Locale("300", "\u53f0\u6e7e", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u53f0\u6e7e_org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        org.junit.Assert.assertNotNull(fractionFormat4);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        java.util.Locale locale2 = new java.util.Locale("\u6cd5\u570b", "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,001,000%");
        org.junit.Assert.assertEquals(locale2.toString(), "\u6cd5\u570b_000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,001,000%");
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("6.000%");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) parsePosition15);
        parsePosition15.setErrorIndex((int) '#');
        parsePosition15.setIndex((int) (short) -32);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str28 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction8.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        long long52 = fraction50.longValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.multiply(fraction50);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction38.subtract(fraction53);
        org.apache.commons.math.fraction.Fraction fraction57 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str58 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction57);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction38.subtract(fraction57);
        org.apache.commons.math.fraction.Fraction fraction60 = fraction27.divide(fraction59);
        int int61 = fraction59.intValue();
        long long62 = fraction59.longValue();
        int int63 = fraction59.getNumerator();
        java.lang.String str64 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction59);
        short short65 = fraction59.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1 / 100" + "'", str28, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1 / 100" + "'", str58, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 11 + "'", int63 == 11);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "11 / 600" + "'", str64, "11 / 600");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 0 + "'", short65 == (short) 0);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(88, (int) (short) 100);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.Object obj7 = numberFormat2.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        int int9 = numberFormat2.getMinimumFractionDigits();
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field10);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        boolean boolean15 = numberFormat14.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        properFractionFormat16.setNumeratorFormat(numberFormat20);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale27);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale31 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.lang.String str34 = fractionFormat32.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat35 = fractionFormat32.getNumeratorFormat();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str41 = locale39.getDisplayCountry();
        java.lang.String str42 = locale36.getDisplayName(locale39);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayScript();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale45.getISO3Language();
        java.lang.String str47 = locale43.getDisplayScript(locale45);
        java.lang.String str48 = locale36.getDisplayLanguage(locale45);
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getNumberInstance(locale36);
        fractionFormat32.setNumeratorFormat(numberFormat49);
        properFractionFormat29.setWholeFormat(numberFormat49);
        properFractionFormat16.setWholeFormat(numberFormat49);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        boolean boolean54 = field10.equals((java.lang.Object) numberFormat49);
        java.text.FieldPosition fieldPosition55 = new java.text.FieldPosition((java.text.Format.Field) field10);
        int int56 = fieldPosition55.getField();
        boolean boolean57 = numberFormat2.equals((java.lang.Object) fieldPosition55);
        numberFormat2.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100 0 / 1" + "'", str34, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "kor" + "'", str46, "kor");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str7 = field0.toString();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency9 = numberFormat8.getCurrency();
        java.lang.String str11 = numberFormat8.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getWholeFormat();
        java.text.NumberFormat numberFormat14 = properFractionFormat12.getWholeFormat();
        boolean boolean15 = field0.equals((java.lang.Object) numberFormat14);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field0, 119);
        int int18 = fieldPosition17.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str7, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100%" + "'", str11, "100%");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean21 = numberFormat13.equals((java.lang.Object) 10);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        int int27 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat23, numberFormat36);
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str42 = fractionFormat40.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat43 = fractionFormat40.getNumeratorFormat();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.lang.String str50 = locale44.getDisplayName(locale47);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale51.getDisplayScript(locale53);
        java.lang.String str56 = locale44.getDisplayLanguage(locale53);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale44);
        fractionFormat40.setNumeratorFormat(numberFormat57);
        properFractionFormat37.setDenominatorFormat(numberFormat57);
        numberFormat57.setMaximumFractionDigits(52);
        java.util.Currency currency62 = numberFormat57.getCurrency();
        java.lang.String str64 = numberFormat57.format(1L);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100 0 / 1" + "'", str42, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = field0.toString();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("en");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "Korean");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.lang.String str13 = locale9.getDisplayScript(locale11);
        java.lang.String str14 = locale9.toLanguageTag();
        java.lang.String str15 = locale9.getDisplayVariant();
        boolean boolean16 = locale9.hasExtensions();
        java.util.Locale.Builder builder17 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder20 = builder17.setExtension('u', "");
        boolean boolean21 = field0.equals((java.lang.Object) builder20);
        java.util.Locale locale22 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = locale22.getDisplayCountry();
        java.util.Locale.Builder builder25 = builder20.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder25.setVariant("-600");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: -600 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(decimal separator)" + "'", str2, "java.text.NumberFormat$Field(decimal separator)");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "United States" + "'", str24, "United States");
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.setLanguageTag("fr");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setLanguageTag("ZH_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ZH_TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        boolean boolean6 = locale1.hasExtensions();
        java.util.Locale locale9 = new java.util.Locale("anglais", "kor");
        java.lang.String str10 = locale1.getDisplayLanguage(locale9);
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        boolean boolean15 = field11.equals((java.lang.Object) locale13);
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale13.getISO3Language();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.lang.String str19 = locale9.getDisplayName(locale18);
        java.lang.String str20 = locale18.getScript();
        java.lang.String str21 = locale18.getDisplayName();
        java.lang.String str22 = locale18.getVariant();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.lang.String str25 = locale18.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais (KOR)" + "'", str19, "anglais (KOR)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        java.util.Locale locale3 = new java.util.Locale("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=0,endIndex=0]", "java.text.FieldPosition[field=10,attribute=null,beginIndex=0,endIndex=0]", "org.apache.commons.math.fraction.FractionConversionException: Unable to convert 0.008 to fraction after 0 iterations");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(exponent sign),beginindex=0,endindex=0]_JAVA.TEXT.FIELDPOSITION[FIELD=10,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]_org.apache.commons.math.fraction.FractionConversionException: Unable to convert 0.008 to fraction after 0 iterations");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JAVA.TEXT.FIELDPOSITION[FIELD=10,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]" + "'", str5, "JAVA.TEXT.FIELDPOSITION[FIELD=10,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]");
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        numberFormat1.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        boolean boolean19 = numberFormat18.isGroupingUsed();
        properFractionFormat16.setWholeFormat(numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat11, numberFormat18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18);
        java.text.NumberFormat numberFormat23 = properFractionFormat22.getWholeFormat();
        java.lang.String str25 = numberFormat23.format((double) 100);
        java.lang.StringBuffer stringBuffer27 = null;
        java.text.FieldPosition fieldPosition28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer29 = numberFormat23.format((long) 5, stringBuffer27, fieldPosition28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10,000%" + "'", str25, "10,000%");
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale0.getDisplayScript(locale6);
        java.lang.String str11 = locale0.getCountry();
        java.lang.String str12 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str4, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean" + "'", str9, "Korean");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        boolean boolean8 = numberFormat6.equals((java.lang.Object) locale7);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setScript("");
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale12.getDisplayCountry(locale19);
        java.util.Locale.Builder builder21 = builder9.setLocale(locale19);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str23 = locale7.getDisplayVariant(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale19);
        java.util.Locale.setDefault(locale19);
        java.util.Locale.setDefault(locale19);
        java.lang.String str27 = locale19.getCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese" + "'", str13, "Chinese");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        java.util.Locale locale2 = new java.util.Locale("CHINOIS", "java.text.FieldPosition[field=-14400,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
        java.lang.String str3 = locale2.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "chinois_JAVA.TEXT.FIELDPOSITION[FIELD=-14400,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(GROUPING SEPARATOR),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale8);
        boolean boolean12 = numberFormat11.isParseIntegerOnly();
        java.math.RoundingMode roundingMode13 = numberFormat11.getRoundingMode();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale15);
        java.util.Currency currency18 = numberFormat17.getCurrency();
        numberFormat17.setMinimumIntegerDigits(1);
        numberFormat17.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj26 = numberFormat17.parseObject("Japan", parsePosition25);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str31 = fractionConversionException30.getPattern();
        java.lang.Throwable[] throwableArray32 = fractionConversionException30.getSuppressed();
        java.lang.Object[] objArray33 = fractionConversionException30.getArguments();
        boolean boolean34 = parsePosition25.equals((java.lang.Object) objArray33);
        int int35 = parsePosition25.getIndex();
        int int36 = parsePosition25.getIndex();
        java.lang.Object obj37 = numberFormat11.parseObject("it", parsePosition25);
        fractionFormat7.setNumeratorFormat(numberFormat11);
        java.util.Locale locale40 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale40);
        java.lang.String str43 = fractionFormat41.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat44 = fractionFormat41.getNumeratorFormat();
        java.text.NumberFormat numberFormat45 = fractionFormat41.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = fractionFormat41.getNumeratorFormat();
        numberFormat46.setMinimumIntegerDigits(600);
        int int49 = numberFormat46.getMinimumIntegerDigits();
        java.lang.Object obj50 = numberFormat46.clone();
        java.lang.StringBuffer stringBuffer51 = null;
        java.text.NumberFormat.Field field52 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field52, (int) '#');
        java.text.Format.Field field55 = fieldPosition54.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction61.multiply(fraction65);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction58.add(fraction65);
        boolean boolean68 = field55.equals((java.lang.Object) fraction58);
        java.text.FieldPosition fieldPosition70 = new java.text.FieldPosition(field55, (int) (short) 10000);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer71 = fractionFormat7.format((java.lang.Object) numberFormat46, stringBuffer51, fieldPosition70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + roundingMode13 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode13.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "TWD");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100 0 / 1" + "'", str43, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 600 + "'", int49 == 600);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(field52);
        org.junit.Assert.assertNotNull(field55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        java.util.Locale locale8 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str9 = locale8.getDisplayVariant();
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field10);
        int int12 = fieldPosition11.getEndIndex();
        fieldPosition11.setBeginIndex((int) (byte) 100);
        java.util.Locale locale16 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str19 = fractionFormat17.format((java.lang.Object) 100);
        boolean boolean20 = fieldPosition11.equals((java.lang.Object) fractionFormat17);
        java.text.Format.Field field21 = fieldPosition11.getFieldAttribute();
        java.util.Locale locale25 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        boolean boolean27 = fieldPosition11.equals((java.lang.Object) locale25);
        java.lang.String str28 = locale8.getDisplayCountry(locale25);
        java.lang.String str29 = locale4.getDisplayScript(locale8);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.text.AttributedCharacterIterator attributedCharacterIterator34 = numberFormat31.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj35 = numberFormat31.clone();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat39.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition42);
        java.lang.Object obj44 = numberFormat31.parseObject("zh-TW", parsePosition42);
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str46 = locale45.getDisplayLanguage();
        java.lang.String str47 = locale45.toLanguageTag();
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale48.getISO3Language();
        java.lang.String str51 = locale45.getDisplayScript(locale48);
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.lang.String str53 = locale45.getDisplayCountry(locale52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        boolean boolean55 = numberFormat31.equals((java.lang.Object) locale45);
        java.util.Locale locale58 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale58);
        java.lang.String str61 = fractionFormat59.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat62 = fractionFormat59.getNumeratorFormat();
        numberFormat62.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency65 = numberFormat62.getCurrency();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance(locale67);
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean70 = numberFormat68.equals((java.lang.Object) numberFormat69);
        java.util.Locale locale75 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        int int77 = numberFormat76.getMaximumIntegerDigits();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat79 = java.text.NumberFormat.getPercentInstance(locale78);
        boolean boolean80 = numberFormat79.isGroupingUsed();
        java.util.Currency currency81 = numberFormat79.getCurrency();
        numberFormat76.setCurrency(currency81);
        java.util.Currency currency83 = numberFormat76.getCurrency();
        java.math.RoundingMode roundingMode84 = numberFormat76.getRoundingMode();
        java.text.ParsePosition parsePosition87 = new java.text.ParsePosition((int) 'a');
        java.lang.String str88 = parsePosition87.toString();
        java.lang.String str89 = parsePosition87.toString();
        java.lang.Object obj90 = numberFormat76.parseObject("zho", parsePosition87);
        java.lang.String str91 = parsePosition87.toString();
        java.lang.Number number92 = numberFormat69.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition87);
        java.lang.Number number93 = numberFormat62.parse("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]", parsePosition87);
        java.lang.Number number94 = numberFormat31.parse("TW", parsePosition87);
        int int95 = parsePosition87.getIndex();
        parsePosition87.setErrorIndex((-12000));
        boolean boolean98 = locale4.equals((java.lang.Object) (-12000));
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals(locale8.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "10,000%" + "'", str9, "10,000%");
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100 0 / 1" + "'", str19, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ZH_TW" + "'", str28, "ZH_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(attributedCharacterIterator34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "cinese" + "'", str46, "cinese");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zh-TW" + "'", str47, "zh-TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zho" + "'", str50, "zho");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Taiwan" + "'", str53, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "100 0 / 1" + "'", str61, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(currency65);
        org.junit.Assert.assertEquals(currency65.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals(locale75.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2147483647 + "'", int77 == 2147483647);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(currency81);
        org.junit.Assert.assertEquals(currency81.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency83);
        org.junit.Assert.assertEquals(currency83.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode84 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode84.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str88, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str89, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str91, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number92);
        org.junit.Assert.assertNull(number93);
        org.junit.Assert.assertNull(number94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 97 + "'", int95 == 97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale5.getDisplayName(locale8);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.lang.String str19 = locale14.getDisplayScript(locale17);
        java.lang.String str20 = locale14.getLanguage();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.getISO3Language();
        java.lang.String str24 = locale14.getDisplayVariant(locale21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getScript();
        java.lang.String str27 = locale25.getDisplayName();
        java.util.Locale locale28 = locale25.stripExtensions();
        java.lang.String str29 = locale28.getCountry();
        java.lang.String str30 = locale28.getVariant();
        java.lang.String str31 = locale14.getDisplayLanguage(locale28);
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale33 = java.util.Locale.getDefault(category0);
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Locale locale37 = new java.util.Locale("50,112,000", "\u82f1\u8a9e\u30ab\u30ca\u30c0)");
        java.lang.String str38 = locale33.getDisplayLanguage(locale37);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cor\351en" + "'", str10, "cor\351en");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko" + "'", str20, "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str31, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ko" + "'", str34, "ko");
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "\u82f1\u8a9e\u30ab\u30ca\u30c0)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Korean" + "'", str38, "Korean");
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        long long14 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction12);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction20.multiply(fraction24);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction12.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction27.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction2.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.negate();
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition((java.text.Format.Field) field34, (int) '#');
        java.text.Format.Field field37 = fieldPosition36.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction40 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction43.multiply(fraction47);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction40.add(fraction47);
        boolean boolean50 = field37.equals((java.lang.Object) fraction40);
        int int51 = fraction40.intValue();
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction40.divide(fraction52);
        org.apache.commons.math.fraction.Fraction fraction57 = new org.apache.commons.math.fraction.Fraction(60, (int) 'a');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction54.divide(fraction57);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction62 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.negate();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.negate();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        long long70 = fraction68.longValue();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction64.multiply(fraction68);
        org.apache.commons.math.fraction.Fraction fraction74 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction75 = fraction74.negate();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.abs();
        org.apache.commons.math.fraction.Fraction fraction79 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction80 = fraction79.negate();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.abs();
        long long82 = fraction80.longValue();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction76.multiply(fraction80);
        org.apache.commons.math.fraction.Fraction fraction84 = fraction68.subtract(fraction83);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction83.negate();
        org.apache.commons.math.fraction.Fraction fraction86 = fraction85.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction58.divide(fraction86);
        org.apache.commons.math.fraction.Fraction fraction88 = fraction31.subtract(fraction86);
        org.apache.commons.math.fraction.Fraction fraction91 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -14400, 121);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction86.multiply(fraction91);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setMinimumIntegerDigits(0);
        java.lang.String str10 = numberFormat6.format(1.0d);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale11.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        boolean boolean38 = numberFormat24.equals((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat24);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance();
        numberFormat40.setMaximumIntegerDigits(2147483647);
        java.lang.String str44 = numberFormat40.format((long) 2147483647);
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        int int50 = numberFormat49.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49);
        numberFormat49.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode54 = numberFormat49.getRoundingMode();
        numberFormat40.setRoundingMode(roundingMode54);
        numberFormat6.setRoundingMode(roundingMode54);
        int int57 = numberFormat6.getMinimumIntegerDigits();
        java.math.RoundingMode roundingMode58 = numberFormat6.getRoundingMode();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Korean" + "'", str17, "Korean");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str23, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "214,748,364,700%" + "'", str44, "214,748,364,700%");
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2147483647 + "'", int50 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + roundingMode58 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode58.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2,000%");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        java.util.Locale locale1 = new java.util.Locale("\u53f0\u6e7e");
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = locale2.getDisplayLanguage(locale4);
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale7.toLanguageTag();
        java.lang.String str13 = locale7.getDisplayVariant();
        boolean boolean14 = locale7.hasExtensions();
        java.lang.String str15 = locale4.getDisplayScript(locale7);
        java.lang.String str16 = locale4.getISO3Country();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        boolean boolean20 = numberFormat18.equals((java.lang.Object) locale19);
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getIntegerInstance(locale22);
        java.lang.String str26 = locale19.getDisplayVariant(locale22);
        java.lang.String str27 = locale22.toLanguageTag();
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        java.lang.String str29 = locale4.getDisplayScript(locale22);
        java.lang.String str30 = locale1.getDisplayScript(locale22);
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = locale31.getDisplayCountry(locale32);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str38 = locale35.getDisplayName(locale36);
        java.lang.String str39 = locale31.getDisplayLanguage(locale35);
        java.util.Set<java.lang.String> strSet40 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale44 = new java.util.Locale("taiwan (ZH_TW,10,000%)", "java.text.AttributedCharacterIterator$Attribute(reading)", "Chinesisch");
        java.util.Locale locale46 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.lang.String str48 = locale35.getDisplayScript(locale46);
        java.util.Locale locale49 = locale46.stripExtensions();
        java.lang.String str50 = locale22.getDisplayVariant(locale49);
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getInstance(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = new org.apache.commons.math.fraction.FractionFormat(numberFormat52, numberFormat54);
        numberFormat54.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field59 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition((java.text.Format.Field) field59);
        java.lang.String str61 = fieldPosition60.toString();
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale63.getDisplayScript();
        java.lang.String str65 = locale62.getDisplayName(locale63);
        boolean boolean66 = fieldPosition60.equals((java.lang.Object) locale63);
        fieldPosition60.setEndIndex((int) '#');
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getCurrencyInstance(locale69);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat70);
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction75 = properFractionFormat71.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition74);
        boolean boolean76 = fieldPosition60.equals((java.lang.Object) parsePosition74);
        java.lang.Number number77 = numberFormat54.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition74);
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.negate();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.abs();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction81.abs();
        java.util.Locale locale84 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat85 = java.text.NumberFormat.getInstance(locale84);
        java.util.Locale locale86 = java.util.Locale.getDefault();
        boolean boolean87 = numberFormat85.equals((java.lang.Object) locale86);
        boolean boolean88 = fraction83.equals((java.lang.Object) locale86);
        boolean boolean89 = parsePosition74.equals((java.lang.Object) locale86);
        java.lang.String str91 = locale86.getUnicodeLocaleType("US");
        java.lang.String str92 = locale86.toLanguageTag();
        java.lang.String str93 = locale49.getDisplayScript(locale86);
        java.lang.String str94 = locale86.toLanguageTag();
        org.junit.Assert.assertEquals(locale1.toString(), "\u53f0\u6e7e");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Chinesisch" + "'", str5, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "und" + "'", str12, "und");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DEU" + "'", str16, "DEU");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Japan" + "'", str34, "Japan");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese (Taiwan)" + "'", str38, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u65e5\u6587" + "'", str39, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals(locale44.toString(), "taiwan (zh_tw,10,000%)_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)_Chinesisch");
        org.junit.Assert.assertEquals(locale46.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinesisch" + "'", str47, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(field59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str61, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese (Taiwan)" + "'", str65, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertNull(fraction75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(number77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ko" + "'", str92, "ko");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ko" + "'", str94, "ko");
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        java.util.Locale locale3 = new java.util.Locale("fr_CA", "java.text.ParsePosition[index=0,errorIndex=-1]", "zh-tw");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_ca_JAVA.TEXT.PARSEPOSITION[INDEX=0,ERRORINDEX=-1]_zh-tw");
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        java.util.Locale locale1 = new java.util.Locale("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        boolean boolean2 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=0,endindex=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = numberFormat3.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7, numberFormat9);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat9.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition13);
        properFractionFormat5.setNumeratorFormat(numberFormat9);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        boolean boolean24 = numberFormat23.isGroupingUsed();
        java.util.Currency currency25 = numberFormat23.getCurrency();
        numberFormat20.setCurrency(currency25);
        java.util.Currency currency27 = numberFormat20.getCurrency();
        java.math.RoundingMode roundingMode28 = numberFormat20.getRoundingMode();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) 'a');
        java.lang.String str32 = parsePosition31.toString();
        java.lang.String str33 = parsePosition31.toString();
        java.lang.Object obj34 = numberFormat20.parseObject("zho", parsePosition31);
        properFractionFormat5.setWholeFormat(numberFormat20);
        boolean boolean36 = fraction1.equals((java.lang.Object) properFractionFormat5);
        int int37 = fraction1.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction39 = new org.apache.commons.math.fraction.Fraction((double) 1.0f);
        org.apache.commons.math.fraction.Fraction fraction41 = new org.apache.commons.math.fraction.Fraction(10.0d);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction39.subtract(fraction41);
        int int43 = fraction41.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction1.add(fraction41);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode28 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode28.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str32, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str33, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(fraction44);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat13 = properFractionFormat12.getDenominatorFormat();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        properFractionFormat17.setWholeFormat(numberFormat19);
        java.text.NumberFormat numberFormat22 = properFractionFormat17.getWholeFormat();
        java.lang.String str24 = numberFormat22.format((double) 1.0f);
        numberFormat22.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat22.setParseIntegerOnly(false);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.getDefault(category31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale33);
        java.util.Locale.setDefault(category31, locale33);
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category31, locale36);
        java.lang.String str38 = locale30.getDisplayLanguage(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getCurrencyInstance(locale41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat43 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction47 = properFractionFormat43.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition46);
        java.lang.Object obj48 = fractionFormat39.parseObject("214,748,364,700%", parsePosition46);
        java.lang.String str49 = parsePosition46.toString();
        java.lang.Object obj50 = numberFormat22.parseObject("600", parsePosition46);
        org.apache.commons.math.fraction.Fraction fraction51 = properFractionFormat12.parse("\uc911\uad6d\uc5b4", parsePosition46);
        java.lang.Object obj52 = numberFormat3.parseObject("10,000%", parsePosition46);
        int int53 = parsePosition46.getIndex();
        int int54 = parsePosition46.getErrorIndex();
        int int55 = parsePosition46.getIndex();
        parsePosition46.setIndex(17);
        int int58 = parsePosition46.getIndex();
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder59.setLanguageTag("en");
        java.util.Locale.Builder builder64 = builder59.setExtension('a', "Korean");
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.lang.String str66 = locale65.getDisplayScript();
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = locale67.getISO3Language();
        java.lang.String str69 = locale65.getDisplayScript(locale67);
        java.lang.String str70 = locale65.toLanguageTag();
        java.lang.String str71 = locale65.getDisplayVariant();
        boolean boolean72 = locale65.hasExtensions();
        java.util.Locale.Builder builder73 = builder64.setLocale(locale65);
        java.util.Locale.Builder builder75 = builder73.removeUnicodeLocaleAttribute("TWN");
        java.util.Locale locale76 = builder75.build();
        java.util.Locale.Builder builder78 = builder75.addUnicodeLocaleAttribute("japanese");
        java.util.Locale locale79 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder80 = builder75.setLocale(locale79);
        boolean boolean81 = parsePosition46.equals((java.lang.Object) builder80);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100%" + "'", str24, "100%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "anglais" + "'", str38, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNull(fraction47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str49, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(fraction51);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + 0L + "'", obj52, 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 7 + "'", int55 == 7);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 17 + "'", int58 == 17);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "kor" + "'", str68, "kor");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "und" + "'", str70, "und");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.lang.String str9 = locale7.getLanguage();
        java.util.Locale.setDefault(locale7);
        java.lang.String str11 = locale7.getLanguage();
        java.lang.String str12 = locale7.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "anglais" + "'", str9, "anglais");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "anglais" + "'", str11, "anglais");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = fraction4.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction5.add(fraction11);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction0.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction0.negate();
        long long17 = fraction16.longValue();
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.add(fraction25);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction16.multiply(fraction19);
        java.lang.Class<?> wildcardClass28 = fraction19.getClass();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(34, 10000);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException(10.0d, (long) 600, (long) 'a');
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException7 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) 117, (long) 0);
        java.lang.String str8 = fractionConversionException7.getPattern();
        java.lang.Object[] objArray9 = fractionConversionException7.getArguments();
        fractionConversionException3.addSuppressed((java.lang.Throwable) fractionConversionException7);
        java.lang.Object[] objArray11 = fractionConversionException7.getArguments();
        java.lang.Object[] objArray12 = fractionConversionException7.getArguments();
        java.lang.String str13 = fractionConversionException7.getPattern();
        java.lang.Object[] objArray14 = fractionConversionException7.getArguments();
        java.lang.String str15 = fractionConversionException7.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str8, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[120.0, 117, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[120.0, 117, 0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[120.0, 117, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[120.0, 117, 0]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[120.0, 117, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[120.0, 117, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str13, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[120.0, 117, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[120.0, 117, 0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 120 to fraction (117/0)" + "'", str15, "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 120 to fraction (117/0)");
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.util.Currency currency3 = numberFormat1.getCurrency();
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        numberFormat8.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str12 = numberFormat8.format((double) 0.0f);
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat17, numberFormat20);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale23);
        numberFormat26.setMinimumIntegerDigits(0);
        numberFormat26.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat20, numberFormat26);
        java.lang.Object obj32 = numberFormat1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0%" + "'", str12, "0%");
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(obj32);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        java.text.NumberFormat numberFormat58 = properFractionFormat57.getWholeFormat();
        numberFormat58.setMinimumFractionDigits(1);
        int int61 = numberFormat58.getMaximumFractionDigits();
        int int62 = numberFormat58.getMaximumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "anglais_KOR");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "anglais (KOR)" + "'", str29, "anglais (KOR)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "anglais" + "'", str35, "anglais");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        numberFormat6.setParseIntegerOnly(true);
        int int9 = numberFormat6.getMaximumIntegerDigits();
        java.lang.String str11 = numberFormat6.format((long) 10000);
        numberFormat6.setMaximumIntegerDigits((int) (byte) -51);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japan" + "'", str5, "Japan");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uffe510,000" + "'", str11, "\uffe510,000");
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.lang.String str6 = locale0.getDisplayVariant();
        java.util.Locale locale7 = locale0.stripExtensions();
        java.lang.String str8 = locale7.getDisplayName();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str10 = locale7.getDisplayLanguage();
        java.lang.String str11 = locale7.toLanguageTag();
        java.lang.String str12 = locale7.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getCurrencyInstance(locale0);
        boolean boolean4 = numberFormat3.isParseIntegerOnly();
        java.math.RoundingMode roundingMode5 = numberFormat3.getRoundingMode();
        java.lang.Object obj6 = numberFormat3.clone();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str11 = fractionFormat9.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat12 = fractionFormat9.getNumeratorFormat();
        java.text.NumberFormat numberFormat13 = fractionFormat9.getNumeratorFormat();
        java.text.NumberFormat numberFormat14 = fractionFormat9.getNumeratorFormat();
        boolean boolean15 = numberFormat3.equals((java.lang.Object) numberFormat14);
        int int16 = numberFormat3.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + roundingMode5 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode5.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100 0 / 1" + "'", str11, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = fractionFormat2.getNumeratorFormat();
        java.lang.String str9 = numberFormat7.format((long) 2147483647);
        boolean boolean10 = numberFormat7.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.lang.Object obj12 = numberFormat7.clone();
        java.lang.String str14 = numberFormat7.format((long) 84);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2,147,483,647" + "'", str9, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "84" + "'", str14, "84");
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale2.getISO3Language();
        java.util.Locale locale7 = locale2.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str10 = locale2.getDisplayLanguage(locale9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.lang.String str35 = locale19.getLanguage();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str37 = locale2.getDisplayLanguage(locale19);
        java.util.Set<java.lang.Character> charSet38 = locale19.getExtensionKeys();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese" + "'", str22, "Chinese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertNotNull(charSet38);
    }
}

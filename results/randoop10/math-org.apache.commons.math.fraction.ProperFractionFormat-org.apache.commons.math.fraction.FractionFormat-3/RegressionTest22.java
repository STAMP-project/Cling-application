import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest22 {

    public static boolean debug = false;

    @Test
    public void test11001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11001");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.text.NumberFormat numberFormat2 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat2);
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition((int) '4');
        parsePosition6.setIndex(0);
        java.lang.String str9 = parsePosition6.toString();
        org.apache.commons.math.fraction.Fraction fraction10 = fractionFormat3.parse("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 0.008 to fraction after 0 iterations", parsePosition6);
        java.lang.String str11 = parsePosition6.toString();
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=-1]" + "'", str9, "java.text.ParsePosition[index=0,errorIndex=-1]");
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str11, "java.text.ParsePosition[index=0,errorIndex=0]");
    }

    @Test
    public void test11002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11002");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        properFractionFormat23.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number32 = numberFormat28.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition31);
        java.lang.Object obj33 = properFractionFormat3.parseObject("2,147,483,647 / 1", parsePosition31);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat35, numberFormat37);
        boolean boolean39 = numberFormat37.isGroupingUsed();
        boolean boolean40 = numberFormat37.isGroupingUsed();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj44 = numberFormat37.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition43);
        numberFormat37.setParseIntegerOnly(false);
        properFractionFormat3.setDenominatorFormat(numberFormat37);
        java.util.Locale locale52 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        int int54 = numberFormat53.getMaximumIntegerDigits();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance(locale55);
        boolean boolean57 = numberFormat56.isGroupingUsed();
        java.util.Currency currency58 = numberFormat56.getCurrency();
        numberFormat53.setCurrency(currency58);
        java.util.Currency currency60 = numberFormat53.getCurrency();
        java.math.RoundingMode roundingMode61 = numberFormat53.getRoundingMode();
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition((int) 'a');
        java.lang.String str65 = parsePosition64.toString();
        java.lang.String str66 = parsePosition64.toString();
        java.lang.Object obj67 = numberFormat53.parseObject("zho", parsePosition64);
        org.apache.commons.math.fraction.Fraction fraction68 = properFractionFormat3.parse("taiwan", parsePosition64);
        parsePosition64.setIndex(2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(number32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(currency58);
        org.junit.Assert.assertEquals(currency58.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency60);
        org.junit.Assert.assertEquals(currency60.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str65, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str66, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(fraction68);
    }

    @Test
    public void test11003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11003");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale2.getISO3Language();
        java.util.Locale locale7 = locale2.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str10 = locale2.getDisplayLanguage(locale9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.lang.String str35 = locale19.getLanguage();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale19);
        java.lang.String str37 = locale2.getDisplayLanguage(locale19);
        java.lang.String str38 = locale2.getDisplayVariant();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getNumberInstance(locale2);
        java.util.Locale locale43 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.lang.String str44 = locale2.getDisplayName(locale43);
        boolean boolean45 = locale43.hasExtensions();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals(locale43.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English" + "'", str44, "English");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11004");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException7 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str8 = fractionConversionException7.getPattern();
        java.lang.Throwable[] throwableArray9 = fractionConversionException7.getSuppressed();
        fractionConversionException3.addSuppressed((java.lang.Throwable) fractionConversionException7);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException14 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        fractionConversionException14.addSuppressed((java.lang.Throwable) fractionConversionException18);
        fractionConversionException7.addSuppressed((java.lang.Throwable) fractionConversionException18);
        java.lang.Object[] objArray23 = fractionConversionException18.getArguments();
        java.text.ParseException parseException26 = new java.text.ParseException("fr_CA", (int) ' ');
        fractionConversionException18.addSuppressed((java.lang.Throwable) parseException26);
        int int28 = parseException26.getErrorOffset();
        int int29 = parseException26.getErrorOffset();
        java.lang.String str30 = parseException26.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str8, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.ParseException: fr_CA" + "'", str30, "java.text.ParseException: fr_CA");
    }

    @Test
    public void test11005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11005");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean21 = numberFormat13.equals((java.lang.Object) 10);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        int int27 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat23, numberFormat36);
        java.util.Locale locale39 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale39);
        java.lang.String str42 = fractionFormat40.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat43 = fractionFormat40.getNumeratorFormat();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Locale locale45 = locale44.stripExtensions();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.lang.String str50 = locale44.getDisplayName(locale47);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale51.getDisplayScript(locale53);
        java.lang.String str56 = locale44.getDisplayLanguage(locale53);
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getNumberInstance(locale44);
        fractionFormat40.setNumeratorFormat(numberFormat57);
        properFractionFormat37.setDenominatorFormat(numberFormat57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat57);
        java.lang.Object obj61 = numberFormat57.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "100 0 / 1" + "'", str42, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "france (CHINESE (TAIWAN))" + "'", str50, "france (CHINESE (TAIWAN))");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "france" + "'", str56, "france");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertNotNull(obj61);
    }

    @Test
    public void test11006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11006");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale3);
        int int6 = numberFormat5.getMinimumFractionDigits();
        boolean boolean7 = numberFormat5.isParseIntegerOnly();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test11007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11007");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) '4');
        parsePosition10.setIndex(0);
        int int13 = parsePosition10.getErrorIndex();
        java.lang.Object obj14 = fractionFormat7.parseObject("java.text.FieldPosition[field=0,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]", parsePosition10);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException17 = new org.apache.commons.math.fraction.FractionConversionException(0.008333333333333333d, (int) (byte) -120);
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.NumberFormat.Field field19 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((java.text.Format.Field) field19);
        int int21 = fieldPosition20.getBeginIndex();
        java.lang.String str22 = fieldPosition20.toString();
        fieldPosition20.setEndIndex(10000);
        java.lang.Object obj25 = null;
        boolean boolean26 = fieldPosition20.equals(obj25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer27 = fractionFormat7.format((java.lang.Object) 0.008333333333333333d, stringBuffer18, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc77c\ubcf8" + "'", str6, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(field19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str22, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11008");
        java.text.ParseException parseException2 = new java.text.ParseException("zh-tw", 120);
    }

    @Test
    public void test11009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11009");
        java.text.ParseException parseException2 = new java.text.ParseException("Korean", (int) (short) 1);
        int int3 = parseException2.getErrorOffset();
        java.text.ParseException parseException6 = new java.text.ParseException("\uc911\uad6d\uc5b4", 0);
        int int7 = parseException6.getErrorOffset();
        java.lang.Throwable[] throwableArray8 = parseException6.getSuppressed();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException12 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) 117, (long) 0);
        parseException6.addSuppressed((java.lang.Throwable) fractionConversionException12);
        java.lang.String str14 = fractionConversionException12.getPattern();
        java.lang.Object[] objArray15 = fractionConversionException12.getArguments();
        java.lang.Throwable[] throwableArray16 = fractionConversionException12.getSuppressed();
        parseException2.addSuppressed((java.lang.Throwable) fractionConversionException12);
        int int18 = parseException2.getErrorOffset();
        int int19 = parseException2.getErrorOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str14, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[120.0, 117, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[120.0, 117, 0]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test11010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11010");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str8 = locale1.getDisplayVariant(locale4);
        java.lang.String str9 = locale1.getScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.lang.String str17 = locale10.toLanguageTag();
        java.util.Locale locale18 = locale10.stripExtensions();
        java.lang.String str19 = locale10.getDisplayLanguage();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.getDefault(category20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.util.Locale locale25 = java.util.Locale.getDefault(category20);
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale26.getDisplayCountry(locale27);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale26);
        java.lang.String str31 = locale25.getDisplayCountry(locale26);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getNumberInstance(locale25);
        java.lang.String str33 = locale25.getISO3Country();
        java.lang.String str34 = locale25.getISO3Country();
        java.lang.String str35 = locale10.getDisplayLanguage(locale25);
        boolean boolean36 = locale1.equals((java.lang.Object) locale25);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str11, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str19, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Japan" + "'", str29, "Japan");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str35, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test11011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11011");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale.Builder builder6 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setLanguage("French (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: French (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11012");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getInstance();
        numberFormat0.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode3 = numberFormat0.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field5);
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition((java.text.Format.Field) field5, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        long long13 = fraction12.longValue();
        boolean boolean14 = field5.equals((java.lang.Object) fraction12);
        float float15 = fraction12.floatValue();
        java.lang.StringBuffer stringBuffer16 = null;
        java.text.NumberFormat.Field field17 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition((java.text.Format.Field) field17);
        int int19 = fieldPosition18.getEndIndex();
        java.lang.String str20 = fieldPosition18.toString();
        int int21 = fieldPosition18.getBeginIndex();
        fieldPosition18.setBeginIndex(2147483647);
        java.text.Format.Field field24 = fieldPosition18.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction28.abs();
        long long31 = fraction30.longValue();
        boolean boolean32 = field24.equals((java.lang.Object) long31);
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition(field24, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer35 = properFractionFormat4.format(fraction12, stringBuffer16, fieldPosition34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertTrue("'" + roundingMode3 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode3.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + (-1.0f) + "'", float15 == (-1.0f));
        org.junit.Assert.assertNotNull(field17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(field24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test11013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11013");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getField();
        java.text.Format.Field field3 = fieldPosition1.getFieldAttribute();
        java.lang.String str4 = fieldPosition1.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11014");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("ita");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setScript("");
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale12.getDisplayCountry(locale19);
        java.util.Locale.Builder builder21 = builder9.setLocale(locale19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getISO3Language();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        java.lang.String str27 = locale22.toLanguageTag();
        java.lang.String str28 = locale22.getDisplayVariant();
        java.lang.String str29 = locale22.getVariant();
        java.util.Locale.Builder builder30 = builder21.setLocale(locale22);
        java.util.Locale.Builder builder31 = builder21.clearExtensions();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category33, locale38);
        java.lang.String str40 = locale32.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale.Builder builder42 = builder31.setLocale(locale32);
        java.util.Locale.Builder builder43 = builder8.setLocale(locale32);
        java.lang.String str44 = locale32.getDisplayScript();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "anglais" + "'", str40, "anglais");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test11015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11015");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale10.getDisplayCountry(locale17);
        java.util.Locale locale20 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str21 = locale17.getDisplayLanguage(locale20);
        java.lang.String str22 = locale8.getDisplayCountry(locale20);
        java.lang.String str23 = locale1.getDisplayVariant(locale8);
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale24.getDisplayCountry(locale25);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale25);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale25);
        java.util.Set<java.lang.Character> charSet31 = locale25.getExtensionKeys();
        java.lang.String str32 = locale8.getDisplayVariant(locale25);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getNumberInstance(locale8);
        java.lang.String str35 = numberFormat33.format((-100.0d));
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str11, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italian" + "'", str21, "Italian");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japan" + "'", str27, "Japan");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-100" + "'", str35, "-100");
    }

    @Test
    public void test11016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11016");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\uc77c\ubcf8\uc5b4\uc77c\ubcf8)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????????(??????)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11017");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        int int8 = numberFormat5.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(119);
        int int13 = parsePosition12.getIndex();
        org.apache.commons.math.fraction.Fraction fraction14 = properFractionFormat9.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (100/-1)", parsePosition12);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getInstance(locale15);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        boolean boolean18 = numberFormat16.equals((java.lang.Object) locale17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale17.getDisplayVariant(locale20);
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayCountry(locale26);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getIntegerInstance(locale26);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition((int) 'a');
        java.lang.String str33 = parsePosition32.toString();
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clearExtensions();
        java.util.Locale.Builder builder36 = builder34.clear();
        java.util.Locale.Builder builder37 = builder36.clear();
        boolean boolean38 = parsePosition32.equals((java.lang.Object) builder37);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        java.util.Locale.setDefault(category39, locale41);
        java.util.Locale locale44 = java.util.Locale.getDefault(category39);
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean47 = parsePosition32.equals((java.lang.Object) locale44);
        java.lang.String str48 = locale26.getDisplayScript(locale44);
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.lang.String str50 = locale49.getDisplayCountry();
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.PRC;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = locale49.getDisplayCountry(locale51);
        java.lang.String str55 = locale44.getDisplayLanguage(locale49);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getCurrencyInstance(locale44);
        boolean boolean57 = locale44.hasExtensions();
        java.lang.String str58 = locale20.getDisplayVariant(locale44);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getCurrencyInstance(locale20);
        properFractionFormat9.setWholeFormat(numberFormat59);
        java.text.NumberFormat numberFormat61 = properFractionFormat9.getDenominatorFormat();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 119 + "'", int13 == 119);
        org.junit.Assert.assertNull(fraction14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Japan" + "'", str28, "Japan");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str33, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str53, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "coreano" + "'", str55, "coreano");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat61);
    }

    @Test
    public void test11018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11018");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        java.util.Locale.Builder builder21 = builder12.setLocale(locale13);
        java.util.Locale.Builder builder22 = builder12.clearExtensions();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.toLanguageTag();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.getISO3Language();
        java.lang.String str29 = locale23.getDisplayScript(locale26);
        java.lang.String str30 = locale23.toLanguageTag();
        java.util.Locale locale31 = locale23.stripExtensions();
        java.util.Locale.Builder builder32 = builder12.setLocale(locale31);
        java.util.Locale.Builder builder34 = builder12.removeUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder36 = builder34.setLanguageTag("deu");
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale37.getDisplayCountry(locale38);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getIntegerInstance(locale38);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        numberFormat42.setMinimumFractionDigits(2147483647);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getIntegerInstance(locale46);
        boolean boolean48 = numberFormat42.equals((java.lang.Object) locale46);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale49.toLanguageTag();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale52.getISO3Language();
        java.lang.String str55 = locale49.getDisplayScript(locale52);
        java.lang.String str56 = locale49.getDisplayName();
        java.lang.String str57 = locale46.getDisplayCountry(locale49);
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale46);
        java.util.Locale.Builder builder59 = builder36.setLocale(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder61 = builder36.setVariant("java.text.ParsePosition[index=97,errorIndex=1]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: java.text.ParsePosition[index=97,errorIndex=1] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str4, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str24, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-TW" + "'", str25, "zh-TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh-TW" + "'", str30, "zh-TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Japan" + "'", str40, "Japan");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str50, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh-TW" + "'", str51, "zh-TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zho" + "'", str54, "zho");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str56, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test11019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11019");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        java.util.Locale locale15 = builder5.build();
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale15.getVariant();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test11020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11020");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction5.multiply(fraction9);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction2.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        long long21 = fraction19.longValue();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction16.subtract(fraction19);
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction22.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction2.subtract(fraction22);
        org.apache.commons.math.fraction.Fraction fraction34 = new org.apache.commons.math.fraction.Fraction((double) 600);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction2.add(fraction34);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        float float37 = fraction36.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + (-599.99164f) + "'", float37 == (-599.99164f));
    }

    @Test
    public void test11021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11021");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        int int9 = numberFormat8.getMinimumIntegerDigits();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.lang.String str15 = locale11.toLanguageTag();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder16.build();
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.getISO3Language();
        java.lang.String str26 = locale20.getDisplayScript(locale23);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale20.getDisplayCountry(locale27);
        java.util.Locale locale30 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str31 = locale27.getDisplayLanguage(locale30);
        java.lang.String str32 = locale18.getDisplayCountry(locale30);
        java.lang.String str33 = locale11.getDisplayVariant(locale18);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale34.getDisplayCountry(locale35);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getIntegerInstance(locale35);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getInstance(locale35);
        java.util.Set<java.lang.Character> charSet41 = locale35.getExtensionKeys();
        java.lang.String str42 = locale18.getDisplayVariant(locale35);
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getNumberInstance(locale18);
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale44);
        java.util.Currency currency47 = numberFormat46.getCurrency();
        numberFormat46.setMinimumIntegerDigits(1);
        int int50 = numberFormat46.getMinimumIntegerDigits();
        java.util.Currency currency51 = numberFormat46.getCurrency();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat43, numberFormat46);
        java.lang.Object obj54 = numberFormat46.parseObject("-1");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "und" + "'", str15, "und");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str21, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-TW" + "'", str22, "zh-TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Taiwan" + "'", str28, "Taiwan");
        org.junit.Assert.assertEquals(locale30.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italian" + "'", str31, "Italian");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Japan" + "'", str37, "Japan");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + obj54 + "' != '" + (-1L) + "'", obj54, (-1L));
    }

    @Test
    public void test11022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11022");
        java.util.Locale locale3 = new java.util.Locale("\244 1.00", "\uc911\uad6d", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (0/3)");
        java.util.Locale locale4 = locale3.stripExtensions();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\244\uc911\uad6d_org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (0/3)");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "\244\uc911\uad6d_org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (0/3)");
    }

    @Test
    public void test11023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11023");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setRegion("214\240748\240364\240700 %");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 214?748?364?700 % [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test11024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11024");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        long long2 = fraction0.longValue();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction0.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.multiply(fraction10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        boolean boolean16 = fraction10.equals((java.lang.Object) properFractionFormat15);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction0.subtract(fraction10);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
    }

    @Test
    public void test11025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11025");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test11026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11026");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.lang.String str3 = numberFormat1.format((double) (-2));
        boolean boolean4 = numberFormat1.isParseIntegerOnly();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition((java.text.Format.Field) field7);
        java.lang.String str9 = fieldPosition8.toString();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayName(locale11);
        boolean boolean14 = fieldPosition8.equals((java.lang.Object) locale11);
        fieldPosition8.setEndIndex((int) '#');
        int int17 = fieldPosition8.getField();
        int int18 = fieldPosition8.getBeginIndex();
        java.text.Format.Field field19 = fieldPosition8.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer20 = numberFormat1.format((long) (-1), stringBuffer6, fieldPosition8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-2" + "'", str3, "-2");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str9, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese (Taiwan)" + "'", str13, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(field19);
    }

    @Test
    public void test11027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11027");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Chinese", 0.0d);
        java.lang.String str3 = languageRange2.getRange();
        java.text.NumberFormat.Field field4 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        boolean boolean7 = field4.equals((java.lang.Object) locale6);
        java.lang.String str8 = locale6.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        numberFormat11.setMaximumIntegerDigits(2147483647);
        int int14 = numberFormat11.getMinimumFractionDigits();
        numberFormat11.setParseIntegerOnly(true);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.math.RoundingMode roundingMode19 = numberFormat18.getRoundingMode();
        numberFormat11.setRoundingMode(roundingMode19);
        numberFormat10.setRoundingMode(roundingMode19);
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale26.getDisplayName(locale27);
        java.lang.String str30 = locale22.getDisplayLanguage(locale26);
        java.lang.String str31 = locale22.toLanguageTag();
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale33);
        java.util.Currency currency36 = numberFormat35.getCurrency();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat32, numberFormat35);
        boolean boolean38 = languageRange2.equals((java.lang.Object) numberFormat32);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chinese" + "'", str3, "chinese");
        org.junit.Assert.assertNotNull(field4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CN" + "'", str8, "CN");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Japan" + "'", str25, "Japan");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (Taiwan)" + "'", str29, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u65e5\u6587" + "'", str30, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ja-JP" + "'", str31, "ja-JP");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test11028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11028");
        java.text.ParseException parseException2 = new java.text.ParseException("KOR", 96);
        int int3 = parseException2.getErrorOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 96 + "'", int3 == 96);
    }

    @Test
    public void test11029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11029");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.lang.String str12 = numberFormat4.format((long) (short) 119);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "11,900%" + "'", str12, "11,900%");
    }

    @Test
    public void test11030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11030");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setLanguage("TWN");
        java.util.Locale.Builder builder10 = builder7.clearExtensions();
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale13);
        java.util.Locale.setDefault(category11, locale13);
        java.util.Locale locale16 = java.util.Locale.getDefault(category11);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale18.toLanguageTag();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale locale25 = builder23.build();
        java.lang.String str26 = locale25.getScript();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = locale27.getDisplayLanguage();
        java.lang.String str29 = locale27.toLanguageTag();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale30.getISO3Language();
        java.lang.String str33 = locale27.getDisplayScript(locale30);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale27.getDisplayCountry(locale34);
        java.util.Locale locale37 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str38 = locale34.getDisplayLanguage(locale37);
        java.lang.String str39 = locale25.getDisplayCountry(locale37);
        java.lang.String str40 = locale18.getDisplayVariant(locale25);
        java.util.Locale.setDefault(category11, locale18);
        java.util.Locale locale42 = java.util.Locale.getDefault(category11);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category11, locale43);
        java.util.Locale locale46 = java.util.Locale.getDefault(category11);
        java.util.Locale locale47 = java.util.Locale.getDefault(category11);
        java.util.Locale locale48 = java.util.Locale.getDefault(category11);
        java.util.Locale locale49 = java.util.Locale.getDefault(category11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder7.setLocale(locale49);
// flaky:             org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: CHINESE (TAIWAN) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str28, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh-TW" + "'", str29, "zh-TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zho" + "'", str32, "zho");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Taiwan" + "'", str35, "Taiwan");
        org.junit.Assert.assertEquals(locale37.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Italian" + "'", str38, "Italian");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale43);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "france_CHINESE (TAIWAN)");
    }

    @Test
    public void test11031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11031");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException(0.9916666666666667d, (long) (byte) 16, (long) (short) 35);
    }

    @Test
    public void test11032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11032");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field1 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean2 = field0.equals((java.lang.Object) field1);
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0, (-1));
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        int int7 = fieldPosition6.getBeginIndex();
        java.text.Format.Field field8 = fieldPosition6.getFieldAttribute();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(field8);
    }

    @Test
    public void test11033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11033");
        java.util.Locale locale3 = new java.util.Locale("zh_TW", "Taiwan", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        java.lang.String str9 = locale4.toLanguageTag();
        java.lang.String str10 = locale4.getDisplayVariant();
        boolean boolean11 = locale4.hasExtensions();
        java.lang.String str12 = locale3.getDisplayLanguage(locale4);
        java.util.Set<java.lang.Character> charSet13 = locale4.getExtensionKeys();
        java.lang.String str14 = locale4.getVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "zh_tw_TAIWAN_hi!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh_tw" + "'", str12, "zh_tw");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test11034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11034");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale10.getDisplayScript(locale12);
        java.util.Locale.setDefault(category8, locale12);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale20 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str21 = locale15.getDisplayScript(locale20);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Set<java.lang.String> strSet23 = locale20.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet24 = locale20.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale20.getDisplayName(locale25);
        java.util.Locale locale29 = locale25.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayScript();
        java.lang.String str33 = locale30.getDisplayCountry(locale31);
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale29.getDisplayVariant(locale31);
        java.lang.String str37 = locale29.getExtension('a');
        java.lang.String str38 = locale12.getDisplayCountry(locale29);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.util.Locale.setDefault(category0, locale12);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale6.toString(), "chinese (taiwan)");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale20.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str27, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str28, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Japan" + "'", str33, "Japan");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Canada" + "'", str38, "Canada");
        org.junit.Assert.assertNotNull(fractionFormat39);
    }

    @Test
    public void test11035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11035");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet6, filteringMode8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap21);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("US");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("eng", strMap26);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str30 = languageRange29.getRange();
        java.util.Locale.LanguageRange languageRange32 = new java.util.Locale.LanguageRange("zh-TW");
        double double33 = languageRange32.getWeight();
        double double34 = languageRange32.getWeight();
        java.util.Locale.LanguageRange languageRange36 = new java.util.Locale.LanguageRange("eng");
        java.util.Locale.LanguageRange languageRange38 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str39 = languageRange38.getRange();
        java.lang.String str40 = languageRange38.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] { languageRange29, languageRange32, languageRange36, languageRange38 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, strMap44);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strList54);
        java.util.Locale.FilteringMode filteringMode57 = null;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList54, filteringMode57);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.lang.String>) strSet63);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, strMap65);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList66, strMap67);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.lang.String[] strArray73 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.lang.String>) strList74);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList66, (java.util.Collection<java.lang.String>) strList74, filteringMode77);
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Locale locale82 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet83 = locale82.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet83);
        java.util.Collection<java.lang.String> strCollection85 = null;
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, strCollection85);
        java.lang.String str87 = java.util.Locale.lookupTag(languageRangeList66, strCollection85);
        java.util.Collection<java.util.Locale> localeCollection88 = null;
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter(languageRangeList66, localeCollection88, filteringMode89);
        java.util.Locale locale91 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList90);
        java.util.Locale locale92 = java.util.Locale.lookup(languageRangeList45, (java.util.Collection<java.util.Locale>) localeList90);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList90);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter(languageRangeList24, (java.util.Collection<java.util.Locale>) localeList90);
        java.util.Locale locale95 = java.util.Locale.lookup(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList94);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode8.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh-tw" + "'", str30, "zh-tw");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-tw" + "'", str39, "zh-tw");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh-tw" + "'", str40, "zh-tw");
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
// flaky:         org.junit.Assert.assertEquals(locale62.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode77.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(locale82);
// flaky:         org.junit.Assert.assertEquals(locale82.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNull(locale91);
        org.junit.Assert.assertNull(locale92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNull(locale95);
    }

    @Test
    public void test11036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11036");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMinimumIntegerDigits();
        int int6 = numberFormat4.getMaximumFractionDigits();
        boolean boolean7 = numberFormat4.isParseIntegerOnly();
        java.text.NumberFormat numberFormat8 = null;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat8);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test11037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11037");
        java.text.ParseException parseException2 = new java.text.ParseException("1 / 1", 52);
        java.lang.Throwable[] throwableArray3 = parseException2.getSuppressed();
        int int4 = parseException2.getErrorOffset();
        int int5 = parseException2.getErrorOffset();
        int int6 = parseException2.getErrorOffset();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test11038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11038");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field3);
        java.text.Format.Field field18 = fieldPosition17.getFieldAttribute();
        int int19 = fieldPosition17.getEndIndex();
        java.text.Format.Field field20 = fieldPosition17.getFieldAttribute();
        fieldPosition17.setBeginIndex((int) 'u');
        fieldPosition17.setEndIndex((int) 'a');
        int int25 = fieldPosition17.getEndIndex();
        int int26 = fieldPosition17.getEndIndex();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale29 = java.util.Locale.getDefault(category28);
        java.lang.String str30 = locale27.getDisplayScript(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        java.lang.String str35 = locale29.getLanguage();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.getISO3Language();
        java.lang.String str39 = locale29.getDisplayVariant(locale36);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = locale40.getScript();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale29.getDisplayCountry(locale40);
        boolean boolean44 = fieldPosition17.equals((java.lang.Object) locale40);
        java.util.Set<java.lang.String> strSet45 = locale40.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.FORMAT + "'", category28.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uce90\ub098\ub2e4" + "'", str31, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str37, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zho" + "'", str38, "zho");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Canada" + "'", str43, "Canada");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
    }

    @Test
    public void test11039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11039");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (-599.99164f), 10000);
    }

    @Test
    public void test11040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11040");
        java.text.ParseException parseException2 = new java.text.ParseException("\ub300\ub9cc)", 40);
    }

    @Test
    public void test11041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11041");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\uc911\uad6d\uc5b4 (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.parseexception: ???????? (taiwan)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11042");
        java.util.Locale locale2 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4", "JAVA.TEXT.PARSEPOSITION[INDEX=-2,ERRORINDEX=3]");
        org.junit.Assert.assertEquals(locale2.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4_JAVA.TEXT.PARSEPOSITION[INDEX=-2,ERRORINDEX=3]");
    }

    @Test
    public void test11043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11043");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder6.setScript("\uc911\uad6d\uc5b4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: japanese (japan) (JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),java.text.parseexception: ????????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11044");
        java.text.ParseException parseException2 = new java.text.ParseException("french (canada) (JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY))", 119);
    }

    @Test
    public void test11045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11045");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMinimumIntegerDigits();
        java.lang.String str23 = numberFormat20.format((long) 1);
        int int24 = numberFormat20.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field26);
        java.lang.String str28 = fieldPosition27.toString();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayName(locale30);
        boolean boolean33 = fieldPosition27.equals((java.lang.Object) locale30);
        fieldPosition27.setEndIndex((int) '#');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction42 = properFractionFormat38.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition41);
        boolean boolean43 = fieldPosition27.equals((java.lang.Object) parsePosition41);
        int int44 = parsePosition41.getIndex();
        java.lang.Number number45 = numberFormat20.parse("", parsePosition41);
        properFractionFormat3.setWholeFormat(numberFormat20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        boolean boolean48 = numberFormat20.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100%" + "'", str23, "100%");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2147483647 + "'", int24 == 2147483647);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str28, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (Taiwan)" + "'", str32, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNull(fraction42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNull(number45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test11046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11046");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (short) 100, (int) '4');
        float float3 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction20.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction29.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction35 = fraction26.add(fraction33);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction6.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction38 = new org.apache.commons.math.fraction.Fraction((double) 600);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction6.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction43.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction52.divide(fraction55);
        int int58 = fraction52.intValue();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction52.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.abs();
        long long71 = fraction69.longValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction65.multiply(fraction69);
        org.apache.commons.math.fraction.Fraction fraction75 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction76 = fraction75.negate();
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.abs();
        org.apache.commons.math.fraction.Fraction fraction80 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction81 = fraction80.negate();
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.abs();
        long long83 = fraction81.longValue();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction77.multiply(fraction81);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction69.subtract(fraction84);
        org.apache.commons.math.fraction.Fraction fraction86 = fraction85.abs();
        org.apache.commons.math.fraction.Fraction fraction87 = fraction52.add(fraction85);
        org.apache.commons.math.fraction.Fraction fraction88 = fraction39.add(fraction85);
        org.apache.commons.math.fraction.Fraction fraction90 = new org.apache.commons.math.fraction.Fraction((-0.008333333333333333d));
        org.apache.commons.math.fraction.Fraction fraction91 = fraction85.multiply(fraction90);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction2.subtract(fraction91);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.9230769f + "'", float3 == 1.9230769f);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertNotNull(fraction87);
        org.junit.Assert.assertNotNull(fraction88);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
    }

    @Test
    public void test11047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11047");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.lang.String str8 = locale2.getDisplayName(locale5);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.lang.String str13 = locale9.getDisplayScript(locale11);
        java.lang.String str14 = locale2.getDisplayLanguage(locale11);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getNumberInstance(locale2);
        java.util.Currency currency16 = numberFormat15.getCurrency();
        fractionFormat1.setNumeratorFormat(numberFormat15);
        java.lang.Object obj18 = numberFormat15.clone();
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        numberFormat23.setMinimumIntegerDigits((int) (short) -1);
        numberFormat23.setMaximumFractionDigits(0);
        java.lang.Object obj28 = numberFormat23.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat23);
        java.util.Currency currency30 = numberFormat23.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "france (CHINESE (TAIWAN))" + "'", str8, "france (CHINESE (TAIWAN))");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "france" + "'", str14, "france");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency16);
// flaky:         org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(currency30);
        org.junit.Assert.assertEquals(currency30.toString(), "XXX");
    }

    @Test
    public void test11048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11048");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency8 = numberFormat5.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        java.lang.Object obj11 = numberFormat10.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number13 = numberFormat10.parse("java.text.ParseException: java.text.NumberFormat$Field(exponent symbol)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"java.text.ParseException: java.text.NumberFormat$Field(exponent symbol)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test11049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11049");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale5 = new java.util.Locale("taiwan (ZH_TW,10,000%)");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setLocale(locale5);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: taiwan (zh_tw,10,000%) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan (zh_tw,10,000%)");
    }

    @Test
    public void test11050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11050");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        numberFormat3.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.lang.String str10 = fieldPosition9.toString();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayName(locale12);
        boolean boolean15 = fieldPosition9.equals((java.lang.Object) locale12);
        fieldPosition9.setEndIndex((int) '#');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getCurrencyInstance(locale18);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat20 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat19);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat20.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition23);
        boolean boolean25 = fieldPosition9.equals((java.lang.Object) parsePosition23);
        java.lang.Number number26 = numberFormat3.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition23);
        int int27 = parsePosition23.getIndex();
        java.lang.String str28 = parsePosition23.toString();
        parsePosition23.setIndex(3);
        int int31 = parsePosition23.getErrorIndex();
        java.lang.String str32 = parsePosition23.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str10, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(fraction24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str28, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.ParsePosition[index=3,errorIndex=1]" + "'", str32, "java.text.ParsePosition[index=3,errorIndex=1]");
    }

    @Test
    public void test11051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11051");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        long long19 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction17.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction17.subtract(fraction36);
        long long39 = fraction36.longValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction8.divide(fraction36);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction2.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.abs();
        long long52 = fraction50.longValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.multiply(fraction50);
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        long long64 = fraction62.longValue();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction58.multiply(fraction62);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction50.subtract(fraction65);
        org.apache.commons.math.fraction.Fraction fraction67 = fraction65.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        int int69 = fraction67.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction40.subtract(fraction67);
        java.lang.String str71 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction70);
        int int72 = fraction70.getDenominator();
        double double73 = fraction70.doubleValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0 / 1" + "'", str3, "0 / 1");
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 14400 + "'", int69 == 14400);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-4,400 / 1" + "'", str71, "-4,400 / 1");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-4400.0d) + "'", double73 == (-4400.0d));
    }

    @Test
    public void test11052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11052");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        boolean boolean10 = numberFormat8.equals((java.lang.Object) locale9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale9.getDisplayVariant(locale12);
        java.lang.String str17 = locale9.getDisplayCountry();
        java.util.Locale.setDefault(locale9);
        java.lang.String str20 = locale9.getExtension('u');
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale9.getDisplayVariant(locale21);
        java.lang.String str23 = locale4.getDisplayCountry(locale9);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale9);
        java.lang.String str25 = locale0.getDisplayCountry(locale9);
        java.lang.String str26 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CHINESE (TAIWAN)" + "'", str17, "CHINESE (TAIWAN)");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Japan" + "'", str25, "Japan");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "JPN" + "'", str26, "JPN");
    }

    @Test
    public void test11053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11053");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction4.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction25.divide(fraction27);
        org.apache.commons.math.fraction.Fraction fraction31 = new org.apache.commons.math.fraction.Fraction(60, 1);
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.subtract(fraction31);
        int int33 = fraction31.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction37.add(fraction43);
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.negate();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction46.divide(fraction49);
        int int52 = fraction46.intValue();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction46.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction53.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction31.add(fraction53);
        long long60 = fraction53.longValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 60 + "'", int33 == 60);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 60L + "'", long60 == 60L);
    }

    @Test
    public void test11054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11054");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.util.Currency currency3 = numberFormat1.getCurrency();
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        numberFormat8.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str12 = numberFormat8.format((double) 0.0f);
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        int int18 = numberFormat17.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8, numberFormat17, numberFormat20);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance(locale23);
        numberFormat26.setMinimumIntegerDigits(0);
        numberFormat26.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat20, numberFormat26);
        boolean boolean32 = numberFormat1.isGroupingUsed();
        java.text.NumberFormat.Field field33 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((java.text.Format.Field) field33);
        java.text.Format.Field field35 = fieldPosition34.getFieldAttribute();
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition(field35);
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition(field35, (int) (short) 10000);
        fieldPosition38.setBeginIndex((int) (byte) 87);
        java.lang.String str41 = numberFormat1.format((java.lang.Object) (byte) 87);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        boolean boolean47 = numberFormat46.isGroupingUsed();
        properFractionFormat44.setWholeFormat(numberFormat46);
        java.text.NumberFormat numberFormat49 = properFractionFormat44.getWholeFormat();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number53 = numberFormat49.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.util.Locale locale58 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str59 = locale54.getDisplayLanguage(locale58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale58);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance(locale58);
        org.apache.commons.math.fraction.FractionFormat fractionFormat62 = new org.apache.commons.math.fraction.FractionFormat(numberFormat49, numberFormat61);
        int int63 = numberFormat61.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat61);
        boolean boolean65 = numberFormat61.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0%" + "'", str12, "0%");
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2147483647 + "'", int18 == 2147483647);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(field33);
        org.junit.Assert.assertNotNull(field35);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "8,700%" + "'", str41, "8,700%");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(number53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale58.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Japanese" + "'", str59, "Japanese");
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test11055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11055");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 52, (int) (short) -119);
    }

    @Test
    public void test11056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11056");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.numberformat$field(exponent)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11057");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str7 = locale5.getISO3Language();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test11058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11058");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        long long15 = fraction13.longValue();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        long long27 = fraction25.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.multiply(fraction25);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction13.subtract(fraction28);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        double double34 = fraction32.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction38 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction32.multiply(fraction38);
        boolean boolean40 = fraction29.equals((java.lang.Object) fraction32);
        int int41 = fraction29.intValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction29.abs();
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction29);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction4.add(fraction29);
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction51 = fraction50.negate();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction47.multiply(fraction51);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction47.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction44.add(fraction54);
        byte byte56 = fraction54.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.008333333333333333d) + "'", double34 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "119 / 14,400" + "'", str43, "119 / 14,400");
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 2 + "'", byte56 == (byte) 2);
    }

    @Test
    public void test11059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11059");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction(121.00840336134453d);
    }

    @Test
    public void test11060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11060");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale10.getDisplayCountry(locale17);
        java.util.Locale locale20 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str21 = locale17.getDisplayLanguage(locale20);
        java.lang.String str22 = locale8.getDisplayCountry(locale20);
        java.lang.String str23 = locale1.getDisplayVariant(locale8);
        java.lang.String str24 = locale8.getLanguage();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale8);
        java.lang.String str26 = locale8.getScript();
        java.lang.String str27 = locale8.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese" + "'", str11, "Chinese");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italian" + "'", str21, "Italian");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test11061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11061");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        properFractionFormat23.setWholeFormat(numberFormat25);
        java.text.NumberFormat numberFormat28 = properFractionFormat23.getWholeFormat();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number32 = numberFormat28.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition31);
        java.lang.Object obj33 = properFractionFormat3.parseObject("2,147,483,647 / 1", parsePosition31);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35);
        numberFormat35.setMaximumFractionDigits(100);
        numberFormat35.setMaximumFractionDigits((int) (byte) 100);
        java.util.Locale locale42 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance(locale42);
        java.text.NumberFormat.Field field44 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field44);
        int int46 = fieldPosition45.getField();
        java.text.Format.Field field47 = fieldPosition45.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.ZERO;
        boolean boolean49 = field47.equals((java.lang.Object) fraction48);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance();
        numberFormat50.setMaximumIntegerDigits(2147483647);
        int int53 = numberFormat50.getMaximumIntegerDigits();
        numberFormat50.setMaximumIntegerDigits((int) (short) 32);
        boolean boolean56 = fraction48.equals((java.lang.Object) numberFormat50);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.text.ParsePosition parsePosition62 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction63 = properFractionFormat59.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getPercentInstance(locale67);
        boolean boolean69 = numberFormat68.isGroupingUsed();
        properFractionFormat66.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat71 = properFractionFormat66.getWholeFormat();
        properFractionFormat59.setWholeFormat(numberFormat71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getPercentInstance(locale73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance(locale76);
        boolean boolean78 = numberFormat77.isGroupingUsed();
        properFractionFormat75.setWholeFormat(numberFormat77);
        java.text.NumberFormat numberFormat80 = properFractionFormat75.getWholeFormat();
        java.util.Currency currency81 = numberFormat80.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = new org.apache.commons.math.fraction.FractionFormat(numberFormat80);
        java.lang.Object obj83 = numberFormat80.clone();
        boolean boolean84 = numberFormat80.isParseIntegerOnly();
        properFractionFormat59.setWholeFormat(numberFormat80);
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat87 = java.text.NumberFormat.getPercentInstance(locale86);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat88 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat87);
        numberFormat87.setMaximumFractionDigits(100);
        java.lang.String str92 = numberFormat87.format((long) 100);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat93 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat50, numberFormat80, numberFormat87);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat94 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat35, numberFormat43, numberFormat80);
        boolean boolean95 = parsePosition31.equals((java.lang.Object) numberFormat43);
        numberFormat43.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNull(number32);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertEquals(locale42.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(field44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(field47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNull(fraction63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(currency81);
        org.junit.Assert.assertEquals(currency81.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "10,000%" + "'", str92, "10,000%");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test11062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11062");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("TWN");
        java.util.Locale.Builder builder18 = builder16.setVariant("cinese");
        java.util.Locale locale19 = builder18.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder18.setUnicodeLocaleKeyword("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=97,endIndex=10000]", "allemand (Allemagne)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=97,endIndex=10000] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
    }

    @Test
    public void test11063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11063");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        int int18 = fraction12.intValue();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction12.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.reciprocal();
        double double21 = fraction20.doubleValue();
        java.lang.String str22 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        long long35 = fraction33.longValue();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction29.multiply(fraction33);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction29.divide(fraction48);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction29.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction52 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction50.divide(fraction52);
        double double54 = fraction52.doubleValue();
        int int55 = fraction52.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction52.abs();
        long long57 = fraction56.longValue();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction59 = fraction24.subtract(fraction58);
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.ONE;
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        long long65 = fraction63.longValue();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction60.divide(fraction63);
        long long67 = fraction63.longValue();
        boolean boolean68 = fraction24.equals((java.lang.Object) fraction63);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction63.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction20.multiply(fraction63);
        float float71 = fraction70.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.016666666666666666d + "'", double21 == 0.016666666666666666d);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1 / 60" + "'", str22, "1 / 60");
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + (-1.3888889E-4f) + "'", float71 == (-1.3888889E-4f));
    }

    @Test
    public void test11064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11064");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(10);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) '#');
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale5.getScript();
        java.util.Locale locale10 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str11 = locale5.getDisplayScript(locale10);
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getNumberInstance(locale10);
        int int13 = numberFormat12.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        boolean boolean16 = fieldPosition1.equals((java.lang.Object) numberFormat12);
        numberFormat12.setGroupingUsed(false);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.util.Set<java.lang.Character> charSet21 = locale19.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet22 = locale19.getExtensionKeys();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat23);
        java.lang.Object obj25 = numberFormat12.clone();
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        java.lang.String str38 = locale36.getDisplayCountry();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayScript();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale42.getISO3Language();
        java.lang.String str44 = locale40.getDisplayScript(locale42);
        java.lang.String str45 = locale33.getDisplayLanguage(locale42);
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getNumberInstance(locale33);
        fractionFormat29.setNumeratorFormat(numberFormat46);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale49);
        java.util.Currency currency52 = numberFormat51.getCurrency();
        numberFormat51.setMinimumIntegerDigits(1);
        numberFormat51.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj60 = numberFormat51.parseObject("Japan", parsePosition59);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException64 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str65 = fractionConversionException64.getPattern();
        java.lang.Throwable[] throwableArray66 = fractionConversionException64.getSuppressed();
        java.lang.Object[] objArray67 = fractionConversionException64.getArguments();
        boolean boolean68 = parsePosition59.equals((java.lang.Object) objArray67);
        int int69 = parsePosition59.getIndex();
        int int70 = parsePosition59.getIndex();
        java.lang.Object obj71 = fractionFormat29.parseObject("Germany", parsePosition59);
        java.lang.Number number72 = numberFormat12.parse("\244 120.00 \244 0.00 / \244 1.00", parsePosition59);
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.lang.String str74 = locale73.getScript();
        java.util.Locale locale78 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str79 = locale73.getDisplayScript(locale78);
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getNumberInstance(locale78);
        int int81 = numberFormat80.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = new org.apache.commons.math.fraction.FractionFormat(numberFormat80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat80);
        java.util.Currency currency84 = numberFormat80.getCurrency();
        numberFormat12.setCurrency(currency84);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(locale10.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "france (CHINESE (TAIWAN))" + "'", str39, "france (CHINESE (TAIWAN))");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "kor" + "'", str43, "kor");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "france" + "'", str45, "france");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "TWD");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str65, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(number72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals(locale78.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(currency84);
        org.junit.Assert.assertEquals(currency84.toString(), "XXX");
    }

    @Test
    public void test11065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11065");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it-IT");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.Builder builder9 = builder6.setLocale(locale7);
        java.util.Locale locale10 = builder6.build();
        java.util.Locale locale11 = builder6.build();
        java.util.Locale.Builder builder12 = builder6.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test11066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11066");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale4);
        java.lang.String str7 = locale4.getDisplayScript();
        java.lang.String str8 = locale0.getDisplayVariant(locale4);
        java.lang.String str9 = locale4.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test11067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11067");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale4 = new java.util.Locale("zho", "Chinese (Taiwan)", "Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str5 = locale0.getDisplayLanguage(locale4);
        java.util.Locale locale6 = locale0.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale7.getDisplayCountry(locale9);
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.lang.String str13 = locale6.getScript();
        java.util.Set<java.lang.String> strSet14 = locale6.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = locale6.getUnicodeLocaleType("0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals(locale4.toString(), "zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japanese" + "'", str5, "Japanese");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese" + "'", str8, "Chinese");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Taiwan" + "'", str10, "Taiwan");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "japonais (Japon)" + "'", str12, "japonais (Japon)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test11068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11068");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        java.math.RoundingMode roundingMode12 = numberFormat4.getRoundingMode();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction15 = properFractionFormat13.parse("java.text.NumberFormat$Field(per mille)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"java.text.NumberFormat$Field(per mille)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11069");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, (int) (short) 1);
        int int15 = fraction14.intValue();
        boolean boolean16 = fraction11.equals((java.lang.Object) int15);
        java.lang.StringBuffer stringBuffer17 = null;
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((java.text.Format.Field) field18, (int) '#');
        java.text.Format.Field field21 = fieldPosition20.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction27.multiply(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction24.add(fraction31);
        boolean boolean34 = field21.equals((java.lang.Object) fraction24);
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition(field21);
        java.lang.String str36 = field21.toString();
        java.lang.String str37 = field21.toString();
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition(field21, (int) (short) -1);
        fieldPosition39.setBeginIndex(11);
        int int42 = fieldPosition39.getEndIndex();
        int int43 = fieldPosition39.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer44 = properFractionFormat8.format(fraction11, stringBuffer17, fieldPosition39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str36, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str37, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
    }

    @Test
    public void test11070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11070");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale3 = locale0.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        int int12 = numberFormat11.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11);
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        int int20 = numberFormat19.getMaximumIntegerDigits();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        boolean boolean23 = numberFormat22.isGroupingUsed();
        java.util.Currency currency24 = numberFormat22.getCurrency();
        numberFormat19.setCurrency(currency24);
        java.util.Currency currency26 = numberFormat19.getCurrency();
        java.math.RoundingMode roundingMode27 = numberFormat19.getRoundingMode();
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition((int) 'a');
        java.lang.String str31 = parsePosition30.toString();
        java.lang.String str32 = parsePosition30.toString();
        java.lang.Object obj33 = numberFormat19.parseObject("zho", parsePosition30);
        java.lang.String str34 = parsePosition30.toString();
        parsePosition30.setErrorIndex(0);
        java.lang.Object obj37 = fractionFormat13.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)", parsePosition30);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        boolean boolean43 = numberFormat42.isGroupingUsed();
        properFractionFormat40.setWholeFormat(numberFormat42);
        java.text.NumberFormat numberFormat45 = properFractionFormat40.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean51 = numberFormat49.equals((java.lang.Object) numberFormat50);
        java.lang.Object obj52 = numberFormat50.clone();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean57 = numberFormat55.equals((java.lang.Object) numberFormat56);
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        int int64 = numberFormat63.getMaximumIntegerDigits();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        java.util.Currency currency68 = numberFormat66.getCurrency();
        numberFormat63.setCurrency(currency68);
        java.util.Currency currency70 = numberFormat63.getCurrency();
        java.math.RoundingMode roundingMode71 = numberFormat63.getRoundingMode();
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition((int) 'a');
        java.lang.String str75 = parsePosition74.toString();
        java.lang.String str76 = parsePosition74.toString();
        java.lang.Object obj77 = numberFormat63.parseObject("zho", parsePosition74);
        java.lang.String str78 = parsePosition74.toString();
        java.lang.Number number79 = numberFormat56.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition74);
        java.lang.Object obj80 = numberFormat50.parseObject("cor\351en", parsePosition74);
        parsePosition74.setErrorIndex(600);
        int int83 = parsePosition74.getIndex();
        org.apache.commons.math.fraction.Fraction fraction84 = fractionFormat46.parse("Japan", parsePosition74);
        boolean boolean85 = parsePosition30.equals((java.lang.Object) parsePosition74);
        java.lang.Number number86 = numberFormat5.parse("chinois", parsePosition30);
        java.lang.String str87 = parsePosition30.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(currency24);
        org.junit.Assert.assertEquals(currency24.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode27 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode27.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str31, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str32, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str34, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode71 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode71.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str75, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str76, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str78, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number79);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNull(fraction84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(number86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str87, "java.text.ParsePosition[index=97,errorIndex=97]");
    }

    @Test
    public void test11071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11071");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.String str34 = numberFormat2.format(214748364700L);
        java.lang.StringBuffer stringBuffer36 = null;
        java.text.NumberFormat.Field field37 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition((java.text.Format.Field) field37);
        java.lang.Object obj39 = null;
        boolean boolean40 = field37.equals(obj39);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        java.util.Locale.Builder builder43 = builder41.clear();
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale.Builder builder47 = builder44.setExtension('a', "TWN");
        boolean boolean48 = field37.equals((java.lang.Object) "TWN");
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field37, (int) 'x');
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition((java.text.Format.Field) field37, 599);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer53 = numberFormat2.format((long) (short) 60, stringBuffer36, fieldPosition52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "214,748,364,700" + "'", str34, "214,748,364,700");
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11072");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-14400), (int) 'a');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.abs();
        org.junit.Assert.assertNotNull(fraction3);
    }

    @Test
    public void test11073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11073");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-148), (int) (short) -120);
    }

    @Test
    public void test11074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11074");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale3.toLanguageTag();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale locale10 = builder8.build();
        java.lang.String str11 = locale10.getScript();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale12.getDisplayCountry(locale19);
        java.util.Locale locale22 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str23 = locale19.getDisplayLanguage(locale22);
        java.lang.String str24 = locale10.getDisplayCountry(locale22);
        java.lang.String str25 = locale3.getDisplayVariant(locale10);
        java.lang.String str26 = locale3.getCountry();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.lang.String str29 = locale3.getDisplayLanguage();
        boolean boolean30 = locale3.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese" + "'", str13, "Chinese");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertEquals(locale22.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italian" + "'", str23, "Italian");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11075");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("0");
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale1.getDisplayCountry(locale2);
        java.lang.String str6 = locale1.getDisplayName();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale8.getDisplayName(locale11);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.lang.String str20 = locale8.getDisplayLanguage(locale17);
        java.lang.String str21 = locale8.toLanguageTag();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale24 = java.util.Locale.getDefault(category7);
        java.lang.String str25 = locale1.getDisplayScript(locale24);
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getCurrencyInstance(locale1);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale30);
        java.lang.String str34 = locale27.getDisplayCountry(locale30);
        java.lang.String str35 = locale27.getISO3Language();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getCurrencyInstance(locale27);
        java.lang.String str37 = locale27.getDisplayName();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getIntegerInstance(locale27);
        java.lang.String str39 = locale1.getDisplayCountry(locale27);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "france (CHINESE (TAIWAN))" + "'", str14, "france (CHINESE (TAIWAN))");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "france" + "'", str20, "france");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "france" + "'", str21, "france");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "France" + "'", str34, "France");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fra" + "'", str35, "fra");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "French (France)" + "'", str37, "French (France)");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test11076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11076");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale2.getScript();
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        int int9 = numberFormat8.getMaximumIntegerDigits();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        java.util.Currency currency13 = numberFormat11.getCurrency();
        numberFormat8.setCurrency(currency13);
        java.util.Currency currency15 = numberFormat8.getCurrency();
        int int16 = numberFormat8.getMaximumFractionDigits();
        java.lang.Object obj17 = numberFormat8.clone();
        numberFormat8.setMinimumFractionDigits((int) (short) 1);
        boolean boolean20 = numberFormat8.isGroupingUsed();
        boolean boolean21 = numberFormat8.isGroupingUsed();
        java.lang.String str23 = numberFormat8.format(1L);
        boolean boolean24 = locale2.equals((java.lang.Object) str23);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100.0%" + "'", str23, "100.0%");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11077");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setRegion("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 17 to fraction after -19,366 iterations");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: org.apache.commons.math.fraction.FractionConversionException: Unable to convert 17 to fraction after -19,366 iterations [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11078");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) (-0.1f), (long) (-12000), 14400L);
        java.lang.Object[] objArray4 = fractionConversionException3.getArguments();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-0.10000000149011612, -12000, 14400]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-0.10000000149011612, -12000, 14400]");
    }

    @Test
    public void test11079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11079");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj10 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition9);
        numberFormat3.setGroupingUsed(false);
        int int13 = numberFormat3.getMinimumIntegerDigits();
        boolean boolean14 = numberFormat3.isGroupingUsed();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = new org.apache.commons.math.fraction.FractionFormat(numberFormat17, numberFormat19);
        boolean boolean21 = numberFormat19.isGroupingUsed();
        boolean boolean22 = numberFormat19.isGroupingUsed();
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj26 = numberFormat19.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition25);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getDenominatorFormat();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        properFractionFormat33.setWholeFormat(numberFormat35);
        java.text.NumberFormat numberFormat38 = properFractionFormat33.getWholeFormat();
        java.lang.String str40 = numberFormat38.format((double) 1.0f);
        numberFormat38.setMaximumIntegerDigits((int) (byte) 100);
        numberFormat38.setParseIntegerOnly(false);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale48 = java.util.Locale.getDefault(category47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale49);
        java.util.Locale.setDefault(category47, locale49);
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category47, locale52);
        java.lang.String str54 = locale46.getDisplayLanguage(locale52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat55 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale52);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getCurrencyInstance(locale57);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat59 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat58);
        java.text.ParsePosition parsePosition62 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction63 = properFractionFormat59.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition62);
        java.lang.Object obj64 = fractionFormat55.parseObject("214,748,364,700%", parsePosition62);
        java.lang.String str65 = parsePosition62.toString();
        java.lang.Object obj66 = numberFormat38.parseObject("600", parsePosition62);
        org.apache.commons.math.fraction.Fraction fraction67 = properFractionFormat28.parse("\uc911\uad6d\uc5b4", parsePosition62);
        java.lang.Object obj68 = numberFormat19.parseObject("10,000%", parsePosition62);
        int int69 = parsePosition62.getIndex();
        int int70 = parsePosition62.getErrorIndex();
        java.lang.Number number71 = numberFormat3.parse("21,474,836,470,000%", parsePosition62);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100%" + "'", str40, "100%");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "anglais" + "'", str54, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNull(fraction63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str65, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(fraction67);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + 0L + "'", obj68, 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 7 + "'", int69 == 7);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNull(number71);
    }

    @Test
    public void test11080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11080");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        double double4 = fraction2.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction2.abs();
        float float7 = fraction6.floatValue();
        org.apache.commons.math.fraction.Fraction fraction11 = new org.apache.commons.math.fraction.Fraction((double) 600L, (double) 9, 51);
        double double12 = fraction11.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction6.subtract(fraction11);
        org.apache.commons.math.fraction.Fraction fraction16 = new org.apache.commons.math.fraction.Fraction(1728000, 35);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction13.subtract(fraction16);
        float float18 = fraction13.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.008333333333333333d) + "'", double4 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 0.008333334f + "'", float7 == 0.008333334f);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 600.0d + "'", double12 == 600.0d);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + (-599.99164f) + "'", float18 == (-599.99164f));
    }

    @Test
    public void test11081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11081");
        java.text.ParseException parseException2 = new java.text.ParseException("Korean", 2);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException5 = new org.apache.commons.math.fraction.FractionConversionException((double) 1L, (-2));
        parseException2.addSuppressed((java.lang.Throwable) fractionConversionException5);
        java.lang.Throwable[] throwableArray7 = fractionConversionException5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test11082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11082");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        boolean boolean7 = numberFormat6.isParseIntegerOnly();
        int int8 = numberFormat6.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Japan" + "'", str5, "Japan");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test11083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11083");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) 1728000, (int) (byte) 24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 1,728,000 to fraction (-1,727,999/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11084");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) parsePosition15);
        int int18 = fieldPosition1.getEndIndex();
        int int19 = fieldPosition1.getEndIndex();
        fieldPosition1.setEndIndex((-1));
        java.lang.String str22 = fieldPosition1.toString();
        int int23 = fieldPosition1.getField();
        int int24 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]" + "'", str22, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test11085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11085");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        int int3 = fieldPosition1.getField();
        int int4 = fieldPosition1.getBeginIndex();
        fieldPosition1.setBeginIndex((int) (short) -14400);
        int int7 = fieldPosition1.getEndIndex();
        org.apache.commons.math.fraction.Fraction fraction9 = new org.apache.commons.math.fraction.Fraction(6.944444444444444E-5d);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) 6.944444444444444E-5d);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11086");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        java.util.Locale.Builder builder21 = builder12.setLocale(locale13);
        java.util.Locale.Builder builder22 = builder12.clearExtensions();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.toLanguageTag();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.getISO3Language();
        java.lang.String str29 = locale23.getDisplayScript(locale26);
        java.lang.String str30 = locale23.toLanguageTag();
        java.util.Locale locale31 = locale23.stripExtensions();
        java.util.Locale.Builder builder32 = builder12.setLocale(locale31);
        java.util.Locale.Builder builder34 = builder12.removeUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder36 = builder34.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder34.setLanguage("-1 / 120");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: -1 / 120 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-TW" + "'", str25, "zh-TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh-TW" + "'", str30, "zh-TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test11087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11087");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        numberFormat4.setParseIntegerOnly(false);
        numberFormat4.setMaximumIntegerDigits(3);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale10);
        java.util.Currency currency13 = numberFormat12.getCurrency();
        numberFormat12.setMinimumIntegerDigits(1);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        int int21 = numberFormat20.getMaximumIntegerDigits();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        boolean boolean24 = numberFormat23.isGroupingUsed();
        java.util.Currency currency25 = numberFormat23.getCurrency();
        numberFormat20.setCurrency(currency25);
        java.util.Currency currency27 = numberFormat20.getCurrency();
        numberFormat12.setCurrency(currency27);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        int int39 = numberFormat38.getMaximumIntegerDigits();
        fractionFormat33.setDenominatorFormat(numberFormat38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat38);
        java.lang.StringBuffer stringBuffer42 = null;
        java.text.NumberFormat.Field field43 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition45 = new java.text.FieldPosition((java.text.Format.Field) field43, (int) '#');
        java.text.Format.Field field46 = fieldPosition45.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction52.multiply(fraction56);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction49.add(fraction56);
        boolean boolean59 = field46.equals((java.lang.Object) fraction49);
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition(field46);
        int int61 = fieldPosition60.getField();
        fieldPosition60.setBeginIndex((int) 'a');
        fieldPosition60.setEndIndex(10);
        java.util.Locale locale69 = new java.util.Locale("ko", "-1", "\244120.00000000000000000000000000000000000");
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder72 = builder70.setLanguageTag("en");
        java.util.Locale.Builder builder75 = builder70.setExtension('a', "Korean");
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = locale76.getDisplayScript();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale78.getISO3Language();
        java.lang.String str80 = locale76.getDisplayScript(locale78);
        java.lang.String str81 = locale76.toLanguageTag();
        java.lang.String str82 = locale76.getDisplayVariant();
        boolean boolean83 = locale76.hasExtensions();
        java.util.Locale.Builder builder84 = builder75.setLocale(locale76);
        java.util.Locale.setDefault(locale76);
        java.lang.String str86 = locale69.getDisplayCountry(locale76);
        java.util.Locale locale87 = locale69.stripExtensions();
        boolean boolean88 = fieldPosition60.equals((java.lang.Object) locale87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer89 = numberFormat4.format((java.lang.Object) fractionFormat41, stringBuffer42, fieldPosition60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency13);
        org.junit.Assert.assertEquals(currency13.toString(), "TWD");
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(field43);
        org.junit.Assert.assertNotNull(field46);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertEquals(locale69.toString(), "ko_-1_\244120.00000000000000000000000000000000000");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "kor" + "'", str79, "kor");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "und" + "'", str81, "und");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1" + "'", str86, "-1");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko_-1_\244120.00000000000000000000000000000000000");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test11088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11088");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = field0.toString();
        java.lang.String str3 = field0.toString();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale4.getDisplayScript(locale6);
        boolean boolean9 = field0.equals((java.lang.Object) locale4);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 97);
        java.util.Locale locale13 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale16 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str17 = locale13.getDisplayCountry(locale16);
        java.lang.Object obj18 = locale16.clone();
        boolean boolean19 = field0.equals(obj18);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str2, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str3, "java.text.NumberFormat$Field(grouping separator)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(locale13.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale16.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11089");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        double double4 = fraction2.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.abs();
        org.apache.commons.math.fraction.Fraction fraction6 = fraction2.abs();
        byte byte7 = fraction2.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.008333333333333333d) + "'", double4 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
    }

    @Test
    public void test11090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11090");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, 32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = fraction2.reciprocal();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test11091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11091");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat7 = fractionFormat2.getNumeratorFormat();
        java.lang.String str9 = numberFormat7.format((long) 2147483647);
        boolean boolean10 = numberFormat7.isParseIntegerOnly();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getInstance(locale11);
        boolean boolean13 = numberFormat12.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.text.NumberFormat numberFormat15 = properFractionFormat14.getWholeFormat();
        numberFormat15.setMinimumFractionDigits((int) (byte) 0);
        numberFormat15.setMinimumFractionDigits(60);
        numberFormat15.setMaximumFractionDigits((int) (byte) 1);
        java.math.RoundingMode roundingMode22 = numberFormat15.getRoundingMode();
        numberFormat7.setRoundingMode(roundingMode22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2,147,483,647" + "'", str9, "2,147,483,647");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + roundingMode22 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode22.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11092");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayScript();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        boolean boolean5 = numberFormat4.isGroupingUsed();
        int int6 = numberFormat4.getMaximumIntegerDigits();
        numberFormat4.setMaximumFractionDigits((int) (byte) 119);
        java.math.RoundingMode roundingMode9 = numberFormat4.getRoundingMode();
        boolean boolean10 = numberFormat4.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode9.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test11093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11093");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = locale0.stripExtensions();
        java.lang.String str10 = locale0.getLanguage();
        java.lang.String str11 = locale0.getScript();
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale locale17 = locale15.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        boolean boolean21 = locale18.hasExtensions();
        java.lang.String str22 = locale15.getDisplayScript(locale18);
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.lang.String str24 = locale18.getISO3Country();
        boolean boolean25 = locale18.hasExtensions();
        java.lang.String str26 = locale0.getDisplayName(locale18);
        java.lang.String str27 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fr" + "'", str10, "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CAN" + "'", str24, "CAN");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais (France)" + "'", str26, "fran\347ais (France)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr_FR" + "'", str27, "fr_FR");
    }

    @Test
    public void test11094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11094");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.lang.Object obj7 = numberFormat5.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test11095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11095");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.multiply(fraction6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        boolean boolean10 = numberFormat9.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        boolean boolean12 = fraction6.equals((java.lang.Object) properFractionFormat11);
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction6);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        long long24 = fraction22.longValue();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction18.multiply(fraction22);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction22.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction6.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction6.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str43 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction47.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.negate();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction53.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction47.add(fraction53);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction42.multiply(fraction53);
        org.apache.commons.math.fraction.Fraction fraction58 = fraction6.multiply(fraction42);
        java.util.Locale locale62 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str63 = locale62.getDisplayVariant();
        java.text.NumberFormat.Field field64 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition((java.text.Format.Field) field64);
        int int66 = fieldPosition65.getEndIndex();
        fieldPosition65.setBeginIndex((int) (byte) 100);
        java.util.Locale locale70 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale70);
        java.lang.String str73 = fractionFormat71.format((java.lang.Object) 100);
        boolean boolean74 = fieldPosition65.equals((java.lang.Object) fractionFormat71);
        java.text.Format.Field field75 = fieldPosition65.getFieldAttribute();
        java.util.Locale locale79 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale79);
        boolean boolean81 = fieldPosition65.equals((java.lang.Object) locale79);
        java.lang.String str82 = locale62.getDisplayCountry(locale79);
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category84 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale85 = java.util.Locale.getDefault(category84);
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale86);
        java.util.Locale.setDefault(category84, locale86);
        java.util.Locale locale89 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category84, locale89);
        java.lang.String str91 = locale83.getDisplayLanguage(locale89);
        java.lang.String str92 = locale62.getDisplayName(locale89);
        org.apache.commons.math.fraction.FractionFormat fractionFormat93 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale62);
        java.lang.String str94 = locale62.getDisplayLanguage();
        boolean boolean95 = fraction58.equals((java.lang.Object) locale62);
        java.text.NumberFormat numberFormat96 = java.text.NumberFormat.getInstance(locale62);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1 / 120" + "'", str13, "1 / 120");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1 / 1" + "'", str43, "1 / 1");
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertEquals(locale62.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "10,000%" + "'", str63, "10,000%");
        org.junit.Assert.assertNotNull(field64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100 0 / 1" + "'", str73, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(field75);
        org.junit.Assert.assertEquals(locale79.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ZH_TW" + "'", str82, "ZH_TW");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en");
        org.junit.Assert.assertTrue("'" + category84 + "' != '" + java.util.Locale.Category.FORMAT + "'", category84.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "anglais" + "'", str91, "anglais");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str92, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(fractionFormat93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "taiwan" + "'", str94, "taiwan");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(numberFormat96);
    }

    @Test
    public void test11096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11096");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder2.setRegion("cinese_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: cinese_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11097");
        java.util.Locale locale3 = new java.util.Locale("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (1/-2,147,483,647)", "en");
        org.junit.Assert.assertEquals(locale3.toString(), "java.text.fieldposition[field=-1,attribute=java.text.numberformat$field(currency),beginindex=100,endindex=0]_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 100 TO FRACTION (1/-2,147,483,647)_en");
    }

    @Test
    public void test11098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11098");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getDenominatorFormat();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat6);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj11 = numberFormat6.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition10);
        java.lang.String str12 = parsePosition10.toString();
        boolean boolean14 = parsePosition10.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        parsePosition10.setErrorIndex(2147483647);
        java.lang.Object obj17 = numberFormat1.parseObject("\u4e2d\u6587\u4e2d\u570b)", parsePosition10);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.lang.String str25 = locale19.getDisplayName(locale22);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale28.getISO3Language();
        java.lang.String str30 = locale26.getDisplayScript(locale28);
        java.lang.String str31 = locale19.getDisplayLanguage(locale28);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getNumberInstance(locale19);
        java.util.Currency currency33 = numberFormat32.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        long long44 = fraction42.longValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.multiply(fraction42);
        boolean boolean46 = numberFormat32.equals((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale51.getISO3Language();
        java.lang.String str53 = locale49.getDisplayScript(locale51);
        java.lang.String str54 = locale49.toLanguageTag();
        java.util.Set<java.lang.String> strSet55 = locale49.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale49);
        java.text.NumberFormat numberFormat57 = fractionFormat56.getDenominatorFormat();
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        int int64 = numberFormat63.getMaximumIntegerDigits();
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        boolean boolean67 = numberFormat66.isGroupingUsed();
        java.util.Currency currency68 = numberFormat66.getCurrency();
        numberFormat63.setCurrency(currency68);
        java.util.Currency currency70 = numberFormat63.getCurrency();
        int int71 = numberFormat63.getMaximumFractionDigits();
        java.lang.Object obj72 = numberFormat63.clone();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getPercentInstance(locale74);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat76 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat75);
        java.text.AttributedCharacterIterator attributedCharacterIterator78 = numberFormat75.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj79 = numberFormat75.clone();
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat82 = java.text.NumberFormat.getCurrencyInstance(locale81);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat83 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat82);
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat83.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition86);
        java.lang.Object obj88 = numberFormat75.parseObject("zh-TW", parsePosition86);
        java.lang.Number number89 = numberFormat63.parse("\uc911\uad6d\uc5b4", parsePosition86);
        java.lang.Object obj90 = fractionFormat56.parseObject("giapponese (Giappone)", parsePosition86);
        java.lang.Object obj91 = numberFormat32.parseObject("java.text.ParseException: CN", parsePosition86);
        java.lang.Number number92 = numberFormat1.parse("java.text.NumberFormat$Field(exponent sign)", parsePosition86);
        java.lang.String str94 = numberFormat1.format((long) (byte) 100);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str12, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "kor" + "'", str52, "kor");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "und" + "'", str54, "und");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(currency68);
        org.junit.Assert.assertEquals(currency68.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency70);
        org.junit.Assert.assertEquals(currency70.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(attributedCharacterIterator78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat82);
        org.junit.Assert.assertNull(fraction87);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(number89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(number92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "100" + "'", str94, "100");
    }

    @Test
    public void test11099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11099");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        numberFormat7.setParseIntegerOnly(true);
        numberFormat7.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode12 = numberFormat7.getRoundingMode();
        numberFormat7.setMinimumIntegerDigits((int) (short) 100);
        java.lang.Object obj15 = numberFormat7.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test11100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11100");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) parsePosition15);
        int int18 = fieldPosition1.getEndIndex();
        int int19 = fieldPosition1.getField();
        fieldPosition1.setBeginIndex((int) (byte) 37);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test11101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11101");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.setExtension('x', "zho");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder9.setRegion("");
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.util.Locale.setDefault(category13, locale15);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.lang.String str25 = locale18.getDisplayCountry(locale21);
        java.lang.String str26 = locale18.getISO3Language();
        java.lang.String str27 = locale18.getDisplayName();
        java.util.Locale.setDefault(category13, locale18);
        java.util.Locale locale29 = java.util.Locale.getDefault(category13);
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field30);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        boolean boolean34 = field30.equals((java.lang.Object) locale32);
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str36 = locale32.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale32);
        java.lang.String str38 = locale29.getDisplayVariant(locale32);
        java.util.Locale.Builder builder39 = builder9.setLocale(locale32);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "France" + "'", str25, "France");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "French (France)" + "'", str27, "French (France)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(fractionFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test11102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11102");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (byte) 87);
        fieldPosition1.setBeginIndex((int) (byte) 1);
        java.lang.String str4 = fieldPosition1.toString();
        int int5 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=87,attribute=null,beginIndex=1,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=87,attribute=null,beginIndex=1,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test11103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11103");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags(languageRangeList24, (java.util.Collection<java.lang.String>) strSet29, filteringMode31);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet22, filteringMode31);
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap35);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList38, (java.util.Collection<java.lang.String>) strSet43, filteringMode45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList52);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList38, (java.util.Collection<java.lang.String>) strList52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList38, strMap56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList38, strMap58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList59, strMap60);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList61, strMap62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList61, strMap64);
        java.text.NumberFormat.Field field66 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition67 = new java.text.FieldPosition((java.text.Format.Field) field66);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat69 = java.text.NumberFormat.getInstance(locale68);
        boolean boolean70 = field66.equals((java.lang.Object) locale68);
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.lang.String str72 = locale71.getDisplayCountry();
        java.lang.String str73 = locale68.getDisplayVariant(locale71);
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getIntegerInstance(locale71);
        java.util.Set<java.lang.String> strSet75 = locale71.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags(languageRangeList61, (java.util.Collection<java.lang.String>) strSet75);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags(languageRangeList36, (java.util.Collection<java.lang.String>) strSet75);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList36, strMap78);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode31.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(languageRangeList61);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(field66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(languageRangeList79);
    }

    @Test
    public void test11104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11104");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale locale8 = locale5.stripExtensions();
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str10 = locale9.getScript();
        java.util.Locale locale14 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str15 = locale9.getDisplayScript(locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet18 = locale14.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale14.getDisplayName(locale19);
        java.util.Locale locale24 = new java.util.Locale("-1 / 120");
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setScript("");
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str30 = locale28.toLanguageTag();
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale31.getISO3Language();
        java.lang.String str34 = locale28.getDisplayScript(locale31);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale28.getDisplayCountry(locale35);
        java.util.Locale.Builder builder37 = builder25.setLocale(locale35);
        java.lang.String str38 = locale35.getDisplayScript();
        java.lang.String str39 = locale24.getDisplayLanguage(locale35);
        java.lang.String str40 = locale24.getDisplayVariant();
        java.lang.String str41 = locale14.getDisplayName(locale24);
        java.lang.String str42 = locale8.getDisplayScript(locale24);
        java.lang.String str43 = locale24.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale14.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str21, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str22, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals(locale24.toString(), "-1 / 120");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese" + "'", str29, "Chinese");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh-TW" + "'", str30, "zh-TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zho" + "'", str33, "zho");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Taiwan" + "'", str36, "Taiwan");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1 / 120" + "'", str39, "-1 / 120");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str41, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test11105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11105");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        boolean boolean27 = numberFormat24.isGroupingUsed();
        java.lang.String str29 = numberFormat24.format((double) 10L);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getISO3Language();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale30);
        boolean boolean34 = numberFormat33.isParseIntegerOnly();
        java.math.RoundingMode roundingMode35 = numberFormat33.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat37 = new org.apache.commons.math.fraction.FractionFormat(numberFormat24, numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22, numberFormat33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number40 = numberFormat33.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 10 to fraction (117/120)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 10 to fraction (117/120)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1,000%" + "'", str29, "1,000%");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "kor" + "'", str31, "kor");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + roundingMode35 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode35.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11106");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = locale6.getDisplayCountry(locale7);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        boolean boolean12 = field0.equals((java.lang.Object) locale7);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field0);
        fieldPosition13.setBeginIndex((int) 'a');
        java.lang.String str16 = fieldPosition13.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=97,endIndex=0]" + "'", str16, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(grouping separator),beginIndex=97,endIndex=0]");
    }

    @Test
    public void test11107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11107");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) 'a');
        java.lang.String str8 = parsePosition7.toString();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = parsePosition7.equals((java.lang.Object) builder12);
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale locale19 = java.util.Locale.getDefault(category14);
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale19);
        boolean boolean22 = parsePosition7.equals((java.lang.Object) locale19);
        java.lang.String str23 = locale1.getDisplayScript(locale19);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.lang.String str25 = locale24.getDisplayCountry();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale24.getDisplayCountry(locale26);
        java.lang.String str30 = locale19.getDisplayLanguage(locale24);
        java.util.Locale locale31 = locale19.stripExtensions();
        java.lang.String str32 = locale31.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str8, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str28, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "coreano" + "'", str30, "coreano");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test11108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11108");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        numberFormat1.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        boolean boolean19 = numberFormat18.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String str23 = locale20.getISO3Country();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale20);
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        int int30 = numberFormat29.getMaximumIntegerDigits();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        java.util.Currency currency34 = numberFormat32.getCurrency();
        numberFormat29.setCurrency(currency34);
        java.util.Currency currency36 = numberFormat29.getCurrency();
        int int37 = numberFormat29.getMaximumFractionDigits();
        java.lang.Object obj38 = numberFormat29.clone();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        numberFormat40.setMaximumFractionDigits(100);
        numberFormat40.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str47 = numberFormat40.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24, numberFormat29, numberFormat40);
        numberFormat40.setMinimumIntegerDigits(600);
        numberFormat40.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat18, numberFormat40);
        java.lang.StringBuffer stringBuffer55 = null;
        java.text.NumberFormat.Field field56 = java.text.NumberFormat.Field.CURRENCY;
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder57.setScript("");
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.lang.String str62 = locale60.toLanguageTag();
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale63.getISO3Language();
        java.lang.String str66 = locale60.getDisplayScript(locale63);
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.lang.String str68 = locale60.getDisplayCountry(locale67);
        java.util.Locale.Builder builder69 = builder57.setLocale(locale67);
        java.lang.String str70 = locale67.getDisplayScript();
        boolean boolean71 = field56.equals((java.lang.Object) locale67);
        java.text.FieldPosition fieldPosition73 = new java.text.FieldPosition((java.text.Format.Field) field56, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer74 = numberFormat1.format((long) (-101), stringBuffer55, fieldPosition73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2147483647 + "'", int30 == 2147483647);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(currency34);
        org.junit.Assert.assertEquals(currency34.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "100%" + "'", str47, "100%");
        org.junit.Assert.assertNotNull(field56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Chinese" + "'", str61, "Chinese");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh-TW" + "'", str62, "zh-TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zho" + "'", str65, "zho");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Taiwan" + "'", str68, "Taiwan");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test11109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11109");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale23 = java.util.Locale.getDefault(category18);
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction29.add(fraction35);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.divide(fraction41);
        int int44 = fraction38.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction38.abs();
        int int47 = fraction38.getDenominator();
        java.lang.String str48 = numberFormat25.format((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int52 = fraction51.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction38.multiply(fraction51);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction17.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        double double59 = fraction57.doubleValue();
        int int60 = fraction57.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction57.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction38.divide(fraction57);
        int int63 = fraction57.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction65 = new org.apache.commons.math.fraction.Fraction((double) 100);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction57.divide(fraction66);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 60 + "'", int47 == 60);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2%" + "'", str48, "2%");
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.008333333333333333d) + "'", double59 == (-0.008333333333333333d));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 120 + "'", int60 == 120);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
    }

    @Test
    public void test11110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11110");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getCountry();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.setScript("");
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale8.getDisplayLanguage(locale10);
        java.util.Locale.Builder builder12 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.util.Locale.Builder builder16 = builder12.removeUnicodeLocaleAttribute("eng");
        java.util.Locale locale17 = builder12.build();
        java.lang.String str18 = locale3.getDisplayLanguage(locale17);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.setVariant("");
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.clear();
        java.util.Locale locale25 = builder24.build();
        java.lang.String str26 = locale25.getDisplayCountry();
        java.lang.String str27 = locale17.getDisplayScript(locale25);
        java.lang.String str28 = locale17.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Korean" + "'", str2, "Korean");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinesisch" + "'", str11, "Chinesisch");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u97d3\u6587" + "'", str18, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "TW" + "'", str28, "TW");
    }

    @Test
    public void test11111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11111");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (short) -600);
        int int2 = parsePosition1.getErrorIndex();
        java.lang.String str3 = parsePosition1.toString();
        parsePosition1.setErrorIndex((-120));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParsePosition[index=-600,errorIndex=-1]" + "'", str3, "java.text.ParsePosition[index=-600,errorIndex=-1]");
    }

    @Test
    public void test11112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11112");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMinimumIntegerDigits();
        numberFormat4.setMaximumIntegerDigits(119);
        numberFormat4.setMinimumIntegerDigits(8654399);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale13);
        java.util.Currency currency16 = numberFormat15.getCurrency();
        numberFormat15.setMinimumIntegerDigits(1);
        numberFormat15.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat15.parseObject("Japan", parsePosition23);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException28 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str29 = fractionConversionException28.getPattern();
        java.lang.Throwable[] throwableArray30 = fractionConversionException28.getSuppressed();
        java.lang.Object[] objArray31 = fractionConversionException28.getArguments();
        boolean boolean32 = parsePosition23.equals((java.lang.Object) objArray31);
        int int33 = parsePosition23.getIndex();
        int int34 = parsePosition23.getIndex();
        java.lang.Object obj35 = fractionFormat11.parseObject("\ud55c\uad6d\uc5b4", parsePosition23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat36 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat37 = properFractionFormat36.getWholeFormat();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getPercentInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        numberFormat39.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37, numberFormat39);
        java.text.NumberFormat numberFormat44 = fractionFormat43.getNumeratorFormat();
        boolean boolean45 = parsePosition23.equals((java.lang.Object) fractionFormat43);
        java.util.Locale.Category category46 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale47 = java.util.Locale.getDefault(category46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat49 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale48);
        java.util.Locale.setDefault(category46, locale48);
        java.util.Locale locale51 = java.util.Locale.getDefault(category46);
        java.util.Locale.Category category52 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale53.getISO3Language();
        java.util.Locale.setDefault(category52, locale53);
        java.util.Locale.setDefault(category46, locale53);
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.lang.String str58 = locale57.getISO3Country();
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getIntegerInstance(locale57);
        java.util.Locale.setDefault(category46, locale57);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getNumberInstance(locale57);
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale57);
        fractionFormat43.setNumeratorFormat(numberFormat62);
        boolean boolean64 = numberFormat62.isParseIntegerOnly();
        java.text.ParsePosition parsePosition67 = new java.text.ParsePosition((int) 'a');
        java.lang.String str68 = parsePosition67.toString();
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder70 = builder69.clearExtensions();
        java.util.Locale.Builder builder71 = builder69.clear();
        java.util.Locale.Builder builder72 = builder71.clear();
        boolean boolean73 = parsePosition67.equals((java.lang.Object) builder72);
        java.lang.Object obj74 = numberFormat62.parseObject("\u65e5\u672c,-1 / 100)", parsePosition67);
        java.lang.StringBuffer stringBuffer75 = null;
        java.text.FieldPosition fieldPosition76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = numberFormat4.format((java.lang.Object) parsePosition67, stringBuffer75, fieldPosition76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "TWD");
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str29, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + category46 + "' != '" + java.util.Locale.Category.FORMAT + "'", category46.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category52 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category52.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "kor" + "'", str54, "kor");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str68, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test11113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11113");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((-4400.0d), (long) 59, (long) (-1789569));
    }

    @Test
    public void test11114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11114");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        numberFormat5.setMinimumFractionDigits(2147483647);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale9);
        boolean boolean11 = numberFormat5.equals((java.lang.Object) locale9);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) 'a');
        java.lang.String str15 = parsePosition14.toString();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.clear();
        java.util.Locale.Builder builder19 = builder18.clear();
        boolean boolean20 = parsePosition14.equals((java.lang.Object) builder19);
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale26 = java.util.Locale.getDefault(category21);
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale26);
        boolean boolean29 = parsePosition14.equals((java.lang.Object) locale26);
        java.lang.Object obj30 = numberFormat5.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=0,endIndex=0]", parsePosition14);
        numberFormat5.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str15, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test11115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11115");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Currency currency3 = numberFormat1.getCurrency();
        numberFormat1.setMinimumFractionDigits((int) (short) -1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        numberFormat10.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str14 = numberFormat10.format((double) 0.0f);
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        int int20 = numberFormat19.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19);
        java.text.NumberFormat numberFormat22 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10, numberFormat19, numberFormat22);
        java.math.RoundingMode roundingMode24 = numberFormat10.getRoundingMode();
        numberFormat1.setRoundingMode(roundingMode24);
        numberFormat1.setMinimumFractionDigits((int) (short) 10);
        java.util.Currency currency28 = numberFormat1.getCurrency();
        numberFormat1.setMinimumIntegerDigits((int) (byte) -1);
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat34 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale33);
        numberFormat36.setMinimumIntegerDigits(0);
        int int39 = numberFormat36.getMaximumFractionDigits();
        boolean boolean40 = numberFormat36.isParseIntegerOnly();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getCurrencyInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat44.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition47);
        java.lang.Object obj49 = numberFormat36.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition47);
        int int50 = parsePosition47.getErrorIndex();
        java.lang.Object obj51 = numberFormat1.parseObject("java.text.ParsePosition[index=0,errorIndex=10]", parsePosition47);
        java.lang.Class<?> wildcardClass52 = numberFormat1.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "XXX");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0%" + "'", str14, "0%");
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNull(fraction48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test11116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11116");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = locale9.getDisplayLanguage(locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale11);
        java.lang.String str15 = locale11.getDisplayLanguage();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder19 = builder16.setVariant("");
        java.util.Locale.Builder builder21 = builder19.setLanguage("Japan");
        java.util.Locale.Builder builder24 = builder19.setExtension('a', "TWN");
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        boolean boolean28 = numberFormat26.equals((java.lang.Object) locale27);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale30);
        java.lang.String str34 = locale27.getDisplayVariant(locale30);
        java.lang.String str35 = locale27.getDisplayCountry();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale27);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale27);
        java.util.Locale.Builder builder38 = builder24.setLocale(locale27);
        java.util.Locale locale41 = new java.util.Locale("eng", "\ub300\ub9cc");
        java.lang.String str42 = locale27.getDisplayName(locale41);
        java.lang.String str43 = locale11.getDisplayLanguage(locale41);
        java.util.Locale.setDefault(category0, locale41);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinesisch" + "'", str12, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str15, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(builder38);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "German" + "'", str43, "German");
    }

    @Test
    public void test11117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11117");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(32, (int) (byte) -21);
    }

    @Test
    public void test11118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11118");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getLanguage();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test11119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11119");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) 10000L, 0);
    }

    @Test
    public void test11120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11120");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.setUnicodeLocaleKeyword("English (11,700%,zho)", "17 / 1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: English (11,700%,zho) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11121");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setParseIntegerOnly(false);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test11122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11122");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        int int9 = numberFormat8.getMinimumIntegerDigits();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        java.lang.String str13 = numberFormat8.format((double) (-120L));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-120" + "'", str13, "-120");
    }

    @Test
    public void test11123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11123");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale16.getDisplayLanguage(locale20);
        java.lang.String str25 = locale16.getDisplayName();
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale27 = java.util.Locale.getDefault(category0);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str14, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str25, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
    }

    @Test
    public void test11124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11124");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale5 = new java.util.Locale("java.text.parseexception: zh_tw", "java.text.FieldPosition[field=100,attribute=null,beginIndex=0,endIndex=0]", "anglais");
        java.lang.String str6 = locale0.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.lang.String str14 = locale9.getDisplayScript(locale12);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale15);
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = locale21.getDisplayCountry(locale22);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = locale25.getDisplayCountry(locale27);
        java.lang.String str29 = locale22.getDisplayName(locale27);
        java.lang.String str30 = locale27.getScript();
        java.lang.String str31 = locale15.getDisplayVariant(locale27);
        java.lang.String str32 = locale12.getDisplayScript(locale15);
        java.lang.String str33 = locale5.getDisplayVariant(locale15);
        java.lang.String str34 = locale15.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jpn" + "'", str1, "jpn");
        org.junit.Assert.assertEquals(locale5.toString(), "java.text.parseexception: zh_tw_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=0,ENDINDEX=0]_anglais");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Japanese (Japan)" + "'", str6, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ub300\ub9cc" + "'", str11, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Japan" + "'", str24, "Japan");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str26, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Taiwan" + "'", str28, "Taiwan");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "anglais" + "'", str33, "anglais");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
    }

    @Test
    public void test11125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11125");
        java.util.Locale locale2 = new java.util.Locale("", "Chinese (Taiwan)");
        java.lang.String str3 = locale2.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale2.getUnicodeLocaleType("java.text.ParsePosition[index=59,errorIndex=1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.text.ParsePosition[index=59,errorIndex=1]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_CHINESE (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test11126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11126");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 1);
        long long2 = fraction1.longValue();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale.setDefault(category3, locale4);
        java.lang.String str7 = locale4.getDisplayVariant();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat8);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        properFractionFormat13.setWholeFormat(numberFormat15);
        java.text.NumberFormat numberFormat18 = properFractionFormat13.getWholeFormat();
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number22 = numberFormat18.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition21);
        parsePosition21.setErrorIndex(0);
        int int25 = parsePosition21.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction26 = fractionFormat9.parse("59,999%", parsePosition21);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction1.divide(fraction26);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNull(number22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
    }

    @Test
    public void test11127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11127");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        numberFormat3.setMinimumFractionDigits(1);
        java.math.RoundingMode roundingMode9 = numberFormat3.getRoundingMode();
        numberFormat3.setMinimumIntegerDigits(117);
        java.lang.Object obj12 = numberFormat3.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode9.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test11128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11128");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale12);
        java.util.Locale locale17 = new java.util.Locale("cor\351en", "en");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.lang.String str19 = locale9.getDisplayScript(locale17);
        java.util.Locale locale20 = locale9.stripExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh-TW" + "'", str10, "zh-TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese" + "'", str14, "Chinese");
        org.junit.Assert.assertEquals(locale17.toString(), "cor\351en_EN");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
    }

    @Test
    public void test11129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11129");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        org.apache.commons.math.fraction.Fraction fraction17 = fractionFormat15.parse("600");
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction30 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        long long41 = fraction39.longValue();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction35.multiply(fraction39);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction22.multiply(fraction42);
        int int44 = fraction42.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction17.add(fraction42);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction42.reciprocal();
        int int47 = fraction42.getDenominator();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14400 + "'", int47 == 14400);
    }

    @Test
    public void test11130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11130");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale3.getUnicodeLocaleType("-2");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: -2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test11131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11131");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        numberFormat1.setMaximumFractionDigits(100);
        java.lang.String str6 = numberFormat1.format((long) 100);
        int int7 = numberFormat1.getMaximumFractionDigits();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.setVariant("");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        boolean boolean13 = numberFormat1.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder15 = builder11.setRegion("");
        java.util.Locale.Builder builder16 = builder11.clear();
        java.util.Locale locale17 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setLanguage("java.text.ParseException: 172,800,000%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: java.text.ParseException: 172,800,000% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10,000%" + "'", str6, "10,000%");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
    }

    @Test
    public void test11132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11132");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder5.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale10 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder5.setScript("java.text.ParsePosition[index=1,errorIndex=-14400]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: java.text.ParsePosition[index=1,errorIndex=-14400] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "france__#u-fra");
    }

    @Test
    public void test11133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11133");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getVariant();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setScript("");
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder10 = builder5.setLocale(locale6);
        java.lang.String str11 = locale0.getDisplayVariant(locale6);
        java.lang.String str12 = locale6.getScript();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale6);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale18);
        java.util.Locale.setDefault(category16, locale18);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category16, locale21);
        java.lang.String str23 = locale15.getDisplayLanguage(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        boolean boolean25 = locale21.hasExtensions();
        java.lang.String str26 = locale21.getCountry();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale21);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29, numberFormat31);
        boolean boolean33 = numberFormat31.isGroupingUsed();
        boolean boolean34 = numberFormat31.isGroupingUsed();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj38 = numberFormat31.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition37);
        numberFormat31.setGroupingUsed(false);
        int int41 = numberFormat31.getMinimumIntegerDigits();
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency43 = numberFormat42.getCurrency();
        java.lang.String str45 = numberFormat42.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.text.NumberFormat numberFormat47 = properFractionFormat46.getWholeFormat();
        numberFormat47.setParseIntegerOnly(false);
        java.util.Locale locale53 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        numberFormat54.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str58 = numberFormat54.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54);
        java.lang.String str61 = numberFormat54.format((long) 600);
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale62);
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54, numberFormat63);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31, numberFormat47, numberFormat54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat27, numberFormat54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Chinesisch" + "'", str9, "Chinesisch");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "anglais" + "'", str23, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CA" + "'", str26, "CA");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100 %" + "'", str45, "100 %");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0%" + "'", str58, "0%");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "60,000%" + "'", str61, "60,000%");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat63);
    }

    @Test
    public void test11134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11134");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.add(fraction15);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.divide(fraction21);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = locale24.getScript();
        boolean boolean27 = fraction23.equals((java.lang.Object) locale24);
        boolean boolean28 = parsePosition5.equals((java.lang.Object) boolean27);
        java.lang.Object obj29 = numberFormat2.parseObject("zh_tw", parsePosition5);
        java.lang.String str30 = parsePosition5.toString();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale31.getScript();
        java.util.Locale locale36 = new java.util.Locale("\uc911\uad6d\uc5b4", "", "Taiwan");
        java.lang.String str37 = locale36.getDisplayCountry();
        java.lang.String str38 = locale31.getDisplayName(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale31);
        boolean boolean40 = parsePosition5.equals((java.lang.Object) fractionFormat39);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getIntegerInstance(locale42);
        java.util.Locale locale45 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat46 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale45);
        java.lang.String str48 = fractionFormat46.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat49 = fractionFormat46.getNumeratorFormat();
        numberFormat49.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency52 = numberFormat49.getCurrency();
        numberFormat43.setCurrency(currency52);
        java.lang.Object obj54 = numberFormat43.clone();
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency57 = numberFormat56.getCurrency();
        java.lang.String str59 = numberFormat56.format(1.0d);
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getInstance(locale61);
        java.util.Currency currency64 = numberFormat63.getCurrency();
        numberFormat63.setMinimumIntegerDigits(1);
        numberFormat63.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj72 = numberFormat63.parseObject("Japan", parsePosition71);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException76 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str77 = fractionConversionException76.getPattern();
        java.lang.Throwable[] throwableArray78 = fractionConversionException76.getSuppressed();
        java.lang.Object[] objArray79 = fractionConversionException76.getArguments();
        boolean boolean80 = parsePosition71.equals((java.lang.Object) objArray79);
        int int81 = parsePosition71.getIndex();
        java.lang.String str82 = parsePosition71.toString();
        java.lang.Object obj83 = numberFormat56.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition71);
        int int84 = parsePosition71.getIndex();
        java.lang.Number number85 = numberFormat43.parse("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 97 to fraction after 0 iterations", parsePosition71);
        java.lang.Object obj86 = fractionFormat39.parseObject("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 10 to fraction after 0 iterations", parsePosition71);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.ParsePosition[index=100,errorIndex=100]" + "'", str30, "java.text.ParsePosition[index=100,errorIndex=100]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(locale36.toString(), "\uc911\uad6d\uc5b4__Taiwan");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Korean" + "'", str38, "Korean");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100 0 / 1" + "'", str48, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(currency52);
        org.junit.Assert.assertEquals(currency52.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "100 %" + "'", str59, "100 %");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(currency64);
        org.junit.Assert.assertEquals(currency64.toString(), "TWD");
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str77, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str82, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNull(number85);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test11135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11135");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        java.lang.String str26 = parsePosition24.toString();
        java.lang.Object obj27 = fractionFormat15.parseObject("\uc911\uad6d\uc5b4", parsePosition24);
        org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat0.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition24);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale.setDefault(locale29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale29);
        properFractionFormat0.setDenominatorFormat(numberFormat33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale35.getDisplayScript(locale37);
        java.lang.String str40 = locale35.toLanguageTag();
        java.util.Set<java.lang.String> strSet41 = locale35.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.text.NumberFormat numberFormat43 = fractionFormat42.getDenominatorFormat();
        properFractionFormat0.setWholeFormat(numberFormat43);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder45.setScript("");
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.lang.String str50 = locale48.toLanguageTag();
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale51.getISO3Language();
        java.lang.String str54 = locale48.getDisplayScript(locale51);
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.lang.String str56 = locale48.getDisplayCountry(locale55);
        java.util.Locale.Builder builder57 = builder45.setLocale(locale55);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayScript();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale60.getISO3Language();
        java.lang.String str62 = locale58.getDisplayScript(locale60);
        java.lang.String str63 = locale58.toLanguageTag();
        java.lang.String str64 = locale58.getDisplayVariant();
        java.lang.String str65 = locale58.getVariant();
        java.util.Locale.Builder builder66 = builder57.setLocale(locale58);
        java.util.Locale locale67 = locale58.stripExtensions();
        java.text.NumberFormat numberFormat68 = java.text.NumberFormat.getInstance(locale58);
        properFractionFormat0.setWholeFormat(numberFormat68);
        java.text.NumberFormat numberFormat70 = properFractionFormat0.getWholeFormat();
        java.lang.String str72 = numberFormat70.format((long) 2);
        numberFormat70.setGroupingUsed(false);
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(fraction28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str30, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "und" + "'", str40, "und");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u6587" + "'", str49, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh-TW" + "'", str50, "zh-TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zho" + "'", str53, "zho");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Taiwan" + "'", str56, "Taiwan");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "kor" + "'", str61, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "und" + "'", str63, "und");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat68);
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2" + "'", str72, "2");
    }

    @Test
    public void test11136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11136");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder5 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("English (11,700%,zho)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: English (11,700%,zho) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test11137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11137");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale0.getDisplayVariant(locale7);
        java.lang.String str12 = locale0.getVariant();
        java.lang.String str13 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test11138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11138");
        java.text.ParseException parseException2 = new java.text.ParseException("1 / 1", 52);
        int int3 = parseException2.getErrorOffset();
        int int4 = parseException2.getErrorOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
    }

    @Test
    public void test11139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11139");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-17), (-92));
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test11140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11140");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        numberFormat2.setMinimumIntegerDigits((int) (byte) 0);
        int int8 = numberFormat2.getMaximumFractionDigits();
        java.util.Currency currency9 = numberFormat2.getCurrency();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayScript();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale10.getDisplayScript(locale12);
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet16 = locale12.getUnicodeLocaleKeys();
        java.lang.String str17 = locale12.toLanguageTag();
        java.lang.String str18 = locale12.getDisplayLanguage();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.text.AttributedCharacterIterator attributedCharacterIterator24 = numberFormat21.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj25 = numberFormat21.clone();
        numberFormat21.setMaximumFractionDigits(2147483647);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj37 = numberFormat32.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition36);
        java.lang.String str38 = parsePosition36.toString();
        java.lang.Number number39 = numberFormat21.parse("\ud55c\uad6d\uc5b4", parsePosition36);
        numberFormat21.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat19, numberFormat21);
        java.text.NumberFormat numberFormat43 = properFractionFormat42.getWholeFormat();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayScript();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale46.getISO3Language();
        java.lang.String str48 = locale44.getDisplayScript(locale46);
        java.util.Set<java.lang.String> strSet49 = locale46.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet50 = locale46.getUnicodeLocaleKeys();
        java.lang.String str51 = locale46.toLanguageTag();
        java.lang.String str52 = locale46.getDisplayLanguage();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance(locale46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43, numberFormat53);
        int int55 = numberFormat53.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode56 = numberFormat53.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "TWD");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko" + "'", str17, "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u97d3\u6587" + "'", str18, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(attributedCharacterIterator24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str38, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number39);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "kor" + "'", str47, "kor");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ko" + "'", str51, "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u97d3\u6587" + "'", str52, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode56 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode56.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11141");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        parsePosition7.setIndex(119);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        boolean boolean14 = parsePosition7.equals((java.lang.Object) category11);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale18);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.util.Locale.setDefault(category11, locale18);
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.clear();
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale29.getISO3Country();
        java.util.Locale.Builder builder33 = builder27.setLocale(locale29);
        java.util.Locale.Builder builder34 = builder33.clear();
        java.util.Locale locale35 = builder34.build();
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "France" + "'", str22, "France");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test11142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11142");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) 'a');
        java.lang.String str2 = parsePosition1.toString();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder6 = builder5.clear();
        boolean boolean7 = parsePosition1.equals((java.lang.Object) builder6);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale.setDefault(category8, locale10);
        java.util.Locale locale13 = java.util.Locale.getDefault(category8);
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean16 = parsePosition1.equals((java.lang.Object) locale13);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayScript();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.lang.String str21 = locale17.getDisplayScript(locale19);
        java.lang.String str22 = locale17.toLanguageTag();
        java.util.Set<java.lang.String> strSet23 = locale17.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.text.NumberFormat numberFormat25 = fractionFormat24.getDenominatorFormat();
        int int26 = numberFormat25.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.text.NumberFormat.Field field29 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition((java.text.Format.Field) field29);
        int int31 = fieldPosition30.getEndIndex();
        int int32 = fieldPosition30.getField();
        java.lang.String str33 = fieldPosition30.toString();
        java.text.Format.Field field34 = fieldPosition30.getFieldAttribute();
        int int35 = fieldPosition30.getField();
        fieldPosition30.setEndIndex(52);
        int int38 = fieldPosition30.getBeginIndex();
        java.text.Format.Field field39 = fieldPosition30.getFieldAttribute();
        java.text.Format.Field field40 = fieldPosition30.getFieldAttribute();
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        numberFormat45.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str49 = numberFormat45.format((double) 0.0f);
        java.util.Locale locale53 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        int int55 = numberFormat54.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat54);
        java.text.NumberFormat numberFormat57 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45, numberFormat54, numberFormat57);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException61 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean62 = numberFormat54.equals((java.lang.Object) 10);
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getInstance(locale63);
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat66 = java.text.NumberFormat.getPercentInstance(locale65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = new org.apache.commons.math.fraction.FractionFormat(numberFormat64, numberFormat66);
        int int68 = numberFormat64.getMaximumIntegerDigits();
        java.util.Locale locale69 = java.util.Locale.JAPAN;
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = locale70.getDisplayScript();
        java.lang.String str72 = locale69.getDisplayCountry(locale70);
        java.util.Set<java.lang.String> strSet73 = locale70.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getIntegerInstance(locale70);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getInstance(locale70);
        java.util.Set<java.lang.Character> charSet76 = locale70.getExtensionKeys();
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getIntegerInstance(locale70);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54, numberFormat64, numberFormat77);
        java.util.Locale locale80 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat81 = java.text.NumberFormat.getCurrencyInstance(locale80);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat81);
        java.text.ParsePosition parsePosition85 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction86 = properFractionFormat82.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition85);
        org.apache.commons.math.fraction.Fraction fraction87 = properFractionFormat78.parse("java.text.NumberFormat$Field(exponent symbol)", parsePosition85);
        boolean boolean88 = field40.equals((java.lang.Object) parsePosition85);
        java.lang.Object obj89 = numberFormat25.parseObject("214,748,364,700", parsePosition85);
        boolean boolean90 = numberFormat25.isGroupingUsed();
        boolean boolean91 = parsePosition1.equals((java.lang.Object) boolean90);
        java.lang.String str92 = parsePosition1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(field29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str33, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(field39);
        org.junit.Assert.assertNotNull(field40);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0%" + "'", str49, "0%");
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2147483647 + "'", int55 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Japan" + "'", str72, "Japan");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat81);
        org.junit.Assert.assertNull(fraction86);
        org.junit.Assert.assertNull(fraction87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + 14748364700L + "'", obj89, 14748364700L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str92, "java.text.ParsePosition[index=97,errorIndex=-1]");
    }

    @Test
    public void test11143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11143");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getWholeFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction24 = properFractionFormat7.parse("DEU");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"DEU\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
    }

    @Test
    public void test11144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11144");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale36 = locale12.stripExtensions();
        java.lang.String str37 = locale9.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale39.getDisplayLanguage(locale41);
        java.util.Set<java.lang.String> strSet43 = locale41.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale41);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        java.util.Locale.setDefault(category0, locale41);
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale47.getDisplayLanguage(locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        java.lang.String str52 = locale41.getDisplayName(locale49);
        java.lang.Object obj53 = locale49.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1 / 1" + "'", str37, "1 / 1");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinesisch" + "'", str42, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinesisch" + "'", str50, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Deutsch (Deutschland)" + "'", str52, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "de_DE");
    }

    @Test
    public void test11145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11145");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.lang.String str13 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale.setDefault(locale0);
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat14);
    }

    @Test
    public void test11146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11146");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        java.lang.String str18 = parsePosition16.toString();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction21 = properFractionFormat7.parse("java.text.ParseException: zh_TW", parsePosition16);
        java.text.NumberFormat numberFormat22 = properFractionFormat7.getWholeFormat();
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition(119);
        int int26 = parsePosition25.getIndex();
        java.lang.Object obj27 = null;
        boolean boolean28 = parsePosition25.equals(obj27);
        java.lang.Object obj29 = numberFormat22.parseObject("zh_tw", parsePosition25);
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        numberFormat22.setRoundingMode(roundingMode42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number45 = numberFormat22.parse("000000000000000000000000000000000000000000000000000000000000000000000000000000000001000%");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"000000000000000000000000000000000000000000000000000000000000000000000000000000000001000%\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(fraction21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 119 + "'", int26 == 119);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11147");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode6 = numberFormat4.getRoundingMode();
        boolean boolean7 = numberFormat4.isGroupingUsed();
        int int8 = numberFormat4.getMinimumFractionDigits();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.text.NumberFormat numberFormat11 = fractionFormat10.getDenominatorFormat();
        numberFormat11.setMinimumIntegerDigits(1728000);
        boolean boolean14 = numberFormat11.isGroupingUsed();
        numberFormat11.setMaximumFractionDigits((int) (short) -14400);
        java.lang.String str18 = numberFormat11.format((double) (byte) 100);
        boolean boolean19 = numberFormat11.isParseIntegerOnly();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getPercentInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = new org.apache.commons.math.fraction.FractionFormat(numberFormat21, numberFormat23);
        numberFormat23.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field28 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field28);
        java.lang.String str30 = fieldPosition29.toString();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = locale31.getDisplayName(locale32);
        boolean boolean35 = fieldPosition29.equals((java.lang.Object) locale32);
        fieldPosition29.setEndIndex((int) '#');
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction44 = properFractionFormat40.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition43);
        boolean boolean45 = fieldPosition29.equals((java.lang.Object) parsePosition43);
        java.lang.Number number46 = numberFormat23.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition43);
        java.lang.String str48 = numberFormat23.format((long) '#');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat49 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat11, numberFormat23);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode6 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode6.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100" + "'", str18, "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(field28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str30, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (Taiwan)" + "'", str34, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNull(fraction44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "3,500.0000000000000000000000000000000000000000000000000000%" + "'", str48, "3,500.0000000000000000000000000000000000000000000000000000%");
    }

    @Test
    public void test11148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11148");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        numberFormat4.setParseIntegerOnly(false);
        numberFormat4.setMinimumFractionDigits((-1));
        numberFormat4.setMinimumIntegerDigits(7);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(51);
        java.lang.Number number15 = numberFormat4.parse("-1 / 60", parsePosition14);
        java.lang.String str16 = parsePosition14.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(number15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=51,errorIndex=51]" + "'", str16, "java.text.ParsePosition[index=51,errorIndex=51]");
    }

    @Test
    public void test11149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11149");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        parsePosition7.setIndex(119);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        boolean boolean14 = parsePosition7.equals((java.lang.Object) category11);
        java.util.Locale locale17 = new java.util.Locale("Chinese", "java.text.parseposition[index=35,errorindex=600]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.util.Locale.setDefault(category11, locale17);
        java.util.Locale locale20 = java.util.Locale.getDefault(category11);
        java.lang.String str21 = locale20.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(locale17.toString(), "chinese_JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "chinese_JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test11150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11150");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale locale11 = builder10.build();
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        numberFormat15.setMaximumFractionDigits(100);
        java.lang.String str20 = numberFormat15.format((long) 100);
        int int21 = numberFormat15.getMaximumFractionDigits();
        numberFormat15.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat26 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        boolean boolean33 = numberFormat32.isGroupingUsed();
        properFractionFormat30.setWholeFormat(numberFormat32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15, numberFormat25, numberFormat32);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale37);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = new org.apache.commons.math.fraction.FractionFormat(numberFormat38, numberFormat40);
        numberFormat40.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field45 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition46 = new java.text.FieldPosition((java.text.Format.Field) field45);
        java.lang.String str47 = fieldPosition46.toString();
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.lang.String str51 = locale48.getDisplayName(locale49);
        boolean boolean52 = fieldPosition46.equals((java.lang.Object) locale49);
        fieldPosition46.setEndIndex((int) '#');
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getCurrencyInstance(locale55);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat56);
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction61 = properFractionFormat57.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition60);
        boolean boolean62 = fieldPosition46.equals((java.lang.Object) parsePosition60);
        java.lang.Number number63 = numberFormat40.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition60);
        org.apache.commons.math.fraction.Fraction fraction66 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.negate();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.abs();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction67.abs();
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getInstance(locale70);
        java.util.Locale locale72 = java.util.Locale.getDefault();
        boolean boolean73 = numberFormat71.equals((java.lang.Object) locale72);
        boolean boolean74 = fraction69.equals((java.lang.Object) locale72);
        boolean boolean75 = parsePosition60.equals((java.lang.Object) locale72);
        java.lang.Object obj76 = properFractionFormat35.parseObject("\uc911\uad6d\uc5b4", parsePosition60);
        parsePosition60.setIndex(59);
        org.apache.commons.math.fraction.Fraction fraction79 = fractionFormat12.parse("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=1]", parsePosition60);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "10,000%" + "'", str20, "10,000%");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(field45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str47, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Chinese (Taiwan)" + "'", str51, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNull(fraction61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(number63);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(fraction79);
    }

    @Test
    public void test11151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11151");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        boolean boolean4 = numberFormat2.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(2);
        java.lang.Object obj9 = properFractionFormat5.parseObject("java.text.ParsePosition[index=97,errorIndex=97]", parsePosition8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        boolean boolean15 = numberFormat13.isGroupingUsed();
        java.lang.String str17 = numberFormat13.format((double) 100);
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((int) 'x');
        java.lang.String str21 = fieldPosition20.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer22 = properFractionFormat5.format((java.lang.Object) str17, stringBuffer18, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10,000%" + "'", str17, "10,000%");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.FieldPosition[field=120,attribute=null,beginIndex=0,endIndex=0]" + "'", str21, "java.text.FieldPosition[field=120,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11152");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.lang.String str13 = locale7.getDisplayName(locale10);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale16.getISO3Language();
        java.lang.String str18 = locale14.getDisplayScript(locale16);
        java.lang.String str19 = locale7.getDisplayLanguage(locale16);
        java.lang.String str20 = locale7.toLanguageTag();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale7);
        int int22 = numberFormat21.getMinimumFractionDigits();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Currency currency37 = numberFormat36.getCurrency();
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42);
        numberFormat42.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode47 = numberFormat42.getRoundingMode();
        numberFormat36.setRoundingMode(roundingMode47);
        java.math.RoundingMode roundingMode49 = numberFormat36.getRoundingMode();
        numberFormat36.setMaximumFractionDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat36);
        int int53 = numberFormat36.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese (Taiwan)" + "'", str13, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str19, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-TW" + "'", str20, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (Taiwan)" + "'", str29, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str35, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "TWD");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode49 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode49.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test11153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11153");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.FilteringMode filteringMode8 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet6, filteringMode8);
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleKeys();
        boolean boolean13 = locale10.hasExtensions();
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet14, filteringMode15);
        java.util.Collection<java.lang.String> strCollection17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList1, strCollection17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + filteringMode8 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode8.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + filteringMode15 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode15.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test11154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11154");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.lang.Object obj5 = numberFormat3.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str14 = fractionFormat12.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat15 = fractionFormat12.getNumeratorFormat();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale16.getDisplayName(locale19);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale16.getDisplayLanguage(locale25);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale16);
        fractionFormat12.setNumeratorFormat(numberFormat29);
        properFractionFormat9.setWholeFormat(numberFormat29);
        fractionFormat6.setNumeratorFormat(numberFormat29);
        java.lang.String str34 = numberFormat29.format((-1.0d));
        boolean boolean35 = numberFormat1.equals((java.lang.Object) numberFormat29);
        java.lang.Object obj36 = numberFormat1.clone();
        int int37 = numberFormat1.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Currency currency39 = numberFormat1.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 0 / 1" + "'", str14, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese (Taiwan)" + "'", str22, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str28, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2147483647 + "'", int37 == 2147483647);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "TWD");
    }

    @Test
    public void test11155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11155");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction8.abs();
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction14.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction8.add(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction17.divide(fraction20);
        int int23 = fraction17.intValue();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction17.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction4.add(fraction17);
        float float27 = fraction4.floatValue();
        int int28 = fraction4.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction32.abs();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getInstance(locale35);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        boolean boolean38 = numberFormat36.equals((java.lang.Object) locale37);
        boolean boolean39 = fraction34.equals((java.lang.Object) locale37);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction34.abs();
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat42 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale41);
        boolean boolean43 = fraction40.equals((java.lang.Object) locale41);
        java.lang.Object obj44 = null;
        boolean boolean45 = fraction40.equals(obj44);
        double double46 = fraction40.doubleValue();
        boolean boolean47 = fraction4.equals((java.lang.Object) double46);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + (-1.0f) + "'", float27 == (-1.0f));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.008333333333333333d + "'", double46 == 0.008333333333333333d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test11156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11156");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        boolean boolean11 = numberFormat9.equals((java.lang.Object) strArray10);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        int int17 = numberFormat16.getMaximumIntegerDigits();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        boolean boolean20 = numberFormat19.isGroupingUsed();
        java.util.Currency currency21 = numberFormat19.getCurrency();
        numberFormat16.setCurrency(currency21);
        java.util.Currency currency23 = numberFormat16.getCurrency();
        java.math.RoundingMode roundingMode24 = numberFormat16.getRoundingMode();
        numberFormat9.setRoundingMode(roundingMode24);
        boolean boolean26 = numberFormat9.isParseIntegerOnly();
        properFractionFormat4.setWholeFormat(numberFormat9);
        java.text.NumberFormat numberFormat28 = properFractionFormat4.getDenominatorFormat();
        java.text.NumberFormat numberFormat29 = properFractionFormat4.getNumeratorFormat();
        java.text.NumberFormat numberFormat30 = properFractionFormat4.getNumeratorFormat();
        numberFormat30.setParseIntegerOnly(false);
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
        org.junit.Assert.assertEquals(currency1.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2147483647 + "'", int17 == 2147483647);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
    }

    @Test
    public void test11157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11157");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale10.getISO3Language();
        java.lang.String str13 = locale10.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale10);
        java.lang.String str16 = locale3.getDisplayScript(locale10);
        java.lang.String str17 = locale0.getDisplayName(locale10);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getDisplayCountry();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale18.getDisplayCountry(locale20);
        java.lang.String str24 = locale20.getISO3Country();
        java.lang.String str25 = locale20.getDisplayLanguage();
        java.lang.String str26 = locale10.getDisplayVariant(locale20);
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale20);
        java.lang.String str28 = locale20.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jpn" + "'", str1, "jpn");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str17, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str22, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CAN" + "'", str24, "CAN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u82f1\u6587" + "'", str25, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u52a0\u62ff\u5927" + "'", str28, "\u52a0\u62ff\u5927");
    }

    @Test
    public void test11158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11158");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str2 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11159");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        boolean boolean6 = numberFormat4.equals((java.lang.Object) strArray5);
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        int int12 = numberFormat11.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        java.util.Currency currency16 = numberFormat14.getCurrency();
        numberFormat11.setCurrency(currency16);
        java.util.Currency currency18 = numberFormat11.getCurrency();
        java.math.RoundingMode roundingMode19 = numberFormat11.getRoundingMode();
        numberFormat4.setRoundingMode(roundingMode19);
        boolean boolean21 = numberFormat4.isParseIntegerOnly();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Set<java.lang.Character> charSet24 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale22.getDisplayVariant(locale25);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale22);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat28);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = new org.apache.commons.math.fraction.FractionFormat(numberFormat32, numberFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj39 = numberFormat34.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition38);
        java.lang.String str40 = parsePosition38.toString();
        boolean boolean42 = parsePosition38.equals((java.lang.Object) "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.apache.commons.math.fraction.Fraction fraction43 = properFractionFormat29.parse("java.text.ParseException: zh_TW", parsePosition38);
        java.text.NumberFormat numberFormat44 = properFractionFormat29.getWholeFormat();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance();
        numberFormat45.setMaximumIntegerDigits(2147483647);
        int int48 = numberFormat45.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field49 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((java.text.Format.Field) field49);
        int int51 = fieldPosition50.getBeginIndex();
        boolean boolean52 = numberFormat45.equals((java.lang.Object) int51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat44, numberFormat45);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getIntegerInstance(locale54);
        java.lang.String str57 = numberFormat55.format(0.0d);
        properFractionFormat53.setNumeratorFormat(numberFormat55);
        java.text.NumberFormat numberFormat59 = properFractionFormat53.getWholeFormat();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat61 = fractionFormat60.getNumeratorFormat();
        java.text.NumberFormat numberFormat62 = fractionFormat60.getNumeratorFormat();
        properFractionFormat53.setDenominatorFormat(numberFormat62);
        java.text.NumberFormat numberFormat64 = properFractionFormat53.getWholeFormat();
        int int65 = numberFormat64.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode19 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode19.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "kor" + "'", str23, "kor");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str40, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(fraction43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2147483647 + "'", int48 == 2147483647);
        org.junit.Assert.assertNotNull(field49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(fractionFormat60);
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test11160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11160");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale16 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale23 = java.util.Locale.getDefault(category18);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale.setDefault(category18, locale25);
        java.util.Locale locale29 = java.util.Locale.getDefault(category18);
        java.util.Locale locale30 = java.util.Locale.getDefault(category18);
        java.util.Locale locale34 = new java.util.Locale("119", "2,857", "ita");
        java.util.Locale.setDefault(category18, locale34);
        java.util.Locale.setDefault(category0, locale34);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale34);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        int int50 = numberFormat42.getMaximumFractionDigits();
        java.lang.Object obj51 = numberFormat42.clone();
        java.lang.Object obj52 = numberFormat42.clone();
        java.lang.Object obj54 = numberFormat42.parseObject("-100%");
        numberFormat42.setMaximumFractionDigits(3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat42);
        java.util.Locale.Category category58 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale59.getISO3Language();
        java.util.Locale.setDefault(category58, locale59);
        java.lang.String str62 = locale59.getDisplayVariant();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getIntegerInstance(locale59);
        numberFormat63.setMaximumIntegerDigits((int) (byte) 0);
        properFractionFormat57.setDenominatorFormat(numberFormat63);
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance();
        numberFormat67.setMaximumIntegerDigits(2147483647);
        int int70 = numberFormat67.getMaximumIntegerDigits();
        java.text.NumberFormat.Field field71 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition72 = new java.text.FieldPosition((java.text.Format.Field) field71);
        int int73 = fieldPosition72.getBeginIndex();
        boolean boolean74 = numberFormat67.equals((java.lang.Object) int73);
        properFractionFormat57.setWholeFormat(numberFormat67);
        java.text.NumberFormat numberFormat76 = properFractionFormat57.getWholeFormat();
        boolean boolean77 = numberFormat37.equals((java.lang.Object) numberFormat76);
        numberFormat76.setMinimumIntegerDigits((int) (short) 14400);
        java.lang.String str81 = numberFormat76.format((long) (short) -1);
        boolean boolean82 = numberFormat76.isGroupingUsed();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "chinese_JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals(locale16.toString(), "119_2,857_ita");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals(locale34.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals("'" + obj54 + "' != '" + (-1L) + "'", obj54, (-1L));
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category58.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "kor" + "'", str60, "kor");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2147483647 + "'", int70 == 2147483647);
        org.junit.Assert.assertNotNull(field71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100%" + "'", str81, "-000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100%");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test11161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11161");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale3 = new java.util.Locale("English");
        java.lang.String str4 = locale0.getDisplayCountry(locale3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale3);
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean8 = field6.equals((java.lang.Object) field7);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field6, 60);
        boolean boolean11 = numberFormat5.equals((java.lang.Object) field6);
        int int12 = numberFormat5.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ub3c5\uc77c" + "'", str1, "\ub3c5\uc77c");
        org.junit.Assert.assertEquals(locale3.toString(), "english");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Germany" + "'", str4, "Germany");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test11162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11162");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Collection<java.lang.String> strCollection6 = null;
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList9, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("zh-TW", strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList14, strMap17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet23);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strMap37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strMap39);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList49);
        java.util.Locale.FilteringMode filteringMode52 = null;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList49, filteringMode52);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strMap60);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList61, strMap62);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.lang.String>) strList69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList61, (java.util.Collection<java.lang.String>) strList69, filteringMode72);
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Locale locale77 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet78 = locale77.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.lang.String>) strSet78);
        java.util.Collection<java.lang.String> strCollection80 = null;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, strCollection80);
        java.lang.String str82 = java.util.Locale.lookupTag(languageRangeList61, strCollection80);
        java.util.Collection<java.util.Locale> localeCollection83 = null;
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter(languageRangeList61, localeCollection83, filteringMode84);
        java.util.Locale locale86 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList85);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList85);
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter(languageRangeList28, (java.util.Collection<java.util.Locale>) localeList85);
        java.util.Locale locale89 = java.util.Locale.lookup(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList85);
        java.util.Locale locale90 = java.util.Locale.lookup(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList85);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(languageRangeList61);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode72.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNull(locale86);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNull(locale89);
        org.junit.Assert.assertNull(locale90);
    }

    @Test
    public void test11163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11163");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException7 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str8 = fractionConversionException7.getPattern();
        java.lang.Throwable[] throwableArray9 = fractionConversionException7.getSuppressed();
        fractionConversionException3.addSuppressed((java.lang.Throwable) fractionConversionException7);
        java.lang.Object[] objArray11 = fractionConversionException7.getArguments();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException15 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.Object[] objArray16 = fractionConversionException15.getArguments();
        fractionConversionException7.addSuppressed((java.lang.Throwable) fractionConversionException15);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException21 = new org.apache.commons.math.fraction.FractionConversionException((double) 11, (long) 2, (long) 2147483647);
        fractionConversionException7.addSuppressed((java.lang.Throwable) fractionConversionException21);
        java.lang.Throwable[] throwableArray23 = fractionConversionException7.getSuppressed();
        java.lang.Object[] objArray24 = fractionConversionException7.getArguments();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str8, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[0.0, 0, -1]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[0.0, 0, -1]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[0.0, 0, -1]");
    }

    @Test
    public void test11164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11164");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        boolean boolean6 = numberFormat5.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = new org.apache.commons.math.fraction.FractionFormat(numberFormat9, numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj16 = numberFormat11.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition15);
        properFractionFormat7.setNumeratorFormat(numberFormat11);
        int int18 = numberFormat11.getMinimumFractionDigits();
        properFractionFormat3.setWholeFormat(numberFormat11);
        java.text.NumberFormat numberFormat20 = properFractionFormat3.getWholeFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test11165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11165");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj8 = numberFormat3.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition7);
        parsePosition7.setIndex(119);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        boolean boolean14 = parsePosition7.equals((java.lang.Object) category11);
        java.util.Locale locale17 = new java.util.Locale("Chinese", "java.text.parseposition[index=35,errorindex=600]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.util.Locale.setDefault(category11, locale17);
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale17);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "119_2,857_ita");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "119_2,857_ita");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(locale17.toString(), "chinese_JAVA.TEXT.PARSEPOSITION[INDEX=35,ERRORINDEX=600]");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertNotNull(numberFormat21);
    }

    @Test
    public void test11166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11166");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        numberFormat1.setMaximumFractionDigits(2147483647);
        int int8 = numberFormat1.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test11167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11167");
        java.util.Locale locale2 = new java.util.Locale("35 / 1", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (1/1)");
        org.junit.Assert.assertEquals(locale2.toString(), "35 / 1_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (1/1)");
    }

    @Test
    public void test11168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11168");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 147,483,647 to fraction (0/6,000)", (double) (short) 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=17.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11169");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale0);
        boolean boolean7 = numberFormat6.isGroupingUsed();
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        boolean boolean11 = field8.equals((java.lang.Object) locale10);
        java.lang.String str12 = locale10.getCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.text.NumberFormat numberFormat14 = fractionFormat13.getDenominatorFormat();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance();
        numberFormat15.setMaximumIntegerDigits(2147483647);
        int int18 = numberFormat15.getMinimumFractionDigits();
        numberFormat15.setParseIntegerOnly(true);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        java.math.RoundingMode roundingMode23 = numberFormat22.getRoundingMode();
        numberFormat15.setRoundingMode(roundingMode23);
        numberFormat14.setRoundingMode(roundingMode23);
        numberFormat6.setRoundingMode(roundingMode23);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.setScript("");
        java.util.Locale.Builder builder31 = builder29.setLanguage("en");
        java.util.Locale.Builder builder33 = builder31.setVariant("");
        java.util.Locale locale34 = builder31.build();
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = numberFormat6.format((java.lang.Object) strSet35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CN" + "'", str12, "CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + roundingMode23 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode23.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test11170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11170");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.Format.Field field2 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition(field2);
        fieldPosition3.setBeginIndex((int) (byte) 16);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field2);
    }

    @Test
    public void test11171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11171");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder17 = builder14.setExtension('u', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.addUnicodeLocaleAttribute("100% (ZH-TW)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 100% (ZH-TW) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test11172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11172");
        java.util.Locale locale2 = new java.util.Locale("Taiwan", "Chinesisch (Taiwan)");
        java.lang.String str3 = locale2.getDisplayVariant();
        java.lang.String str4 = locale2.getScript();
        java.util.Locale locale8 = new java.util.Locale("zh_TW", "Taiwan", "hi!");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayScript();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale11.getISO3Language();
        java.lang.String str13 = locale9.getDisplayScript(locale11);
        java.lang.String str14 = locale9.toLanguageTag();
        java.lang.String str15 = locale9.getDisplayVariant();
        boolean boolean16 = locale9.hasExtensions();
        java.lang.String str17 = locale8.getDisplayLanguage(locale9);
        java.lang.String str18 = locale8.getCountry();
        java.util.Set<java.lang.Character> charSet19 = locale8.getExtensionKeys();
        java.lang.String str20 = locale2.getDisplayCountry(locale8);
        org.junit.Assert.assertEquals(locale2.toString(), "taiwan_CHINESISCH (TAIWAN)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale8.toString(), "zh_tw_TAIWAN_hi!");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "kor" + "'", str12, "kor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh_tw" + "'", str17, "zh_tw");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "TAIWAN" + "'", str18, "TAIWAN");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CHINESISCH (TAIWAN)" + "'", str20, "CHINESISCH (TAIWAN)");
    }

    @Test
    public void test11173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11173");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str8 = locale0.getVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getNumberInstance(locale0);
        java.lang.String str11 = numberFormat9.format(121.00840336134453d);
        int int12 = numberFormat9.getMaximumIntegerDigits();
        int int13 = numberFormat9.getMinimumIntegerDigits();
        java.lang.Object obj15 = numberFormat9.parseObject("-200%");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc77c\ubcf8" + "'", str5, "\uc77c\ubcf8");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc77c\ubcf8" + "'", str6, "\uc77c\ubcf8");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "121.008" + "'", str11, "121.008");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + (-200L) + "'", obj15, (-200L));
    }

    @Test
    public void test11174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11174");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str17 = locale11.getDisplayScript(locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale11.getDisplayCountry(locale18);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale21.toLanguageTag();
        java.lang.String str27 = locale21.getDisplayVariant();
        java.lang.String str28 = locale21.getVariant();
        java.util.Locale.Builder builder29 = builder20.setLocale(locale21);
        java.util.Locale locale30 = locale21.stripExtensions();
        java.lang.String str31 = locale0.getDisplayName(locale21);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.Object obj33 = numberFormat32.clone();
        java.lang.String str35 = numberFormat32.format(0.6185567010309279d);
        java.util.Currency currency36 = numberFormat32.getCurrency();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str12, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "French (France)" + "'", str31, "French (France)");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(currency36);
        org.junit.Assert.assertEquals(currency36.toString(), "EUR");
    }

    @Test
    public void test11175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11175");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(100);
        fieldPosition1.setBeginIndex((int) (byte) -1);
        java.lang.String str4 = fieldPosition1.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.FieldPosition[field=100,attribute=null,beginIndex=-1,endIndex=0]" + "'", str4, "java.text.FieldPosition[field=100,attribute=null,beginIndex=-1,endIndex=0]");
    }

    @Test
    public void test11176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11176");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("France");
        java.util.Locale.Builder builder10 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=100,ENDINDEX=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=100,ENDINDEX=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test11177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11177");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder0.setUnicodeLocaleKeyword("Chinesisch (China)", "java.text.ParsePosition[index=1,errorIndex=3]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Chinesisch (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str4, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test11178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11178");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction4.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction27 = new org.apache.commons.math.fraction.Fraction((double) 1L);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction25.divide(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction27.reciprocal();
        int int30 = fraction29.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction33.add(fraction40);
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        int int47 = fraction46.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction33.multiply(fraction46);
        org.apache.commons.math.fraction.Fraction fraction49 = fraction29.add(fraction33);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
    }

    @Test
    public void test11179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11179");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale0);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = locale6.getDisplayCountry(locale7);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale10.getDisplayCountry(locale12);
        java.lang.String str14 = locale7.getDisplayName(locale12);
        java.lang.String str15 = locale12.getScript();
        java.lang.String str16 = locale0.getDisplayVariant(locale12);
        java.lang.String str17 = locale0.getVariant();
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.util.Locale.setDefault(category18, locale19);
        java.util.Locale locale22 = java.util.Locale.getDefault(category18);
        java.util.Locale locale23 = java.util.Locale.getDefault(category18);
        java.util.Locale locale27 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale30);
        java.lang.String str34 = locale30.toLanguageTag();
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clearExtensions();
        java.util.Locale locale37 = builder35.build();
        java.lang.String str38 = locale37.getScript();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.toLanguageTag();
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale42.getISO3Language();
        java.lang.String str45 = locale39.getDisplayScript(locale42);
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.lang.String str47 = locale39.getDisplayCountry(locale46);
        java.util.Locale locale49 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str50 = locale46.getDisplayLanguage(locale49);
        java.lang.String str51 = locale37.getDisplayCountry(locale49);
        java.lang.String str52 = locale30.getDisplayVariant(locale37);
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance(locale30);
        java.util.Locale locale54 = locale30.stripExtensions();
        java.lang.String str55 = locale27.getDisplayLanguage(locale30);
        java.util.Locale.setDefault(category18, locale30);
        java.util.Locale locale57 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.lang.String str60 = locale57.getDisplayLanguage(locale59);
        java.util.Set<java.lang.String> strSet61 = locale59.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat63 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale59);
        java.util.Locale.setDefault(category18, locale59);
        java.lang.String str65 = locale59.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat66 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale59);
        java.lang.String str67 = locale0.getDisplayCountry(locale59);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str11, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Taiwan" + "'", str13, "Taiwan");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals(locale27.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str40, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh-TW" + "'", str41, "zh-TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zho" + "'", str44, "zho");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Taiwan" + "'", str47, "Taiwan");
        org.junit.Assert.assertEquals(locale49.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Italian" + "'", str50, "Italian");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1 / 1" + "'", str55, "1 / 1");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinesisch" + "'", str60, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(fractionFormat63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(fractionFormat66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test11180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11180");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        double double12 = fraction11.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction11.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.negate();
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.abs();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction26.subtract(fraction41);
        org.apache.commons.math.fraction.Fraction fraction43 = fraction41.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction16.subtract(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction11.add(fraction46);
        long long48 = fraction47.longValue();
        int int49 = fraction47.getDenominator();
        int int50 = fraction47.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 6.944444444444444E-5d + "'", double12 == 6.944444444444444E-5d);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 14399L + "'", long48 == 14399L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 14400 + "'", int49 == 14400);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 207359881 + "'", int50 == 207359881);
    }

    @Test
    public void test11181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11181");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        java.lang.String str9 = locale5.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "taiwan" + "'", str9, "taiwan");
    }

    @Test
    public void test11182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11182");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) 9700L, 0);
    }

    @Test
    public void test11183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11183");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder6.setRegion("US");
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category12, locale17);
        java.lang.String str19 = locale11.getDisplayLanguage(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale11);
        java.lang.String str21 = locale11.getScript();
        java.util.Locale.Builder builder22 = builder10.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder10.setRegion("-100");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: -100 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais" + "'", str19, "anglais");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test11184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11184");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        int int3 = fieldPosition1.getField();
        fieldPosition1.setEndIndex(0);
        fieldPosition1.setBeginIndex(600);
        java.lang.String str8 = fieldPosition1.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=600,endIndex=0]" + "'", str8, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=600,endIndex=0]");
    }

    @Test
    public void test11185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11185");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setUnicodeLocaleKeyword("20000%", "30,000%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 20000% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11186");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((int) (byte) -119, (int) (short) 98);
    }

    @Test
    public void test11187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11187");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        boolean boolean8 = numberFormat7.isGroupingUsed();
        java.util.Currency currency9 = numberFormat7.getCurrency();
        numberFormat4.setCurrency(currency9);
        java.util.Currency currency11 = numberFormat4.getCurrency();
        int int12 = numberFormat4.getMaximumFractionDigits();
        java.lang.Object obj13 = numberFormat4.clone();
        java.lang.Object obj14 = numberFormat4.clone();
        int int15 = numberFormat4.getMinimumFractionDigits();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(currency9);
        org.junit.Assert.assertEquals(currency9.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test11188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11188");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        java.math.RoundingMode roundingMode18 = numberFormat4.getRoundingMode();
        int int19 = numberFormat4.getMaximumFractionDigits();
        numberFormat4.setGroupingUsed(false);
        int int22 = numberFormat4.getMaximumFractionDigits();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test11189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11189");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat4 = properFractionFormat3.getDenominatorFormat();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        numberFormat10.setMaximumIntegerDigits((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale23);
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category21, locale26);
        java.lang.String str28 = locale20.getDisplayLanguage(locale26);
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getCurrencyInstance(locale31);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat33 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat32);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction37 = properFractionFormat33.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition36);
        java.lang.Object obj38 = fractionFormat29.parseObject("214,748,364,700%", parsePosition36);
        java.lang.String str39 = parsePosition36.toString();
        java.lang.Object obj40 = numberFormat10.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition36);
        java.lang.Object obj41 = properFractionFormat3.parseObject("Chinesisch (Taiwan)", parsePosition36);
        java.text.NumberFormat numberFormat42 = properFractionFormat3.getDenominatorFormat();
        int int43 = numberFormat42.getMinimumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "anglais" + "'", str28, "anglais");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNull(fraction37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=3]" + "'", str39, "java.text.ParsePosition[index=1,errorIndex=3]");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test11190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11190");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str7 = locale5.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale5);
        java.lang.String str9 = locale5.getCountry();
        java.lang.String str10 = locale5.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CA" + "'", str9, "CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Franz\366sisch (Kanada)" + "'", str10, "Franz\366sisch (Kanada)");
    }

    @Test
    public void test11191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11191");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.lang.Object obj7 = numberFormat5.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale9);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat10);
        java.util.Locale locale13 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.lang.String str16 = fractionFormat14.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat17 = fractionFormat14.getNumeratorFormat();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.lang.String str24 = locale18.getDisplayName(locale21);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale25.getDisplayScript(locale27);
        java.lang.String str30 = locale18.getDisplayLanguage(locale27);
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getNumberInstance(locale18);
        fractionFormat14.setNumeratorFormat(numberFormat31);
        properFractionFormat11.setWholeFormat(numberFormat31);
        fractionFormat8.setNumeratorFormat(numberFormat31);
        java.text.NumberFormat numberFormat35 = fractionFormat8.getNumeratorFormat();
        java.text.NumberFormat numberFormat36 = fractionFormat8.getDenominatorFormat();
        java.text.NumberFormat.Field field38 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((java.text.Format.Field) field38);
        java.lang.String str40 = fieldPosition39.toString();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = locale41.getDisplayName(locale42);
        boolean boolean45 = fieldPosition39.equals((java.lang.Object) locale42);
        fieldPosition39.setEndIndex((int) '#');
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getCurrencyInstance(locale48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction54 = properFractionFormat50.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition53);
        boolean boolean55 = fieldPosition39.equals((java.lang.Object) parsePosition53);
        java.lang.String str56 = parsePosition53.toString();
        int int57 = parsePosition53.getIndex();
        org.apache.commons.math.fraction.Fraction fraction58 = fractionFormat8.parse("Canada", parsePosition53);
        java.lang.Object obj59 = properFractionFormat2.parseObject("ko", parsePosition53);
        java.text.NumberFormat numberFormat60 = properFractionFormat2.getDenominatorFormat();
        java.lang.Object obj61 = numberFormat60.clone();
        numberFormat60.setMinimumIntegerDigits(1728000);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100 0 / 1" + "'", str16, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (Taiwan)" + "'", str24, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "kor" + "'", str28, "kor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str30, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(field38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str40, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (Taiwan)" + "'", str44, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(fraction54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str56, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNull(fraction58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(obj61);
    }

    @Test
    public void test11192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11192");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale8.getDisplayName(locale11);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.lang.String str20 = locale8.getDisplayLanguage(locale17);
        java.lang.String str21 = locale7.getDisplayVariant(locale17);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale7);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str5, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese (Taiwan)" + "'", str14, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str20, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
    }

    @Test
    public void test11193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11193");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.text.NumberFormat numberFormat41 = properFractionFormat40.getDenominatorFormat();
        java.text.NumberFormat numberFormat42 = properFractionFormat40.getNumeratorFormat();
        java.text.NumberFormat numberFormat43 = properFractionFormat40.getNumeratorFormat();
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        java.lang.String str50 = numberFormat48.format((double) 10L);
        properFractionFormat40.setDenominatorFormat(numberFormat48);
        numberFormat48.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (Taiwan)" + "'", str29, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str35, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1,000%" + "'", str50, "1,000%");
    }

    @Test
    public void test11194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11194");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder8.setVariant("");
        java.util.Locale.Builder builder13 = builder11.setLanguage("Japan");
        java.util.Locale.Builder builder15 = builder13.setLanguage("France");
        java.util.Locale.Builder builder16 = builder13.clear();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale.Builder builder20 = builder16.setLocale(locale18);
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str26 = locale22.getISO3Language();
        boolean boolean27 = numberFormat21.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder28 = builder16.setLocale(locale22);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        java.text.NumberFormat.Field field32 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale34);
        boolean boolean36 = field32.equals((java.lang.Object) locale34);
        java.lang.String str37 = locale31.getDisplayName(locale34);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale6.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertNotNull(fractionFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(field32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test11195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11195");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        fieldPosition1.setBeginIndex(2147483647);
        int int13 = fieldPosition1.getField();
        int int14 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test11196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11196");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        numberFormat2.setMaximumFractionDigits(100);
        java.lang.String str7 = numberFormat2.format((long) 100);
        properFractionFormat0.setWholeFormat(numberFormat2);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException11 = new org.apache.commons.math.fraction.FractionConversionException((double) (byte) 0, 3);
        java.text.AttributedCharacterIterator attributedCharacterIterator12 = numberFormat2.formatToCharacterIterator((java.lang.Object) (byte) 0);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale13.getISO3Language();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleKeys();
        java.lang.String str16 = locale13.getISO3Country();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getNumberInstance(locale13);
        java.util.Locale locale21 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        int int23 = numberFormat22.getMaximumIntegerDigits();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        java.util.Currency currency27 = numberFormat25.getCurrency();
        numberFormat22.setCurrency(currency27);
        java.util.Currency currency29 = numberFormat22.getCurrency();
        int int30 = numberFormat22.getMaximumFractionDigits();
        java.lang.Object obj31 = numberFormat22.clone();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        numberFormat33.setMaximumFractionDigits(100);
        numberFormat33.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str40 = numberFormat33.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17, numberFormat22, numberFormat33);
        java.util.Locale locale43 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale43);
        java.lang.String str46 = fractionFormat44.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat47 = fractionFormat44.getNumeratorFormat();
        java.text.NumberFormat numberFormat48 = fractionFormat44.getNumeratorFormat();
        java.text.NumberFormat numberFormat49 = fractionFormat44.getNumeratorFormat();
        java.lang.String str51 = numberFormat49.format((long) 2147483647);
        properFractionFormat41.setDenominatorFormat(numberFormat49);
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat55 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat54);
        java.text.AttributedCharacterIterator attributedCharacterIterator57 = numberFormat54.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj58 = numberFormat54.clone();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getCurrencyInstance(locale60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat62 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction66 = properFractionFormat62.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition65);
        java.lang.Object obj67 = numberFormat54.parseObject("zh-TW", parsePosition65);
        properFractionFormat41.setDenominatorFormat(numberFormat54);
        int int69 = numberFormat54.getMaximumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat54);
        org.apache.commons.math.fraction.Fraction fraction74 = new org.apache.commons.math.fraction.Fraction((double) (short) 0, (double) (byte) 88, (int) (short) -32);
        java.lang.StringBuffer stringBuffer75 = null;
        java.text.NumberFormat.Field field76 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition77 = new java.text.FieldPosition((java.text.Format.Field) field76);
        java.text.Format.Field field78 = fieldPosition77.getFieldAttribute();
        fieldPosition77.setEndIndex((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = fractionFormat70.format(fraction74, stringBuffer75, fieldPosition77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10,000%" + "'", str7, "10,000%");
        org.junit.Assert.assertNotNull(attributedCharacterIterator12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100%" + "'", str40, "100%");
        org.junit.Assert.assertEquals(locale43.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "100 0 / 1" + "'", str46, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2,147,483,647" + "'", str51, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(attributedCharacterIterator57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNull(fraction66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(field76);
        org.junit.Assert.assertNotNull(field78);
    }

    @Test
    public void test11197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11197");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        java.text.Format.Field field3 = fieldPosition2.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.multiply(fraction13);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction13);
        boolean boolean16 = field3.equals((java.lang.Object) fraction6);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(field3);
        java.text.Format.Field field18 = fieldPosition17.getFieldAttribute();
        fieldPosition17.setBeginIndex((int) 'u');
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale22);
        java.lang.String str25 = fractionFormat23.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat26 = fractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat27 = fractionFormat23.getNumeratorFormat();
        java.text.NumberFormat numberFormat28 = fractionFormat23.getNumeratorFormat();
        boolean boolean29 = fieldPosition17.equals((java.lang.Object) numberFormat28);
        boolean boolean30 = numberFormat28.isParseIntegerOnly();
        org.apache.commons.math.fraction.Fraction fraction32 = new org.apache.commons.math.fraction.Fraction((double) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        double double41 = fraction39.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction45 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction39.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction36.divide(fraction39);
        org.apache.commons.math.fraction.Fraction fraction48 = fraction32.add(fraction36);
        java.lang.StringBuffer stringBuffer49 = null;
        java.text.FieldPosition fieldPosition51 = new java.text.FieldPosition((int) (short) -1);
        int int52 = fieldPosition51.getEndIndex();
        int int53 = fieldPosition51.getField();
        java.util.Locale locale57 = new java.util.Locale("Chinese (China)", "cor\351en", "100%");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        boolean boolean59 = fieldPosition51.equals((java.lang.Object) strSet58);
        java.lang.String str60 = fieldPosition51.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer61 = numberFormat28.format((java.lang.Object) fraction32, stringBuffer49, fieldPosition51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "100 0 / 1" + "'", str25, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-0.008333333333333333d) + "'", double41 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals(locale57.toString(), "chinese (china)_COR\351EN_100%");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]" + "'", str60, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11198");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale.setDefault(locale0);
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.String str4 = locale0.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.lang.String str10 = locale5.toLanguageTag();
        java.util.Set<java.lang.String> strSet11 = locale5.getUnicodeLocaleKeys();
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        boolean boolean15 = locale12.hasExtensions();
        java.lang.String str16 = locale5.getDisplayVariant(locale12);
        java.lang.String str17 = locale0.getDisplayVariant(locale12);
        java.lang.String str18 = locale12.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinesisch" + "'", str1, "Chinesisch");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-TW" + "'", str4, "zh-TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
    }

    @Test
    public void test11199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11199");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test11200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11200");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str7 = locale4.getISO3Country();
        java.lang.String str8 = locale0.getDisplayScript(locale4);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Locale locale12 = locale9.stripExtensions();
        java.lang.String str13 = locale0.getDisplayVariant(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str19 = locale16.getExtension('x');
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale16);
        java.text.NumberFormat.Field field22 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition((java.text.Format.Field) field22);
        java.lang.String str24 = fieldPosition23.toString();
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = locale25.getDisplayName(locale26);
        boolean boolean29 = fieldPosition23.equals((java.lang.Object) locale26);
        fieldPosition23.setEndIndex((int) '#');
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getCurrencyInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction38 = properFractionFormat34.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition37);
        boolean boolean39 = fieldPosition23.equals((java.lang.Object) parsePosition37);
        java.lang.String str40 = parsePosition37.toString();
        parsePosition37.setErrorIndex((int) (short) 10);
        java.lang.Object obj43 = numberFormat20.parseObject("java.text.ParseException: zh_TW", parsePosition37);
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale44);
        java.util.Currency currency47 = numberFormat46.getCurrency();
        numberFormat46.setMinimumIntegerDigits(1);
        numberFormat46.setMinimumIntegerDigits((int) (byte) 0);
        int int52 = numberFormat46.getMaximumFractionDigits();
        java.util.Currency currency53 = numberFormat46.getCurrency();
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.util.Set<java.lang.String> strSet59 = locale56.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet60 = locale56.getUnicodeLocaleKeys();
        java.lang.String str61 = locale56.toLanguageTag();
        java.lang.String str62 = locale56.getDisplayLanguage();
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getInstance(locale56);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getPercentInstance(locale64);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat66 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat65);
        java.text.AttributedCharacterIterator attributedCharacterIterator68 = numberFormat65.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj69 = numberFormat65.clone();
        numberFormat65.setMaximumFractionDigits(2147483647);
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat74 = java.text.NumberFormat.getInstance(locale73);
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getPercentInstance(locale75);
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat74, numberFormat76);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj81 = numberFormat76.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition80);
        java.lang.String str82 = parsePosition80.toString();
        java.lang.Number number83 = numberFormat65.parse("\ud55c\uad6d\uc5b4", parsePosition80);
        numberFormat65.setParseIntegerOnly(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat86 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat46, numberFormat63, numberFormat65);
        org.apache.commons.math.fraction.FractionFormat fractionFormat87 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat46);
        java.lang.Object obj88 = numberFormat20.clone();
        fractionFormat15.setDenominatorFormat(numberFormat20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str3, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e2d\u6587" + "'", str6, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TWN" + "'", str7, "TWN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(field22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str24, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNull(fraction38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str40, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "TWD");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "TWD");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ko" + "'", str61, "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u97d3\u6587" + "'", str62, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(attributedCharacterIterator68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str82, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number83);
        org.junit.Assert.assertNotNull(obj88);
    }

    @Test
    public void test11201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11201");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        int int10 = fieldPosition1.getField();
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition(field11);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition(field11, 3);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((int) (short) -14400);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        long long27 = fraction25.longValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.multiply(fraction25);
        org.apache.commons.math.fraction.Fraction fraction31 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.negate();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        long long39 = fraction37.longValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction33.multiply(fraction37);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction21.divide(fraction40);
        double double42 = fraction41.doubleValue();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance(locale43);
        java.util.Locale locale46 = locale43.stripExtensions();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getPercentInstance(locale47);
        java.lang.String str49 = locale46.getDisplayName(locale47);
        boolean boolean50 = fraction41.equals((java.lang.Object) locale46);
        java.lang.String str51 = locale46.getVariant();
        java.util.Locale locale52 = java.util.Locale.US;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale46.getDisplayVariant(locale52);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayCountry();
        java.lang.String str57 = locale55.toLanguageTag();
        java.lang.String str58 = locale46.getDisplayVariant(locale55);
        boolean boolean59 = fieldPosition16.equals((java.lang.Object) locale55);
        boolean boolean60 = field11.equals((java.lang.Object) boolean59);
        java.text.ParseException parseException63 = new java.text.ParseException("hi!", (int) '4');
        int int64 = parseException63.getErrorOffset();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException67 = new org.apache.commons.math.fraction.FractionConversionException((double) 1L, (int) (short) 10);
        java.lang.Throwable[] throwableArray68 = fractionConversionException67.getSuppressed();
        parseException63.addSuppressed((java.lang.Throwable) fractionConversionException67);
        int int70 = parseException63.getErrorOffset();
        int int71 = parseException63.getErrorOffset();
        boolean boolean72 = field11.equals((java.lang.Object) int71);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 120.0d + "'", double42 == 120.0d);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str49, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "und" + "'", str57, "und");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test11202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11202");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.lang.String str7 = locale0.toLanguageTag();
        java.lang.String str8 = locale0.getScript();
        java.lang.String str9 = locale0.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.lang.String str13 = locale10.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.lang.String str17 = locale12.getDisplayScript(locale15);
        java.lang.String str18 = locale12.getLanguage();
        java.util.Locale locale19 = locale12.stripExtensions();
        java.lang.String str20 = locale0.getDisplayScript(locale19);
        java.lang.String str21 = locale19.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-TW" + "'", str7, "zh-TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u53f0\u7063" + "'", str14, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test11203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11203");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) (byte) 0);
        org.apache.commons.math.fraction.Fraction fraction5 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        double double10 = fraction8.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction14 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction5.divide(fraction8);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction1.add(fraction5);
        double double18 = fraction1.doubleValue();
        java.lang.String str19 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction1);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction1.negate();
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.008333333333333333d) + "'", double10 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0 / 1" + "'", str19, "0 / 1");
        org.junit.Assert.assertNotNull(fraction20);
    }

    @Test
    public void test11204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11204");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale.Builder builder10 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setRegion("chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0])");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: chinese (JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11205");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale0);
        java.lang.Object obj4 = numberFormat3.clone();
        numberFormat3.setMaximumIntegerDigits(10);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getDenominatorFormat();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale15);
        java.util.Currency currency18 = numberFormat17.getCurrency();
        numberFormat17.setMinimumIntegerDigits(1);
        numberFormat17.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj26 = numberFormat17.parseObject("Japan", parsePosition25);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str31 = fractionConversionException30.getPattern();
        java.lang.Throwable[] throwableArray32 = fractionConversionException30.getSuppressed();
        java.lang.Object[] objArray33 = fractionConversionException30.getArguments();
        boolean boolean34 = parsePosition25.equals((java.lang.Object) objArray33);
        int int35 = parsePosition25.getIndex();
        int int36 = parsePosition25.getIndex();
        java.lang.Object obj37 = fractionFormat13.parseObject("\ud55c\uad6d\uc5b4", parsePosition25);
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        boolean boolean41 = numberFormat40.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.lang.String str44 = numberFormat40.format(0.008333333333333333d);
        boolean boolean45 = numberFormat40.isParseIntegerOnly();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj49 = numberFormat40.parseObject("\u65e5\u6587", parsePosition48);
        int int50 = parsePosition48.getIndex();
        java.lang.Object obj51 = fractionFormat13.parseObject("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition48);
        java.lang.Object obj52 = fractionFormat9.parseObject("NT$2,147,483,647.00", parsePosition48);
        java.lang.Object obj53 = numberFormat3.parseObject("", parsePosition48);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "TWD");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1%" + "'", str44, "1%");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test11206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11206");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setVariant("chinois (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: chinois (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test11207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11207");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale3.toLanguageTag();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale3.getDisplayCountry();
        java.lang.String str7 = locale3.getISO3Country();
        java.util.Locale locale8 = locale3.stripExtensions();
        java.lang.String str9 = locale0.getDisplayCountry(locale8);
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getNumberInstance(locale8);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zho" + "'", str2, "zho");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-TW" + "'", str4, "zh-TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u53f0\u7063" + "'", str6, "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TWN" + "'", str7, "TWN");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u53f0\u7063" + "'", str9, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(numberFormat10);
    }

    @Test
    public void test11208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11208");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 100 to fraction after 100 iterations", "\uc911\uad6d\uc5b4");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale2);
        java.lang.String str5 = numberFormat3.format((double) 32);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "32" + "'", str5, "32");
    }

    @Test
    public void test11209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11209");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat44 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat28.getWholeFormat();
        java.text.ParsePosition parsePosition47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction48 = properFractionFormat28.parse("\uc911\uad6d\uc5b4)", parsePosition47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
    }

    @Test
    public void test11210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11210");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        int int5 = numberFormat4.getMinimumFractionDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        numberFormat7.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat7);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale13);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale16);
        java.util.Currency currency19 = numberFormat18.getCurrency();
        numberFormat18.setMinimumIntegerDigits(1);
        numberFormat18.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj27 = numberFormat18.parseObject("Japan", parsePosition26);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException31 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str32 = fractionConversionException31.getPattern();
        java.lang.Throwable[] throwableArray33 = fractionConversionException31.getSuppressed();
        java.lang.Object[] objArray34 = fractionConversionException31.getArguments();
        boolean boolean35 = parsePosition26.equals((java.lang.Object) objArray34);
        int int36 = parsePosition26.getIndex();
        int int37 = parsePosition26.getIndex();
        java.lang.Object obj38 = fractionFormat14.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition26);
        java.text.NumberFormat numberFormat39 = fractionFormat14.getNumeratorFormat();
        int int40 = numberFormat39.getMaximumIntegerDigits();
        numberFormat39.setMinimumIntegerDigits((int) (byte) -119);
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale44);
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getInstance(locale47);
        java.util.Currency currency50 = numberFormat49.getCurrency();
        numberFormat49.setMinimumIntegerDigits(1);
        numberFormat49.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj58 = numberFormat49.parseObject("Japan", parsePosition57);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException62 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str63 = fractionConversionException62.getPattern();
        java.lang.Throwable[] throwableArray64 = fractionConversionException62.getSuppressed();
        java.lang.Object[] objArray65 = fractionConversionException62.getArguments();
        boolean boolean66 = parsePosition57.equals((java.lang.Object) objArray65);
        int int67 = parsePosition57.getIndex();
        int int68 = parsePosition57.getIndex();
        java.lang.Object obj69 = fractionFormat45.parseObject("\ud55c\uad6d\uc5b4", parsePosition57);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat72 = java.text.NumberFormat.getPercentInstance(locale71);
        boolean boolean73 = numberFormat72.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat72);
        java.lang.String str76 = numberFormat72.format(0.008333333333333333d);
        boolean boolean77 = numberFormat72.isParseIntegerOnly();
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj81 = numberFormat72.parseObject("\u65e5\u6587", parsePosition80);
        int int82 = parsePosition80.getIndex();
        java.lang.Object obj83 = fractionFormat45.parseObject("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition80);
        parsePosition80.setIndex(97);
        java.lang.String str86 = parsePosition80.toString();
        java.lang.Number number87 = numberFormat39.parse("x-lvariant-fr", parsePosition80);
        java.lang.Object obj88 = numberFormat7.parseObject("-2.857", parsePosition80);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(currency19);
        org.junit.Assert.assertEquals(currency19.toString(), "TWD");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str32, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2147483647 + "'", int40 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNotNull(currency50);
        org.junit.Assert.assertEquals(currency50.toString(), "TWD");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str63, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1%" + "'", str76, "1%");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=1]" + "'", str86, "java.text.ParsePosition[index=97,errorIndex=1]");
        org.junit.Assert.assertNull(number87);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test11211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11211");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency8 = numberFormat5.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        boolean boolean16 = numberFormat14.equals((java.lang.Object) strArray15);
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        int int22 = numberFormat21.getMaximumIntegerDigits();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        boolean boolean25 = numberFormat24.isGroupingUsed();
        java.util.Currency currency26 = numberFormat24.getCurrency();
        numberFormat21.setCurrency(currency26);
        java.util.Currency currency28 = numberFormat21.getCurrency();
        java.math.RoundingMode roundingMode29 = numberFormat21.getRoundingMode();
        numberFormat14.setRoundingMode(roundingMode29);
        numberFormat5.setRoundingMode(roundingMode29);
        numberFormat5.setParseIntegerOnly(false);
        int int34 = numberFormat5.getMaximumFractionDigits();
        java.lang.String str36 = numberFormat5.format((long) (byte) -51);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(currency26);
        org.junit.Assert.assertEquals(currency26.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode29 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode29.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-51" + "'", str36, "-51");
    }

    @Test
    public void test11212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11212");
        java.text.ParseException parseException2 = new java.text.ParseException("zh_TW", (int) 'a');
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException6 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str7 = fractionConversionException6.getPattern();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException11 = new org.apache.commons.math.fraction.FractionConversionException((double) 11, (long) 2, (long) 2147483647);
        fractionConversionException6.addSuppressed((java.lang.Throwable) fractionConversionException11);
        parseException2.addSuppressed((java.lang.Throwable) fractionConversionException6);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException16 = new org.apache.commons.math.fraction.FractionConversionException(1728000.0d, (int) (byte) -120);
        fractionConversionException6.addSuppressed((java.lang.Throwable) fractionConversionException16);
        java.lang.String str18 = fractionConversionException6.getPattern();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException21 = new org.apache.commons.math.fraction.FractionConversionException((double) 'u', 2);
        java.text.ParseException parseException24 = new java.text.ParseException("", (int) 'u');
        fractionConversionException21.addSuppressed((java.lang.Throwable) parseException24);
        int int26 = parseException24.getErrorOffset();
        fractionConversionException6.addSuppressed((java.lang.Throwable) parseException24);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str7, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str18, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 117 + "'", int26 == 117);
    }

    @Test
    public void test11213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11213");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        java.lang.String str5 = locale0.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean10 = numberFormat8.equals((java.lang.Object) numberFormat9);
        java.lang.Object obj11 = numberFormat9.clone();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean16 = numberFormat14.equals((java.lang.Object) numberFormat15);
        java.util.Locale locale21 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        int int23 = numberFormat22.getMaximumIntegerDigits();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        java.util.Currency currency27 = numberFormat25.getCurrency();
        numberFormat22.setCurrency(currency27);
        java.util.Currency currency29 = numberFormat22.getCurrency();
        java.math.RoundingMode roundingMode30 = numberFormat22.getRoundingMode();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) 'a');
        java.lang.String str34 = parsePosition33.toString();
        java.lang.String str35 = parsePosition33.toString();
        java.lang.Object obj36 = numberFormat22.parseObject("zho", parsePosition33);
        java.lang.String str37 = parsePosition33.toString();
        java.lang.Number number38 = numberFormat15.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        java.lang.Object obj39 = numberFormat9.parseObject("cor\351en", parsePosition33);
        numberFormat9.setMinimumFractionDigits((int) (short) 1);
        java.math.RoundingMode roundingMode42 = numberFormat9.getRoundingMode();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale43.getISO3Language();
        java.util.Set<java.lang.String> strSet45 = locale43.getUnicodeLocaleKeys();
        java.lang.String str46 = locale43.getISO3Country();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale43);
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getPercentInstance(locale51);
        int int53 = numberFormat52.getMaximumIntegerDigits();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        boolean boolean56 = numberFormat55.isGroupingUsed();
        java.util.Currency currency57 = numberFormat55.getCurrency();
        numberFormat52.setCurrency(currency57);
        java.util.Currency currency59 = numberFormat52.getCurrency();
        int int60 = numberFormat52.getMaximumFractionDigits();
        java.lang.Object obj61 = numberFormat52.clone();
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat63 = java.text.NumberFormat.getPercentInstance(locale62);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat63);
        numberFormat63.setMaximumFractionDigits(100);
        numberFormat63.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str70 = numberFormat63.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47, numberFormat52, numberFormat63);
        java.text.NumberFormat numberFormat72 = properFractionFormat71.getWholeFormat();
        java.util.Locale locale76 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance(locale76);
        int int78 = numberFormat77.getMaximumIntegerDigits();
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        boolean boolean81 = numberFormat80.isGroupingUsed();
        java.util.Currency currency82 = numberFormat80.getCurrency();
        numberFormat77.setCurrency(currency82);
        java.util.Currency currency84 = numberFormat77.getCurrency();
        java.math.RoundingMode roundingMode85 = numberFormat77.getRoundingMode();
        properFractionFormat71.setWholeFormat(numberFormat77);
        java.text.NumberFormat numberFormat87 = properFractionFormat71.getWholeFormat();
        java.text.NumberFormat numberFormat88 = properFractionFormat71.getNumeratorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat89 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat9, numberFormat88);
        int int90 = numberFormat6.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u5fb7\u570b" + "'", str5, "\u5fb7\u570b");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str34, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str35, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str37, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "kor" + "'", str44, "kor");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2147483647 + "'", int53 == 2147483647);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(currency57);
        org.junit.Assert.assertEquals(currency57.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency59);
        org.junit.Assert.assertEquals(currency59.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat63);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "100%" + "'", str70, "100%");
        org.junit.Assert.assertNotNull(numberFormat72);
        org.junit.Assert.assertEquals(locale76.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2147483647 + "'", int78 == 2147483647);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(currency82);
        org.junit.Assert.assertEquals(currency82.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency84);
        org.junit.Assert.assertEquals(currency84.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode85 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode85.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat87);
        org.junit.Assert.assertNotNull(numberFormat88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test11214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11214");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        java.lang.String str15 = locale6.getDisplayVariant();
        java.lang.String str16 = locale6.getDisplayCountry();
        java.lang.String str17 = locale6.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test11215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11215");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.lang.String str3 = locale2.getScript();
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale4.toLanguageTag();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale7.getISO3Language();
        java.lang.String str10 = locale4.getDisplayScript(locale7);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale4.getDisplayCountry(locale11);
        java.util.Locale locale14 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str15 = locale11.getDisplayLanguage(locale14);
        java.lang.String str16 = locale2.getDisplayCountry(locale14);
        java.util.Set<java.lang.String> strSet17 = locale2.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getCurrencyInstance(locale2);
        java.util.Locale locale22 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.lang.String str23 = locale22.getISO3Country();
        java.lang.String str24 = locale2.getDisplayName(locale22);
        java.lang.String str25 = locale22.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u4e2d\u6587" + "'", str5, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh-TW" + "'", str6, "zh-TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Taiwan" + "'", str12, "Taiwan");
        org.junit.Assert.assertEquals(locale14.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals(locale22.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1 / 1" + "'", str25, "1 / 1");
    }

    @Test
    public void test11216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11216");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.lang.Object obj4 = locale2.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u4e2d\u6587" + "'", str1, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "fr_CA");
    }

    @Test
    public void test11217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11217");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        java.lang.String str5 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test11218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11218");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction10 = properFractionFormat6.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition9);
        org.apache.commons.math.fraction.Fraction fraction11 = properFractionFormat2.parse("zh_TW", parsePosition9);
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        numberFormat16.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str20 = numberFormat16.format((double) 0.0f);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        int int26 = numberFormat25.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.text.NumberFormat numberFormat28 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16, numberFormat25, numberFormat28);
        java.math.RoundingMode roundingMode30 = numberFormat16.getRoundingMode();
        int int31 = numberFormat16.getMaximumFractionDigits();
        properFractionFormat2.setDenominatorFormat(numberFormat16);
        int int33 = numberFormat16.getMinimumFractionDigits();
        boolean boolean34 = numberFormat16.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNull(fraction10);
        org.junit.Assert.assertNull(fraction11);
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0%" + "'", str20, "0%");
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test11219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11219");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        numberFormat13.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode18 = numberFormat13.getRoundingMode();
        boolean boolean19 = numberFormat13.isGroupingUsed();
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale21);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat23 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat22);
        java.lang.Object obj24 = numberFormat22.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat22);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getCurrencyInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        java.util.Locale locale30 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale30);
        java.lang.String str33 = fractionFormat31.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat34 = fractionFormat31.getNumeratorFormat();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Locale locale36 = locale35.stripExtensions();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.lang.String str41 = locale35.getDisplayName(locale38);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale42.getDisplayScript(locale44);
        java.lang.String str47 = locale35.getDisplayLanguage(locale44);
        java.text.NumberFormat numberFormat48 = java.text.NumberFormat.getNumberInstance(locale35);
        fractionFormat31.setNumeratorFormat(numberFormat48);
        properFractionFormat28.setWholeFormat(numberFormat48);
        fractionFormat25.setNumeratorFormat(numberFormat48);
        java.text.NumberFormat numberFormat52 = fractionFormat25.getNumeratorFormat();
        java.text.NumberFormat numberFormat53 = fractionFormat25.getDenominatorFormat();
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition((int) '4');
        parsePosition56.setIndex(0);
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition(1);
        boolean boolean61 = parsePosition56.equals((java.lang.Object) fieldPosition60);
        org.apache.commons.math.fraction.Fraction fraction62 = fractionFormat25.parse("it-IT", parsePosition56);
        java.lang.Number number63 = numberFormat13.parse("\u4e2d\u56fd\u8a9e", parsePosition56);
        int int64 = parsePosition56.getErrorIndex();
        java.lang.Number number65 = numberFormat1.parse("java.text.ParsePosition[index=97,errorIndex=96]", parsePosition56);
        boolean boolean66 = numberFormat1.isGroupingUsed();
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100 0 / 1" + "'", str33, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese (Taiwan)" + "'", str41, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "kor" + "'", str45, "kor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str47, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat48);
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(fraction62);
        org.junit.Assert.assertNull(number63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(number65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test11220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11220");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category5, locale12);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale16.getISO3Country();
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getIntegerInstance(locale16);
        java.util.Locale.setDefault(category5, locale16);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getNumberInstance(locale16);
        fractionFormat4.setDenominatorFormat(numberFormat20);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat20);
    }

    @Test
    public void test11221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11221");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        java.lang.String str22 = numberFormat19.format((long) 600);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.text.AttributedCharacterIterator attributedCharacterIterator27 = numberFormat24.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj28 = numberFormat24.clone();
        numberFormat24.setMaximumFractionDigits(2147483647);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat35.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition39);
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Number number42 = numberFormat24.parse("\ud55c\uad6d\uc5b4", parsePosition39);
        int int43 = numberFormat24.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat24);
        java.lang.Number number46 = numberFormat19.parse("20");
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (Taiwan)" + "'", str12, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str18, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "600" + "'", str22, "600");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(attributedCharacterIterator27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str41, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 20L + "'", number46, 20L);
    }

    @Test
    public void test11222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11222");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u53f0\u6e7e)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11223");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        java.text.NumberFormat.Field field21 = java.text.NumberFormat.Field.EXPONENT;
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (byte) 10);
        boolean boolean24 = field21.equals((java.lang.Object) parsePosition23);
        org.apache.commons.math.fraction.Fraction fraction25 = properFractionFormat3.parse("zh_tw", parsePosition23);
        int int26 = parsePosition23.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((double) 120L, (double) 35, 2);
        int int31 = fraction30.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.negate();
        boolean boolean33 = parsePosition23.equals((java.lang.Object) fraction32);
        parsePosition23.setIndex((int) (byte) 88);
        parsePosition23.setErrorIndex(50112000);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(fraction25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11224");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getCountry();
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str10 = locale3.getDisplayCountry(locale6);
        java.lang.String str11 = locale3.getISO3Language();
        java.lang.String str12 = locale3.getDisplayName();
        java.lang.String str14 = locale3.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getInstance(locale21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        boolean boolean24 = numberFormat22.equals((java.lang.Object) locale23);
        boolean boolean25 = fraction20.equals((java.lang.Object) locale23);
        org.apache.commons.math.fraction.Fraction fraction26 = fraction20.abs();
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale27);
        boolean boolean29 = fraction26.equals((java.lang.Object) locale27);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getPercentInstance(locale27);
        java.lang.String str31 = locale3.getDisplayScript(locale27);
        java.lang.String str32 = locale0.getDisplayVariant(locale3);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = locale33.getScript();
        java.util.Locale locale38 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str39 = locale33.getDisplayScript(locale38);
        org.apache.commons.math.fraction.FractionFormat fractionFormat40 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale33);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean45 = numberFormat43.equals((java.lang.Object) numberFormat44);
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        int int52 = numberFormat51.getMaximumIntegerDigits();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale53);
        boolean boolean55 = numberFormat54.isGroupingUsed();
        java.util.Currency currency56 = numberFormat54.getCurrency();
        numberFormat51.setCurrency(currency56);
        java.util.Currency currency58 = numberFormat51.getCurrency();
        java.math.RoundingMode roundingMode59 = numberFormat51.getRoundingMode();
        java.text.ParsePosition parsePosition62 = new java.text.ParsePosition((int) 'a');
        java.lang.String str63 = parsePosition62.toString();
        java.lang.String str64 = parsePosition62.toString();
        java.lang.Object obj65 = numberFormat51.parseObject("zho", parsePosition62);
        java.lang.String str66 = parsePosition62.toString();
        java.lang.Number number67 = numberFormat44.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition62);
        java.lang.Object obj68 = fractionFormat40.parseObject("zho", parsePosition62);
        int int69 = parsePosition62.getIndex();
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.util.Locale locale72 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str73 = locale70.getDisplayScript(locale72);
        java.lang.String str75 = locale72.getExtension('u');
        java.lang.String str76 = locale72.getScript();
        boolean boolean77 = parsePosition62.equals((java.lang.Object) locale72);
        java.lang.String str79 = locale72.getExtension('x');
        boolean boolean80 = locale72.hasExtensions();
        java.lang.String str81 = locale3.getDisplayLanguage(locale72);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "KR" + "'", str2, "KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "France" + "'", str10, "France");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str12, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals(locale38.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(fractionFormat40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2147483647 + "'", int52 == 2147483647);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(currency56);
        org.junit.Assert.assertEquals(currency56.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency58);
        org.junit.Assert.assertEquals(currency58.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode59 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode59.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str63, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str64, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str66, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fran\347ais" + "'", str81, "fran\347ais");
    }

    @Test
    public void test11225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11225");
        java.text.ParseException parseException2 = new java.text.ParseException("hi!", (int) '4');
        int int3 = parseException2.getErrorOffset();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException6 = new org.apache.commons.math.fraction.FractionConversionException((double) 1L, (int) (short) 10);
        java.lang.Throwable[] throwableArray7 = fractionConversionException6.getSuppressed();
        parseException2.addSuppressed((java.lang.Throwable) fractionConversionException6);
        java.text.ParseException parseException11 = new java.text.ParseException("", (int) 'u');
        fractionConversionException6.addSuppressed((java.lang.Throwable) parseException11);
        int int13 = parseException11.getErrorOffset();
        java.lang.String str14 = parseException11.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.ParseException: " + "'", str14, "java.text.ParseException: ");
    }

    @Test
    public void test11226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11226");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) (-0.9916667f), (int) (byte) 0);
    }

    @Test
    public void test11227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11227");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        double double4 = fraction2.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction8 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction8);
        java.text.NumberFormat.Field field10 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field10, (int) '#');
        java.text.Format.Field field13 = fieldPosition12.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction19.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction16.add(fraction23);
        boolean boolean26 = field13.equals((java.lang.Object) fraction16);
        int int27 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction30 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.negate();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction37.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction31.add(fraction37);
        org.apache.commons.math.fraction.Fraction fraction43 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.negate();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction40.divide(fraction43);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction40.subtract(fraction51);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction16.add(fraction51);
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getPercentInstance(locale57);
        int int59 = numberFormat58.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58);
        boolean boolean61 = numberFormat58.isParseIntegerOnly();
        boolean boolean62 = fraction53.equals((java.lang.Object) boolean61);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction63 = fraction9.divide(fraction53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The fraction to divide by must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.008333333333333333d) + "'", double4 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(field10);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2147483647 + "'", int59 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11228");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        int int58 = numberFormat45.getMinimumFractionDigits();
        numberFormat45.setMinimumIntegerDigits((int) (byte) 17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (Taiwan)" + "'", str29, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str35, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test11229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11229");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException7 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str8 = fractionConversionException7.getPattern();
        java.lang.Throwable[] throwableArray9 = fractionConversionException7.getSuppressed();
        fractionConversionException3.addSuppressed((java.lang.Throwable) fractionConversionException7);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException14 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        fractionConversionException14.addSuppressed((java.lang.Throwable) fractionConversionException18);
        fractionConversionException7.addSuppressed((java.lang.Throwable) fractionConversionException18);
        java.lang.Throwable[] throwableArray23 = fractionConversionException18.getSuppressed();
        java.lang.String str24 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray25 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray26 = fractionConversionException18.getArguments();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str8, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str24, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[0.0, 0, -1]");
    }

    @Test
    public void test11230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11230");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str16 = locale12.toLanguageTag();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder17.build();
        java.lang.String str20 = locale19.getScript();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale21.getDisplayScript(locale24);
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale21.getDisplayCountry(locale28);
        java.util.Locale locale31 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale19.getDisplayCountry(locale31);
        java.lang.String str34 = locale12.getDisplayVariant(locale19);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale36 = locale12.stripExtensions();
        java.lang.String str37 = locale9.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(category0, locale12);
        boolean boolean39 = locale12.hasExtensions();
        java.lang.String str40 = locale12.getLanguage();
        java.lang.String str41 = locale12.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale9.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str22, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zho" + "'", str26, "zho");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Taiwan" + "'", str29, "Taiwan");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Italian" + "'", str32, "Italian");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1 / 1" + "'", str37, "1 / 1");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test11231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11231");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) (-50), (long) (byte) 64, (long) (short) -120);
        java.lang.Object[] objArray4 = fractionConversionException3.getArguments();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[-50.0, 64, -120]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[-50.0, 64, -120]");
    }

    @Test
    public void test11232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11232");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        boolean boolean4 = numberFormat1.isGroupingUsed();
        java.lang.String str6 = numberFormat1.format((double) 10L);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getCurrencyInstance(locale7);
        boolean boolean11 = numberFormat10.isParseIntegerOnly();
        java.math.RoundingMode roundingMode12 = numberFormat10.getRoundingMode();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat10);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        numberFormat16.setMaximumFractionDigits(100);
        java.lang.String str21 = numberFormat16.format((long) 100);
        int int22 = numberFormat16.getMaximumFractionDigits();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder26 = builder23.setVariant("");
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        boolean boolean28 = numberFormat16.equals((java.lang.Object) builder26);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale29.getISO3Language();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale29.getISO3Country();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getNumberInstance(locale29);
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        int int39 = numberFormat38.getMaximumIntegerDigits();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        boolean boolean42 = numberFormat41.isGroupingUsed();
        java.util.Currency currency43 = numberFormat41.getCurrency();
        numberFormat38.setCurrency(currency43);
        java.util.Currency currency45 = numberFormat38.getCurrency();
        int int46 = numberFormat38.getMaximumFractionDigits();
        java.lang.Object obj47 = numberFormat38.clone();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat49);
        numberFormat49.setMaximumFractionDigits(100);
        numberFormat49.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str56 = numberFormat49.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat38, numberFormat49);
        int int58 = numberFormat38.getMaximumIntegerDigits();
        boolean boolean59 = numberFormat38.isGroupingUsed();
        java.util.Currency currency60 = numberFormat38.getCurrency();
        numberFormat16.setCurrency(currency60);
        numberFormat16.setMinimumFractionDigits(97);
        fractionFormat14.setNumeratorFormat(numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        numberFormat67.setMaximumFractionDigits(100);
        java.lang.String str72 = numberFormat67.format((long) 100);
        properFractionFormat65.setWholeFormat(numberFormat67);
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat67);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000%" + "'", str6, "1,000%");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + roundingMode12 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode12.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10,000%" + "'", str21, "10,000%");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "kor" + "'", str30, "kor");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2147483647 + "'", int39 == 2147483647);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency45);
        org.junit.Assert.assertEquals(currency45.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "100%" + "'", str56, "100%");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2147483647 + "'", int58 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(currency60);
        org.junit.Assert.assertEquals(currency60.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "10,000%" + "'", str72, "10,000%");
    }

    @Test
    public void test11233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11233");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("20000%", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=20000%");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11234");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction(0.008333333333333333d);
        org.apache.commons.math.fraction.Fraction fraction4 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, (int) (short) 1);
        int int5 = fraction4.intValue();
        int int6 = fraction4.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.multiply(fraction16);
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.add(fraction16);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        long long28 = fraction26.longValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction23.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction32.multiply(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction29.add(fraction36);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction9.subtract(fraction29);
        org.apache.commons.math.fraction.Fraction fraction41 = new org.apache.commons.math.fraction.Fraction((double) 600);
        org.apache.commons.math.fraction.Fraction fraction42 = fraction9.add(fraction41);
        int int43 = fraction42.intValue();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction42.abs();
        int int45 = fraction4.compareTo((java.lang.Object) fraction42);
        java.lang.String str46 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction4);
        org.apache.commons.math.fraction.Fraction fraction49 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str50 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction49);
        float float51 = fraction49.floatValue();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction49.negate();
        java.lang.String str53 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction52);
        double double54 = fraction52.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction4.divide(fraction52);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction1.multiply(fraction52);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35 + "'", int5 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 599 + "'", int43 == 599);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "35 / 1" + "'", str46, "35 / 1");
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1 / 1" + "'", str50, "1 / 1");
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1 / 1" + "'", str53, "-1 / 1");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
    }

    @Test
    public void test11235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11235");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale10);
        java.lang.String str13 = numberFormat11.format(0.0d);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        boolean boolean16 = numberFormat11.equals((java.lang.Object) strSet15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat11);
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field18);
        int int20 = fieldPosition19.getBeginIndex();
        java.text.NumberFormat.Field field21 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean22 = fieldPosition19.equals((java.lang.Object) field21);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator23 = fractionFormat17.formatToCharacterIterator((java.lang.Object) field21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11236");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ub3c5\uc77c");
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale1.getDisplayVariant(locale2);
        java.util.Locale locale5 = locale1.stripExtensions();
        java.util.Set<java.lang.Character> charSet6 = locale1.getExtensionKeys();
        java.lang.String str7 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test11237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11237");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        numberFormat4.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode9 = numberFormat4.getRoundingMode();
        numberFormat4.setMinimumFractionDigits(100);
        numberFormat4.setMaximumFractionDigits(0);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode9 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode9.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11238");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        boolean boolean10 = locale7.hasExtensions();
        java.lang.String str11 = locale0.getDisplayVariant(locale7);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        numberFormat15.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field20 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition((java.text.Format.Field) field20);
        java.lang.String str22 = fieldPosition21.toString();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = locale23.getDisplayName(locale24);
        boolean boolean27 = fieldPosition21.equals((java.lang.Object) locale24);
        fieldPosition21.setEndIndex((int) '#');
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getCurrencyInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat32.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition35);
        boolean boolean37 = fieldPosition21.equals((java.lang.Object) parsePosition35);
        java.lang.Number number38 = numberFormat15.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition35);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction42.abs();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getInstance(locale45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        boolean boolean48 = numberFormat46.equals((java.lang.Object) locale47);
        boolean boolean49 = fraction44.equals((java.lang.Object) locale47);
        boolean boolean50 = parsePosition35.equals((java.lang.Object) locale47);
        java.lang.String str51 = locale0.getDisplayScript(locale47);
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale53 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(field20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str22, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Chinese (Taiwan)" + "'", str26, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(number38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
    }

    @Test
    public void test11239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11239");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getBeginIndex();
        int int3 = fieldPosition1.getField();
        int int4 = fieldPosition1.getEndIndex();
        java.text.Format.Field field5 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition(field5, (-120));
        java.lang.String str8 = field5.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.NumberFormat$Field(grouping separator)" + "'", str8, "java.text.NumberFormat$Field(grouping separator)");
    }

    @Test
    public void test11240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11240");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition((int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction9.add(fraction15);
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction18.divide(fraction21);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = locale24.getScript();
        boolean boolean27 = fraction23.equals((java.lang.Object) locale24);
        boolean boolean28 = parsePosition5.equals((java.lang.Object) boolean27);
        java.lang.Object obj29 = numberFormat2.parseObject("zh_tw", parsePosition5);
        java.lang.String str30 = parsePosition5.toString();
        java.lang.String str31 = parsePosition5.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-TW" + "'", str1, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.ParsePosition[index=100,errorIndex=100]" + "'", str30, "java.text.ParsePosition[index=100,errorIndex=100]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.ParsePosition[index=100,errorIndex=100]" + "'", str31, "java.text.ParsePosition[index=100,errorIndex=100]");
    }

    @Test
    public void test11241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11241");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder10 = builder3.removeUnicodeLocaleAttribute("zho");
        java.util.Locale locale11 = builder3.build();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.String str14 = locale13.getCountry();
        java.lang.String str15 = locale13.getDisplayScript();
        java.util.Set<java.lang.String> strSet16 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale13.getDisplayVariant();
        java.lang.String str18 = locale13.getLanguage();
        java.util.Locale.Builder builder19 = builder3.setLocale(locale13);
        boolean boolean21 = locale13.equals((java.lang.Object) (byte) -16);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "japan__#a-twn");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test11242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11242");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        java.util.Locale.Builder builder15 = builder8.setLanguage("CHN");
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "ZH_TW");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder15.setLanguage("zh_TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: zh_TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test11243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11243");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setRegion("100%_ZH-TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 100%_ZH-TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test11244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11244");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.lang.String str19 = numberFormat15.format(0.008333333333333333d);
        boolean boolean20 = numberFormat15.isParseIntegerOnly();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj24 = numberFormat15.parseObject("\u65e5\u6587", parsePosition23);
        int int25 = parsePosition23.getErrorIndex();
        java.lang.Object obj26 = properFractionFormat0.parseObject("\uc601\uc5b4\ubbf8\uad6d)", parsePosition23);
        int int27 = parsePosition23.getIndex();
        int int28 = parsePosition23.getErrorIndex();
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1%" + "'", str19, "1%");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test11245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11245");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) 'x', 117);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction7.subtract(fraction11);
        java.text.NumberFormat.Field field13 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field13, (int) '#');
        java.text.Format.Field field16 = fieldPosition15.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction25 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.negate();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction22.multiply(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction19.add(fraction26);
        boolean boolean29 = field16.equals((java.lang.Object) fraction19);
        int int30 = fraction19.intValue();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction34.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction34.add(fraction40);
        org.apache.commons.math.fraction.Fraction fraction46 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.negate();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction43.divide(fraction46);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction54 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction43.subtract(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction19.add(fraction54);
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.negate();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.abs();
        long long67 = fraction65.longValue();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction61.multiply(fraction65);
        org.apache.commons.math.fraction.Fraction fraction71 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.negate();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.abs();
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.negate();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction77.abs();
        long long79 = fraction77.longValue();
        org.apache.commons.math.fraction.Fraction fraction80 = fraction73.multiply(fraction77);
        org.apache.commons.math.fraction.Fraction fraction81 = fraction61.divide(fraction80);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction54.subtract(fraction80);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction12.multiply(fraction54);
        java.lang.StringBuffer stringBuffer85 = null;
        java.text.NumberFormat.Field field86 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition88 = new java.text.FieldPosition((java.text.Format.Field) field86, (int) '#');
        java.text.Format.Field field89 = fieldPosition88.getFieldAttribute();
        java.text.Format.Field field90 = fieldPosition88.getFieldAttribute();
        java.text.FieldPosition fieldPosition92 = new java.text.FieldPosition(field90, 599);
        int int93 = fieldPosition92.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer94 = properFractionFormat2.format(fraction84, stringBuffer85, fieldPosition92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(field13);
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(fraction80);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(field86);
        org.junit.Assert.assertNotNull(field89);
        org.junit.Assert.assertNotNull(field90);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 599 + "'", int93 == 599);
    }

    @Test
    public void test11246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11246");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str11 = fractionFormat9.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat12 = fractionFormat9.getNumeratorFormat();
        numberFormat12.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency15 = numberFormat12.getCurrency();
        numberFormat6.setCurrency(currency15);
        java.lang.Object obj17 = numberFormat6.clone();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency20 = numberFormat19.getCurrency();
        java.lang.String str22 = numberFormat19.format(1.0d);
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale24);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat26.setMinimumIntegerDigits(1);
        numberFormat26.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj35 = numberFormat26.parseObject("Japan", parsePosition34);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException39 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str40 = fractionConversionException39.getPattern();
        java.lang.Throwable[] throwableArray41 = fractionConversionException39.getSuppressed();
        java.lang.Object[] objArray42 = fractionConversionException39.getArguments();
        boolean boolean43 = parsePosition34.equals((java.lang.Object) objArray42);
        int int44 = parsePosition34.getIndex();
        java.lang.String str45 = parsePosition34.toString();
        java.lang.Object obj46 = numberFormat19.parseObject("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition34);
        int int47 = parsePosition34.getIndex();
        java.lang.Number number48 = numberFormat6.parse("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 97 to fraction after 0 iterations", parsePosition34);
        properFractionFormat4.setWholeFormat(numberFormat6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinese" + "'", str1, "Chinese");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "100 0 / 1" + "'", str11, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency20);
        org.junit.Assert.assertEquals(currency20.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "100%" + "'", str22, "100%");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "TWD");
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str40, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str45, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNull(number48);
    }

    @Test
    public void test11247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11247");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((-14400), (int) 'a');
        int int3 = fraction2.intValue();
        byte byte4 = fraction2.byteValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-148) + "'", int3 == (-148));
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 108 + "'", byte4 == (byte) 108);
    }

    @Test
    public void test11248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11248");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder8.setVariant("");
        java.util.Locale locale11 = builder8.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder8.setLanguage("\uc77c\ubcf8\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "canada");
    }

    @Test
    public void test11249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11249");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        boolean boolean19 = locale14.hasExtensions();
        java.lang.String str20 = locale14.toLanguageTag();
        java.util.Locale.setDefault(category0, locale14);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getPercentInstance(locale14);
        numberFormat22.setParseIntegerOnly(true);
        boolean boolean25 = numberFormat22.isParseIntegerOnly();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japan" + "'", str16, "Japan");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test11250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11250");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        double double7 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction5.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.multiply(fraction5);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction12.multiply(fraction15);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction21.subtract(fraction24);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction15.subtract(fraction24);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction32 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction33 = fraction32.negate();
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        long long40 = fraction38.longValue();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction34.multiply(fraction38);
        org.apache.commons.math.fraction.Fraction fraction44 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str45 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction44);
        long long46 = fraction44.longValue();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction44.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction34.add(fraction44);
        int int49 = fraction44.intValue();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction28.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction51 = fraction9.subtract(fraction50);
        java.lang.Class<?> wildcardClass52 = fraction50.getClass();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.008333333333333333d) + "'", double7 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1 / 100" + "'", str45, "-1 / 100");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test11251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11251");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction4.divide(fraction23);
        int int25 = fraction23.getNumerator();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder26.setScript("");
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.lang.String str31 = locale29.toLanguageTag();
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getISO3Language();
        java.lang.String str35 = locale29.getDisplayScript(locale32);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.lang.String str37 = locale29.getDisplayCountry(locale36);
        java.util.Locale.Builder builder38 = builder26.setLocale(locale36);
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getInstance(locale36);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction45 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.negate();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction42.multiply(fraction46);
        java.lang.String str48 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction42);
        java.lang.String str49 = numberFormat39.format((java.lang.Object) fraction42);
        org.apache.commons.math.fraction.Fraction fraction50 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.abs();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.abs();
        long long61 = fraction59.longValue();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction55.multiply(fraction59);
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction66 = fraction65.negate();
        org.apache.commons.math.fraction.Fraction fraction67 = fraction66.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.negate();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction71.abs();
        long long73 = fraction71.longValue();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction67.multiply(fraction71);
        org.apache.commons.math.fraction.Fraction fraction75 = fraction59.subtract(fraction74);
        org.apache.commons.math.fraction.Fraction fraction78 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction79 = fraction78.negate();
        double double80 = fraction78.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction84 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction85 = fraction78.multiply(fraction84);
        boolean boolean86 = fraction75.equals((java.lang.Object) fraction78);
        int int87 = fraction75.intValue();
        int int88 = fraction75.getDenominator();
        int int89 = fraction75.intValue();
        org.apache.commons.math.fraction.Fraction fraction90 = fraction42.divide(fraction75);
        org.apache.commons.math.fraction.Fraction fraction91 = fraction23.add(fraction75);
        org.apache.commons.math.fraction.Fraction fraction92 = fraction91.negate();
        org.apache.commons.math.fraction.Fraction fraction93 = fraction92.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese" + "'", str30, "Chinese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh-TW" + "'", str31, "zh-TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zho" + "'", str34, "zho");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Taiwan" + "'", str37, "Taiwan");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "20 / 7" + "'", str48, "20 / 7");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2,857" + "'", str49, "2,857");
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertNotNull(fraction75);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.008333333333333333d) + "'", double80 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 14400 + "'", int88 == 14400);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertNotNull(fraction92);
        org.junit.Assert.assertNotNull(fraction93);
    }

    @Test
    public void test11252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11252");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str4 = locale1.getDisplayVariant();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        properFractionFormat10.setWholeFormat(numberFormat12);
        java.text.NumberFormat numberFormat15 = properFractionFormat10.getWholeFormat();
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number19 = numberFormat15.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition18);
        parsePosition18.setErrorIndex(0);
        int int22 = parsePosition18.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction23 = fractionFormat6.parse("59,999%", parsePosition18);
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction(120, (int) (byte) -120);
        int int27 = fraction26.intValue();
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setScript("");
        java.util.Locale locale31 = builder28.build();
        java.util.Locale.Builder builder33 = builder28.setRegion("en");
        java.util.Locale locale34 = builder33.build();
        boolean boolean35 = fraction26.equals((java.lang.Object) locale34);
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction39.abs();
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        java.util.Locale locale44 = java.util.Locale.getDefault();
        boolean boolean45 = numberFormat43.equals((java.lang.Object) locale44);
        boolean boolean46 = fraction41.equals((java.lang.Object) locale44);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction41.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction26.multiply(fraction48);
        java.lang.StringBuffer stringBuffer50 = null;
        java.text.NumberFormat.Field field51 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition53 = new java.text.FieldPosition((java.text.Format.Field) field51, (int) '#');
        java.text.Format.Field field54 = fieldPosition53.getFieldAttribute();
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction60.multiply(fraction64);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction57.add(fraction64);
        boolean boolean67 = field54.equals((java.lang.Object) fraction57);
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition(field54);
        java.text.Format.Field field69 = fieldPosition68.getFieldAttribute();
        fieldPosition68.setBeginIndex((int) 'u');
        java.util.Locale locale73 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat74 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale73);
        java.lang.String str76 = fractionFormat74.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat77 = fractionFormat74.getNumeratorFormat();
        java.text.NumberFormat numberFormat78 = fractionFormat74.getNumeratorFormat();
        java.text.NumberFormat numberFormat79 = fractionFormat74.getNumeratorFormat();
        boolean boolean80 = fieldPosition68.equals((java.lang.Object) numberFormat79);
        int int81 = fieldPosition68.getField();
        fieldPosition68.setEndIndex((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer84 = fractionFormat6.format(fraction48, stringBuffer50, fieldPosition68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "_EN");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(field51);
        org.junit.Assert.assertNotNull(field54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(field69);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "100 0 / 1" + "'", str76, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test11253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11253");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale9 = builder5.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
    }

    @Test
    public void test11254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11254");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.setLanguageTag("fr");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.setVariant("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11255");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setLanguageTag("96");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 96 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test11256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11256");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.setExtension('x', "zho");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder9.clear();
        java.util.Locale.Builder builder14 = builder12.setLanguage("JPN");
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getISO3Language();
        java.lang.String str19 = locale15.getDisplayScript(locale17);
        java.lang.String str20 = locale15.toLanguageTag();
        java.lang.String str21 = locale15.getDisplayVariant();
        java.util.Locale locale22 = locale15.stripExtensions();
        java.lang.String str23 = locale22.getDisplayName();
        java.util.Locale.Builder builder24 = builder14.setLocale(locale22);
        java.util.Locale.Builder builder26 = builder24.setVariant("");
        java.util.Locale locale27 = builder26.build();
        java.lang.String str29 = locale27.getExtension('u');
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test11257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11257");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat6 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2);
        java.lang.Object obj7 = numberFormat2.clone();
        boolean boolean8 = numberFormat2.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11258");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale0.getDisplayCountry(locale2);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getISO3Language();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale0.getDisplayScript(locale6);
        java.text.NumberFormat.Field field11 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field11);
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition((java.text.Format.Field) field11, 1);
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition((java.text.Format.Field) field11, (int) (short) 100);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        boolean boolean23 = field11.equals((java.lang.Object) locale18);
        boolean boolean24 = locale18.hasExtensions();
        java.lang.String str25 = locale0.getDisplayLanguage(locale18);
        java.util.Locale locale29 = new java.util.Locale("taiwan (ZH_TW,10,000%)", "java.text.AttributedCharacterIterator$Attribute(reading)", "Chinesisch");
        java.util.Locale locale31 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.lang.String str32 = locale29.getDisplayVariant(locale31);
        java.util.Locale locale33 = locale29.stripExtensions();
        java.lang.String str34 = locale18.getDisplayName(locale29);
        java.lang.String str35 = locale18.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str4, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str9, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japan" + "'", str20, "Japan");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Italian" + "'", str25, "Italian");
        org.junit.Assert.assertEquals(locale29.toString(), "taiwan (zh_tw,10,000%)_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)_Chinesisch");
        org.junit.Assert.assertEquals(locale31.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinesisch" + "'", str32, "Chinesisch");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "taiwan (zh_tw,10,000%)_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)_Chinesisch");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test11259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11259");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat4.setMinimumIntegerDigits(0);
        numberFormat4.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction12 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str13 = numberFormat4.format((java.lang.Object) 100.0f);
        java.lang.Object obj14 = numberFormat4.clone();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance();
        numberFormat15.setParseIntegerOnly(true);
        java.math.RoundingMode roundingMode18 = numberFormat15.getRoundingMode();
        int int19 = numberFormat15.getMinimumIntegerDigits();
        numberFormat15.setMinimumFractionDigits(20);
        boolean boolean22 = numberFormat15.isGroupingUsed();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getCurrencyInstance();
        int int24 = numberFormat23.getMaximumFractionDigits();
        boolean boolean25 = numberFormat23.isParseIntegerOnly();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getIntegerInstance();
        java.util.Locale locale28 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat29 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale28);
        java.lang.String str31 = fractionFormat29.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat32 = fractionFormat29.getNumeratorFormat();
        numberFormat32.setMaximumFractionDigits((int) (short) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat35 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat23, numberFormat26, numberFormat32);
        java.util.Locale locale37 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale37);
        java.lang.String str40 = fractionFormat38.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat41 = fractionFormat38.getNumeratorFormat();
        numberFormat41.setMaximumFractionDigits((int) (short) -1);
        int int44 = numberFormat41.getMinimumFractionDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        numberFormat41.setGroupingUsed(true);
        java.util.Currency currency48 = numberFormat41.getCurrency();
        numberFormat41.setMaximumFractionDigits((int) (byte) 100);
        properFractionFormat35.setDenominatorFormat(numberFormat41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat15, numberFormat41);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100" + "'", str13, "100");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + roundingMode18 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode18.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100 0 / 1" + "'", str31, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "100 0 / 1" + "'", str40, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
    }

    @Test
    public void test11260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11260");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        boolean boolean19 = locale14.hasExtensions();
        java.lang.String str20 = locale14.toLanguageTag();
        java.util.Locale.setDefault(category0, locale14);
        java.util.Locale locale22 = java.util.Locale.getDefault(category0);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale31 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category24, locale31);
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction36.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction42.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction36.add(fraction42);
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction45.divide(fraction48);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale51.getScript();
        boolean boolean54 = fraction50.equals((java.lang.Object) locale51);
        java.util.Locale.setDefault(category24, locale51);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category24, locale56);
        java.lang.String str58 = locale23.getDisplayCountry(locale56);
        java.lang.String str59 = locale56.toLanguageTag();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str11, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japan" + "'", str16, "Japan");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals(locale31.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "en" + "'", str59, "en");
    }

    @Test
    public void test11261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11261");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("-20 / 7");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11262");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("und");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test11263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11263");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("ita");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setScript("");
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.lang.String str14 = locale12.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale12.getDisplayCountry(locale19);
        java.util.Locale.Builder builder21 = builder9.setLocale(locale19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getISO3Language();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        java.lang.String str27 = locale22.toLanguageTag();
        java.lang.String str28 = locale22.getDisplayVariant();
        java.lang.String str29 = locale22.getVariant();
        java.util.Locale.Builder builder30 = builder21.setLocale(locale22);
        java.util.Locale.Builder builder31 = builder21.clearExtensions();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale35);
        java.util.Locale.setDefault(category33, locale35);
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category33, locale38);
        java.lang.String str40 = locale32.getDisplayLanguage(locale38);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale.Builder builder42 = builder31.setLocale(locale32);
        java.util.Locale.Builder builder43 = builder8.setLocale(locale32);
        java.util.Set<java.lang.Character> charSet44 = locale32.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "anglais" + "'", str40, "anglais");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charSet44);
    }

    @Test
    public void test11264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11264");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction(100.0d);
        double double2 = fraction1.doubleValue();
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction1);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction1.negate();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.0d + "'", double2 == 100.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100 / 1" + "'", str3, "100 / 1");
        org.junit.Assert.assertNotNull(fraction4);
    }

    @Test
    public void test11265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11265");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale4);
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale4);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test11266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11266");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) '4', (int) (short) -100);
    }

    @Test
    public void test11267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11267");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        java.text.NumberFormat.Field field9 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field9);
        java.lang.String str11 = fieldPosition10.toString();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = locale12.getDisplayName(locale13);
        boolean boolean16 = fieldPosition10.equals((java.lang.Object) locale13);
        fieldPosition10.setEndIndex((int) '#');
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction25 = properFractionFormat21.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition24);
        boolean boolean26 = fieldPosition10.equals((java.lang.Object) parsePosition24);
        java.lang.String str27 = parsePosition24.toString();
        int int28 = parsePosition24.getIndex();
        int int29 = parsePosition24.getErrorIndex();
        parsePosition24.setErrorIndex((int) (short) 120);
        parsePosition24.setIndex((int) (byte) -101);
        boolean boolean34 = languageRange1.equals((java.lang.Object) (byte) -101);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-tw" + "'", str2, "zh-tw");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh-tw" + "'", str3, "zh-tw");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str11, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese (Taiwan)" + "'", str15, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(fraction25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str27, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11268");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale0.getDisplayCountry(locale2);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category4, locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat17);
        boolean boolean20 = numberFormat17.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat15, numberFormat17);
        fractionFormat13.setDenominatorFormat(numberFormat17);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.setScript("");
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale26.getDisplayLanguage(locale28);
        java.util.Locale.Builder builder30 = builder25.setLocale(locale26);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("chinois (Taiwan)");
        java.util.Locale.Builder builder33 = builder30.setLocale(locale32);
        boolean boolean34 = numberFormat17.equals((java.lang.Object) builder30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder30.setVariant("30,000%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 30,000% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Taiwan" + "'", str3, "Taiwan");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "chinois" + "'", str12, "chinois");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinesisch" + "'", str29, "Chinesisch");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11269");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getBeginIndex();
        int int3 = fieldPosition1.getField();
        fieldPosition1.setEndIndex(117);
        int int6 = fieldPosition1.getEndIndex();
        fieldPosition1.setEndIndex(2);
        int int9 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 117 + "'", int6 == 117);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test11270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11270");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.lang.String str6 = locale0.getDisplayCountry();
        java.lang.String str7 = locale0.getLanguage();
        java.lang.String str8 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale0);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ko" + "'", str7, "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko" + "'", str8, "ko");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
    }

    @Test
    public void test11271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11271");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("en_CA", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=en_ca");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11272");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setMinimumIntegerDigits(0);
        java.lang.String str10 = numberFormat6.format(1.0d);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale11.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        boolean boolean38 = numberFormat24.equals((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat24);
        int int40 = numberFormat1.getMinimumFractionDigits();
        numberFormat1.setGroupingUsed(false);
        numberFormat1.setMaximumFractionDigits((int) (byte) -51);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str23, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "TWD");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test11273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11273");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        java.text.NumberFormat.Field field8 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field8);
        java.text.FieldPosition fieldPosition11 = new java.text.FieldPosition((java.text.Format.Field) field8, (int) (byte) 10);
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) field8);
        int int13 = fieldPosition1.getField();
        fieldPosition1.setEndIndex(0);
        java.text.Format.Field field16 = fieldPosition1.getFieldAttribute();
        java.lang.String str17 = fieldPosition1.toString();
        fieldPosition1.setEndIndex((int) (byte) -120);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(field8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(field16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str17, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11274");
        java.text.ParseException parseException2 = new java.text.ParseException("", 8654399);
        int int3 = parseException2.getErrorOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8654399 + "'", int3 == 8654399);
    }

    @Test
    public void test11275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11275");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        boolean boolean9 = locale6.hasExtensions();
        java.lang.String str10 = locale3.getDisplayScript(locale6);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale6);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(fractionFormat12);
    }

    @Test
    public void test11276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11276");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = properFractionFormat2.clone();
        java.text.NumberFormat numberFormat4 = properFractionFormat2.getWholeFormat();
        int int5 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale7.getDisplayCountry(locale8);
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getPercentInstance(locale18);
        int int20 = numberFormat19.getMaximumIntegerDigits();
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        numberFormat25.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency28 = numberFormat25.getCurrency();
        numberFormat19.setCurrency(currency28);
        numberFormat19.setGroupingUsed(false);
        java.lang.String str33 = numberFormat19.format((double) (short) 2);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (byte) 0);
        java.lang.Object obj37 = numberFormat19.parseObject("1%", parsePosition36);
        java.lang.Number number38 = numberFormat13.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (10/0)", parsePosition36);
        java.lang.Object obj39 = numberFormat4.parseObject("-144 / 1", parsePosition36);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japan" + "'", str10, "Japan");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(currency28);
        org.junit.Assert.assertEquals(currency28.toString(), "XXX");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "200%" + "'", str33, "200%");
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + 0.01d + "'", obj37, 0.01d);
        org.junit.Assert.assertNull(number38);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test11277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11277");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(200, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The denominator must not be zero");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11278");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("java.text.FieldPosition[field=96,attribute=null,beginIndex=0,endIndex=35]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.fieldposition[field=96");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11279");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Locale locale5 = new java.util.Locale("Overflow trying to convert {0} to fraction ({1}/{2})", "anglais");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale7.getDisplayLanguage(locale9);
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.lang.String str12 = locale5.getDisplayLanguage(locale9);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale5);
        java.lang.String str14 = locale5.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals(locale5.toString(), "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinesisch" + "'", str10, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "overflow trying to convert {0} to fraction ({1}/{2})" + "'", str12, "overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS" + "'", str14, "overflow trying to convert {0} to fraction ({1}/{2})_ANGLAIS");
    }

    @Test
    public void test11280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11280");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.lang.String str3 = locale0.getDisplayLanguage(locale2);
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale2);
        java.lang.String str6 = locale2.getDisplayLanguage();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder7.setVariant("");
        java.util.Locale.Builder builder12 = builder10.setLanguage("Japan");
        java.util.Locale.Builder builder15 = builder10.setExtension('a', "TWN");
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        boolean boolean19 = numberFormat17.equals((java.lang.Object) locale18);
        java.util.Locale locale21 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getIntegerInstance(locale21);
        java.lang.String str25 = locale18.getDisplayVariant(locale21);
        java.lang.String str26 = locale18.getDisplayCountry();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getInstance(locale18);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance(locale18);
        java.util.Locale.Builder builder29 = builder15.setLocale(locale18);
        java.util.Locale locale32 = new java.util.Locale("eng", "\ub300\ub9cc");
        java.lang.String str33 = locale18.getDisplayName(locale32);
        java.lang.String str34 = locale2.getDisplayLanguage(locale32);
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinesisch" + "'", str3, "Chinesisch");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str6, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ub300\ub9cc" + "'", str26, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(builder29);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese (Taiwan)" + "'", str33, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test11281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11281");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Germany");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "germany" + "'", str2, "germany");
    }

    @Test
    public void test11282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11282");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("java.text.ParsePosition[index=32,errorIndex=32]", (double) 2.8654761f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.865476131439209");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11283");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        int int27 = fraction21.intValue();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction21.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction21.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction8.add(fraction21);
        int int31 = fraction8.getDenominator();
        java.lang.StringBuffer stringBuffer32 = null;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition(100);
        fieldPosition34.setBeginIndex((int) 'u');
        java.lang.String str37 = fieldPosition34.toString();
        int int38 = fieldPosition34.getBeginIndex();
        int int39 = fieldPosition34.getBeginIndex();
        fieldPosition34.setBeginIndex(59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer42 = properFractionFormat2.format(fraction8, stringBuffer32, fieldPosition34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]" + "'", str37, "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 117 + "'", int38 == 117);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 117 + "'", int39 == 117);
    }

    @Test
    public void test11284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11284");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale3);
        java.util.Currency currency6 = numberFormat5.getCurrency();
        numberFormat5.setMinimumIntegerDigits(1);
        numberFormat5.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj14 = numberFormat5.parseObject("Japan", parsePosition13);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException18 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str19 = fractionConversionException18.getPattern();
        java.lang.Throwable[] throwableArray20 = fractionConversionException18.getSuppressed();
        java.lang.Object[] objArray21 = fractionConversionException18.getArguments();
        boolean boolean22 = parsePosition13.equals((java.lang.Object) objArray21);
        int int23 = parsePosition13.getIndex();
        int int24 = parsePosition13.getIndex();
        java.lang.Object obj25 = fractionFormat1.parseObject("\ud55c\uad6d\uc5b4", parsePosition13);
        java.text.NumberFormat numberFormat26 = fractionFormat1.getDenominatorFormat();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat30.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        int int35 = parsePosition33.getErrorIndex();
        java.lang.String str36 = parsePosition33.toString();
        java.lang.String str37 = parsePosition33.toString();
        java.lang.String str38 = parsePosition33.toString();
        java.lang.Object obj39 = fractionFormat1.parseObject("\u82f1\u6587\ub300\ub9cc)", parsePosition33);
        parsePosition33.setErrorIndex(40);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency6);
        org.junit.Assert.assertEquals(currency6.toString(), "TWD");
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str19, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str36, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str37, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str38, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test11285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11285");
        java.util.Locale locale1 = new java.util.Locale("English (Canada)");
        java.lang.String str2 = locale1.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "english (canada)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11286");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        boolean boolean2 = numberFormat1.isGroupingUsed();
        java.lang.Object obj3 = numberFormat1.clone();
        java.math.RoundingMode roundingMode4 = numberFormat1.getRoundingMode();
        java.lang.String str6 = numberFormat1.format((double) (-1.3888889E-4f));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + roundingMode4 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode4.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-0%" + "'", str6, "-0%");
    }

    @Test
    public void test11287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11287");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = field0.toString();
        java.text.ParseException parseException5 = new java.text.ParseException("\uc911\uad6d\uc5b4", 0);
        int int6 = parseException5.getErrorOffset();
        java.lang.Throwable[] throwableArray7 = parseException5.getSuppressed();
        int int8 = parseException5.getErrorOffset();
        boolean boolean9 = field0.equals((java.lang.Object) int8);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.Format.Field field11 = fieldPosition10.getFieldAttribute();
        fieldPosition10.setBeginIndex((-14399));
        fieldPosition10.setBeginIndex(840);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(decimal separator)" + "'", str2, "java.text.NumberFormat$Field(decimal separator)");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(field11);
    }

    @Test
    public void test11288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11288");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale2);
        numberFormat11.setMinimumIntegerDigits((int) (byte) 1);
        int int14 = numberFormat11.getMinimumFractionDigits();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale15);
        java.text.NumberFormat numberFormat17 = fractionFormat16.getDenominatorFormat();
        java.text.NumberFormat numberFormat18 = fractionFormat16.getNumeratorFormat();
        java.text.NumberFormat numberFormat19 = fractionFormat16.getDenominatorFormat();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getPercentInstance(locale20);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        numberFormat21.setMaximumFractionDigits(100);
        numberFormat21.setMaximumFractionDigits((int) (byte) 100);
        numberFormat21.setMaximumFractionDigits((int) (byte) -1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat29 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat21);
        java.math.RoundingMode roundingMode30 = numberFormat21.getRoundingMode();
        numberFormat19.setRoundingMode(roundingMode30);
        numberFormat11.setRoundingMode(roundingMode30);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ub300\ub9cc" + "'", str10, "\ub300\ub9cc");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + roundingMode30 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode30.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11289");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder5.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale10 = builder9.build();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale.Builder builder13 = builder9.addUnicodeLocaleAttribute("119");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguageTag("java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: java.text.fieldposition[field=100,attribute=null,beginindex=0,endindex=0]_us [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "france__#u-fra");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11290");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.setVariant("Korean");
        java.util.Locale.Builder builder10 = builder9.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setScript("kor");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: kor [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11291");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-tw");
        java.lang.String str2 = languageRange1.getRange();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.AttributedCharacterIterator attributedCharacterIterator7 = numberFormat4.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj8 = numberFormat4.clone();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getCurrencyInstance(locale10);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat12 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat12.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition15);
        java.lang.Object obj17 = numberFormat4.parseObject("zh-TW", parsePosition15);
        numberFormat4.setMinimumIntegerDigits((int) (byte) 0);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getInstance(locale20);
        boolean boolean22 = numberFormat21.isParseIntegerOnly();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleKeys();
        java.lang.String str26 = locale23.getISO3Country();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getPercentInstance(locale31);
        int int33 = numberFormat32.getMaximumIntegerDigits();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        boolean boolean36 = numberFormat35.isGroupingUsed();
        java.util.Currency currency37 = numberFormat35.getCurrency();
        numberFormat32.setCurrency(currency37);
        java.util.Currency currency39 = numberFormat32.getCurrency();
        int int40 = numberFormat32.getMaximumFractionDigits();
        java.lang.Object obj41 = numberFormat32.clone();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        numberFormat43.setMaximumFractionDigits(100);
        numberFormat43.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str50 = numberFormat43.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat32, numberFormat43);
        numberFormat43.setMinimumIntegerDigits(600);
        numberFormat43.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat21, numberFormat43);
        boolean boolean57 = languageRange1.equals((java.lang.Object) properFractionFormat56);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-tw" + "'", str2, "zh-tw");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(attributedCharacterIterator7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNull(fraction16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100%" + "'", str50, "100%");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11292");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.multiply(fraction6);
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction19 = fraction10.add(fraction17);
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        long long30 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction24.multiply(fraction28);
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        long long42 = fraction40.longValue();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction36.multiply(fraction40);
        org.apache.commons.math.fraction.Fraction fraction44 = fraction24.divide(fraction43);
        org.apache.commons.math.fraction.Fraction fraction45 = fraction10.subtract(fraction44);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction7.multiply(fraction10);
        float float47 = fraction46.floatValue();
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction53 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction54 = fraction53.negate();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction50.multiply(fraction54);
        org.apache.commons.math.fraction.Fraction fraction56 = fraction50.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction46.multiply(fraction56);
        float float58 = fraction56.floatValue();
        long long59 = fraction56.longValue();
        int int60 = fraction56.getNumerator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + (-1.984127E-4f) + "'", float47 == (-1.984127E-4f));
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 0.35f + "'", float58 == 0.35f);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
    }

    @Test
    public void test11293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11293");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.lang.String str7 = locale6.toLanguageTag();
        java.lang.String str9 = locale6.getExtension('x');
        boolean boolean10 = locale6.hasExtensions();
        java.util.Locale.Builder builder11 = builder3.setLocale(locale6);
        java.util.Locale.Builder builder12 = builder3.clear();
        java.util.Locale.Builder builder13 = builder3.clear();
        java.util.Locale.Builder builder14 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setRegion("org.apache.commons.math.fraction.FractionConversionException: Unable to convert -0.008 to fraction after 10 iterations");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: org.apache.commons.math.fraction.FractionConversionException: Unable to convert -0.008 to fraction after 10 iterations [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh-TW" + "'", str7, "zh-TW");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test11294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11294");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        double double28 = fraction26.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction26.abs();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 14400.0d + "'", double28 == 14400.0d);
        org.junit.Assert.assertNotNull(fraction29);
    }

    @Test
    public void test11295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11295");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.Object obj2 = null;
        boolean boolean3 = field0.equals(obj2);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition(10);
        int int6 = fieldPosition5.getEndIndex();
        fieldPosition5.setBeginIndex((int) '#');
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str10 = locale9.getScript();
        java.util.Locale locale14 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str15 = locale9.getDisplayScript(locale14);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale14);
        int int17 = numberFormat16.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat19 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat16);
        boolean boolean20 = fieldPosition5.equals((java.lang.Object) numberFormat16);
        numberFormat16.setGroupingUsed(false);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet26 = locale23.getExtensionKeys();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getCurrencyInstance(locale23);
        org.apache.commons.math.fraction.FractionFormat fractionFormat28 = new org.apache.commons.math.fraction.FractionFormat(numberFormat16, numberFormat27);
        java.text.NumberFormat numberFormat29 = fractionFormat28.getDenominatorFormat();
        boolean boolean30 = field0.equals((java.lang.Object) fractionFormat28);
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition((java.text.Format.Field) field0, 120);
        java.lang.String str33 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale14.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.text.NumberFormat$Field(exponent)" + "'", str33, "java.text.NumberFormat$Field(exponent)");
    }

    @Test
    public void test11296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11296");
        java.util.Locale locale3 = new java.util.Locale("TW", "", "\u4e2d\u6587\u4e2d\u570b)");
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str7 = locale4.getDisplayScript(locale6);
        java.lang.String str8 = locale4.getScript();
        java.lang.String str9 = locale3.getDisplayCountry(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat12 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.text.NumberFormat numberFormat13 = fractionFormat12.getDenominatorFormat();
        numberFormat13.setMinimumIntegerDigits(1728000);
        numberFormat13.setMinimumIntegerDigits(20);
        boolean boolean18 = numberFormat13.isGroupingUsed();
        fractionFormat10.setDenominatorFormat(numberFormat13);
        java.lang.String str21 = numberFormat13.format((long) 14399);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "00,000,000,000,000,014,399" + "'", str21, "00,000,000,000,000,014,399");
    }

    @Test
    public void test11297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11297");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder0.setExtension('x', "zho");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clearExtensions();
        java.util.Locale.Builder builder13 = builder9.setLanguage("TWN");
        java.util.Locale locale15 = new java.util.Locale("0%");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder9.setLocale(locale15);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 0% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals(locale15.toString(), "0%");
    }

    @Test
    public void test11298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11298");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((-14400), (int) (short) 100);
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.multiply(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str13 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction12);
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction17.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction23.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction17.add(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction12.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction12.negate();
        long long29 = fraction28.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction10.divide(fraction28);
        org.apache.commons.math.fraction.Fraction fraction31 = fraction2.add(fraction10);
        java.lang.Object obj32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = fraction31.compareTo(obj32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-144 / 1" + "'", str3, "-144 / 1");
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1 / 1" + "'", str13, "1 / 1");
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
    }

    @Test
    public void test11299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11299");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.util.Set<java.lang.Character> charSet11 = locale8.getExtensionKeys();
        java.lang.String str12 = locale3.getDisplayScript(locale8);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale8);
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
    }

    @Test
    public void test11300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11300");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field1 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean2 = field0.equals((java.lang.Object) field1);
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0, (-1));
        java.text.FieldPosition fieldPosition6 = new java.text.FieldPosition((java.text.Format.Field) field0, 0);
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 1);
        int int10 = fieldPosition9.getField();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test11301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11301");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        boolean boolean5 = numberFormat2.isGroupingUsed();
        numberFormat2.setMaximumIntegerDigits((int) (short) 1);
        int int8 = numberFormat2.getMaximumFractionDigits();
        numberFormat2.setMaximumIntegerDigits(60);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(119);
        java.lang.StringBuffer stringBuffer13 = null;
        java.text.NumberFormat.Field field14 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((java.text.Format.Field) field14);
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition((java.text.Format.Field) field14, (int) (short) 0);
        java.lang.String str18 = field14.toString();
        java.lang.String str19 = field14.toString();
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((java.text.Format.Field) field14);
        int int21 = fieldPosition20.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer22 = numberFormat2.format((java.lang.Object) parsePosition12, stringBuffer13, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(field14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.NumberFormat$Field(exponent sign)" + "'", str18, "java.text.NumberFormat$Field(exponent sign)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.NumberFormat$Field(exponent sign)" + "'", str19, "java.text.NumberFormat$Field(exponent sign)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test11302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11302");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-TW");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh-tw" + "'", str4, "zh-tw");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-tw" + "'", str5, "zh-tw");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test11303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11303");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((-0.008333333333333333d), 2147483647);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException6 = new org.apache.commons.math.fraction.FractionConversionException((double) (-120L), (long) 10, 10L);
        java.lang.Object[] objArray7 = fractionConversionException6.getArguments();
        fractionConversionException2.addSuppressed((java.lang.Throwable) fractionConversionException6);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException11 = new org.apache.commons.math.fraction.FractionConversionException(17.483333333333334d, 20);
        fractionConversionException6.addSuppressed((java.lang.Throwable) fractionConversionException11);
        java.lang.Throwable[] throwableArray13 = fractionConversionException6.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[-120.0, 10, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[-120.0, 10, 10]");
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test11304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11304");
        org.apache.commons.math.fraction.Fraction fraction0 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str1 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction0);
        long long2 = fraction0.longValue();
        org.apache.commons.math.fraction.Fraction fraction3 = fraction0.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction6.multiply(fraction10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        boolean boolean16 = fraction10.equals((java.lang.Object) properFractionFormat15);
        org.apache.commons.math.fraction.Fraction fraction17 = fraction0.subtract(fraction10);
        int int18 = fraction10.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction21 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction22 = fraction21.negate();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.abs();
        org.apache.commons.math.fraction.Fraction fraction26 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction27 = fraction26.negate();
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.abs();
        long long29 = fraction27.longValue();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction23.multiply(fraction27);
        double double31 = fraction30.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction30.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction35 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        long long47 = fraction45.longValue();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction41.multiply(fraction45);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction52.abs();
        org.apache.commons.math.fraction.Fraction fraction56 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.negate();
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.abs();
        long long59 = fraction57.longValue();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction53.multiply(fraction57);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction45.subtract(fraction60);
        org.apache.commons.math.fraction.Fraction fraction62 = fraction60.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction35.subtract(fraction64);
        org.apache.commons.math.fraction.Fraction fraction66 = fraction30.add(fraction65);
        long long67 = fraction66.longValue();
        int int68 = fraction66.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction10.multiply(fraction66);
        org.junit.Assert.assertNotNull(fraction0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1 / 1" + "'", str1, "1 / 1");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 6.944444444444444E-5d + "'", double31 == 6.944444444444444E-5d);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 14399L + "'", long67 == 14399L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 14400 + "'", int68 == 14400);
        org.junit.Assert.assertNotNull(fraction69);
    }

    @Test
    public void test11305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11305");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        java.util.Locale.Builder builder15 = builder8.setLanguage("CHN");
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "ZH_TW");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.setLanguage("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=-1] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test11306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11306");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("100%");
        java.lang.String str10 = locale3.getDisplayScript(locale9);
        java.lang.String str11 = locale3.getDisplayVariant();
        java.util.Set<java.lang.String> strSet12 = locale3.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test11307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11307");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.text.NumberFormat numberFormat1 = properFractionFormat0.getWholeFormat();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        numberFormat3.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale8);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale12);
        java.util.Currency currency15 = numberFormat14.getCurrency();
        numberFormat14.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat18 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat14);
        fractionFormat7.setDenominatorFormat(numberFormat14);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition((int) '#');
        parsePosition23.setErrorIndex(600);
        java.lang.Object obj26 = fractionFormat7.parseObject("French (France)", parsePosition23);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("chinois");
        java.lang.String str29 = locale28.getScript();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale28);
        fractionFormat7.setNumeratorFormat(numberFormat30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction33 = fractionFormat7.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 120 to fraction (117/0)");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 120 to fraction (117/0)\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "TWD");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "chinois");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
    }

    @Test
    public void test11308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11308");
        java.util.Locale locale1 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale4 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str5 = locale1.getDisplayCountry(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale1);
        java.lang.Object obj7 = numberFormat6.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale4.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test11309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11309");
        java.text.NumberFormat numberFormat0 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency1 = numberFormat0.getCurrency();
        java.lang.String str3 = numberFormat0.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat4 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat0);
        java.text.NumberFormat numberFormat5 = properFractionFormat4.getWholeFormat();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction12 = properFractionFormat8.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getPercentInstance(locale16);
        boolean boolean18 = numberFormat17.isGroupingUsed();
        properFractionFormat15.setWholeFormat(numberFormat17);
        java.text.NumberFormat numberFormat20 = properFractionFormat15.getWholeFormat();
        properFractionFormat8.setWholeFormat(numberFormat20);
        java.text.NumberFormat numberFormat22 = properFractionFormat8.getNumeratorFormat();
        java.text.NumberFormat numberFormat23 = properFractionFormat8.getWholeFormat();
        properFractionFormat4.setNumeratorFormat(numberFormat23);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean29 = numberFormat27.equals((java.lang.Object) numberFormat28);
        java.lang.Object obj30 = numberFormat28.clone();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean35 = numberFormat33.equals((java.lang.Object) numberFormat34);
        java.util.Locale locale40 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        int int42 = numberFormat41.getMaximumIntegerDigits();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        java.util.Currency currency46 = numberFormat44.getCurrency();
        numberFormat41.setCurrency(currency46);
        java.util.Currency currency48 = numberFormat41.getCurrency();
        java.math.RoundingMode roundingMode49 = numberFormat41.getRoundingMode();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) 'a');
        java.lang.String str53 = parsePosition52.toString();
        java.lang.String str54 = parsePosition52.toString();
        java.lang.Object obj55 = numberFormat41.parseObject("zho", parsePosition52);
        java.lang.String str56 = parsePosition52.toString();
        java.lang.Number number57 = numberFormat34.parse("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition52);
        java.lang.Object obj58 = numberFormat28.parseObject("cor\351en", parsePosition52);
        java.lang.Object obj59 = numberFormat23.parseObject("zh-TW", parsePosition52);
        java.lang.Object obj60 = numberFormat23.clone();
        org.junit.Assert.assertNotNull(numberFormat0);
        org.junit.Assert.assertNotNull(currency1);
// flaky:         org.junit.Assert.assertEquals(currency1.toString(), "XXX");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100%" + "'", str3, "100%");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(fraction12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals(locale40.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2147483647 + "'", int42 == 2147483647);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency48);
        org.junit.Assert.assertEquals(currency48.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode49 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode49.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str53, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str54, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=97]" + "'", str56, "java.text.ParsePosition[index=97,errorIndex=97]");
        org.junit.Assert.assertNull(number57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(obj60);
    }

    @Test
    public void test11310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11310");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getISO3Language();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.lang.String str8 = locale4.getDisplayScript();
        java.util.Set<java.lang.String> strSet9 = locale4.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "kor" + "'", str5, "kor");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test11311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11311");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) (byte) 100);
        java.util.Locale locale6 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale6);
        java.lang.String str9 = fractionFormat7.format((java.lang.Object) 100);
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) fractionFormat7);
        java.text.Format.Field field11 = fieldPosition1.getFieldAttribute();
        java.text.Format.Field field12 = fieldPosition1.getFieldAttribute();
        java.lang.String str13 = fieldPosition1.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100 0 / 1" + "'", str9, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(field11);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]" + "'", str13, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]");
    }

    @Test
    public void test11312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11312");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        boolean boolean5 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11313");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder5.setLanguageTag("fr");
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder11 = builder9.setRegion("EN");
        java.util.Locale.Builder builder12 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setLanguage("600");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 600 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test11314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11314");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = locale12.getDisplayScript(locale15);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale20 = java.util.Locale.getDefault(category0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.Object obj22 = null;
        java.lang.StringBuffer stringBuffer23 = null;
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale24);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat26.setMinimumIntegerDigits(1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        java.lang.Object obj31 = numberFormat26.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat26);
        int int33 = numberFormat26.getMinimumFractionDigits();
        java.text.NumberFormat.Field field34 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition((java.text.Format.Field) field34);
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition((java.text.Format.Field) field34);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale37);
        boolean boolean39 = numberFormat38.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance(locale41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42, numberFormat44);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj49 = numberFormat44.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition48);
        properFractionFormat40.setNumeratorFormat(numberFormat44);
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getCurrencyInstance(locale51);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat52);
        java.util.Locale locale55 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale55);
        java.lang.String str58 = fractionFormat56.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat59 = fractionFormat56.getNumeratorFormat();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Locale locale61 = locale60.stripExtensions();
        java.util.Locale locale63 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat64 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale63);
        java.lang.String str65 = locale63.getDisplayCountry();
        java.lang.String str66 = locale60.getDisplayName(locale63);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.lang.String str68 = locale67.getDisplayScript();
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale69.getISO3Language();
        java.lang.String str71 = locale67.getDisplayScript(locale69);
        java.lang.String str72 = locale60.getDisplayLanguage(locale69);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getNumberInstance(locale60);
        fractionFormat56.setNumeratorFormat(numberFormat73);
        properFractionFormat53.setWholeFormat(numberFormat73);
        properFractionFormat40.setWholeFormat(numberFormat73);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat73);
        boolean boolean78 = field34.equals((java.lang.Object) numberFormat73);
        java.text.FieldPosition fieldPosition79 = new java.text.FieldPosition((java.text.Format.Field) field34);
        int int80 = fieldPosition79.getField();
        boolean boolean81 = numberFormat26.equals((java.lang.Object) fieldPosition79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer82 = fractionFormat21.format(obj22, stringBuffer23, fieldPosition79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "TWD");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(field34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100 0 / 1" + "'", str58, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(locale61);
// flaky:         org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "kor" + "'", str70, "kor");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11315");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str1 = field0.toString();
        java.lang.String str2 = field0.toString();
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str7 = fractionFormat5.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat8 = fractionFormat5.getNumeratorFormat();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.lang.String str15 = locale9.getDisplayName(locale12);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = locale16.getDisplayScript(locale18);
        java.lang.String str21 = locale9.getDisplayLanguage(locale18);
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getNumberInstance(locale9);
        fractionFormat5.setNumeratorFormat(numberFormat22);
        numberFormat22.setMinimumIntegerDigits(2);
        boolean boolean26 = field0.equals((java.lang.Object) numberFormat22);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int28 = fieldPosition27.getField();
        boolean boolean30 = fieldPosition27.equals((java.lang.Object) "German (Germany)");
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str1, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str2, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100 0 / 1" + "'", str7, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "kor" + "'", str19, "kor");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11316");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        boolean boolean5 = numberFormat3.isGroupingUsed();
        boolean boolean6 = numberFormat3.isGroupingUsed();
        numberFormat3.setMinimumFractionDigits(1);
        numberFormat3.setMaximumFractionDigits(3);
        java.lang.String str12 = numberFormat3.format((long) 35);
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getPercentInstance(locale17);
        numberFormat18.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str22 = numberFormat18.format((double) 0.0f);
        int int23 = numberFormat18.getMaximumIntegerDigits();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale24);
        java.util.Currency currency27 = numberFormat26.getCurrency();
        numberFormat26.setMinimumIntegerDigits(1);
        java.text.NumberFormat numberFormat30 = null;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        numberFormat35.setMinimumIntegerDigits((int) (short) -1);
        boolean boolean38 = numberFormat35.isParseIntegerOnly();
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat30, numberFormat35);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat18, numberFormat26, numberFormat30);
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat46 = java.text.NumberFormat.getPercentInstance(locale45);
        int int47 = numberFormat46.getMaximumIntegerDigits();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        boolean boolean50 = numberFormat49.isGroupingUsed();
        java.util.Currency currency51 = numberFormat49.getCurrency();
        numberFormat46.setCurrency(currency51);
        java.util.Currency currency53 = numberFormat46.getCurrency();
        java.math.RoundingMode roundingMode54 = numberFormat46.getRoundingMode();
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition((int) 'a');
        java.lang.String str58 = parsePosition57.toString();
        java.lang.String str59 = parsePosition57.toString();
        java.lang.Object obj60 = numberFormat46.parseObject("zho", parsePosition57);
        java.lang.Object obj61 = numberFormat18.parseObject("", parsePosition57);
        int int62 = parsePosition57.getErrorIndex();
        java.lang.Object obj63 = numberFormat3.parseObject("\u53f0\u6e7e", parsePosition57);
        boolean boolean64 = numberFormat3.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "3,500.0%" + "'", str12, "3,500.0%");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0%" + "'", str22, "0%");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2147483647 + "'", int23 == 2147483647);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertNotNull(currency27);
        org.junit.Assert.assertEquals(currency27.toString(), "TWD");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2147483647 + "'", int47 == 2147483647);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(currency51);
        org.junit.Assert.assertEquals(currency51.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency53);
        org.junit.Assert.assertEquals(currency53.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode54 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode54.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str58, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str59, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test11317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11317");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str4 = locale1.getDisplayVariant();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        numberFormat5.setMaximumIntegerDigits((int) (byte) 0);
        java.lang.String str9 = numberFormat5.format((long) 11);
        java.lang.StringBuffer stringBuffer11 = null;
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field12);
        java.lang.String str14 = fieldPosition13.toString();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayScript();
        java.lang.String str18 = locale15.getDisplayName(locale16);
        boolean boolean19 = fieldPosition13.equals((java.lang.Object) locale16);
        fieldPosition13.setEndIndex((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer22 = numberFormat5.format(1000L, stringBuffer11, fieldPosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str14, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese (Taiwan)" + "'", str18, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test11318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11318");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) '4', (-0.9833333333333333d), 52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert 52 to fraction (-51/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11319");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (short) -1);
        int int2 = parsePosition1.getErrorIndex();
        parsePosition1.setErrorIndex((int) (short) 32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test11320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11320");
        org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction(8654399, 50112000);
        int int3 = fraction2.getDenominator();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50112000 + "'", int3 == 50112000);
    }

    @Test
    public void test11321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11321");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getISO3Language();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = locale22.getDisplayName(locale23);
        java.lang.String str26 = locale18.getDisplayLanguage(locale22);
        java.util.Set<java.lang.String> strSet27 = locale22.getUnicodeLocaleKeys();
        java.lang.String str28 = locale15.getDisplayVariant(locale22);
        boolean boolean29 = locale14.equals((java.lang.Object) str28);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "kor" + "'", str8, "kor");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japan" + "'", str21, "Japan");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinese (Taiwan)" + "'", str25, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65e5\u6587" + "'", str26, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11322");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder5.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder11 = builder5.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder13 = builder5.setLanguageTag("CAN");
        java.util.Locale locale14 = builder13.build();
        java.lang.String str15 = locale14.getScript();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "can");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test11323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11323");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode18 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strList15, filteringMode18);
        java.util.Collection<java.lang.String> strCollection20 = null;
        java.lang.String str21 = java.util.Locale.lookupTag(languageRangeList7, strCollection20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap22);
        java.util.Collection<java.lang.String> strCollection24 = null;
        java.lang.String str25 = java.util.Locale.lookupTag(languageRangeList23, strCollection24);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + filteringMode18 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode18.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test11324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11324");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        numberFormat5.setMaximumIntegerDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat11 = properFractionFormat10.getWholeFormat();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat11);
    }

    @Test
    public void test11325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11325");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 10000L, 0L, (long) 8654399);
    }

    @Test
    public void test11326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11326");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat3, numberFormat5);
        boolean boolean7 = numberFormat5.isGroupingUsed();
        boolean boolean8 = numberFormat5.isGroupingUsed();
        fractionFormat1.setNumeratorFormat(numberFormat5);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        numberFormat12.setMaximumFractionDigits(100);
        numberFormat12.setMaximumFractionDigits((int) (byte) 100);
        int int18 = numberFormat12.getMinimumFractionDigits();
        properFractionFormat10.setWholeFormat(numberFormat12);
        org.apache.commons.math.fraction.Fraction fraction23 = new org.apache.commons.math.fraction.Fraction((double) 3, (double) 9700L, 599);
        int int24 = fraction23.getDenominator();
        java.lang.StringBuffer stringBuffer25 = null;
        java.text.NumberFormat.Field field26 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition((java.text.Format.Field) field26);
        java.lang.String str28 = field26.toString();
        java.text.FieldPosition fieldPosition29 = new java.text.FieldPosition((java.text.Format.Field) field26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer30 = properFractionFormat10.format(fraction23, stringBuffer25, fieldPosition29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(field26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.text.NumberFormat$Field(exponent)" + "'", str28, "java.text.NumberFormat$Field(exponent)");
    }

    @Test
    public void test11327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11327");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Set<java.lang.String> strSet10 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale5.getVariant();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test11328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11328");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder7 = builder4.removeUnicodeLocaleAttribute("French");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder4.setExtension(' ', "java.text.ParsePosition[index=1,errorIndex=3]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test11329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11329");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = field0.toString();
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList12);
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet20);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList21);
        java.text.NumberFormat.Field field23 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition((java.text.Format.Field) field23);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat26 = java.text.NumberFormat.getInstance(locale25);
        boolean boolean27 = field23.equals((java.lang.Object) locale25);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet28);
        boolean boolean30 = field0.equals((java.lang.Object) strSet28);
        java.util.Locale locale32 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale32);
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale39);
        int int41 = numberFormat40.getMaximumIntegerDigits();
        fractionFormat35.setDenominatorFormat(numberFormat40);
        int int43 = numberFormat40.getMinimumIntegerDigits();
        boolean boolean44 = numberFormat40.isGroupingUsed();
        numberFormat40.setParseIntegerOnly(true);
        boolean boolean47 = field0.equals((java.lang.Object) numberFormat40);
        java.lang.Object obj48 = null;
        boolean boolean49 = numberFormat40.equals(obj48);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat50 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale51.getISO3Language();
        java.util.Set<java.lang.Character> charSet53 = locale51.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat54 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale51);
        java.text.NumberFormat numberFormat55 = fractionFormat54.getNumeratorFormat();
        numberFormat55.setMaximumIntegerDigits(20);
        int int58 = numberFormat55.getMaximumFractionDigits();
        int int59 = numberFormat55.getMinimumIntegerDigits();
        properFractionFormat50.setWholeFormat(numberFormat55);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.NumberFormat$Field(decimal separator)" + "'", str2, "java.text.NumberFormat$Field(decimal separator)");
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2147483647 + "'", int41 == 2147483647);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "kor" + "'", str52, "kor");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertNotNull(fractionFormat54);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test11330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11330");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) (-100), (int) '#');
    }

    @Test
    public void test11331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11331");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getIntegerInstance(locale8);
        java.lang.String str12 = locale5.getDisplayCountry(locale8);
        java.lang.String str13 = locale5.getISO3Language();
        java.lang.String str14 = locale5.getDisplayName();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str24 = locale16.getDisplayLanguage(locale20);
        java.lang.String str25 = locale16.getDisplayName();
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale27 = java.util.Locale.getDefault(category0);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.lang.String str37 = locale31.getDisplayName(locale34);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = locale38.getDisplayScript(locale40);
        java.lang.String str43 = locale31.getDisplayLanguage(locale40);
        java.lang.String str44 = locale31.toLanguageTag();
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale31);
        java.lang.String str46 = locale31.toLanguageTag();
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale31);
        java.lang.String str48 = locale29.getDisplayVariant(locale31);
        java.util.Locale.setDefault(category0, locale29);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale50);
        org.apache.commons.math.fraction.FractionFormat fractionFormat53 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str56 = locale50.getDisplayScript(locale55);
        java.util.Set<java.lang.String> strSet57 = locale50.getUnicodeLocaleKeys();
        java.lang.String str58 = locale50.getVariant();
        java.util.Locale.setDefault(category0, locale50);
        java.util.Set<java.lang.Character> charSet60 = locale50.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "France" + "'", str12, "France");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fra" + "'", str13, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str14, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str25, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "kor" + "'", str41, "kor");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "und" + "'", str44, "und");
        org.junit.Assert.assertNotNull(numberFormat45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "und" + "'", str46, "und");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertNotNull(fractionFormat53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(charSet60);
    }

    @Test
    public void test11332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11332");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.getDefault();
        boolean boolean3 = numberFormat1.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale2.getDisplayCountry();
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale2);
        numberFormat11.setMinimumIntegerDigits((int) (byte) 1);
        int int14 = numberFormat11.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test11333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11333");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("9,700%");
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.Builder builder12 = builder8.setLocale(locale10);
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str18 = locale14.getISO3Language();
        boolean boolean19 = numberFormat13.equals((java.lang.Object) locale14);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale14);
        java.util.Locale.Builder builder21 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder21.setLanguageTag("20 / 7");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 20 / 7 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test11334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11334");
        java.util.Locale locale1 = new java.util.Locale("Chinesisch (Taiwan)");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        numberFormat8.setMinimumIntegerDigits((int) (short) -1);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat14 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        boolean boolean17 = numberFormat16.isGroupingUsed();
        properFractionFormat14.setWholeFormat(numberFormat16);
        java.text.NumberFormat numberFormat19 = properFractionFormat14.getWholeFormat();
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number23 = numberFormat19.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition22);
        parsePosition22.setErrorIndex(0);
        parsePosition22.setIndex(1);
        parsePosition22.setErrorIndex(32);
        java.lang.Object obj30 = numberFormat8.parseObject("\u53f0\u6e7e\u5730\u533a", parsePosition22);
        java.lang.Object obj31 = numberFormat2.parseObject("french (canada) (JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY))", parsePosition22);
        org.junit.Assert.assertEquals(locale1.toString(), "chinesisch (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNull(number23);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test11335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11335");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        java.math.RoundingMode roundingMode5 = numberFormat2.getRoundingMode();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        boolean boolean12 = numberFormat11.isGroupingUsed();
        properFractionFormat9.setWholeFormat(numberFormat11);
        java.text.NumberFormat numberFormat14 = properFractionFormat9.getWholeFormat();
        java.lang.String str16 = numberFormat14.format((double) 1.0f);
        numberFormat14.setMaximumIntegerDigits((int) (byte) 100);
        int int19 = numberFormat14.getMaximumIntegerDigits();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        boolean boolean27 = numberFormat25.isGroupingUsed();
        boolean boolean28 = numberFormat25.isGroupingUsed();
        fractionFormat21.setNumeratorFormat(numberFormat25);
        java.lang.Object obj30 = numberFormat25.clone();
        java.lang.Object obj31 = numberFormat25.clone();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        numberFormat33.setMaximumFractionDigits(100);
        java.lang.String str38 = numberFormat33.format((long) 100);
        int int39 = numberFormat33.getMaximumFractionDigits();
        numberFormat33.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getPercentInstance(locale42);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat44 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        org.apache.commons.math.fraction.FractionFormat fractionFormat45 = new org.apache.commons.math.fraction.FractionFormat(numberFormat43);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        boolean boolean51 = numberFormat50.isGroupingUsed();
        properFractionFormat48.setWholeFormat(numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33, numberFormat43, numberFormat50);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat54 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat14, numberFormat25, numberFormat33);
        java.text.NumberFormat numberFormat55 = properFractionFormat54.getWholeFormat();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat58 = java.text.NumberFormat.getInstance(locale57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getPercentInstance(locale59);
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = new org.apache.commons.math.fraction.FractionFormat(numberFormat58, numberFormat60);
        numberFormat60.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field65 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field65);
        java.lang.String str67 = fieldPosition66.toString();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.lang.String str70 = locale69.getDisplayScript();
        java.lang.String str71 = locale68.getDisplayName(locale69);
        boolean boolean72 = fieldPosition66.equals((java.lang.Object) locale69);
        fieldPosition66.setEndIndex((int) '#');
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat76 = java.text.NumberFormat.getCurrencyInstance(locale75);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat77 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat76);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction81 = properFractionFormat77.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition80);
        boolean boolean82 = fieldPosition66.equals((java.lang.Object) parsePosition80);
        java.lang.Number number83 = numberFormat60.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition80);
        int int84 = parsePosition80.getIndex();
        java.lang.String str85 = parsePosition80.toString();
        org.apache.commons.math.fraction.Fraction fraction86 = properFractionFormat54.parse("", parsePosition80);
        java.lang.Number number87 = numberFormat2.parse("HI!", parsePosition80);
        java.math.RoundingMode roundingMode88 = numberFormat2.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + roundingMode5 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode5.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100%" + "'", str16, "100%");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "10,000%" + "'", str38, "10,000%");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str67, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (Taiwan)" + "'", str71, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat76);
        org.junit.Assert.assertNull(fraction81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(number83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str85, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(fraction86);
        org.junit.Assert.assertNull(number87);
        org.junit.Assert.assertTrue("'" + roundingMode88 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode88.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11336");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getIntegerInstance(locale2);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale2);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getInstance(locale5);
        boolean boolean7 = numberFormat6.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj17 = numberFormat12.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition16);
        properFractionFormat8.setNumeratorFormat(numberFormat12);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getCurrencyInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale23);
        java.lang.String str26 = fractionFormat24.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat27 = fractionFormat24.getNumeratorFormat();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale31 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale31);
        java.lang.String str33 = locale31.getDisplayCountry();
        java.lang.String str34 = locale28.getDisplayName(locale31);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale37.getISO3Language();
        java.lang.String str39 = locale35.getDisplayScript(locale37);
        java.lang.String str40 = locale28.getDisplayLanguage(locale37);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getNumberInstance(locale28);
        fractionFormat24.setNumeratorFormat(numberFormat41);
        properFractionFormat21.setWholeFormat(numberFormat41);
        properFractionFormat8.setWholeFormat(numberFormat41);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.text.NumberFormat numberFormat46 = properFractionFormat45.getDenominatorFormat();
        java.util.Currency currency47 = numberFormat46.getCurrency();
        numberFormat4.setCurrency(currency47);
        java.lang.Object obj49 = numberFormat4.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "100 0 / 1" + "'", str26, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "kor" + "'", str38, "kor");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(currency47);
// flaky:         org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj49);
    }

    @Test
    public void test11337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11337");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        java.lang.String str3 = fieldPosition1.toString();
        int int4 = fieldPosition1.getBeginIndex();
        int int5 = fieldPosition1.getEndIndex();
        java.text.Format.Field field6 = fieldPosition1.getFieldAttribute();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale7.getDisplayCountry(locale8);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale7);
        java.util.Locale locale14 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.lang.String str21 = locale15.getDisplayName(locale18);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getISO3Language();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        java.lang.String str27 = locale15.getDisplayLanguage(locale24);
        java.util.Locale locale30 = new java.util.Locale("hi!", "org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)");
        java.lang.String str31 = locale24.getDisplayVariant(locale30);
        java.lang.String str32 = locale14.getDisplayName(locale30);
        java.lang.String str33 = locale7.getDisplayLanguage(locale14);
        boolean boolean34 = fieldPosition1.equals((java.lang.Object) locale14);
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getCurrencyInstance(locale14);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getPercentInstance(locale37);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        java.lang.Object obj40 = properFractionFormat39.clone();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition((int) '4');
        parsePosition43.setErrorIndex(600);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale49);
        java.lang.String str51 = locale49.getDisplayCountry();
        java.text.NumberFormat numberFormat52 = java.text.NumberFormat.getIntegerInstance(locale49);
        java.lang.String str53 = locale46.getDisplayCountry(locale49);
        java.lang.String str54 = locale46.getISO3Language();
        java.lang.String str55 = locale46.getDisplayName();
        java.lang.String str57 = locale46.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.abs();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction61.abs();
        java.util.Locale locale64 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat65 = java.text.NumberFormat.getInstance(locale64);
        java.util.Locale locale66 = java.util.Locale.getDefault();
        boolean boolean67 = numberFormat65.equals((java.lang.Object) locale66);
        boolean boolean68 = fraction63.equals((java.lang.Object) locale66);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction63.abs();
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat71 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale70);
        boolean boolean72 = fraction69.equals((java.lang.Object) locale70);
        java.text.NumberFormat numberFormat73 = java.text.NumberFormat.getPercentInstance(locale70);
        java.lang.String str74 = locale46.getDisplayScript(locale70);
        boolean boolean75 = parsePosition43.equals((java.lang.Object) str74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance(locale76);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat78 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat80 = java.text.NumberFormat.getPercentInstance(locale79);
        boolean boolean81 = numberFormat80.isGroupingUsed();
        properFractionFormat78.setWholeFormat(numberFormat80);
        java.text.NumberFormat numberFormat83 = properFractionFormat78.getWholeFormat();
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number87 = numberFormat83.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition86);
        int int88 = parsePosition86.getIndex();
        int int89 = parsePosition86.getErrorIndex();
        boolean boolean90 = parsePosition43.equals((java.lang.Object) parsePosition86);
        org.apache.commons.math.fraction.Fraction fraction91 = properFractionFormat39.parse("", parsePosition86);
        parsePosition86.setErrorIndex((-14399));
        java.lang.Number number94 = numberFormat35.parse("50,112,000", parsePosition86);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japan" + "'", str10, "Japan");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))" + "'", str32, "hi! (ORG.APACHE.COMMONS.MATH.FRACTION.FRACTIONCONVERSIONEXCEPTION: OVERFLOW TRYING TO CONVERT 0 TO FRACTION (0/-1))");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Japanese" + "'", str33, "Japanese");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(numberFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "France" + "'", str53, "France");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fra" + "'", str54, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str55, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat65);
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(numberFormat83);
        org.junit.Assert.assertNull(number87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(fraction91);
        org.junit.Assert.assertNull(number94);
    }

    @Test
    public void test11338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11338");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.lang.String str7 = locale4.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uce90\ub098\ub2e4" + "'", str7, "\uce90\ub098\ub2e4");
    }

    @Test
    public void test11339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11339");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(10, 39);
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test11340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11340");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(100);
        java.lang.Object obj2 = null;
        boolean boolean3 = fieldPosition1.equals(obj2);
        fieldPosition1.setEndIndex((-59));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11341");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale6.getDisplayName(locale9);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale6.getDisplayLanguage(locale15);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getNumberInstance(locale6);
        fractionFormat2.setNumeratorFormat(numberFormat19);
        java.lang.String str22 = numberFormat19.format((long) 600);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat25 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat24);
        java.text.AttributedCharacterIterator attributedCharacterIterator27 = numberFormat24.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj28 = numberFormat24.clone();
        numberFormat24.setMaximumFractionDigits(2147483647);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat35 = java.text.NumberFormat.getPercentInstance(locale34);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat33, numberFormat35);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj40 = numberFormat35.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition39);
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Number number42 = numberFormat24.parse("\ud55c\uad6d\uc5b4", parsePosition39);
        int int43 = numberFormat24.getMinimumFractionDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat19, numberFormat24);
        numberFormat19.setParseIntegerOnly(true);
        int int47 = numberFormat19.getMaximumFractionDigits();
        boolean boolean48 = numberFormat19.isGroupingUsed();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "600" + "'", str22, "600");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(attributedCharacterIterator27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str41, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(number42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test11342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11342");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder10 = builder5.setExtension('x', "france");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder5.setRegion("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=0,endIndex=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11343");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale5.getDisplayName(locale8);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("chinois");
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale21 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale.setDefault(category15, locale21);
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.lang.String str26 = locale23.getDisplayCountry(locale24);
        java.util.Locale.setDefault(category15, locale24);
        java.util.Locale.setDefault(category0, locale24);
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale24);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "cor\351en" + "'", str10, "cor\351en");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "chinois");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertEquals(locale21.toString(), "chinese (taiwan)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Japan" + "'", str26, "Japan");
        org.junit.Assert.assertNotNull(numberFormat29);
    }

    @Test
    public void test11344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11344");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 2, (int) ' ');
        org.junit.Assert.assertNotNull(fraction2);
    }

    @Test
    public void test11345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11345");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder9 = builder6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguage("\uc77c\ubcf8,1 / 1)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: chinesisch (taiwan) (??????,1 / 1) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test11346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11346");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        java.text.NumberFormat numberFormat6 = fractionFormat2.getNumeratorFormat();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.lang.String str13 = locale7.getDisplayName(locale10);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayScript();
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale16.getISO3Language();
        java.lang.String str18 = locale14.getDisplayScript(locale16);
        java.lang.String str19 = locale7.getDisplayLanguage(locale16);
        java.lang.String str20 = locale7.toLanguageTag();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale7);
        int int22 = numberFormat21.getMinimumFractionDigits();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        java.util.Currency currency37 = numberFormat36.getCurrency();
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat44 = new org.apache.commons.math.fraction.FractionFormat(numberFormat42);
        numberFormat42.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode47 = numberFormat42.getRoundingMode();
        numberFormat36.setRoundingMode(roundingMode47);
        java.math.RoundingMode roundingMode49 = numberFormat36.getRoundingMode();
        numberFormat36.setMaximumFractionDigits(0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat52 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat21, numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat56 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        numberFormat55.setMaximumFractionDigits(100);
        java.lang.String str60 = numberFormat55.format((long) 100);
        properFractionFormat53.setWholeFormat(numberFormat55);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException64 = new org.apache.commons.math.fraction.FractionConversionException((double) (byte) 0, 3);
        java.text.AttributedCharacterIterator attributedCharacterIterator65 = numberFormat55.formatToCharacterIterator((java.lang.Object) (byte) 0);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale66);
        java.text.NumberFormat numberFormat68 = fractionFormat67.getDenominatorFormat();
        numberFormat68.setMinimumIntegerDigits(1728000);
        numberFormat68.setMaximumIntegerDigits(600);
        numberFormat68.setParseIntegerOnly(true);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat75 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6, numberFormat55, numberFormat68);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Korean" + "'", str13, "Korean");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "kor" + "'", str17, "kor");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str19, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko" + "'", str20, "ko");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(currency37);
        org.junit.Assert.assertEquals(currency37.toString(), "XXX");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode47 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode47.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + roundingMode49 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode49.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "10,000%" + "'", str60, "10,000%");
        org.junit.Assert.assertNotNull(attributedCharacterIterator65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat67);
        org.junit.Assert.assertNotNull(numberFormat68);
    }

    @Test
    public void test11347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11347");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.multiply(fraction6);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        int int9 = fraction2.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        long long20 = fraction18.longValue();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction14.multiply(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction25.abs();
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        long long32 = fraction30.longValue();
        org.apache.commons.math.fraction.Fraction fraction33 = fraction26.multiply(fraction30);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction18.subtract(fraction33);
        org.apache.commons.math.fraction.Fraction fraction37 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str38 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction37);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction18.subtract(fraction37);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction48 = fraction47.negate();
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.abs();
        long long50 = fraction48.longValue();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction44.multiply(fraction48);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction55 = fraction54.negate();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.abs();
        org.apache.commons.math.fraction.Fraction fraction59 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction60 = fraction59.negate();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.abs();
        long long62 = fraction60.longValue();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction56.multiply(fraction60);
        org.apache.commons.math.fraction.Fraction fraction64 = fraction48.subtract(fraction63);
        org.apache.commons.math.fraction.Fraction fraction67 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str68 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction67);
        org.apache.commons.math.fraction.Fraction fraction69 = fraction48.subtract(fraction67);
        org.apache.commons.math.fraction.Fraction fraction70 = fraction37.divide(fraction69);
        org.apache.commons.math.fraction.Fraction fraction71 = fraction2.subtract(fraction37);
        float float72 = fraction2.floatValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "20 / 7" + "'", str8, "20 / 7");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-1 / 100" + "'", str38, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "-1 / 100" + "'", str68, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + 2.857143f + "'", float72 == 2.857143f);
    }

    @Test
    public void test11348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11348");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getPercentInstance(locale0);
        numberFormat6.setMinimumFractionDigits((int) (short) -19366);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat6);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale11.getScript();
        java.util.Locale locale16 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str17 = locale11.getDisplayScript(locale16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale11);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getISO3Language();
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getCurrencyInstance(locale19);
        boolean boolean23 = numberFormat22.isParseIntegerOnly();
        java.math.RoundingMode roundingMode24 = numberFormat22.getRoundingMode();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getInstance(locale26);
        java.util.Currency currency29 = numberFormat28.getCurrency();
        numberFormat28.setMinimumIntegerDigits(1);
        numberFormat28.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj37 = numberFormat28.parseObject("Japan", parsePosition36);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException41 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str42 = fractionConversionException41.getPattern();
        java.lang.Throwable[] throwableArray43 = fractionConversionException41.getSuppressed();
        java.lang.Object[] objArray44 = fractionConversionException41.getArguments();
        boolean boolean45 = parsePosition36.equals((java.lang.Object) objArray44);
        int int46 = parsePosition36.getIndex();
        int int47 = parsePosition36.getIndex();
        java.lang.Object obj48 = numberFormat22.parseObject("it", parsePosition36);
        fractionFormat18.setNumeratorFormat(numberFormat22);
        java.text.NumberFormat numberFormat50 = fractionFormat18.getNumeratorFormat();
        boolean boolean51 = numberFormat50.isGroupingUsed();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getCurrencyInstance();
        int int54 = numberFormat53.getMaximumFractionDigits();
        boolean boolean55 = numberFormat53.isParseIntegerOnly();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition((-2));
        int int59 = parsePosition58.getErrorIndex();
        java.lang.Number number60 = numberFormat53.parse("5 / 1", parsePosition58);
        java.lang.Object obj61 = numberFormat50.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=117,endIndex=0]", parsePosition58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = properFractionFormat9.parseObject("-119 / 120", parsePosition58);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale16.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(currency29);
        org.junit.Assert.assertEquals(currency29.toString(), "TWD");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str42, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(number60);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test11349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11349");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        java.lang.String str6 = numberFormat4.format((double) 10L);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat7 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        int int9 = numberFormat4.getMinimumIntegerDigits();
        java.lang.StringBuffer stringBuffer11 = null;
        java.text.NumberFormat.Field field12 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field12);
        int int14 = fieldPosition13.getEndIndex();
        fieldPosition13.setBeginIndex((int) (byte) 100);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        boolean boolean22 = fieldPosition13.equals((java.lang.Object) fractionFormat19);
        java.text.Format.Field field23 = fieldPosition13.getFieldAttribute();
        int int24 = fieldPosition13.getField();
        java.text.Format.Field field25 = fieldPosition13.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer26 = numberFormat4.format(147483647L, stringBuffer11, fieldPosition13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1,000%" + "'", str6, "1,000%");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(field12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(field23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(field25);
    }

    @Test
    public void test11350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11350");
        java.util.Locale locale3 = new java.util.Locale("taiwan (ZH_TW,10,000%)", "java.text.AttributedCharacterIterator$Attribute(reading)", "Chinesisch");
        java.util.Locale locale5 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale5);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan (zh_tw,10,000%)_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)_Chinesisch");
        org.junit.Assert.assertEquals(locale5.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(numberFormat7);
    }

    @Test
    public void test11351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11351");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("DEU", (double) 0.016597223f);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getISO3Language();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category5, locale12);
        java.util.Locale locale19 = new java.util.Locale("1 / 1", "", "zh-tw");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category5, locale19);
        java.util.Locale locale22 = java.util.Locale.getDefault(category5);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale26);
        java.lang.String str30 = locale23.getDisplayCountry(locale26);
        java.lang.String str31 = locale23.getISO3Language();
        java.lang.String str32 = locale23.getDisplayName();
        java.lang.String str34 = locale23.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction38 = fraction37.negate();
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.abs();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction38.abs();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getInstance(locale41);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        boolean boolean44 = numberFormat42.equals((java.lang.Object) locale43);
        boolean boolean45 = fraction40.equals((java.lang.Object) locale43);
        org.apache.commons.math.fraction.Fraction fraction46 = fraction40.abs();
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale47);
        boolean boolean49 = fraction46.equals((java.lang.Object) locale47);
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale47);
        java.lang.String str51 = locale23.getDisplayScript(locale47);
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getInstance(locale52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat56 = new org.apache.commons.math.fraction.FractionFormat(numberFormat53, numberFormat55);
        numberFormat55.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field60 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field60);
        java.lang.String str62 = fieldPosition61.toString();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = locale64.getDisplayScript();
        java.lang.String str66 = locale63.getDisplayName(locale64);
        boolean boolean67 = fieldPosition61.equals((java.lang.Object) locale64);
        fieldPosition61.setEndIndex((int) '#');
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat71 = java.text.NumberFormat.getCurrencyInstance(locale70);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat72 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat71);
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction76 = properFractionFormat72.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition75);
        boolean boolean77 = fieldPosition61.equals((java.lang.Object) parsePosition75);
        java.lang.Number number78 = numberFormat55.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition75);
        org.apache.commons.math.fraction.Fraction fraction81 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction82 = fraction81.negate();
        org.apache.commons.math.fraction.Fraction fraction83 = fraction82.abs();
        org.apache.commons.math.fraction.Fraction fraction84 = fraction82.abs();
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat86 = java.text.NumberFormat.getInstance(locale85);
        java.util.Locale locale87 = java.util.Locale.getDefault();
        boolean boolean88 = numberFormat86.equals((java.lang.Object) locale87);
        boolean boolean89 = fraction84.equals((java.lang.Object) locale87);
        boolean boolean90 = parsePosition75.equals((java.lang.Object) locale87);
        java.lang.String str91 = locale47.getDisplayCountry(locale87);
        java.util.Locale.setDefault(category5, locale47);
        boolean boolean93 = languageRange2.equals((java.lang.Object) locale47);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "deu" + "'", str3, "deu");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "kor" + "'", str13, "kor");
        org.junit.Assert.assertEquals(locale19.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "1 / 1__zh-tw");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "France" + "'", str30, "France");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fra" + "'", str31, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str32, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(field60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str62, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Chinese (Taiwan)" + "'", str66, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat71);
        org.junit.Assert.assertNull(fraction76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(number78);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\uc911\uad6d" + "'", str91, "\uc911\uad6d");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test11352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11352");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        int int19 = numberFormat2.getMinimumFractionDigits();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.getDefault(category20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.util.Locale locale25 = java.util.Locale.getDefault(category20);
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale25);
        numberFormat27.setMaximumIntegerDigits((int) 'x');
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getCurrencyInstance(locale30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat32 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat31);
        java.text.NumberFormat numberFormat33 = properFractionFormat32.getWholeFormat();
        numberFormat33.setGroupingUsed(false);
        org.apache.commons.math.fraction.FractionFormat fractionFormat36 = new org.apache.commons.math.fraction.FractionFormat(numberFormat27, numberFormat33);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator37 = numberFormat2.formatToCharacterIterator((java.lang.Object) numberFormat27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNotNull(numberFormat33);
    }

    @Test
    public void test11353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11353");
        java.text.ParseException parseException2 = new java.text.ParseException("\u53f0\u6e7e", (int) (short) -120);
    }

    @Test
    public void test11354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11354");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        numberFormat4.setMinimumFractionDigits(0);
        java.util.Currency currency7 = numberFormat4.getCurrency();
        java.lang.Object obj8 = numberFormat4.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getIntegerInstance(locale11);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) 'a');
        java.lang.String str18 = parsePosition17.toString();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder19.clear();
        java.util.Locale.Builder builder22 = builder21.clear();
        boolean boolean23 = parsePosition17.equals((java.lang.Object) builder22);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale26);
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale29 = java.util.Locale.getDefault(category24);
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale29);
        boolean boolean32 = parsePosition17.equals((java.lang.Object) locale29);
        java.lang.String str33 = locale11.getDisplayScript(locale29);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getDisplayCountry();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale34.getDisplayCountry(locale36);
        java.lang.String str40 = locale29.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getInstance(locale34);
        java.util.Locale locale42 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getInstance(locale44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45, numberFormat47);
        boolean boolean49 = numberFormat47.isGroupingUsed();
        boolean boolean50 = numberFormat47.isGroupingUsed();
        fractionFormat43.setNumeratorFormat(numberFormat47);
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getIntegerInstance(locale52);
        java.lang.String str55 = numberFormat53.format(0.0d);
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        boolean boolean58 = numberFormat53.equals((java.lang.Object) strSet57);
        org.apache.commons.math.fraction.FractionFormat fractionFormat59 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47, numberFormat53);
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getInstance(locale60);
        boolean boolean62 = numberFormat61.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat63 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat61);
        int int64 = numberFormat61.getMaximumIntegerDigits();
        numberFormat61.setMaximumFractionDigits(100);
        fractionFormat59.setNumeratorFormat(numberFormat61);
        java.text.NumberFormat numberFormat68 = fractionFormat59.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat69 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat41, numberFormat68);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(currency7);
        org.junit.Assert.assertEquals(currency7.toString(), "XXX");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str18, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str38, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "coreano" + "'", str40, "coreano");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2147483647 + "'", int64 == 2147483647);
        org.junit.Assert.assertNotNull(numberFormat68);
    }

    @Test
    public void test11355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11355");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.lang.String str19 = locale15.getISO3Language();
        java.util.Locale.Builder builder20 = builder4.setLocale(locale15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test11356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11356");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("java.text.ParsePosition[index=3,errorIndex=3]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.parseposition[index=3,errorindex=3]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11357");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        long long14 = fraction12.longValue();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction8.multiply(fraction12);
        org.apache.commons.math.fraction.Fraction fraction18 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.negate();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.abs();
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        long long26 = fraction24.longValue();
        org.apache.commons.math.fraction.Fraction fraction27 = fraction20.multiply(fraction24);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction12.subtract(fraction27);
        org.apache.commons.math.fraction.Fraction fraction29 = fraction27.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.negate();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction2.subtract(fraction31);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction31.negate();
        double double34 = fraction31.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction31.negate();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-14400.0d) + "'", double34 == (-14400.0d));
        org.junit.Assert.assertNotNull(fraction35);
    }

    @Test
    public void test11358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11358");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str8 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction7);
        org.apache.commons.math.fraction.Fraction fraction9 = fraction2.subtract(fraction7);
        short short10 = fraction7.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1 / 100" + "'", str8, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
    }

    @Test
    public void test11359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11359");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field1 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean2 = field0.equals((java.lang.Object) field1);
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0, (-1));
        java.text.NumberFormat.Field field5 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition7 = new java.text.FieldPosition((java.text.Format.Field) field5, (int) '#');
        boolean boolean8 = field0.equals((java.lang.Object) fieldPosition7);
        java.lang.String str9 = field0.toString();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap16);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, strMap32);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale36.getISO3Language();
        java.lang.String str38 = locale34.getDisplayScript(locale36);
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet40 = locale36.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strSet47);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList42, (java.util.Collection<java.lang.String>) strSet47, filteringMode49);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strSet40, filteringMode49);
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet40);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet40);
        java.text.NumberFormat.Field field54 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition55 = new java.text.FieldPosition((java.text.Format.Field) field54);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getInstance(locale56);
        boolean boolean58 = field54.equals((java.lang.Object) locale56);
        java.util.Set<java.lang.String> strSet59 = locale56.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale56.getISO3Language();
        java.util.Locale locale61 = locale56.stripExtensions();
        java.util.Set<java.lang.String> strSet62 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet62, filteringMode63);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap65);
        boolean boolean67 = field0.equals((java.lang.Object) languageRangeList66);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str9, "java.text.NumberFormat$Field(per mille)");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode49.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(field54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "eng" + "'", str60, "eng");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test11360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11360");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 10.0f);
        org.apache.commons.math.fraction.Fraction fraction2 = fraction1.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        double double7 = fraction5.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction2.subtract(fraction5);
        int int9 = fraction5.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.008333333333333333d) + "'", double7 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 120 + "'", int9 == 120);
    }

    @Test
    public void test11361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11361");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getDisplayVariant();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
    }

    @Test
    public void test11362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11362");
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat0 = new org.apache.commons.math.fraction.ProperFractionFormat();
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getPercentInstance(locale7);
        boolean boolean9 = numberFormat8.isGroupingUsed();
        java.util.Currency currency10 = numberFormat8.getCurrency();
        numberFormat5.setCurrency(currency10);
        properFractionFormat0.setWholeFormat(numberFormat5);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat18 = java.text.NumberFormat.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = new org.apache.commons.math.fraction.FractionFormat(numberFormat18, numberFormat20);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj25 = numberFormat20.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition24);
        java.lang.String str26 = parsePosition24.toString();
        java.lang.Object obj27 = fractionFormat15.parseObject("\uc911\uad6d\uc5b4", parsePosition24);
        org.apache.commons.math.fraction.Fraction fraction28 = properFractionFormat0.parse("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (10/97)", parsePosition24);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale.setDefault(locale29);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getInstance(locale29);
        properFractionFormat0.setDenominatorFormat(numberFormat33);
        int int35 = numberFormat33.getMinimumFractionDigits();
        java.lang.Object obj37 = numberFormat33.parseObject("-1 / 100");
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getCurrencyInstance(locale39);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat41 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat40);
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction45 = properFractionFormat41.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getPercentInstance(locale46);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat50 = java.text.NumberFormat.getPercentInstance(locale49);
        boolean boolean51 = numberFormat50.isGroupingUsed();
        properFractionFormat48.setWholeFormat(numberFormat50);
        java.text.NumberFormat numberFormat53 = properFractionFormat48.getWholeFormat();
        properFractionFormat41.setWholeFormat(numberFormat53);
        java.text.NumberFormat numberFormat55 = properFractionFormat41.getNumeratorFormat();
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale57);
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat62 = java.text.NumberFormat.getInstance(locale60);
        java.util.Currency currency63 = numberFormat62.getCurrency();
        numberFormat62.setMinimumIntegerDigits(1);
        numberFormat62.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition70 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj71 = numberFormat62.parseObject("Japan", parsePosition70);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException75 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str76 = fractionConversionException75.getPattern();
        java.lang.Throwable[] throwableArray77 = fractionConversionException75.getSuppressed();
        java.lang.Object[] objArray78 = fractionConversionException75.getArguments();
        boolean boolean79 = parsePosition70.equals((java.lang.Object) objArray78);
        int int80 = parsePosition70.getIndex();
        int int81 = parsePosition70.getIndex();
        java.lang.Object obj82 = fractionFormat58.parseObject("\ud55c\uad6d\uc5b4", parsePosition70);
        org.apache.commons.math.fraction.Fraction fraction83 = properFractionFormat41.parse("und", parsePosition70);
        int int84 = parsePosition70.getErrorIndex();
        parsePosition70.setIndex(32);
        java.lang.Object obj87 = numberFormat33.parseObject("", parsePosition70);
        java.util.Currency currency88 = numberFormat33.getCurrency();
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(currency10);
        org.junit.Assert.assertEquals(currency10.toString(), "XXX");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str26, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(fraction28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str30, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + (-1L) + "'", obj37, (-1L));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNull(fraction45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(numberFormat62);
        org.junit.Assert.assertNotNull(currency63);
        org.junit.Assert.assertEquals(currency63.toString(), "TWD");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str76, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(fraction83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(currency88);
        org.junit.Assert.assertEquals(currency88.toString(), "TWD");
    }

    @Test
    public void test11363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11363");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        java.text.Format.Field field2 = fieldPosition1.getFieldAttribute();
        int int3 = fieldPosition1.getField();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str10 = locale4.getDisplayScript(locale9);
        java.util.Set<java.lang.String> strSet11 = locale4.getUnicodeLocaleKeys();
        boolean boolean12 = fieldPosition1.equals((java.lang.Object) strSet11);
        java.lang.String str13 = fieldPosition1.toString();
        java.lang.Object obj14 = null;
        boolean boolean15 = fieldPosition1.equals(obj14);
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        numberFormat20.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str24 = numberFormat20.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat25 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getISO3Language();
        java.util.Set<java.lang.Character> charSet28 = locale26.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet29 = locale26.getExtensionKeys();
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getCurrencyInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat31 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat30);
        fractionFormat25.setNumeratorFormat(numberFormat30);
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale33.getDisplayCountry(locale34);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = locale37.getDisplayName(locale38);
        java.lang.String str41 = locale33.getDisplayLanguage(locale37);
        java.lang.String str42 = locale33.toLanguageTag();
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale33);
        boolean boolean44 = numberFormat30.equals((java.lang.Object) numberFormat43);
        boolean boolean45 = fieldPosition1.equals((java.lang.Object) boolean44);
        int int46 = fieldPosition1.getBeginIndex();
        int int47 = fieldPosition1.getField();
        fieldPosition1.setBeginIndex(14400);
        org.junit.Assert.assertNull(field2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]" + "'", str13, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0%" + "'", str24, "0%");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japan" + "'", str36, "Japan");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (Taiwan)" + "'", str40, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u6587" + "'", str41, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ja-JP" + "'", str42, "ja-JP");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test11364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11364");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) '#');
    }

    @Test
    public void test11365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11365");
        java.util.Locale locale3 = new java.util.Locale("Franz\366sisch (Frankreich)", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent),beginIndex=0,endIndex=0]", "de");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition((java.text.Format.Field) field7);
        java.text.NumberFormat.Field field9 = java.text.NumberFormat.Field.EXPONENT_SIGN;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition((java.text.Format.Field) field9);
        boolean boolean11 = field7.equals((java.lang.Object) field9);
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition((java.text.Format.Field) field9);
        java.lang.String str13 = fieldPosition12.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer14 = numberFormat4.format(100.0d, stringBuffer6, fieldPosition12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "franz\366sisch (frankreich)_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT),BEGININDEX=0,ENDINDEX=0]_de");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(field9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=0,endIndex=0]" + "'", str13, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(exponent sign),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11366");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat44 = properFractionFormat28.getWholeFormat();
        java.text.NumberFormat numberFormat45 = properFractionFormat28.getNumeratorFormat();
        java.text.NumberFormat numberFormat46 = properFractionFormat28.getNumeratorFormat();
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale47);
        java.text.NumberFormat numberFormat49 = fractionFormat48.getDenominatorFormat();
        numberFormat49.setMinimumIntegerDigits(1728000);
        boolean boolean52 = numberFormat49.isGroupingUsed();
        numberFormat49.setMaximumFractionDigits((int) (short) -14400);
        properFractionFormat28.setWholeFormat(numberFormat49);
        int int56 = numberFormat49.getMaximumIntegerDigits();
        int int57 = numberFormat49.getMinimumIntegerDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2147483647 + "'", int56 == 2147483647);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1728000 + "'", int57 == 1728000);
    }

    @Test
    public void test11367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11367");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        long long3 = fraction2.longValue();
        org.apache.commons.math.fraction.Fraction fraction6 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.negate();
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction7.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.negate();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction13.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction7.add(fraction13);
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction16.divide(fraction19);
        int int22 = fraction16.intValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction2.subtract(fraction16);
        double double25 = fraction24.doubleValue();
        java.lang.String str26 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction24);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 17L + "'", long3 == 17L);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 17.483333333333334d + "'", double25 == 17.483333333333334d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1,049 / 60" + "'", str26, "1,049 / 60");
    }

    @Test
    public void test11368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11368");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.Object obj8 = numberFormat7.clone();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        numberFormat13.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field18);
        java.lang.String str20 = fieldPosition19.toString();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = locale21.getDisplayName(locale22);
        boolean boolean25 = fieldPosition19.equals((java.lang.Object) locale22);
        fieldPosition19.setEndIndex((int) '#');
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat30.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        boolean boolean35 = fieldPosition19.equals((java.lang.Object) parsePosition33);
        java.lang.Number number36 = numberFormat13.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition33);
        java.lang.Object obj37 = numberFormat7.parseObject("\ud55c\uad6d\uc5b4", parsePosition33);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        java.math.RoundingMode roundingMode50 = numberFormat42.getRoundingMode();
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) 'a');
        java.lang.String str54 = parsePosition53.toString();
        java.lang.String str55 = parsePosition53.toString();
        java.lang.Object obj56 = numberFormat42.parseObject("zho", parsePosition53);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = locale57.getDisplayLanguage();
        java.lang.String str59 = locale57.toLanguageTag();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale60.getISO3Language();
        java.lang.String str63 = locale57.getDisplayScript(locale60);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category67 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale69);
        java.util.Locale.setDefault(category67, locale69);
        java.util.Locale locale72 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category67, locale72);
        java.lang.String str74 = locale66.getDisplayLanguage(locale72);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getInstance(locale66);
        int int76 = numberFormat75.getMinimumIntegerDigits();
        properFractionFormat65.setWholeFormat(numberFormat75);
        java.text.NumberFormat numberFormat78 = properFractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat42, numberFormat78);
        numberFormat78.setMaximumFractionDigits((int) (short) 10000);
        org.apache.commons.math.fraction.FractionFormat fractionFormat82 = new org.apache.commons.math.fraction.FractionFormat(numberFormat78);
        java.text.NumberFormat numberFormat83 = fractionFormat82.getNumeratorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (Taiwan)" + "'", str24, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str54, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str55, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e2d\u6587" + "'", str58, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-TW" + "'", str59, "zh-TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zho" + "'", str62, "zho");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.FORMAT + "'", category67.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "anglais" + "'", str74, "anglais");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat83);
    }

    @Test
    public void test11369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11369");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.parseexception: zh_tw");
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getPercentInstance(locale1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat2);
    }

    @Test
    public void test11370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11370");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 11 to fraction (100/10)", "\u5fb7\u570b");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u5fb7\u570b");
    }

    @Test
    public void test11371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11371");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.lang.String str6 = locale0.getScript();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getNumeratorFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction10 = fractionFormat7.parse("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"?????\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
    }

    @Test
    public void test11372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11372");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        int int2 = fieldPosition1.getEndIndex();
        int int3 = fieldPosition1.getField();
        fieldPosition1.setEndIndex(0);
        int int6 = fieldPosition1.getField();
        java.text.Format.Field field7 = fieldPosition1.getFieldAttribute();
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, (int) (byte) 100);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        boolean boolean14 = field7.equals((java.lang.Object) locale10);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11373");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition((java.text.Format.Field) field0, 100);
        java.text.ParsePosition parsePosition4 = new java.text.ParsePosition((int) (short) 1);
        int int5 = parsePosition4.getErrorIndex();
        java.lang.String str6 = parsePosition4.toString();
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance(locale10);
        int int12 = numberFormat11.getMaximumIntegerDigits();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean15 = numberFormat14.isGroupingUsed();
        java.util.Currency currency16 = numberFormat14.getCurrency();
        numberFormat11.setCurrency(currency16);
        java.util.Currency currency18 = numberFormat11.getCurrency();
        int int19 = numberFormat11.getMaximumFractionDigits();
        java.lang.Object obj20 = numberFormat11.clone();
        java.lang.Object obj21 = numberFormat11.clone();
        int int22 = numberFormat11.getMaximumIntegerDigits();
        int int23 = numberFormat11.getMinimumIntegerDigits();
        java.lang.Object obj24 = numberFormat11.clone();
        numberFormat11.setGroupingUsed(false);
        java.util.Locale locale28 = new java.util.Locale("Chinese (Taiwan)");
        java.util.Locale locale31 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        java.lang.String str32 = locale28.getDisplayCountry(locale31);
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.lang.String str36 = locale28.getDisplayLanguage(locale34);
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getCurrencyInstance(locale28);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale38);
        java.text.NumberFormat numberFormat40 = fractionFormat39.getDenominatorFormat();
        numberFormat40.setMinimumIntegerDigits(1728000);
        java.util.Currency currency43 = numberFormat40.getCurrency();
        numberFormat37.setCurrency(currency43);
        numberFormat11.setCurrency(currency43);
        boolean boolean46 = parsePosition4.equals((java.lang.Object) currency43);
        boolean boolean47 = field0.equals((java.lang.Object) boolean46);
        java.lang.String str48 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=-1]" + "'", str6, "java.text.ParsePosition[index=1,errorIndex=-1]");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency18);
        org.junit.Assert.assertEquals(currency18.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2147483647 + "'", int22 == 2147483647);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(locale28.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals(locale31.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "chinese (taiwan)" + "'", str36, "chinese (taiwan)");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.NumberFormat$Field(per mille)" + "'", str48, "java.text.NumberFormat$Field(per mille)");
    }

    @Test
    public void test11374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11374");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.lang.Object obj3 = numberFormat1.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1);
        numberFormat1.setMinimumFractionDigits((-2));
        java.text.Format.Field field8 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field8);
        java.text.Format.Field field10 = fieldPosition9.getFieldAttribute();
        int int11 = fieldPosition9.getField();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str18 = locale12.getDisplayScript(locale17);
        java.util.Set<java.lang.String> strSet19 = locale12.getUnicodeLocaleKeys();
        boolean boolean20 = fieldPosition9.equals((java.lang.Object) strSet19);
        java.lang.String str21 = fieldPosition9.toString();
        java.lang.Object obj22 = null;
        boolean boolean23 = fieldPosition9.equals(obj22);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        numberFormat28.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str32 = numberFormat28.format((double) 0.0f);
        org.apache.commons.math.fraction.FractionFormat fractionFormat33 = new org.apache.commons.math.fraction.FractionFormat(numberFormat28);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale34.getISO3Language();
        java.util.Set<java.lang.Character> charSet36 = locale34.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet37 = locale34.getExtensionKeys();
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getCurrencyInstance(locale34);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat38);
        fractionFormat33.setNumeratorFormat(numberFormat38);
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = locale41.getDisplayCountry(locale42);
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayScript();
        java.lang.String str48 = locale45.getDisplayName(locale46);
        java.lang.String str49 = locale41.getDisplayLanguage(locale45);
        java.lang.String str50 = locale41.toLanguageTag();
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getInstance(locale41);
        boolean boolean52 = numberFormat38.equals((java.lang.Object) numberFormat51);
        boolean boolean53 = fieldPosition9.equals((java.lang.Object) boolean52);
        int int54 = fieldPosition9.getBeginIndex();
        int int55 = fieldPosition9.getField();
        java.lang.StringBuffer stringBuffer56 = null;
        java.text.NumberFormat.Field field57 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition58 = new java.text.FieldPosition((java.text.Format.Field) field57);
        java.util.Locale locale59 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getInstance(locale59);
        boolean boolean61 = field57.equals((java.lang.Object) locale59);
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition((java.text.Format.Field) field57, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer64 = numberFormat1.format((java.lang.Object) fieldPosition9, stringBuffer56, fieldPosition63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(field10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]" + "'", str21, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0%" + "'", str32, "0%");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "kor" + "'", str35, "kor");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(numberFormat38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Japan" + "'", str44, "Japan");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese (Taiwan)" + "'", str48, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u65e5\u6587" + "'", str49, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja-JP" + "'", str50, "ja-JP");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(field57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test11375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11375");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.util.Locale.Builder builder12 = builder0.setLocale(locale10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getISO3Language();
        java.lang.String str17 = locale13.getDisplayScript(locale15);
        java.lang.String str18 = locale13.toLanguageTag();
        java.lang.String str19 = locale13.getDisplayVariant();
        java.lang.String str20 = locale13.getVariant();
        java.util.Locale.Builder builder21 = builder12.setLocale(locale13);
        java.util.Locale locale22 = locale13.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale23);
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale22.getDisplayName(locale26);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale22);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e2d\u6587" + "'", str4, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "kor" + "'", str16, "kor");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(numberFormat28);
    }

    @Test
    public void test11376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11376");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.lang.String str7 = numberFormat2.format((double) 100.0f);
        java.lang.Object obj8 = numberFormat2.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100" + "'", str7, "100");
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test11377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11377");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getInstance(locale7);
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale7);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale7.getDisplayCountry(locale11);
        java.lang.String str14 = locale4.getDisplayVariant(locale7);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale4);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getCurrencyInstance(locale4);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ub300\ub9cc" + "'", str12, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(numberFormat16);
    }

    @Test
    public void test11378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11378");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        long long5 = fraction3.longValue();
        int int6 = fraction3.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction3.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(fraction7);
    }

    @Test
    public void test11379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11379");
        java.util.Locale locale2 = new java.util.Locale("\u4e2d\u6587,kor)", "\u6cd5\u570b");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u4e2d\u6587\u6cd5\u570b");
    }

    @Test
    public void test11380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11380");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("en");
        java.util.Locale.Builder builder5 = builder0.setExtension('a', "Korean");
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.getDisplayScript();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getISO3Language();
        java.lang.String str10 = locale6.getDisplayScript(locale8);
        java.lang.String str11 = locale6.toLanguageTag();
        java.lang.String str12 = locale6.getDisplayVariant();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale.Builder builder14 = builder5.setLocale(locale6);
        java.util.Locale locale15 = builder5.build();
        java.util.Locale.Builder builder17 = builder5.setLanguageTag("US");
        java.util.Locale locale18 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder5.setScript("-1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: -1 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "kor" + "'", str9, "kor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "us");
    }

    @Test
    public void test11381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11381");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale.setDefault(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale0);
        java.lang.String str5 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test11382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11382");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) 'a');
        java.lang.String str2 = parsePosition1.toString();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder6 = builder5.clear();
        boolean boolean7 = parsePosition1.equals((java.lang.Object) builder6);
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale10);
        java.util.Locale.setDefault(category8, locale10);
        java.util.Locale locale13 = java.util.Locale.getDefault(category8);
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale13);
        boolean boolean16 = parsePosition1.equals((java.lang.Object) locale13);
        int int17 = parsePosition1.getIndex();
        parsePosition1.setIndex(0);
        java.lang.String str20 = parsePosition1.toString();
        int int21 = parsePosition1.getErrorIndex();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=-1]" + "'", str20, "java.text.ParsePosition[index=0,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test11383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11383");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.getDefault(category6);
        java.util.Locale locale9 = java.util.Locale.getDefault(category6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category6);
        java.lang.StringBuffer stringBuffer11 = null;
        java.text.Format.Field field12 = null;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition(field12, (int) (short) 10000);
        int int15 = fieldPosition14.getBeginIndex();
        fieldPosition14.setEndIndex((int) (byte) -21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer18 = fractionFormat5.format((java.lang.Object) category6, stringBuffer11, fieldPosition14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test11384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11384");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.lang.String str6 = locale0.getDisplayVariant();
        java.util.Locale locale7 = locale0.stripExtensions();
        java.lang.String str8 = locale7.getDisplayName();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str10 = locale7.getDisplayLanguage();
        java.lang.String str11 = locale7.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test11385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11385");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh-TW");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        java.lang.String str8 = languageRange1.getRange();
        java.lang.String str9 = languageRange1.getRange();
        double double10 = languageRange1.getWeight();
        double double11 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh-tw" + "'", str8, "zh-tw");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-tw" + "'", str9, "zh-tw");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test11386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11386");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayName(locale4);
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale4);
        fieldPosition1.setEndIndex((int) '#');
        int int10 = fieldPosition1.getField();
        int int11 = fieldPosition1.getBeginIndex();
        java.lang.String str12 = fieldPosition1.toString();
        fieldPosition1.setEndIndex(11);
        java.lang.String str15 = fieldPosition1.toString();
        int int16 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]" + "'", str12, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=11]" + "'", str15, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=11]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
    }

    @Test
    public void test11387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11387");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        numberFormat4.setMinimumIntegerDigits((int) (short) -1);
        java.lang.String str8 = numberFormat4.format((double) 0.0f);
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        int int14 = numberFormat13.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13);
        java.text.NumberFormat numberFormat16 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat17 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat13, numberFormat16);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException20 = new org.apache.commons.math.fraction.FractionConversionException(0.0d, 10);
        boolean boolean21 = numberFormat13.equals((java.lang.Object) 10);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        int int27 = numberFormat23.getMaximumIntegerDigits();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getIntegerInstance(locale29);
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale29);
        java.util.Set<java.lang.Character> charSet35 = locale29.getExtensionKeys();
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getIntegerInstance(locale29);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat37 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat13, numberFormat23, numberFormat36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23);
        java.text.NumberFormat numberFormat39 = fractionFormat38.getNumeratorFormat();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = locale40.getScript();
        java.util.Locale locale45 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str46 = locale40.getDisplayScript(locale45);
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getNumberInstance(locale45);
        java.util.Set<java.lang.String> strSet48 = locale45.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet49 = locale45.getExtensionKeys();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.PRC;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale45.getDisplayName(locale50);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale54.getISO3Language();
        java.util.Set<java.lang.Character> charSet56 = locale54.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale54);
        org.apache.commons.math.fraction.FractionFormat fractionFormat58 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale54);
        java.lang.String str59 = locale50.getDisplayScript(locale54);
        boolean boolean60 = numberFormat39.equals((java.lang.Object) locale50);
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition((int) 'a');
        java.lang.String str64 = parsePosition63.toString();
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder66 = builder65.clearExtensions();
        java.util.Locale.Builder builder67 = builder65.clear();
        java.util.Locale.Builder builder68 = builder67.clear();
        boolean boolean69 = parsePosition63.equals((java.lang.Object) builder68);
        java.util.Locale.Category category70 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale71 = java.util.Locale.getDefault(category70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale72);
        java.util.Locale.setDefault(category70, locale72);
        java.util.Locale locale75 = java.util.Locale.getDefault(category70);
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance(locale75);
        boolean boolean78 = parsePosition63.equals((java.lang.Object) locale75);
        parsePosition63.setErrorIndex((int) (short) 0);
        java.lang.String str81 = parsePosition63.toString();
        java.lang.Number number82 = numberFormat39.parse("100 / 1", parsePosition63);
        int int83 = parsePosition63.getIndex();
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0%" + "'", str8, "0%");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2147483647 + "'", int27 == 2147483647);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Japan" + "'", str31, "Japan");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale45.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str52, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str53, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "kor" + "'", str55, "kor");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(fractionFormat57);
        org.junit.Assert.assertNotNull(fractionFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str64, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + category70 + "' != '" + java.util.Locale.Category.FORMAT + "'", category70.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=0]" + "'", str81, "java.text.ParsePosition[index=97,errorIndex=0]");
        org.junit.Assert.assertNull(number82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
    }

    @Test
    public void test11388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11388");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2,857");
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        java.lang.String str7 = locale5.getDisplayCountry();
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.lang.String str9 = locale2.getDisplayCountry(locale5);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setScript("");
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = locale13.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale13.getDisplayScript(locale16);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.lang.String str21 = locale13.getDisplayCountry(locale20);
        java.util.Locale.Builder builder22 = builder10.setLocale(locale20);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayScript(locale25);
        java.lang.String str28 = locale23.toLanguageTag();
        java.lang.String str29 = locale23.getDisplayVariant();
        java.lang.String str30 = locale23.getVariant();
        java.util.Locale.Builder builder31 = builder22.setLocale(locale23);
        java.util.Locale locale32 = locale23.stripExtensions();
        java.lang.String str33 = locale2.getDisplayName(locale23);
        java.lang.String str34 = locale2.getCountry();
        java.lang.String str35 = locale1.getDisplayName(locale2);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "France" + "'", str9, "France");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587" + "'", str14, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh-TW" + "'", str15, "zh-TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Taiwan" + "'", str21, "Taiwan");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "und" + "'", str28, "und");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "French (France)" + "'", str33, "French (France)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FR" + "'", str34, "FR");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test11389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11389");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ENGLISH");
        java.util.Collection<java.lang.String> strCollection2 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("zh-TW", strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet10);
        java.util.Collection<java.lang.String> strCollection12 = null;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strCollection12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap14);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("Japan");
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strSet24, filteringMode26);
        java.lang.String str28 = java.util.Locale.lookupTag(languageRangeList17, (java.util.Collection<java.lang.String>) strList27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strMap37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList38, strMap39);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList46);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags(languageRangeList38, (java.util.Collection<java.lang.String>) strList46, filteringMode49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strSet55);
        java.util.Collection<java.lang.String> strCollection57 = null;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, strCollection57);
        java.lang.String str59 = java.util.Locale.lookupTag(languageRangeList38, strCollection57);
        java.util.Collection<java.util.Locale> localeCollection60 = null;
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList38, localeCollection60, filteringMode61);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter(languageRangeList17, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Locale locale64 = java.util.Locale.lookup(languageRangeList15, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList63, filteringMode65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags(languageRangeList1, strCollection2, filteringMode65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode26.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode49.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode61.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNull(locale64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode65.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList66);
    }

    @Test
    public void test11390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11390");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str7 = numberFormat5.format((long) 52);
        boolean boolean8 = numberFormat5.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "52" + "'", str7, "52");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test11391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11391");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("und-anglais", (double) (-50));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-50.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11392");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        boolean boolean4 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        boolean boolean6 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat3);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Currency currency11 = numberFormat9.getCurrency();
        fractionFormat7.setNumeratorFormat(numberFormat9);
        java.text.NumberFormat numberFormat13 = fractionFormat7.getDenominatorFormat();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale18);
        java.util.Currency currency21 = numberFormat20.getCurrency();
        numberFormat20.setMinimumIntegerDigits(1);
        numberFormat20.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj29 = numberFormat20.parseObject("Japan", parsePosition28);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException33 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str34 = fractionConversionException33.getPattern();
        java.lang.Throwable[] throwableArray35 = fractionConversionException33.getSuppressed();
        java.lang.Object[] objArray36 = fractionConversionException33.getArguments();
        boolean boolean37 = parsePosition28.equals((java.lang.Object) objArray36);
        int int38 = parsePosition28.getIndex();
        int int39 = parsePosition28.getIndex();
        java.lang.Object obj40 = fractionFormat16.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", parsePosition28);
        int int41 = parsePosition28.getIndex();
        java.lang.String str42 = parsePosition28.toString();
        java.text.ParseException parseException45 = new java.text.ParseException("\uc911\uad6d\uc5b4", 0);
        int int46 = parseException45.getErrorOffset();
        java.lang.Throwable[] throwableArray47 = parseException45.getSuppressed();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException51 = new org.apache.commons.math.fraction.FractionConversionException((double) 'x', (long) 117, (long) 0);
        parseException45.addSuppressed((java.lang.Throwable) fractionConversionException51);
        boolean boolean53 = parsePosition28.equals((java.lang.Object) parseException45);
        parsePosition28.setIndex(117);
        java.lang.Object obj56 = fractionFormat7.parseObject("40 / 39", parsePosition28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass57 = obj56.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertNotNull(currency11);
        org.junit.Assert.assertEquals(currency11.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(currency21);
        org.junit.Assert.assertEquals(currency21.toString(), "TWD");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str34, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str42, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test11393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11393");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.lang.String str8 = locale0.getISO3Language();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale0);
        boolean boolean10 = numberFormat9.isGroupingUsed();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        numberFormat12.setMaximumFractionDigits(100);
        java.lang.String str17 = numberFormat12.format((long) 100);
        int int18 = numberFormat12.getMaximumFractionDigits();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.setVariant("");
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        boolean boolean24 = numberFormat12.equals((java.lang.Object) builder22);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getISO3Language();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        java.lang.String str28 = locale25.getISO3Country();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getNumberInstance(locale25);
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        int int42 = numberFormat34.getMaximumFractionDigits();
        java.lang.Object obj43 = numberFormat34.clone();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        numberFormat45.setMaximumFractionDigits(100);
        numberFormat45.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str52 = numberFormat45.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat53 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29, numberFormat34, numberFormat45);
        int int54 = numberFormat34.getMaximumIntegerDigits();
        boolean boolean55 = numberFormat34.isGroupingUsed();
        java.util.Currency currency56 = numberFormat34.getCurrency();
        numberFormat12.setCurrency(currency56);
        numberFormat9.setCurrency(currency56);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10,000%" + "'", str17, "10,000%");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "kor" + "'", str26, "kor");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "100%" + "'", str52, "100%");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(currency56);
        org.junit.Assert.assertEquals(currency56.toString(), "XXX");
    }

    @Test
    public void test11394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11394");
        java.util.Locale locale2 = new java.util.Locale("France", "CHINESE (TAIWAN)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.lang.String str4 = locale2.getVariant();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale2);
        int int6 = numberFormat5.getMinimumIntegerDigits();
        org.junit.Assert.assertEquals(locale2.toString(), "france_CHINESE (TAIWAN)");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test11395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11395");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale1.getScript();
        java.lang.String str3 = locale0.getDisplayName(locale1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getScript();
        java.util.Locale locale9 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str10 = locale4.getDisplayScript(locale9);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getNumberInstance(locale9);
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet13 = locale9.getExtensionKeys();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = locale9.getDisplayName(locale14);
        java.util.Locale locale19 = new java.util.Locale("-1 / 120");
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.setScript("");
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.lang.String str25 = locale23.toLanguageTag();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale26.getISO3Language();
        java.lang.String str29 = locale23.getDisplayScript(locale26);
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.lang.String str31 = locale23.getDisplayCountry(locale30);
        java.util.Locale.Builder builder32 = builder20.setLocale(locale30);
        java.lang.String str33 = locale30.getDisplayScript();
        java.lang.String str34 = locale19.getDisplayLanguage(locale30);
        java.lang.String str35 = locale19.getDisplayVariant();
        java.lang.String str36 = locale9.getDisplayName(locale19);
        java.lang.String str37 = locale1.getDisplayName(locale9);
        java.text.NumberFormat numberFormat38 = java.text.NumberFormat.getInstance(locale9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\ubbf8\uad6d)" + "'", str3, "\uc601\uc5b4\ubbf8\uad6d)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale9.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str16, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str17, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals(locale19.toString(), "-1 / 120");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-TW" + "'", str25, "zh-TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Taiwan" + "'", str31, "Taiwan");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1 / 120" + "'", str34, "-1 / 120");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str36, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Korean" + "'", str37, "Korean");
        org.junit.Assert.assertNotNull(numberFormat38);
    }

    @Test
    public void test11396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11396");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str4 = fractionFormat2.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat5 = fractionFormat2.getNumeratorFormat();
        numberFormat5.setMaximumFractionDigits((int) (short) -1);
        java.util.Currency currency8 = numberFormat5.getCurrency();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        java.text.NumberFormat numberFormat11 = fractionFormat9.getNumeratorFormat();
        java.lang.Object obj12 = numberFormat11.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "100 0 / 1" + "'", str4, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(currency8);
        org.junit.Assert.assertEquals(currency8.toString(), "XXX");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test11397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11397");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) (short) -14400, (double) 87, (int) 'u');
        long long4 = fraction3.longValue();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-14400L) + "'", long4 == (-14400L));
    }

    @Test
    public void test11398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11398");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction8 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction10 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction9.abs();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction3.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction15 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.negate();
        org.apache.commons.math.fraction.Fraction fraction17 = fraction12.divide(fraction15);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale23 = java.util.Locale.getDefault(category18);
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale23);
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction35.abs();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction29.add(fraction35);
        org.apache.commons.math.fraction.Fraction fraction41 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction42 = fraction41.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction38.divide(fraction41);
        int int44 = fraction38.intValue();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction38.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction38.abs();
        int int47 = fraction38.getDenominator();
        java.lang.String str48 = numberFormat25.format((java.lang.Object) fraction38);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, (int) (byte) -120);
        int int52 = fraction51.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction38.multiply(fraction51);
        org.apache.commons.math.fraction.Fraction fraction54 = fraction17.add(fraction38);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction58 = fraction57.negate();
        double double59 = fraction57.doubleValue();
        int int60 = fraction57.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction61 = fraction57.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction38.divide(fraction57);
        java.text.FieldPosition fieldPosition64 = new java.text.FieldPosition(1);
        java.text.NumberFormat.Field field65 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition66 = new java.text.FieldPosition((java.text.Format.Field) field65);
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition((java.text.Format.Field) field65, 1);
        int int69 = fieldPosition68.getEndIndex();
        boolean boolean70 = fieldPosition64.equals((java.lang.Object) fieldPosition68);
        fieldPosition68.setBeginIndex((int) (short) 10);
        fieldPosition68.setBeginIndex((int) (byte) 1);
        boolean boolean75 = fraction38.equals((java.lang.Object) fieldPosition68);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 60 + "'", int47 == 60);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2%" + "'", str48, "2%");
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-0.008333333333333333d) + "'", double59 == (-0.008333333333333333d));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 120 + "'", int60 == 120);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(field65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test11399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11399");
        java.util.Locale locale1 = new java.util.Locale("java.text.parseexception: zh_tw");
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getScript();
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseexception: zh_tw");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test11400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11400");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException(2.147483647E9d, 0);
        java.lang.String str3 = fractionConversionException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.fraction.FractionConversionException: Unable to convert 2,147,483,647 to fraction after 0 iterations" + "'", str3, "org.apache.commons.math.fraction.FractionConversionException: Unable to convert 2,147,483,647 to fraction after 0 iterations");
    }

    @Test
    public void test11401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11401");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT_SYMBOL;
        java.lang.String str1 = field0.toString();
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 0);
        java.lang.String str4 = field0.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.NumberFormat$Field(exponent symbol)" + "'", str1, "java.text.NumberFormat$Field(exponent symbol)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.NumberFormat$Field(exponent symbol)" + "'", str4, "java.text.NumberFormat$Field(exponent symbol)");
    }

    @Test
    public void test11402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11402");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 100 to fraction (10/0)");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.util.Locale.setDefault(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getInstance(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(numberFormat4);
    }

    @Test
    public void test11403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11403");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("-119 / 120");
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = locale2.getDisplayVariant(locale5);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale2);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        boolean boolean16 = numberFormat15.isGroupingUsed();
        properFractionFormat13.setWholeFormat(numberFormat15);
        java.text.NumberFormat numberFormat18 = properFractionFormat13.getWholeFormat();
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number22 = numberFormat18.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition21);
        parsePosition21.setErrorIndex(0);
        int int25 = parsePosition21.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction26 = properFractionFormat9.parse("\u65e5\u6587", parsePosition21);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getPercentInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.lang.Object obj31 = properFractionFormat30.clone();
        java.text.NumberFormat numberFormat32 = properFractionFormat30.getDenominatorFormat();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale34);
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getInstance(locale37);
        java.util.Currency currency40 = numberFormat39.getCurrency();
        numberFormat39.setMinimumIntegerDigits(1);
        numberFormat39.setMinimumIntegerDigits((int) (byte) 0);
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj48 = numberFormat39.parseObject("Japan", parsePosition47);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException52 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str53 = fractionConversionException52.getPattern();
        java.lang.Throwable[] throwableArray54 = fractionConversionException52.getSuppressed();
        java.lang.Object[] objArray55 = fractionConversionException52.getArguments();
        boolean boolean56 = parsePosition47.equals((java.lang.Object) objArray55);
        int int57 = parsePosition47.getIndex();
        int int58 = parsePosition47.getIndex();
        java.lang.Object obj59 = fractionFormat35.parseObject("\ud55c\uad6d\uc5b4", parsePosition47);
        parsePosition47.setErrorIndex(14400);
        org.apache.commons.math.fraction.Fraction fraction62 = properFractionFormat30.parse("\u65e5\u6587", parsePosition47);
        parsePosition47.setErrorIndex((int) (short) -1);
        java.lang.Object obj65 = properFractionFormat9.parseObject("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 0 to fraction (0/-1)", parsePosition47);
        java.text.FieldPosition fieldPosition67 = new java.text.FieldPosition(10);
        int int68 = fieldPosition67.getEndIndex();
        fieldPosition67.setBeginIndex((int) '#');
        java.util.Locale locale71 = java.util.Locale.ENGLISH;
        java.lang.String str72 = locale71.getScript();
        java.util.Locale locale76 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str77 = locale71.getDisplayScript(locale76);
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getNumberInstance(locale76);
        int int79 = numberFormat78.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat80 = new org.apache.commons.math.fraction.FractionFormat(numberFormat78);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        boolean boolean82 = fieldPosition67.equals((java.lang.Object) numberFormat78);
        java.lang.String str84 = numberFormat78.format((double) (-1L));
        properFractionFormat9.setWholeFormat(numberFormat78);
        boolean boolean86 = locale1.equals((java.lang.Object) numberFormat78);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(numberFormat18);
        org.junit.Assert.assertNull(number22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(fraction26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "TWD");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str53, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 0, -1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(fraction62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals(locale76.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-1" + "'", str84, "-1");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11404");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat13 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat12);
        numberFormat12.setMaximumFractionDigits(100);
        java.lang.String str17 = numberFormat12.format((long) 100);
        int int18 = numberFormat12.getMaximumFractionDigits();
        numberFormat12.setMinimumFractionDigits((int) (short) 0);
        int int21 = numberFormat12.getMaximumFractionDigits();
        numberFormat12.setMaximumIntegerDigits((-1));
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getInstance(locale24);
        boolean boolean26 = numberFormat25.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getInstance(locale28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = new org.apache.commons.math.fraction.FractionFormat(numberFormat29, numberFormat31);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj36 = numberFormat31.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition35);
        properFractionFormat27.setNumeratorFormat(numberFormat31);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat39 = java.text.NumberFormat.getCurrencyInstance(locale38);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat39);
        java.util.Locale locale42 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat43 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale42);
        java.lang.String str45 = fractionFormat43.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat46 = fractionFormat43.getNumeratorFormat();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale50 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat51 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale50);
        java.lang.String str52 = locale50.getDisplayCountry();
        java.lang.String str53 = locale47.getDisplayName(locale50);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.lang.String str55 = locale54.getDisplayScript();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale54.getDisplayScript(locale56);
        java.lang.String str59 = locale47.getDisplayLanguage(locale56);
        java.text.NumberFormat numberFormat60 = java.text.NumberFormat.getNumberInstance(locale47);
        fractionFormat43.setNumeratorFormat(numberFormat60);
        properFractionFormat40.setWholeFormat(numberFormat60);
        properFractionFormat27.setWholeFormat(numberFormat60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat64 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat60);
        numberFormat60.setGroupingUsed(true);
        org.apache.commons.math.fraction.FractionFormat fractionFormat67 = new org.apache.commons.math.fraction.FractionFormat(numberFormat12, numberFormat60);
        properFractionFormat10.setNumeratorFormat(numberFormat12);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.util.Locale locale72 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat73 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale72);
        java.lang.String str74 = locale72.getDisplayCountry();
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getIntegerInstance(locale72);
        java.lang.String str76 = locale69.getDisplayCountry(locale72);
        java.text.NumberFormat numberFormat77 = java.text.NumberFormat.getPercentInstance(locale69);
        properFractionFormat10.setWholeFormat(numberFormat77);
        java.lang.String str80 = numberFormat77.format((double) (short) -32);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat81 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat77);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10,000%" + "'", str17, "10,000%");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat39);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100 0 / 1" + "'", str45, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "kor" + "'", str57, "kor");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(numberFormat60);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "France" + "'", str76, "France");
        org.junit.Assert.assertNotNull(numberFormat77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "-3\240200 %" + "'", str80, "-3\240200 %");
    }

    @Test
    public void test11405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11405");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction3.abs();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) locale8);
        boolean boolean10 = fraction5.equals((java.lang.Object) locale8);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction5.abs();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale12);
        boolean boolean14 = fraction11.equals((java.lang.Object) locale12);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction29 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        org.apache.commons.math.fraction.Fraction fraction31 = fraction30.abs();
        org.apache.commons.math.fraction.Fraction fraction34 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.negate();
        org.apache.commons.math.fraction.Fraction fraction36 = fraction35.abs();
        long long37 = fraction35.longValue();
        org.apache.commons.math.fraction.Fraction fraction38 = fraction31.multiply(fraction35);
        org.apache.commons.math.fraction.Fraction fraction39 = fraction19.divide(fraction38);
        org.apache.commons.math.fraction.Fraction fraction40 = fraction19.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction11.subtract(fraction40);
        int int42 = fraction41.getDenominator();
        float float43 = fraction41.floatValue();
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction46.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction50 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        float float51 = fraction50.floatValue();
        double double52 = fraction50.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction55 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction56 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction57 = fraction56.abs();
        org.apache.commons.math.fraction.Fraction fraction60 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction61 = fraction60.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.abs();
        long long63 = fraction61.longValue();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction57.multiply(fraction61);
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.negate();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction73 = fraction72.negate();
        org.apache.commons.math.fraction.Fraction fraction74 = fraction73.abs();
        long long75 = fraction73.longValue();
        org.apache.commons.math.fraction.Fraction fraction76 = fraction69.multiply(fraction73);
        org.apache.commons.math.fraction.Fraction fraction77 = fraction57.divide(fraction76);
        org.apache.commons.math.fraction.Fraction fraction78 = fraction57.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction79 = fraction57.negate();
        int int80 = fraction57.getNumerator();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction50.subtract(fraction57);
        org.apache.commons.math.fraction.Fraction fraction82 = fraction46.multiply(fraction81);
        org.apache.commons.math.fraction.Fraction fraction83 = fraction41.add(fraction46);
        short short84 = fraction41.shortValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction31);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 120 + "'", int42 == 120);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + (-119.99167f) + "'", float43 == (-119.99167f));
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 1.0f + "'", float51 == 1.0f);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertNotNull(fraction79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction82);
        org.junit.Assert.assertNotNull(fraction83);
        org.junit.Assert.assertTrue("'" + short84 + "' != '" + (short) -119 + "'", short84 == (short) -119);
    }

    @Test
    public void test11406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11406");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) '4');
        parsePosition8.setIndex(0);
        java.lang.Object obj11 = properFractionFormat5.parseObject("und", parsePosition8);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition(120);
        java.lang.String str14 = properFractionFormat5.format((java.lang.Object) 120);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction16 = properFractionFormat5.parse("3,400%");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable fraction number: \"3,400%\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\244 120.00 \244 0.00 / \244 1.00" + "'", str14, "\244 120.00 \244 0.00 / \244 1.00");
    }

    @Test
    public void test11407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11407");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 10000L);
    }

    @Test
    public void test11408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11408");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        int int5 = numberFormat4.getMinimumFractionDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        numberFormat7.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat7);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException15 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException19 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str20 = fractionConversionException19.getPattern();
        java.lang.Throwable[] throwableArray21 = fractionConversionException19.getSuppressed();
        fractionConversionException15.addSuppressed((java.lang.Throwable) fractionConversionException19);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException26 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str31 = fractionConversionException30.getPattern();
        java.lang.Throwable[] throwableArray32 = fractionConversionException30.getSuppressed();
        fractionConversionException26.addSuppressed((java.lang.Throwable) fractionConversionException30);
        fractionConversionException19.addSuppressed((java.lang.Throwable) fractionConversionException30);
        java.lang.Throwable[] throwableArray35 = fractionConversionException30.getSuppressed();
        java.lang.String str36 = fractionConversionException30.getPattern();
        boolean boolean37 = numberFormat4.equals((java.lang.Object) str36);
        java.lang.String str39 = numberFormat4.format((double) 2L);
        java.lang.String str41 = numberFormat4.format((long) 2147483647);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat43 = java.text.NumberFormat.getInstance(locale42);
        boolean boolean44 = numberFormat43.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat45 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat43);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat47 = java.text.NumberFormat.getInstance(locale46);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat49 = java.text.NumberFormat.getPercentInstance(locale48);
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = new org.apache.commons.math.fraction.FractionFormat(numberFormat47, numberFormat49);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj54 = numberFormat49.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition53);
        properFractionFormat45.setNumeratorFormat(numberFormat49);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat57 = java.text.NumberFormat.getCurrencyInstance(locale56);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat58 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat57);
        java.util.Locale locale60 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat61 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale60);
        java.lang.String str63 = fractionFormat61.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat64 = fractionFormat61.getNumeratorFormat();
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.util.Locale locale66 = locale65.stripExtensions();
        java.util.Locale locale68 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale68);
        java.lang.String str70 = locale68.getDisplayCountry();
        java.lang.String str71 = locale65.getDisplayName(locale68);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.lang.String str73 = locale72.getDisplayScript();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale74.getISO3Language();
        java.lang.String str76 = locale72.getDisplayScript(locale74);
        java.lang.String str77 = locale65.getDisplayLanguage(locale74);
        java.text.NumberFormat numberFormat78 = java.text.NumberFormat.getNumberInstance(locale65);
        fractionFormat61.setNumeratorFormat(numberFormat78);
        properFractionFormat58.setWholeFormat(numberFormat78);
        properFractionFormat45.setWholeFormat(numberFormat78);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat82 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat78);
        boolean boolean83 = numberFormat4.equals((java.lang.Object) numberFormat78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = numberFormat4.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=35,endIndex=35]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str20, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str36, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2" + "'", str39, "2");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2,147,483,647" + "'", str41, "2,147,483,647");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat49);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat57);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "100 0 / 1" + "'", str63, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals(locale68.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "kor" + "'", str75, "kor");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test11409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11409");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayScript();
        java.lang.String str17 = locale14.getDisplayName(locale15);
        java.lang.String str18 = locale10.getDisplayLanguage(locale14);
        java.lang.String str19 = locale14.getDisplayName();
        java.util.Locale.Builder builder20 = builder9.setLocale(locale14);
        java.util.Locale locale21 = builder20.build();
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale.Builder builder25 = builder23.clear();
        java.util.Locale.Builder builder26 = builder23.clear();
        java.util.Locale.Builder builder29 = builder26.setExtension('a', "TWN");
        java.util.Locale.Builder builder31 = builder29.setLanguageTag("Canada");
        java.util.Locale.Builder builder33 = builder31.setVariant("");
        java.util.Locale locale34 = builder31.build();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale35.getScript();
        java.util.Locale locale40 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str41 = locale35.getDisplayScript(locale40);
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getNumberInstance(locale40);
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet44 = locale40.getExtensionKeys();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.PRC;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale40.getDisplayName(locale45);
        java.util.Locale locale49 = locale45.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.util.Set<java.lang.String> strSet54 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str55 = locale49.getDisplayVariant(locale51);
        java.lang.String str56 = locale51.getScript();
        java.lang.String str57 = locale34.getDisplayLanguage(locale51);
        java.lang.String str58 = locale21.getDisplayName(locale51);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese (Taiwan)" + "'", str17, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u65e5\u6587" + "'", str18, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (Taiwan)" + "'", str19, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "canada");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale40.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str47, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str48, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "canada" + "'", str57, "canada");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese (Taiwan)" + "'", str58, "Chinese (Taiwan)");
    }

    @Test
    public void test11410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11410");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 32, (int) (byte) 120);
        int int3 = fraction2.getDenominator();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 15 + "'", int3 == 15);
    }

    @Test
    public void test11411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11411");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale2.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((int) '4');
        parsePosition10.setErrorIndex(600);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance(locale16);
        java.lang.String str20 = locale13.getDisplayCountry(locale16);
        java.lang.String str21 = locale13.getISO3Language();
        java.lang.String str22 = locale13.getDisplayName();
        java.lang.String str24 = locale13.getExtension('x');
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction28.abs();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getInstance(locale31);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        boolean boolean34 = numberFormat32.equals((java.lang.Object) locale33);
        boolean boolean35 = fraction30.equals((java.lang.Object) locale33);
        org.apache.commons.math.fraction.Fraction fraction36 = fraction30.abs();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat38 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale37);
        boolean boolean39 = fraction36.equals((java.lang.Object) locale37);
        java.text.NumberFormat numberFormat40 = java.text.NumberFormat.getPercentInstance(locale37);
        java.lang.String str41 = locale13.getDisplayScript(locale37);
        boolean boolean42 = parsePosition10.equals((java.lang.Object) str41);
        java.lang.Object obj43 = fractionFormat7.parseObject("60,000%", parsePosition10);
        java.text.NumberFormat numberFormat44 = fractionFormat7.getNumeratorFormat();
        java.lang.Object obj45 = numberFormat44.clone();
        java.util.Currency currency46 = numberFormat44.getCurrency();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "France" + "'", str20, "France");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French (France)" + "'", str22, "French (France)");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(fraction36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(numberFormat40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(currency46);
        org.junit.Assert.assertEquals(currency46.toString(), "XXX");
    }

    @Test
    public void test11412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11412");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.toLanguageTag();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getISO3Language();
        java.lang.String str9 = locale3.getDisplayScript(locale6);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.lang.String str12 = locale3.getVariant();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getNumberInstance(locale3);
        numberFormat13.setMaximumIntegerDigits((-1));
        properFractionFormat2.setDenominatorFormat(numberFormat13);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.lang.String str19 = locale17.getExtension('a');
        java.util.Locale locale20 = locale17.stripExtensions();
        java.text.NumberFormat numberFormat21 = java.text.NumberFormat.getIntegerInstance(locale20);
        java.lang.String str23 = numberFormat21.format((double) (-32));
        properFractionFormat2.setNumeratorFormat(numberFormat21);
        java.lang.Object obj26 = numberFormat21.parseObject("2");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-32" + "'", str23, "-32");
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + 2L + "'", obj26, 2L);
    }

    @Test
    public void test11413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11413");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat8 = fractionFormat7.getDenominatorFormat();
        int int9 = numberFormat8.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat11 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator16 = numberFormat8.formatToCharacterIterator((java.lang.Object) locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fractionFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertNotNull(strSet15);
    }

    @Test
    public void test11414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11414");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.AttributedCharacterIterator attributedCharacterIterator4 = numberFormat1.formatToCharacterIterator((java.lang.Object) 1L);
        java.lang.Object obj5 = numberFormat1.clone();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat9 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat8);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction13 = properFractionFormat9.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition12);
        java.lang.Object obj14 = numberFormat1.parseObject("zh-TW", parsePosition12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.lang.String str17 = locale15.toLanguageTag();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getISO3Language();
        java.lang.String str21 = locale15.getDisplayScript(locale18);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale15.getDisplayCountry(locale22);
        org.apache.commons.math.fraction.FractionFormat fractionFormat24 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale15);
        boolean boolean25 = numberFormat1.equals((java.lang.Object) locale15);
        java.util.Locale locale27 = new java.util.Locale("kor");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = locale29.getScript();
        java.util.Locale locale34 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str35 = locale29.getDisplayScript(locale34);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale34);
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet38 = locale34.getExtensionKeys();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = locale34.getDisplayName(locale39);
        java.util.Locale locale43 = locale39.stripExtensions();
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayScript();
        java.lang.String str47 = locale44.getDisplayCountry(locale45);
        java.util.Set<java.lang.String> strSet48 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale43.getDisplayVariant(locale45);
        java.lang.String str50 = locale27.getDisplayCountry(locale45);
        java.lang.String str51 = locale45.getDisplayVariant();
        java.lang.String str52 = locale15.getDisplayLanguage(locale45);
        java.util.Locale locale55 = new java.util.Locale("anglais", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getCurrencyInstance(locale55);
        org.apache.commons.math.fraction.Fraction fraction57 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str58 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction57);
        org.apache.commons.math.fraction.Fraction fraction61 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction63 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction64 = fraction62.abs();
        org.apache.commons.math.fraction.Fraction fraction67 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction68 = fraction67.negate();
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction68.abs();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction62.add(fraction68);
        org.apache.commons.math.fraction.Fraction fraction72 = fraction57.multiply(fraction68);
        org.apache.commons.math.fraction.Fraction fraction73 = fraction57.negate();
        java.util.Locale.Category category74 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = locale75.getISO3Language();
        java.util.Locale.setDefault(category74, locale75);
        boolean boolean78 = fraction57.equals((java.lang.Object) locale75);
        java.lang.String str79 = locale55.getDisplayLanguage(locale75);
        java.lang.String str80 = locale15.getDisplayName(locale55);
        org.apache.commons.math.fraction.FractionFormat fractionFormat81 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale55);
        java.text.ParsePosition parsePosition84 = new java.text.ParsePosition(51);
        org.apache.commons.math.fraction.Fraction fraction85 = fractionFormat81.parse("9,700", parsePosition84);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(attributedCharacterIterator4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNull(fraction13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese" + "'", str16, "Chinese");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zho" + "'", str20, "zho");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Taiwan" + "'", str23, "Taiwan");
        org.junit.Assert.assertNotNull(fractionFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals(locale27.toString(), "kor");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(locale34.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str41, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str42, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Japan" + "'", str47, "Japan");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese" + "'", str52, "Chinese");
        org.junit.Assert.assertEquals(locale55.toString(), "anglais_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1 / 1" + "'", str58, "1 / 1");
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction67);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertTrue("'" + category74 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category74.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "kor" + "'", str76, "kor");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "anglais" + "'", str79, "anglais");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Chinese (Taiwan)" + "'", str80, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(fractionFormat81);
        org.junit.Assert.assertNull(fraction85);
    }

    @Test
    public void test11415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11415");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("chinese_HI!");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test11416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11416");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.text.NumberFormat.Field field7 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition((java.text.Format.Field) field7);
        java.lang.String str9 = fieldPosition8.toString();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayName(locale11);
        boolean boolean14 = fieldPosition8.equals((java.lang.Object) locale11);
        fieldPosition8.setEndIndex((int) '#');
        int int17 = fieldPosition8.getField();
        int int18 = fieldPosition8.getBeginIndex();
        java.lang.String str19 = fieldPosition8.toString();
        int int20 = fieldPosition8.getBeginIndex();
        java.text.Format.Field field21 = fieldPosition8.getFieldAttribute();
        boolean boolean22 = languageRange1.equals((java.lang.Object) fieldPosition8);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(field7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str9, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese (Taiwan)" + "'", str13, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]" + "'", str19, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(field21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11417");
        java.util.Locale locale1 = new java.util.Locale("-1 / 60");
        org.junit.Assert.assertEquals(locale1.toString(), "-1 / 60");
    }

    @Test
    public void test11418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11418");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (byte) 10);
        fieldPosition3.setBeginIndex(10);
        int int6 = fieldPosition3.getBeginIndex();
        fieldPosition3.setEndIndex(10);
        int int9 = fieldPosition3.getField();
        java.lang.String str10 = fieldPosition3.toString();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=10]" + "'", str10, "java.text.FieldPosition[field=10,attribute=java.text.NumberFormat$Field(currency),beginIndex=10,endIndex=10]");
    }

    @Test
    public void test11419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11419");
        org.apache.commons.math.fraction.FractionFormat fractionFormat0 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat1 = fractionFormat0.getNumeratorFormat();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        numberFormat6.setMinimumIntegerDigits(0);
        java.lang.String str10 = numberFormat6.format(1.0d);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.lang.String str17 = locale11.getDisplayName(locale14);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayScript();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript(locale20);
        java.lang.String str23 = locale11.getDisplayLanguage(locale20);
        java.text.NumberFormat numberFormat24 = java.text.NumberFormat.getNumberInstance(locale11);
        java.util.Currency currency25 = numberFormat24.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        org.apache.commons.math.fraction.Fraction fraction33 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction34 = fraction33.negate();
        org.apache.commons.math.fraction.Fraction fraction35 = fraction34.abs();
        long long36 = fraction34.longValue();
        org.apache.commons.math.fraction.Fraction fraction37 = fraction30.multiply(fraction34);
        boolean boolean38 = numberFormat24.equals((java.lang.Object) fraction30);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat39 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat6, numberFormat24);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.util.Currency currency43 = numberFormat41.getCurrency();
        numberFormat41.setMinimumFractionDigits((int) '#');
        int int46 = numberFormat41.getMaximumIntegerDigits();
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat51 = java.text.NumberFormat.getPercentInstance(locale50);
        numberFormat51.setMinimumIntegerDigits((int) (short) -1);
        java.util.Currency currency54 = numberFormat51.getCurrency();
        numberFormat41.setCurrency(currency54);
        numberFormat24.setCurrency(currency54);
        java.math.RoundingMode roundingMode57 = numberFormat24.getRoundingMode();
        int int58 = numberFormat24.getMaximumFractionDigits();
        numberFormat24.setGroupingUsed(true);
        org.junit.Assert.assertNotNull(fractionFormat0);
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "kor" + "'", str21, "kor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(numberFormat24);
        org.junit.Assert.assertNotNull(currency25);
        org.junit.Assert.assertEquals(currency25.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertNotNull(fraction35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(currency43);
        org.junit.Assert.assertEquals(currency43.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2147483647 + "'", int46 == 2147483647);
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat51);
        org.junit.Assert.assertNotNull(currency54);
        org.junit.Assert.assertEquals(currency54.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode57 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode57.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
    }

    @Test
    public void test11420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11420");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.PERMILLE;
        java.text.NumberFormat.Field field1 = java.text.NumberFormat.Field.CURRENCY;
        boolean boolean2 = field0.equals((java.lang.Object) field1);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition4 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.Format.Field field5 = fieldPosition4.getFieldAttribute();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale14);
        java.lang.String str16 = locale14.getDisplayCountry();
        java.text.NumberFormat numberFormat17 = java.text.NumberFormat.getIntegerInstance(locale14);
        java.lang.String str18 = locale11.getDisplayCountry(locale14);
        java.lang.String str19 = locale11.getISO3Language();
        java.lang.String str20 = locale11.getDisplayName();
        java.util.Locale.setDefault(category6, locale11);
        java.util.Locale locale22 = java.util.Locale.getDefault(category6);
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getIntegerInstance(locale22);
        java.lang.Object obj24 = locale22.clone();
        boolean boolean25 = field5.equals((java.lang.Object) locale22);
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition(field5);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(field1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(field5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "France" + "'", str18, "France");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)" + "'", str20, "\ud504\ub791\uc2a4\uc5b4\ud504\ub791\uc2a4)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "fr_FR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "fr_FR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11421");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(10);
        int int2 = fieldPosition1.getEndIndex();
        fieldPosition1.setBeginIndex((int) '#');
        fieldPosition1.setEndIndex(0);
        int int7 = fieldPosition1.getEndIndex();
        int int8 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test11422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11422");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("java.text.ParsePosition[index=119,errorIndex=118]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.parseposition[index=119");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11423");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale3);
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("eng");
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale10.getISO3Language();
        java.lang.String str13 = locale10.getISO3Language();
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale10);
        java.lang.String str16 = locale3.getDisplayScript(locale10);
        java.lang.String str17 = locale0.getDisplayName(locale10);
        java.util.Locale locale20 = new java.util.Locale("CN", "10 / 1");
        java.lang.String str21 = locale0.getDisplayName(locale20);
        java.util.Set<java.lang.String> strSet22 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale26 = new java.util.Locale("kor", "chinois", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.lang.String str27 = locale26.getDisplayLanguage();
        java.lang.String str28 = locale26.getDisplayScript();
        java.lang.String str29 = locale26.getLanguage();
        java.lang.String str30 = locale0.getDisplayLanguage(locale26);
        java.lang.String str31 = locale26.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "jpn" + "'", str1, "jpn");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "eng");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
        org.junit.Assert.assertNotNull(fractionFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str17, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertEquals(locale20.toString(), "cn_10 / 1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanese (Japan)" + "'", str21, "Japanese (Japan)");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals(locale26.toString(), "kor_CHINOIS_java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str27, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "kor" + "'", str29, "kor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Japanese" + "'", str30, "Japanese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test11424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11424");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale9.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript(locale9);
        java.lang.String str12 = locale0.getDisplayLanguage(locale9);
        java.util.Set<java.lang.String> strSet13 = locale0.getUnicodeLocaleKeys();
        java.lang.String str15 = locale0.getExtension('x');
        java.lang.String str16 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test11425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11425");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale5 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getNumberInstance(locale5);
        int int8 = numberFormat7.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = new org.apache.commons.math.fraction.FractionFormat(numberFormat7);
        java.text.NumberFormat numberFormat10 = fractionFormat9.getNumeratorFormat();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale13.getISO3Language();
        java.lang.String str15 = locale11.getDisplayScript(locale13);
        java.lang.String str16 = locale11.toLanguageTag();
        java.util.Set<java.lang.String> strSet17 = locale11.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale11);
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        fractionFormat9.setNumeratorFormat(numberFormat19);
        java.text.NumberFormat numberFormat21 = fractionFormat9.getNumeratorFormat();
        java.lang.String str23 = numberFormat21.format((long) 117);
        java.math.RoundingMode roundingMode24 = numberFormat21.getRoundingMode();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale5.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "kor" + "'", str14, "kor");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(numberFormat21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "117" + "'", str23, "117");
        org.junit.Assert.assertTrue("'" + roundingMode24 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode24.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11426");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category0, locale7);
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction12.add(fraction18);
        org.apache.commons.math.fraction.Fraction fraction24 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.negate();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction21.divide(fraction24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = locale27.getScript();
        boolean boolean30 = fraction26.equals((java.lang.Object) locale27);
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale locale32 = java.util.Locale.getDefault(category0);
        java.util.Locale locale33 = java.util.Locale.getDefault(category0);
        java.util.Locale locale34 = java.util.Locale.getDefault(category0);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale35.getDisplayScript();
        java.util.Locale.setDefault(category0, locale35);
        java.util.Locale locale40 = new java.util.Locale("-10\240100 %");
        java.lang.String str41 = locale35.getDisplayScript(locale40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = locale40.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertEquals(locale7.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals(locale40.toString(), "-10\240100 %");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test11427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11427");
        java.util.Locale locale2 = new java.util.Locale("francese (Francia)", "-320,000%");
        java.util.Locale locale5 = new java.util.Locale("Chinese", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale5);
        boolean boolean7 = locale5.hasExtensions();
        java.util.Set<java.lang.Character> charSet8 = locale5.getExtensionKeys();
        java.lang.String str9 = locale5.getDisplayVariant();
        java.lang.String str10 = locale2.getDisplayScript(locale5);
        org.junit.Assert.assertEquals(locale2.toString(), "francese (francia)_-320,000%");
        org.junit.Assert.assertEquals(locale5.toString(), "chinese_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertNotNull(fractionFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test11428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11428");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat22 = fractionFormat21.getNumeratorFormat();
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat31 = java.text.NumberFormat.getPercentInstance(locale30);
        boolean boolean32 = numberFormat31.isGroupingUsed();
        java.util.Currency currency33 = numberFormat31.getCurrency();
        numberFormat28.setCurrency(currency33);
        java.util.Currency currency35 = numberFormat28.getCurrency();
        java.math.RoundingMode roundingMode36 = numberFormat28.getRoundingMode();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition((int) 'a');
        java.lang.String str40 = parsePosition39.toString();
        java.lang.String str41 = parsePosition39.toString();
        java.lang.Object obj42 = numberFormat28.parseObject("zho", parsePosition39);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getCurrencyInstance(locale44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat46 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) '#');
        java.lang.Object obj50 = properFractionFormat46.parseObject("", parsePosition49);
        parsePosition49.setErrorIndex((-1));
        parsePosition49.setIndex(120);
        java.lang.Object obj55 = numberFormat28.parseObject("", parsePosition49);
        java.lang.Object obj56 = numberFormat22.parseObject("20 / 7", parsePosition49);
        boolean boolean57 = numberFormat22.isParseIntegerOnly();
        boolean boolean58 = numberFormat22.isParseIntegerOnly();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(currency33);
        org.junit.Assert.assertEquals(currency33.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency35);
        org.junit.Assert.assertEquals(currency35.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str41, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test11429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11429");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getIntegerInstance(locale1);
        int int6 = numberFormat5.getMaximumIntegerDigits();
        boolean boolean7 = numberFormat5.isGroupingUsed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test11430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11430");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder8 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder10 = builder3.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder12 = builder3.setRegion("fr");
        java.util.Locale locale13 = builder3.build();
        java.util.Locale.Builder builder15 = builder3.addUnicodeLocaleAttribute("fra");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder3.setLanguage("java.text.ParseException: java.text.NumberFormat$Field(exponent symbol)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: java.text.ParseException: java.text.NumberFormat$Field(exponent symbol) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "japan_FR_#a-twn");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test11431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11431");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        numberFormat2.setMinimumIntegerDigits(1728000);
        boolean boolean5 = numberFormat2.isGroupingUsed();
        numberFormat2.setMaximumFractionDigits((int) (short) -14400);
        java.lang.String str9 = numberFormat2.format((double) (byte) 100);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat13, numberFormat15);
        boolean boolean17 = numberFormat15.isGroupingUsed();
        boolean boolean18 = numberFormat15.isGroupingUsed();
        fractionFormat11.setNumeratorFormat(numberFormat15);
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        int int26 = numberFormat25.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = new org.apache.commons.math.fraction.FractionFormat(numberFormat25);
        java.util.Locale locale32 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat33 = java.text.NumberFormat.getPercentInstance(locale32);
        int int34 = numberFormat33.getMaximumIntegerDigits();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getPercentInstance(locale35);
        boolean boolean37 = numberFormat36.isGroupingUsed();
        java.util.Currency currency38 = numberFormat36.getCurrency();
        numberFormat33.setCurrency(currency38);
        java.util.Currency currency40 = numberFormat33.getCurrency();
        java.math.RoundingMode roundingMode41 = numberFormat33.getRoundingMode();
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition((int) 'a');
        java.lang.String str45 = parsePosition44.toString();
        java.lang.String str46 = parsePosition44.toString();
        java.lang.Object obj47 = numberFormat33.parseObject("zho", parsePosition44);
        java.lang.Object obj48 = fractionFormat27.parseObject("java.text.NumberFormat$Field(currency)", parsePosition44);
        java.lang.Object obj49 = numberFormat15.parseObject("Italian", parsePosition44);
        java.text.NumberFormat numberFormat50 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat51 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat2, numberFormat15, numberFormat50);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat53 = java.text.NumberFormat.getPercentInstance(locale52);
        boolean boolean54 = numberFormat53.isGroupingUsed();
        java.util.Currency currency55 = numberFormat53.getCurrency();
        int int56 = numberFormat53.getMinimumFractionDigits();
        int int57 = numberFormat53.getMinimumIntegerDigits();
        numberFormat53.setMaximumIntegerDigits(11);
        java.util.Locale.LanguageRange languageRange61 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str62 = languageRange61.getRange();
        java.util.Locale.LanguageRange languageRange64 = new java.util.Locale.LanguageRange("zh-TW");
        double double65 = languageRange64.getWeight();
        double double66 = languageRange64.getWeight();
        java.util.Locale.LanguageRange languageRange68 = new java.util.Locale.LanguageRange("eng");
        java.util.Locale.LanguageRange languageRange70 = new java.util.Locale.LanguageRange("zh-TW");
        java.lang.String str71 = languageRange70.getRange();
        java.lang.String str72 = languageRange70.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] { languageRange61, languageRange64, languageRange68, languageRange70 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, strMap76);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale78.getISO3Language();
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags(languageRangeList77, (java.util.Collection<java.lang.String>) strSet80);
        boolean boolean82 = numberFormat53.equals((java.lang.Object) strSet80);
        java.lang.Object obj83 = numberFormat53.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat84 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat53);
        properFractionFormat51.setWholeFormat(numberFormat53);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100" + "'", str9, "000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,100");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647);
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2147483647 + "'", int34 == 2147483647);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(currency38);
        org.junit.Assert.assertEquals(currency38.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency40);
        org.junit.Assert.assertEquals(currency40.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode41 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode41.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str45, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str46, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(currency55);
        org.junit.Assert.assertEquals(currency55.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh-tw" + "'", str62, "zh-tw");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh-tw" + "'", str71, "zh-tw");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zh-tw" + "'", str72, "zh-tw");
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(languageRangeList77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "kor" + "'", str79, "kor");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(obj83);
    }

    @Test
    public void test11432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11432");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale.Builder builder4 = builder2.setLanguage("en");
        java.util.Locale.Builder builder6 = builder4.setVariant("");
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = locale7.toLanguageTag();
        java.util.Locale.Builder builder10 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder11 = builder4.clear();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder11.setExtension('a', "francese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder11.setVariant("JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: JAVA.TEXT.NUMBERFORMAT$FIELD(EXPONENT) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str8, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-TW" + "'", str9, "zh-TW");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test11433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11433");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.lang.String str8 = locale0.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = locale0.getUnicodeLocaleType("en-us (59,999%)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: en-us (59,999%)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
    }

    @Test
    public void test11434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11434");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat1 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.text.NumberFormat numberFormat2 = fractionFormat1.getDenominatorFormat();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4);
        java.lang.Object obj6 = numberFormat4.clone();
        org.apache.commons.math.fraction.FractionFormat fractionFormat7 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale8);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat9);
        java.util.Locale locale12 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat13 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale12);
        java.lang.String str15 = fractionFormat13.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat16 = fractionFormat13.getNumeratorFormat();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        java.lang.String str23 = locale17.getDisplayName(locale20);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = locale24.getDisplayScript(locale26);
        java.lang.String str29 = locale17.getDisplayLanguage(locale26);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getNumberInstance(locale17);
        fractionFormat13.setNumeratorFormat(numberFormat30);
        properFractionFormat10.setWholeFormat(numberFormat30);
        fractionFormat7.setNumeratorFormat(numberFormat30);
        fractionFormat1.setNumeratorFormat(numberFormat30);
        java.text.NumberFormat numberFormat35 = fractionFormat1.getNumeratorFormat();
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction39 = fraction38.negate();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction39.abs();
        org.apache.commons.math.fraction.Fraction fraction44 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction45 = fraction44.negate();
        org.apache.commons.math.fraction.Fraction fraction46 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction47 = fraction45.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = fraction39.add(fraction45);
        org.apache.commons.math.fraction.Fraction fraction51 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction52 = fraction51.negate();
        org.apache.commons.math.fraction.Fraction fraction53 = fraction48.divide(fraction51);
        int int54 = fraction48.intValue();
        org.apache.commons.math.fraction.Fraction fraction55 = fraction48.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction58 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) 100, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction59 = fraction58.negate();
        org.apache.commons.math.fraction.Fraction fraction60 = fraction55.multiply(fraction58);
        org.apache.commons.math.fraction.Fraction fraction61 = fraction55.negate();
        org.apache.commons.math.fraction.Fraction fraction62 = fraction61.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str66 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction65);
        float float67 = fraction65.floatValue();
        org.apache.commons.math.fraction.Fraction fraction68 = fraction65.negate();
        java.lang.String str69 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction68);
        double double70 = fraction68.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction62.multiply(fraction68);
        java.lang.String str72 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction71);
        java.lang.StringBuffer stringBuffer73 = null;
        java.text.FieldPosition fieldPosition75 = new java.text.FieldPosition((int) (byte) -21);
        int int76 = fieldPosition75.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = numberFormat35.format((java.lang.Object) fraction71, stringBuffer73, fieldPosition75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "100 0 / 1" + "'", str15, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(numberFormat35);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction46);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(fraction55);
        org.junit.Assert.assertNotNull(fraction58);
        org.junit.Assert.assertNotNull(fraction59);
        org.junit.Assert.assertNotNull(fraction60);
        org.junit.Assert.assertNotNull(fraction61);
        org.junit.Assert.assertNotNull(fraction62);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1 / 1" + "'", str66, "1 / 1");
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 1.0f + "'", float67 == 1.0f);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-1 / 1" + "'", str69, "-1 / 1");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-60 / 1" + "'", str72, "-60 / 1");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test11435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11435");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.lang.String str3 = locale0.getLanguage();
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getISO3Country();
        org.apache.commons.math.fraction.FractionFormat fractionFormat6 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(fractionFormat6);
    }

    @Test
    public void test11436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11436");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale locale8 = locale5.stripExtensions();
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
    }

    @Test
    public void test11437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11437");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException2 = new org.apache.commons.math.fraction.FractionConversionException((double) 2000L, (int) (byte) -119);
    }

    @Test
    public void test11438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11438");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale11 = java.util.Locale.getDefault(category6);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = locale12.getDisplayCountry(locale13);
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getNumberInstance(locale12);
        java.lang.String str17 = locale11.getDisplayCountry(locale12);
        java.lang.String str18 = locale12.getDisplayName();
        java.lang.String str19 = locale12.getCountry();
        java.util.Locale.Builder builder20 = builder3.setLocale(locale12);
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder20.addUnicodeLocaleAttribute("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 117 to fraction after 2 iterations");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.fraction.FractionConversionException: Unable to convert 117 to fraction after 2 iterations [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japan" + "'", str15, "Japan");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)" + "'", str18, "\uc77c\ubcf8\uc5b4\uc77c\ubcf8)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JP" + "'", str19, "JP");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test11439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11439");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Overflow trying to convert 52 to fraction (-1/0)");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getScript();
        java.lang.String str5 = locale1.getDisplayVariant(locale3);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance(locale3);
        java.util.Locale.setDefault(locale3);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
    }

    @Test
    public void test11440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11440");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale3.getISO3Language();
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.lang.String str8 = locale0.getDisplayCountry(locale7);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder9.setVariant("");
        java.util.Locale.Builder builder14 = builder9.setScript("");
        java.util.Locale.Builder builder15 = builder9.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.setRegion("");
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getDisplayCountry();
        java.util.Locale.Builder builder20 = builder15.setLocale(locale18);
        java.util.Locale locale21 = builder15.build();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Locale locale23 = locale22.stripExtensions();
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale25);
        java.lang.String str27 = locale25.getDisplayCountry();
        java.lang.String str28 = locale22.getDisplayName(locale25);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayScript();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale31.getISO3Language();
        java.lang.String str33 = locale29.getDisplayScript(locale31);
        java.lang.String str34 = locale22.getDisplayLanguage(locale31);
        java.util.Locale.Builder builder35 = builder15.setLocale(locale31);
        java.lang.String str36 = locale0.getDisplayLanguage(locale31);
        java.lang.String str37 = locale31.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str1, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-TW" + "'", str2, "zh-TW");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zho" + "'", str5, "zho");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Taiwan" + "'", str8, "Taiwan");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Korean" + "'", str28, "Korean");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "kor" + "'", str32, "kor");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str34, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str36, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str37, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test11441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11441");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getInstance(locale14);
        boolean boolean16 = numberFormat15.isParseIntegerOnly();
        numberFormat15.setGroupingUsed(false);
        properFractionFormat3.setWholeFormat(numberFormat15);
        numberFormat15.setMinimumFractionDigits((int) 'u');
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat22 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        boolean boolean26 = numberFormat25.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat27 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat25);
        java.lang.String str29 = numberFormat25.format(0.008333333333333333d);
        boolean boolean30 = numberFormat25.isParseIntegerOnly();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj34 = numberFormat25.parseObject("\u65e5\u6587", parsePosition33);
        int int35 = parsePosition33.getErrorIndex();
        org.apache.commons.math.fraction.Fraction fraction36 = properFractionFormat22.parse("\uc601\uc5b4\uce90\ub098\ub2e4)", parsePosition33);
        java.text.NumberFormat numberFormat37 = properFractionFormat22.getDenominatorFormat();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1%" + "'", str29, "1%");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(fraction36);
        org.junit.Assert.assertNotNull(numberFormat37);
    }

    @Test
    public void test11442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11442");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.text.NumberFormat numberFormat14 = properFractionFormat3.getWholeFormat();
        java.text.NumberFormat numberFormat15 = properFractionFormat3.getWholeFormat();
        int int16 = numberFormat15.getMaximumFractionDigits();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale17);
        java.text.NumberFormat numberFormat19 = fractionFormat18.getDenominatorFormat();
        numberFormat19.setMinimumIntegerDigits(1728000);
        java.util.Currency currency22 = numberFormat19.getCurrency();
        java.util.Currency currency23 = numberFormat19.getCurrency();
        numberFormat15.setCurrency(currency23);
        numberFormat15.setMaximumIntegerDigits((int) 'a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat18);
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertNotNull(currency22);
        org.junit.Assert.assertEquals(currency22.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency23);
        org.junit.Assert.assertEquals(currency23.toString(), "XXX");
    }

    @Test
    public void test11443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11443");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getIntegerInstance(locale7);
        java.lang.String str11 = locale7.toLanguageTag();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale locale14 = builder12.build();
        java.lang.String str15 = locale14.getScript();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = locale16.toLanguageTag();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale16.getDisplayScript(locale19);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale16.getDisplayCountry(locale23);
        java.util.Locale locale26 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str27 = locale23.getDisplayLanguage(locale26);
        java.lang.String str28 = locale14.getDisplayCountry(locale26);
        java.lang.String str29 = locale7.getDisplayVariant(locale14);
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        java.util.Locale locale32 = locale31.stripExtensions();
        boolean boolean33 = locale31.hasExtensions();
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getInstance(locale31);
        org.apache.commons.math.fraction.Fraction fraction37 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        org.apache.commons.math.fraction.Fraction fraction38 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str39 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction38);
        org.apache.commons.math.fraction.Fraction fraction42 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction43 = fraction42.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction45 = fraction43.abs();
        org.apache.commons.math.fraction.Fraction fraction48 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction49 = fraction48.negate();
        org.apache.commons.math.fraction.Fraction fraction50 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction51 = fraction49.abs();
        org.apache.commons.math.fraction.Fraction fraction52 = fraction43.add(fraction49);
        org.apache.commons.math.fraction.Fraction fraction53 = fraction38.multiply(fraction49);
        org.apache.commons.math.fraction.Fraction fraction54 = org.apache.commons.math.fraction.Fraction.ONE;
        long long55 = fraction54.longValue();
        org.apache.commons.math.fraction.Fraction fraction56 = fraction38.multiply(fraction54);
        org.apache.commons.math.fraction.Fraction fraction57 = fraction37.subtract(fraction56);
        float float58 = fraction56.floatValue();
        float float59 = fraction56.floatValue();
        boolean boolean60 = numberFormat34.equals((java.lang.Object) fraction56);
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction66 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction69 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.negate();
        org.apache.commons.math.fraction.Fraction fraction71 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction70.abs();
        org.apache.commons.math.fraction.Fraction fraction73 = fraction64.add(fraction70);
        org.apache.commons.math.fraction.Fraction fraction76 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction77 = fraction76.negate();
        org.apache.commons.math.fraction.Fraction fraction78 = fraction73.divide(fraction76);
        int int79 = fraction73.intValue();
        float float80 = fraction73.floatValue();
        org.apache.commons.math.fraction.Fraction fraction81 = fraction73.negate();
        org.apache.commons.math.fraction.Fraction fraction84 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction85 = fraction84.negate();
        org.apache.commons.math.fraction.Fraction fraction86 = fraction81.divide(fraction84);
        long long87 = fraction86.longValue();
        boolean boolean88 = fraction56.equals((java.lang.Object) long87);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str17, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh-TW" + "'", str18, "zh-TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Taiwan" + "'", str24, "Taiwan");
        org.junit.Assert.assertEquals(locale26.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italian" + "'", str27, "Italian");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(fraction37);
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1 / 1" + "'", str39, "1 / 1");
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction45);
        org.junit.Assert.assertNotNull(fraction48);
        org.junit.Assert.assertNotNull(fraction49);
        org.junit.Assert.assertNotNull(fraction50);
        org.junit.Assert.assertNotNull(fraction51);
        org.junit.Assert.assertNotNull(fraction52);
        org.junit.Assert.assertNotNull(fraction53);
        org.junit.Assert.assertNotNull(fraction54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(fraction56);
        org.junit.Assert.assertNotNull(fraction57);
        org.junit.Assert.assertTrue("'" + float58 + "' != '" + 1.0f + "'", float58 == 1.0f);
        org.junit.Assert.assertTrue("'" + float59 + "' != '" + 1.0f + "'", float59 == 1.0f);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction66);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertNotNull(fraction71);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertNotNull(fraction73);
        org.junit.Assert.assertNotNull(fraction76);
        org.junit.Assert.assertNotNull(fraction77);
        org.junit.Assert.assertNotNull(fraction78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 0.016666668f + "'", float80 == 0.016666668f);
        org.junit.Assert.assertNotNull(fraction81);
        org.junit.Assert.assertNotNull(fraction84);
        org.junit.Assert.assertNotNull(fraction85);
        org.junit.Assert.assertNotNull(fraction86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 2L + "'", long87 == 2L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test11444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11444");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getInstance(locale0);
        boolean boolean2 = numberFormat1.isParseIntegerOnly();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat3 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getInstance(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.FractionFormat fractionFormat8 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat7);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Object obj12 = numberFormat7.parseObject("java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", parsePosition11);
        properFractionFormat3.setNumeratorFormat(numberFormat7);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale14);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat16 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat15);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str21 = fractionFormat19.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat22 = fractionFormat19.getNumeratorFormat();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat27 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale26);
        java.lang.String str28 = locale26.getDisplayCountry();
        java.lang.String str29 = locale23.getDisplayName(locale26);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayScript();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getISO3Language();
        java.lang.String str34 = locale30.getDisplayScript(locale32);
        java.lang.String str35 = locale23.getDisplayLanguage(locale32);
        java.text.NumberFormat numberFormat36 = java.text.NumberFormat.getNumberInstance(locale23);
        fractionFormat19.setNumeratorFormat(numberFormat36);
        properFractionFormat16.setWholeFormat(numberFormat36);
        properFractionFormat3.setWholeFormat(numberFormat36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat40 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        boolean boolean47 = numberFormat45.equals((java.lang.Object) strArray46);
        java.lang.String str49 = numberFormat45.format((double) (byte) -1);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getNumberInstance(locale50);
        numberFormat54.setGroupingUsed(false);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat45, numberFormat54);
        int int58 = numberFormat45.getMaximumFractionDigits();
        int int59 = numberFormat45.getMinimumFractionDigits();
        boolean boolean60 = numberFormat45.isGroupingUsed();
        int int61 = numberFormat45.getMinimumFractionDigits();
        java.text.NumberFormat numberFormat62 = null;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale63);
        boolean boolean65 = numberFormat64.isGroupingUsed();
        java.util.Currency currency66 = numberFormat64.getCurrency();
        int int67 = numberFormat64.getMinimumFractionDigits();
        int int68 = numberFormat64.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = new org.apache.commons.math.fraction.FractionFormat(numberFormat64);
        java.lang.Object obj70 = numberFormat64.clone();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat71 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45, numberFormat62, numberFormat64);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100 0 / 1" + "'", str21, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Korean" + "'", str29, "Korean");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "kor" + "'", str33, "kor");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str35, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-100%" + "'", str49, "-100%");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Japan" + "'", str53, "Japan");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(currency66);
        org.junit.Assert.assertEquals(currency66.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(obj70);
    }

    @Test
    public void test11445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11445");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.negate();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.abs();
        long long10 = fraction8.longValue();
        org.apache.commons.math.fraction.Fraction fraction11 = fraction4.multiply(fraction8);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction15 = fraction14.negate();
        org.apache.commons.math.fraction.Fraction fraction16 = fraction15.abs();
        org.apache.commons.math.fraction.Fraction fraction19 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.negate();
        org.apache.commons.math.fraction.Fraction fraction21 = fraction20.abs();
        long long22 = fraction20.longValue();
        org.apache.commons.math.fraction.Fraction fraction23 = fraction16.multiply(fraction20);
        org.apache.commons.math.fraction.Fraction fraction24 = fraction8.subtract(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction28 = fraction27.negate();
        double double29 = fraction27.doubleValue();
        org.apache.commons.math.fraction.Fraction fraction33 = new org.apache.commons.math.fraction.Fraction((double) (byte) 1, (double) 'a', (int) (short) -1);
        org.apache.commons.math.fraction.Fraction fraction34 = fraction27.multiply(fraction33);
        boolean boolean35 = fraction24.equals((java.lang.Object) fraction27);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.toLanguageTag();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale39.getISO3Language();
        java.lang.String str42 = locale36.getDisplayScript(locale39);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale36.getDisplayCountry(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean46 = fraction27.equals((java.lang.Object) locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat48 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale36);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayScript();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale51.getISO3Language();
        java.lang.String str53 = locale49.getDisplayScript(locale51);
        java.text.NumberFormat numberFormat54 = java.text.NumberFormat.getPercentInstance(locale49);
        numberFormat54.setParseIntegerOnly(false);
        fractionFormat48.setNumeratorFormat(numberFormat54);
        java.text.NumberFormat numberFormat58 = fractionFormat48.getNumeratorFormat();
        int int59 = numberFormat58.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.008333333333333333d) + "'", double29 == (-0.008333333333333333d));
        org.junit.Assert.assertNotNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str37, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-TW" + "'", str38, "zh-TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zho" + "'", str41, "zho");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Taiwan" + "'", str44, "Taiwan");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fractionFormat47);
        org.junit.Assert.assertNotNull(fractionFormat48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "kor" + "'", str52, "kor");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(numberFormat54);
        org.junit.Assert.assertNotNull(numberFormat58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test11446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11446");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.setRegion("en");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale7.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getInstance(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale7.getDisplayVariant(locale11);
        java.lang.String str17 = locale7.getExtension('a');
        java.lang.String str18 = locale6.getDisplayCountry(locale7);
        java.text.NumberFormat numberFormat19 = java.text.NumberFormat.getIntegerInstance(locale6);
        java.lang.String str20 = locale6.getCountry();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat22 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.lang.String str24 = locale21.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale25.toLanguageTag();
        java.lang.String str27 = locale25.getDisplayLanguage();
        java.lang.String str28 = locale25.getISO3Country();
        java.lang.String str29 = locale21.getDisplayScript(locale25);
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale30);
        java.util.Locale locale32 = locale30.stripExtensions();
        java.util.Locale locale33 = locale30.stripExtensions();
        java.lang.String str34 = locale21.getDisplayVariant(locale33);
        java.util.Locale locale37 = new java.util.Locale("1,396,801 / 14,400", "java.text.FieldPosition[field=100,attribute=null,beginIndex=117,endIndex=0]");
        java.lang.String str38 = locale33.getDisplayLanguage(locale37);
        java.lang.String str39 = locale6.getDisplayName(locale33);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "_EN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str8, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Taiwan" + "'", str10, "Taiwan");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "EN" + "'", str18, "EN");
        org.junit.Assert.assertNotNull(numberFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "EN" + "'", str20, "EN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str24, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh-TW" + "'", str26, "zh-TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str27, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "TWN" + "'", str28, "TWN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals(locale37.toString(), "1,396,801 / 14,400_JAVA.TEXT.FIELDPOSITION[FIELD=100,ATTRIBUTE=NULL,BEGININDEX=117,ENDINDEX=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese" + "'", str38, "Chinese");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "EN" + "'", str39, "EN");
    }

    @Test
    public void test11447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11447");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayCountry(locale1);
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        int int5 = numberFormat4.getMinimumFractionDigits();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat8 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7);
        numberFormat7.setMaximumFractionDigits(100);
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = new org.apache.commons.math.fraction.FractionFormat(numberFormat4, numberFormat7);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException15 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException19 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str20 = fractionConversionException19.getPattern();
        java.lang.Throwable[] throwableArray21 = fractionConversionException19.getSuppressed();
        fractionConversionException15.addSuppressed((java.lang.Throwable) fractionConversionException19);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException26 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException30 = new org.apache.commons.math.fraction.FractionConversionException((double) 0.0f, (long) (byte) 0, (-1L));
        java.lang.String str31 = fractionConversionException30.getPattern();
        java.lang.Throwable[] throwableArray32 = fractionConversionException30.getSuppressed();
        fractionConversionException26.addSuppressed((java.lang.Throwable) fractionConversionException30);
        fractionConversionException19.addSuppressed((java.lang.Throwable) fractionConversionException30);
        java.lang.Throwable[] throwableArray35 = fractionConversionException30.getSuppressed();
        java.lang.String str36 = fractionConversionException30.getPattern();
        boolean boolean37 = numberFormat4.equals((java.lang.Object) str36);
        java.lang.String str39 = numberFormat4.format((double) 2L);
        numberFormat4.setMinimumIntegerDigits((int) (short) -600);
        numberFormat4.setGroupingUsed(false);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Japan" + "'", str3, "Japan");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str20, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str31, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Overflow trying to convert {0} to fraction ({1}/{2})" + "'", str36, "Overflow trying to convert {0} to fraction ({1}/{2})");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2" + "'", str39, "2");
    }

    @Test
    public void test11448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11448");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("Japanese");
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder4.setRegion("java.text.ParsePosition[index=3,errorIndex=3]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: java.text.ParsePosition[index=3,errorIndex=3] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test11449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11449");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder9 = builder2.clearExtensions();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        numberFormat13.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field18);
        java.lang.String str20 = fieldPosition19.toString();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = locale21.getDisplayName(locale22);
        boolean boolean25 = fieldPosition19.equals((java.lang.Object) locale22);
        fieldPosition19.setEndIndex((int) '#');
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat30.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        boolean boolean35 = fieldPosition19.equals((java.lang.Object) parsePosition33);
        java.lang.Number number36 = numberFormat13.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition33);
        org.apache.commons.math.fraction.Fraction fraction39 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction40 = fraction39.negate();
        org.apache.commons.math.fraction.Fraction fraction41 = fraction40.abs();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction40.abs();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getInstance(locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        boolean boolean46 = numberFormat44.equals((java.lang.Object) locale45);
        boolean boolean47 = fraction42.equals((java.lang.Object) locale45);
        boolean boolean48 = parsePosition33.equals((java.lang.Object) locale45);
        java.lang.String str50 = locale45.getUnicodeLocaleType("US");
        java.util.Locale.Builder builder51 = builder2.setLocale(locale45);
        java.util.Locale.Builder builder52 = builder51.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (Taiwan)" + "'", str24, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNotNull(fraction39);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test11450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11450");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (short) -1, (-1));
        java.lang.String str3 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        float float4 = fraction2.floatValue();
        org.apache.commons.math.fraction.Fraction fraction5 = fraction2.negate();
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        int int12 = numberFormat10.getMaximumFractionDigits();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getInstance(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat16 = java.text.NumberFormat.getPercentInstance(locale15);
        org.apache.commons.math.fraction.FractionFormat fractionFormat17 = new org.apache.commons.math.fraction.FractionFormat(numberFormat14, numberFormat16);
        org.apache.commons.math.fraction.FractionFormat fractionFormat18 = new org.apache.commons.math.fraction.FractionFormat(numberFormat10, numberFormat14);
        boolean boolean19 = fraction5.equals((java.lang.Object) fractionFormat18);
        java.text.NumberFormat numberFormat20 = fractionFormat18.getNumeratorFormat();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat23 = java.text.NumberFormat.getInstance(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat25 = java.text.NumberFormat.getPercentInstance(locale24);
        org.apache.commons.math.fraction.FractionFormat fractionFormat26 = new org.apache.commons.math.fraction.FractionFormat(numberFormat23, numberFormat25);
        numberFormat25.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field30);
        java.lang.String str32 = fieldPosition31.toString();
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str36 = locale33.getDisplayName(locale34);
        boolean boolean37 = fieldPosition31.equals((java.lang.Object) locale34);
        fieldPosition31.setEndIndex((int) '#');
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getCurrencyInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction46 = properFractionFormat42.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition45);
        boolean boolean47 = fieldPosition31.equals((java.lang.Object) parsePosition45);
        java.lang.Number number48 = numberFormat25.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition45);
        int int49 = parsePosition45.getIndex();
        java.lang.String str50 = parsePosition45.toString();
        java.lang.Object obj51 = null;
        boolean boolean52 = parsePosition45.equals(obj51);
        java.lang.Object obj53 = numberFormat20.parseObject("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition45);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat55 = java.text.NumberFormat.getPercentInstance(locale54);
        boolean boolean56 = numberFormat55.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat57 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat55);
        numberFormat55.setMaximumFractionDigits((int) (byte) -120);
        org.apache.commons.math.fraction.FractionFormat fractionFormat60 = new org.apache.commons.math.fraction.FractionFormat(numberFormat20, numberFormat55);
        java.math.RoundingMode roundingMode61 = numberFormat55.getRoundingMode();
        java.lang.Object obj62 = numberFormat55.clone();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1 / 1" + "'", str3, "1 / 1");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat25);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str32, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (Taiwan)" + "'", str36, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNull(fraction46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(number48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=1]" + "'", str50, "java.text.ParsePosition[index=1,errorIndex=1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + roundingMode61 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode61.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(obj62);
    }

    @Test
    public void test11451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11451");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Japan");
        java.util.Locale.Builder builder7 = builder5.setLanguage("France");
        java.util.Locale.Builder builder9 = builder5.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale10 = builder9.build();
        java.util.Locale.Builder builder11 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder9.setUnicodeLocaleKeyword("it-IT", "Taiwan");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: it-IT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "france__#u-fra");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test11452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11452");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setVariant("");
        java.util.Locale.Builder builder11 = builder9.setLanguage("Japan");
        java.util.Locale.Builder builder13 = builder11.setLanguage("France");
        java.util.Locale.Builder builder15 = builder11.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = builder15.build();
        boolean boolean18 = languageRange1.equals((java.lang.Object) locale17);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "france__#u-fra");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "france__#u-fra");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test11453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11453");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder6.setRegion("US");
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat15 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category12, locale17);
        java.lang.String str19 = locale11.getDisplayLanguage(locale17);
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getInstance(locale11);
        java.lang.String str21 = locale11.getScript();
        java.util.Locale.Builder builder22 = builder10.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder10.addUnicodeLocaleAttribute("\u65e5\u6587\u65e5\u672c)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "anglais" + "'", str19, "anglais");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test11454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11454");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getPercentInstance(locale3);
        int int5 = numberFormat4.getMinimumIntegerDigits();
        java.lang.String str7 = numberFormat4.format((long) 1);
        int int8 = numberFormat4.getMaximumIntegerDigits();
        java.util.Locale locale10 = new java.util.Locale("coreano");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = numberFormat4.format((java.lang.Object) fractionFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given Object as a Number");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "100%" + "'", str7, "100%");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertEquals(locale10.toString(), "coreano");
        org.junit.Assert.assertNotNull(fractionFormat11);
    }

    @Test
    public void test11455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11455");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(100, (int) '#');
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction2.multiply(fraction6);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction2.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction9 = fraction8.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction(14400, 60);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction8.multiply(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = org.apache.commons.math.fraction.Fraction.ONE;
        java.lang.String str15 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction14);
        int int16 = fraction14.getNumerator();
        int int17 = fraction14.getDenominator();
        int int18 = fraction14.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction12.multiply(fraction14);
        org.apache.commons.math.fraction.Fraction fraction20 = fraction19.reciprocal();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1 / 1" + "'", str15, "1 / 1");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction20);
    }

    @Test
    public void test11456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11456");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getPercentInstance(locale2);
        boolean boolean4 = numberFormat3.isGroupingUsed();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat5 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat3);
        boolean boolean6 = numberFormat3.isGroupingUsed();
        java.lang.String str8 = numberFormat3.format((double) 10L);
        java.text.NumberFormat numberFormat9 = null;
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1, numberFormat3, numberFormat9);
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getPercentInstance(locale14);
        int int16 = numberFormat15.getMaximumIntegerDigits();
        java.math.RoundingMode roundingMode17 = numberFormat15.getRoundingMode();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale19);
        numberFormat22.setMinimumIntegerDigits(0);
        int int25 = numberFormat22.getMaximumFractionDigits();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat27 = java.text.NumberFormat.getPercentInstance(locale26);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27);
        numberFormat27.setMaximumFractionDigits(100);
        java.lang.String str32 = numberFormat27.format((long) 100);
        int int33 = numberFormat27.getMaximumFractionDigits();
        numberFormat27.setMinimumFractionDigits((int) (short) 0);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat38 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat37);
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = new org.apache.commons.math.fraction.FractionFormat(numberFormat37);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getPercentInstance(locale40);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat42 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat44 = java.text.NumberFormat.getPercentInstance(locale43);
        boolean boolean45 = numberFormat44.isGroupingUsed();
        properFractionFormat42.setWholeFormat(numberFormat44);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat47 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat27, numberFormat37, numberFormat44);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.util.Locale locale49 = locale48.stripExtensions();
        java.util.Locale locale51 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat52 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale51);
        java.lang.String str53 = locale51.getDisplayCountry();
        java.lang.String str54 = locale48.getDisplayName(locale51);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayScript();
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale57.getISO3Language();
        java.lang.String str59 = locale55.getDisplayScript(locale57);
        java.lang.String str60 = locale48.getDisplayLanguage(locale57);
        java.text.NumberFormat numberFormat61 = java.text.NumberFormat.getNumberInstance(locale48);
        java.util.Currency currency62 = numberFormat61.getCurrency();
        java.util.Locale locale66 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        int int68 = numberFormat67.getMaximumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat69 = new org.apache.commons.math.fraction.FractionFormat(numberFormat67);
        numberFormat67.setParseIntegerOnly(false);
        java.math.RoundingMode roundingMode72 = numberFormat67.getRoundingMode();
        numberFormat61.setRoundingMode(roundingMode72);
        numberFormat27.setRoundingMode(roundingMode72);
        numberFormat22.setRoundingMode(roundingMode72);
        numberFormat15.setRoundingMode(roundingMode72);
        numberFormat3.setRoundingMode(roundingMode72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number79 = numberFormat3.parse("");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Unparseable number: \"\"");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1,000%" + "'", str8, "1,000%");
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode17 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode17.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10,000%" + "'", str32, "10,000%");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Korean" + "'", str54, "Korean");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "kor" + "'", str58, "kor");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str60, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat61);
        org.junit.Assert.assertNotNull(currency62);
        org.junit.Assert.assertEquals(currency62.toString(), "XXX");
        org.junit.Assert.assertEquals(locale66.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2147483647 + "'", int68 == 2147483647);
        org.junit.Assert.assertTrue("'" + roundingMode72 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode72.equals(java.math.RoundingMode.HALF_EVEN));
    }

    @Test
    public void test11457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11457");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat5 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale4);
        java.util.Locale.setDefault(category2, locale4);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category2, locale7);
        java.lang.String str9 = locale7.getISO3Language();
        java.util.Locale locale12 = new java.util.Locale("Chinese", "hi!");
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getIntegerInstance(locale12);
        java.lang.String str14 = locale7.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat15 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.apache.commons.math.fraction.FractionFormat fractionFormat16 = new org.apache.commons.math.fraction.FractionFormat(numberFormat1, numberFormat15);
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.NumberFormat.Field field19 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((java.text.Format.Field) field19);
        int int21 = fieldPosition20.getEndIndex();
        java.lang.String str22 = fieldPosition20.toString();
        int int23 = fieldPosition20.getBeginIndex();
        fieldPosition20.setBeginIndex(2147483647);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer26 = numberFormat1.format((long) (byte) 16, stringBuffer18, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fra" + "'", str9, "fra");
        org.junit.Assert.assertEquals(locale12.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(numberFormat15);
        org.junit.Assert.assertNotNull(field19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str22, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test11458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11458");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale0);
        numberFormat5.setParseIntegerOnly(false);
        numberFormat5.setMaximumFractionDigits((int) (byte) 0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat10 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat5);
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getPercentInstance();
        java.util.Currency currency12 = numberFormat11.getCurrency();
        java.lang.String str14 = numberFormat11.format(1.0d);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat15 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat11);
        java.text.NumberFormat numberFormat16 = properFractionFormat15.getWholeFormat();
        java.text.NumberFormat numberFormat17 = properFractionFormat15.getWholeFormat();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat20 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.text.NumberFormat numberFormat22 = java.text.NumberFormat.getIntegerInstance(locale19);
        numberFormat22.setMinimumIntegerDigits(0);
        numberFormat22.setMinimumIntegerDigits(0);
        org.apache.commons.math.fraction.Fraction fraction30 = new org.apache.commons.math.fraction.Fraction((double) 2147483647, (double) 100.0f, (int) 'u');
        java.lang.String str31 = numberFormat22.format((java.lang.Object) 100.0f);
        properFractionFormat15.setWholeFormat(numberFormat22);
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition(10);
        int int35 = fieldPosition34.getEndIndex();
        fieldPosition34.setBeginIndex((int) '#');
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = locale38.getScript();
        java.util.Locale locale43 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str44 = locale38.getDisplayScript(locale43);
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getNumberInstance(locale43);
        int int46 = numberFormat45.getMinimumIntegerDigits();
        org.apache.commons.math.fraction.FractionFormat fractionFormat47 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat48 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat45);
        boolean boolean49 = fieldPosition34.equals((java.lang.Object) numberFormat45);
        numberFormat45.setGroupingUsed(false);
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale52.getISO3Language();
        java.util.Set<java.lang.Character> charSet54 = locale52.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet55 = locale52.getExtensionKeys();
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getCurrencyInstance(locale52);
        org.apache.commons.math.fraction.FractionFormat fractionFormat57 = new org.apache.commons.math.fraction.FractionFormat(numberFormat45, numberFormat56);
        boolean boolean59 = numberFormat56.equals((java.lang.Object) "\u4e2d\u6587\u4e2d\u570b)");
        numberFormat56.setMaximumIntegerDigits(35);
        int int62 = numberFormat56.getMaximumFractionDigits();
        int int63 = numberFormat56.getMinimumFractionDigits();
        properFractionFormat15.setWholeFormat(numberFormat56);
        properFractionFormat10.setNumeratorFormat(numberFormat56);
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat67 = java.text.NumberFormat.getPercentInstance(locale66);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat68 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat70 = java.text.NumberFormat.getPercentInstance(locale69);
        boolean boolean71 = numberFormat70.isGroupingUsed();
        properFractionFormat68.setWholeFormat(numberFormat70);
        java.text.NumberFormat numberFormat73 = properFractionFormat68.getWholeFormat();
        java.text.ParsePosition parsePosition76 = new java.text.ParsePosition((int) (short) 1);
        java.lang.Number number77 = numberFormat73.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition76);
        parsePosition76.setErrorIndex(0);
        parsePosition76.setErrorIndex(1728000);
        boolean boolean82 = numberFormat56.equals((java.lang.Object) parsePosition76);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(currency12);
        org.junit.Assert.assertEquals(currency12.toString(), "CAD");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100 %" + "'", str14, "100 %");
        org.junit.Assert.assertNotNull(numberFormat16);
        org.junit.Assert.assertNotNull(numberFormat17);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(numberFormat22);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale43.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "kor" + "'", str53, "kor");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(numberFormat73);
        org.junit.Assert.assertNull(number77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test11459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11459");
        org.apache.commons.math.fraction.Fraction fraction1 = new org.apache.commons.math.fraction.Fraction((double) 10);
        int int2 = fraction1.getDenominator();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test11460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11460");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getInstance(locale2);
        boolean boolean4 = field0.equals((java.lang.Object) locale2);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.lang.String str6 = locale5.getDisplayCountry();
        java.lang.String str7 = locale2.getDisplayVariant(locale5);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale5);
        java.util.Set<java.lang.String> strSet9 = locale5.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getInstance(locale5);
        java.lang.Object obj11 = locale5.clone();
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "it");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "it");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "it");
    }

    @Test
    public void test11461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11461");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat2 = java.text.NumberFormat.getInstance(locale0);
        java.util.Currency currency3 = numberFormat2.getCurrency();
        numberFormat2.setMinimumIntegerDigits(1);
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat10 = java.text.NumberFormat.getPercentInstance(locale9);
        int int11 = numberFormat10.getMaximumIntegerDigits();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        boolean boolean14 = numberFormat13.isGroupingUsed();
        java.util.Currency currency15 = numberFormat13.getCurrency();
        numberFormat10.setCurrency(currency15);
        java.util.Currency currency17 = numberFormat10.getCurrency();
        numberFormat2.setCurrency(currency17);
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.lang.String str22 = locale20.getDisplayCountry();
        org.apache.commons.math.fraction.FractionFormat fractionFormat23 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale20);
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getPercentInstance(locale27);
        int int29 = numberFormat28.getMaximumIntegerDigits();
        fractionFormat23.setDenominatorFormat(numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat28);
        org.apache.commons.math.fraction.FractionFormat fractionFormat32 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat33 = fractionFormat32.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat34 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat33);
        org.apache.commons.math.fraction.FractionFormat fractionFormat35 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance();
        java.text.NumberFormat numberFormat36 = fractionFormat35.getNumeratorFormat();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat39 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.text.NumberFormat numberFormat41 = java.text.NumberFormat.getIntegerInstance(locale38);
        numberFormat41.setMinimumIntegerDigits(0);
        java.lang.String str45 = numberFormat41.format(1.0d);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Locale locale49 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat50 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale49);
        java.lang.String str51 = locale49.getDisplayCountry();
        java.lang.String str52 = locale46.getDisplayName(locale49);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayScript();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale55.getISO3Language();
        java.lang.String str57 = locale53.getDisplayScript(locale55);
        java.lang.String str58 = locale46.getDisplayLanguage(locale55);
        java.text.NumberFormat numberFormat59 = java.text.NumberFormat.getNumberInstance(locale46);
        java.util.Currency currency60 = numberFormat59.getCurrency();
        org.apache.commons.math.fraction.Fraction fraction63 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction64 = fraction63.negate();
        org.apache.commons.math.fraction.Fraction fraction65 = fraction64.abs();
        org.apache.commons.math.fraction.Fraction fraction68 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction69 = fraction68.negate();
        org.apache.commons.math.fraction.Fraction fraction70 = fraction69.abs();
        long long71 = fraction69.longValue();
        org.apache.commons.math.fraction.Fraction fraction72 = fraction65.multiply(fraction69);
        boolean boolean73 = numberFormat59.equals((java.lang.Object) fraction65);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat74 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat36, numberFormat41, numberFormat59);
        properFractionFormat34.setWholeFormat(numberFormat41);
        boolean boolean76 = numberFormat41.isGroupingUsed();
        org.apache.commons.math.fraction.FractionFormat fractionFormat77 = new org.apache.commons.math.fraction.FractionFormat(numberFormat2, numberFormat41);
        java.lang.StringBuffer stringBuffer79 = null;
        java.text.NumberFormat.Field field80 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition81 = new java.text.FieldPosition((java.text.Format.Field) field80);
        int int82 = fieldPosition81.getBeginIndex();
        int int83 = fieldPosition81.getField();
        java.text.Format.Field field84 = fieldPosition81.getFieldAttribute();
        fieldPosition81.setBeginIndex((int) (byte) 100);
        int int87 = fieldPosition81.getBeginIndex();
        org.apache.commons.math.fraction.Fraction fraction90 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction91 = fraction90.negate();
        double double92 = fraction90.doubleValue();
        int int93 = fraction90.getDenominator();
        org.apache.commons.math.fraction.Fraction fraction94 = fraction90.reciprocal();
        boolean boolean95 = fieldPosition81.equals((java.lang.Object) fraction90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer96 = numberFormat41.format((long) 1727999, stringBuffer79, fieldPosition81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(numberFormat2);
        org.junit.Assert.assertNotNull(currency3);
        org.junit.Assert.assertEquals(currency3.toString(), "TWD");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(currency15);
        org.junit.Assert.assertEquals(currency15.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency17);
        org.junit.Assert.assertEquals(currency17.toString(), "XXX");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(fractionFormat23);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2147483647 + "'", int29 == 2147483647);
        org.junit.Assert.assertNotNull(fractionFormat32);
        org.junit.Assert.assertNotNull(numberFormat33);
        org.junit.Assert.assertNotNull(fractionFormat35);
        org.junit.Assert.assertNotNull(numberFormat36);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(numberFormat41);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals(locale49.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Korean" + "'", str52, "Korean");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "kor" + "'", str56, "kor");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat59);
        org.junit.Assert.assertNotNull(currency60);
        org.junit.Assert.assertEquals(currency60.toString(), "XXX");
        org.junit.Assert.assertNotNull(fraction63);
        org.junit.Assert.assertNotNull(fraction64);
        org.junit.Assert.assertNotNull(fraction65);
        org.junit.Assert.assertNotNull(fraction68);
        org.junit.Assert.assertNotNull(fraction69);
        org.junit.Assert.assertNotNull(fraction70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(fraction72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(field80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(field84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertNotNull(fraction90);
        org.junit.Assert.assertNotNull(fraction91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-0.008333333333333333d) + "'", double92 == (-0.008333333333333333d));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 120 + "'", int93 == 120);
        org.junit.Assert.assertNotNull(fraction94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test11462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11462");
        java.text.ParseException parseException2 = new java.text.ParseException("hi!", (int) '4');
        int int3 = parseException2.getErrorOffset();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException7 = new org.apache.commons.math.fraction.FractionConversionException(5.787036911897303E-7d, (-2L), (long) (-8));
        parseException2.addSuppressed((java.lang.Throwable) fractionConversionException7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test11463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11463");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Collection<java.lang.String> strCollection6 = null;
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Locale locale13 = new java.util.Locale("java.text.ParsePosition[index=35,errorIndex=35]", "-4,400 / 1", "FR");
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet14);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertEquals(locale13.toString(), "java.text.parseposition[index=35,errorindex=35]_-4,400 / 1_FR");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test11464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11464");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder6.setRegion("US");
        java.util.Locale.Builder builder13 = builder6.setExtension('x', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setRegion("Deutschland");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Deutschland [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11465");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 14400.0f, (long) (short) 99, (long) 88);
    }

    @Test
    public void test11466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11466");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getCurrencyInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        org.apache.commons.math.fraction.Fraction fraction5 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction6 = fraction5.negate();
        org.apache.commons.math.fraction.Fraction fraction7 = fraction6.abs();
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction11 = fraction10.negate();
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.abs();
        long long13 = fraction11.longValue();
        org.apache.commons.math.fraction.Fraction fraction14 = fraction7.multiply(fraction11);
        org.apache.commons.math.fraction.Fraction fraction17 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.negate();
        org.apache.commons.math.fraction.Fraction fraction19 = fraction18.abs();
        org.apache.commons.math.fraction.Fraction fraction22 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction23 = fraction22.negate();
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.abs();
        long long25 = fraction23.longValue();
        org.apache.commons.math.fraction.Fraction fraction26 = fraction19.multiply(fraction23);
        org.apache.commons.math.fraction.Fraction fraction27 = fraction11.subtract(fraction26);
        org.apache.commons.math.fraction.Fraction fraction28 = fraction26.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.abs();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.negate();
        double double31 = fraction30.doubleValue();
        java.lang.StringBuffer stringBuffer32 = null;
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition((int) (byte) -21);
        int int35 = fieldPosition34.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = fractionFormat2.format(fraction30, stringBuffer32, fieldPosition34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fraction5);
        org.junit.Assert.assertNotNull(fraction6);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertNotNull(fraction19);
        org.junit.Assert.assertNotNull(fraction22);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(fraction26);
        org.junit.Assert.assertNotNull(fraction27);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-14400.0d) + "'", double31 == (-14400.0d));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test11467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11467");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale0.getDisplayName(locale3);
        java.util.Locale locale8 = new java.util.Locale("Chinese", "hi!");
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.lang.String str11 = locale3.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "cor\351en" + "'", str5, "cor\351en");
        org.junit.Assert.assertEquals(locale8.toString(), "chinese_HI!");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "chinese_HI!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "France" + "'", str10, "France");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
    }

    @Test
    public void test11468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11468");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=35,errorIndex=600]");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.lang.String str6 = locale3.getDisplayLanguage(locale5);
        java.lang.String str7 = locale2.getDisplayScript(locale3);
        java.util.Set<java.lang.String> strSet8 = locale2.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str6, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test11469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11469");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale1);
        java.lang.String str3 = locale1.getDisplayCountry();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getIntegerInstance(locale1);
        java.lang.String str5 = locale1.toLanguageTag();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder6.build();
        java.lang.String str9 = locale8.getScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.lang.String str12 = locale10.toLanguageTag();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str16 = locale10.getDisplayScript(locale13);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = locale10.getDisplayCountry(locale17);
        java.util.Locale locale20 = new java.util.Locale("Chinese (Taiwan)");
        java.lang.String str21 = locale17.getDisplayLanguage(locale20);
        java.lang.String str22 = locale8.getDisplayCountry(locale20);
        java.lang.String str23 = locale1.getDisplayVariant(locale8);
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayScript();
        java.lang.String str27 = locale24.getDisplayCountry(locale25);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleAttributes();
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getIntegerInstance(locale25);
        java.text.NumberFormat numberFormat30 = java.text.NumberFormat.getInstance(locale25);
        java.util.Set<java.lang.Character> charSet31 = locale25.getExtensionKeys();
        java.lang.String str32 = locale8.getDisplayVariant(locale25);
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getCurrencyInstance(locale33);
        java.util.Locale.setDefault(locale33);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale36.getScript();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale33.getDisplayName(locale36);
        java.lang.String str40 = locale8.getDisplayScript(locale36);
        org.apache.commons.math.fraction.FractionFormat fractionFormat41 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale36);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str11, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-TW" + "'", str12, "zh-TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zho" + "'", str15, "zho");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertEquals(locale20.toString(), "chinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italian" + "'", str21, "Italian");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japan" + "'", str27, "Japan");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNotNull(numberFormat30);
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English" + "'", str39, "English");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(fractionFormat41);
    }

    @Test
    public void test11470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11470");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.fraction.Fraction fraction2 = new org.apache.commons.math.fraction.Fraction((double) (-32), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.fraction.FractionConversionException; message: Overflow trying to convert -32 to fraction (33/9,223,372,036,854,775,807)");
        } catch (org.apache.commons.math.fraction.FractionConversionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11471");
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException3 = new org.apache.commons.math.fraction.FractionConversionException((double) 2.14748365E9f, (long) (short) 14400, (long) 8654399);
    }

    @Test
    public void test11472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11472");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale3);
        java.lang.String str5 = locale3.getDisplayCountry();
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getIntegerInstance(locale3);
        java.lang.String str7 = locale0.getDisplayCountry(locale3);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setScript("");
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str17 = locale11.getDisplayScript(locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale11.getDisplayCountry(locale18);
        java.util.Locale.Builder builder20 = builder8.setLocale(locale18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale23.getISO3Language();
        java.lang.String str25 = locale21.getDisplayScript(locale23);
        java.lang.String str26 = locale21.toLanguageTag();
        java.lang.String str27 = locale21.getDisplayVariant();
        java.lang.String str28 = locale21.getVariant();
        java.util.Locale.Builder builder29 = builder20.setLocale(locale21);
        java.util.Locale locale30 = locale21.stripExtensions();
        java.lang.String str31 = locale0.getDisplayName(locale21);
        java.text.NumberFormat numberFormat32 = java.text.NumberFormat.getIntegerInstance(locale0);
        java.lang.Object obj33 = numberFormat32.clone();
        java.lang.String str35 = numberFormat32.format(0.6185567010309279d);
        java.math.RoundingMode roundingMode36 = numberFormat32.getRoundingMode();
        java.lang.Number number38 = numberFormat32.parse("1 / 100");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "France" + "'", str7, "France");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese" + "'", str12, "Chinese");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "kor" + "'", str24, "kor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "French (France)" + "'", str31, "French (France)");
        org.junit.Assert.assertNotNull(numberFormat32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertTrue("'" + roundingMode36 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode36.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + number38 + "' != '" + 1L + "'", number38, 1L);
    }

    @Test
    public void test11473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11473");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.lang.Object obj3 = fractionFormat2.clone();
        java.lang.Object obj4 = null;
        java.lang.StringBuffer stringBuffer5 = null;
        java.text.NumberFormat.Field field6 = java.text.NumberFormat.Field.CURRENCY;
        java.lang.String str7 = field6.toString();
        java.lang.String str8 = field6.toString();
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale10);
        java.lang.String str13 = fractionFormat11.format((java.lang.Object) 100);
        java.text.NumberFormat numberFormat14 = fractionFormat11.getNumeratorFormat();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.apache.commons.math.fraction.FractionFormat fractionFormat19 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.lang.String str21 = locale15.getDisplayName(locale18);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getISO3Language();
        java.lang.String str26 = locale22.getDisplayScript(locale24);
        java.lang.String str27 = locale15.getDisplayLanguage(locale24);
        java.text.NumberFormat numberFormat28 = java.text.NumberFormat.getNumberInstance(locale15);
        fractionFormat11.setNumeratorFormat(numberFormat28);
        numberFormat28.setMinimumIntegerDigits(2);
        boolean boolean32 = field6.equals((java.lang.Object) numberFormat28);
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field6);
        java.lang.String str34 = fieldPosition33.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer35 = fractionFormat2.format(obj4, stringBuffer5, fieldPosition33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(field6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str7, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.NumberFormat$Field(currency)" + "'", str8, "java.text.NumberFormat$Field(currency)");
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100 0 / 1" + "'", str13, "100 0 / 1");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(fractionFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "kor" + "'", str25, "kor");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4" + "'", str27, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(numberFormat28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str34, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
    }

    @Test
    public void test11474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11474");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat4 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat9 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale13 = new java.util.Locale("anglais", "kor");
        java.util.Locale.setDefault(category6, locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(category6, locale15);
        java.util.Locale locale19 = java.util.Locale.getDefault(category6);
        java.lang.String str20 = locale0.getDisplayCountry(locale19);
        org.apache.commons.math.fraction.FractionFormat fractionFormat21 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.clear();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder28 = builder25.addUnicodeLocaleAttribute("China");
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.NumberFormat.Field field30 = java.text.NumberFormat.Field.DECIMAL_SEPARATOR;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((java.text.Format.Field) field30);
        java.lang.String str32 = field30.toString();
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition((java.text.Format.Field) field30);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList42);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strSet50);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList51);
        java.text.NumberFormat.Field field53 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition((java.text.Format.Field) field53);
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat56 = java.text.NumberFormat.getInstance(locale55);
        boolean boolean57 = field53.equals((java.lang.Object) locale55);
        java.util.Set<java.lang.String> strSet58 = locale55.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strSet58);
        boolean boolean60 = field30.equals((java.lang.Object) strSet58);
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition((java.text.Format.Field) field30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer62 = fractionFormat21.format((java.lang.Object) builder25, stringBuffer29, fieldPosition61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot format given object as a fraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(fractionFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat9);
        org.junit.Assert.assertEquals(locale13.toString(), "anglais_KOR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str17, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fractionFormat21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(field30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.NumberFormat$Field(decimal separator)" + "'", str32, "java.text.NumberFormat$Field(decimal separator)");
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(field53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11475");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat1 = java.text.NumberFormat.getPercentInstance(locale0);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat2 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat1);
        java.text.NumberFormat numberFormat3 = properFractionFormat2.getWholeFormat();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getPercentInstance(locale4);
        java.text.NumberFormat numberFormat6 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean7 = numberFormat5.equals((java.lang.Object) numberFormat6);
        properFractionFormat2.setWholeFormat(numberFormat5);
        numberFormat5.setMaximumFractionDigits((-1));
        boolean boolean11 = numberFormat5.isGroupingUsed();
        numberFormat5.setMaximumIntegerDigits(10);
        numberFormat5.setMaximumIntegerDigits(0);
        int int16 = numberFormat5.getMaximumFractionDigits();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat1);
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(numberFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test11476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11476");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = locale5.getISO3Country();
        java.util.Locale.Builder builder9 = builder3.setLocale(locale5);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale10.toLanguageTag();
        java.lang.String str12 = locale10.getISO3Country();
        java.lang.String str13 = locale5.getDisplayCountry(locale10);
        java.lang.String str14 = locale10.getISO3Country();
        java.lang.String str15 = locale10.getVariant();
        java.lang.String str16 = locale10.getCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh-TW" + "'", str11, "zh-TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "TWN" + "'", str12, "TWN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "TWN" + "'", str14, "TWN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "TW" + "'", str16, "TW");
    }

    @Test
    public void test11477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11477");
        java.util.Locale locale2 = new java.util.Locale("eng", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale2.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "eng_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]" + "'", str4, "JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=0]");
    }

    @Test
    public void test11478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11478");
        java.util.Locale locale3 = new java.util.Locale("taiwan (ZH_TW,10,000%)", "java.text.AttributedCharacterIterator$Attribute(reading)", "Chinesisch");
        java.util.Locale locale5 = new java.util.Locale("3,500.0000000000000000000000000000000000000000000000000000%");
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        java.util.Locale locale7 = locale3.stripExtensions();
        java.lang.String str8 = locale7.getDisplayVariant();
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getCurrencyInstance(locale7);
        org.junit.Assert.assertEquals(locale3.toString(), "taiwan (zh_tw,10,000%)_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)_Chinesisch");
        org.junit.Assert.assertEquals(locale5.toString(), "3,500.0000000000000000000000000000000000000000000000000000%");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinesisch" + "'", str6, "Chinesisch");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "taiwan (zh_tw,10,000%)_JAVA.TEXT.ATTRIBUTEDCHARACTERITERATOR$ATTRIBUTE(READING)_Chinesisch");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinesisch" + "'", str8, "Chinesisch");
        org.junit.Assert.assertNotNull(numberFormat9);
    }

    @Test
    public void test11479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11479");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -120, (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction6 = new org.apache.commons.math.fraction.Fraction((double) (-1.0f), (double) 10, (int) (byte) -1);
        org.apache.commons.math.fraction.Fraction fraction9 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction12 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction13 = fraction9.multiply(fraction12);
        org.apache.commons.math.fraction.Fraction fraction14 = fraction9.negate();
        org.apache.commons.math.fraction.Fraction fraction15 = fraction6.add(fraction9);
        org.apache.commons.math.fraction.Fraction fraction16 = fraction2.multiply(fraction9);
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction9);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction14);
        org.junit.Assert.assertNotNull(fraction15);
        org.junit.Assert.assertNotNull(fraction16);
    }

    @Test
    public void test11480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11480");
        java.util.Locale locale3 = new java.util.Locale("zho (CHINESE (TAIWAN),Overflow trying to convert {0} to fraction ({1}/{2}))", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=100,endIndex=0]", "\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale4.getISO3Language();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getIntegerInstance(locale4);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getIntegerInstance(locale4);
        java.lang.String str9 = locale3.getDisplayScript(locale4);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale10.getDisplayCountry(locale11);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale10);
        java.lang.String str15 = locale10.getDisplayCountry();
        java.lang.String str16 = locale10.getDisplayCountry();
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.Character> charSet18 = locale10.getExtensionKeys();
        java.lang.String str19 = locale4.getDisplayCountry(locale10);
        java.lang.String str20 = locale10.getDisplayVariant();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fra" + "'", str6, "fra");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Japan" + "'", str13, "Japan");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japan" + "'", str15, "Japan");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Japan" + "'", str16, "Japan");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u30d5\u30e9\u30f3\u30b9" + "'", str19, "\u30d5\u30e9\u30f3\u30b9");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test11481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11481");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        fieldPosition5.setEndIndex((int) (short) 32);
        fieldPosition5.setBeginIndex((int) '4');
        org.junit.Assert.assertNotNull(field0);
    }

    @Test
    public void test11482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11482");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.apache.commons.math.fraction.FractionFormat fractionFormat2 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale0);
        org.apache.commons.math.fraction.FractionFormat fractionFormat3 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale0);
        java.text.NumberFormat numberFormat4 = fractionFormat3.getNumeratorFormat();
        java.text.NumberFormat numberFormat5 = fractionFormat3.getDenominatorFormat();
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getPercentInstance(locale6);
        java.text.NumberFormat numberFormat8 = java.text.NumberFormat.getCurrencyInstance();
        boolean boolean9 = numberFormat7.equals((java.lang.Object) numberFormat8);
        org.apache.commons.math.fraction.FractionFormat fractionFormat10 = new org.apache.commons.math.fraction.FractionFormat(numberFormat5, numberFormat8);
        java.lang.Object obj11 = numberFormat5.clone();
        boolean boolean12 = numberFormat5.isGroupingUsed();
        numberFormat5.setMaximumFractionDigits((int) (byte) 108);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(fractionFormat2);
        org.junit.Assert.assertNotNull(fractionFormat3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(numberFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test11483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11483");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale2.getDisplayScript(locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getScript();
        java.util.Locale locale12 = new java.util.Locale("Taiwan", "zh_TW", "10,000%");
        java.lang.String str13 = locale7.getDisplayScript(locale12);
        java.text.NumberFormat numberFormat14 = java.text.NumberFormat.getNumberInstance(locale12);
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet16 = locale12.getExtensionKeys();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale12.getDisplayName(locale17);
        java.util.Locale locale21 = locale17.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = locale22.getDisplayCountry(locale23);
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale21.getDisplayVariant(locale23);
        java.lang.String str29 = locale21.getExtension('a');
        java.lang.String str30 = locale4.getDisplayCountry(locale21);
        org.apache.commons.math.fraction.FractionFormat fractionFormat31 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale4);
        java.lang.String str32 = locale4.getISO3Language();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale33.getISO3Language();
        java.util.Set<java.lang.Character> charSet35 = locale33.getExtensionKeys();
        java.util.Locale locale36 = java.util.Locale.US;
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str38 = locale33.getDisplayVariant(locale36);
        java.lang.String str39 = locale4.getDisplayVariant(locale36);
        java.lang.String str40 = locale4.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale12.toString(), "taiwan_ZH_TW_10,000%");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(numberFormat14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str19, "\u82f1\u6587\u52a0\u62ff\u5927)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "taiwan (ZH_TW,10,000%)" + "'", str20, "taiwan (ZH_TW,10,000%)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Japan" + "'", str25, "Japan");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Canada" + "'", str30, "Canada");
        org.junit.Assert.assertNotNull(fractionFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fra" + "'", str32, "fra");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "kor" + "'", str34, "kor");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)" + "'", str40, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)");
    }

    @Test
    public void test11484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11484");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.util.Locale locale5 = locale0.stripExtensions();
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet6);
    }

    @Test
    public void test11485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11485");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder10 = builder8.setVariant("Taiwan");
        java.util.Locale.Builder builder12 = builder10.setLanguage("japanese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setScript("Japanese (Japan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Japanese (Japan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test11486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getDisplayCountry();
        java.util.Locale.Builder builder11 = builder6.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setScript("taiwan_ZH_TW_10,000%");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: taiwan_ZH_TW_10,000% [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test11487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11487");
        java.util.Locale locale1 = new java.util.Locale("java.text.ParsePosition[index=8,errorIndex=1]");
        java.lang.String str2 = locale1.toLanguageTag();
        org.junit.Assert.assertEquals(locale1.toString(), "java.text.parseposition[index=8,errorindex=1]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
    }

    @Test
    public void test11488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11488");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zho_CHINESE (TAIWAN)_Overflow trying to convert {0} to fraction ({1}/{2})");
        java.lang.String str2 = locale1.getISO3Country();
        java.text.NumberFormat numberFormat3 = java.text.NumberFormat.getNumberInstance(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale1.getUnicodeLocaleType("-14,400");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: -14,400");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(numberFormat3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test11489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11489");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getISO3Country();
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getNumberInstance(locale0);
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat9 = java.text.NumberFormat.getPercentInstance(locale8);
        int int10 = numberFormat9.getMaximumIntegerDigits();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat12 = java.text.NumberFormat.getPercentInstance(locale11);
        boolean boolean13 = numberFormat12.isGroupingUsed();
        java.util.Currency currency14 = numberFormat12.getCurrency();
        numberFormat9.setCurrency(currency14);
        java.util.Currency currency16 = numberFormat9.getCurrency();
        int int17 = numberFormat9.getMaximumFractionDigits();
        java.lang.Object obj18 = numberFormat9.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat20 = java.text.NumberFormat.getPercentInstance(locale19);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat21 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat20);
        numberFormat20.setMaximumFractionDigits(100);
        numberFormat20.setMaximumFractionDigits((int) (byte) 100);
        java.lang.String str27 = numberFormat20.format((double) (byte) 1);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat28 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat4, numberFormat9, numberFormat20);
        java.text.NumberFormat numberFormat29 = properFractionFormat28.getWholeFormat();
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat34 = java.text.NumberFormat.getPercentInstance(locale33);
        int int35 = numberFormat34.getMaximumIntegerDigits();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat37 = java.text.NumberFormat.getPercentInstance(locale36);
        boolean boolean38 = numberFormat37.isGroupingUsed();
        java.util.Currency currency39 = numberFormat37.getCurrency();
        numberFormat34.setCurrency(currency39);
        java.util.Currency currency41 = numberFormat34.getCurrency();
        java.math.RoundingMode roundingMode42 = numberFormat34.getRoundingMode();
        properFractionFormat28.setWholeFormat(numberFormat34);
        java.text.NumberFormat numberFormat44 = properFractionFormat28.getWholeFormat();
        java.lang.String str46 = numberFormat44.format((long) 600);
        numberFormat44.setParseIntegerOnly(true);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "kor" + "'", str1, "kor");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(currency14);
        org.junit.Assert.assertEquals(currency14.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency16);
        org.junit.Assert.assertEquals(currency16.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat20);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "100%" + "'", str27, "100%");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(currency39);
        org.junit.Assert.assertEquals(currency39.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency41);
        org.junit.Assert.assertEquals(currency41.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode42 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode42.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertNotNull(numberFormat44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "60,000%" + "'", str46, "60,000%");
    }

    @Test
    public void test11490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11490");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((-14400.0d), (double) 9, 88);
    }

    @Test
    public void test11491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11491");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.fraction.FractionConversionException: Unable to convert 1,728,000 to fraction after -120 iterations");
        java.lang.String str2 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11492");
        java.util.Locale locale3 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)", "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=35]", "100%");
        java.text.NumberFormat numberFormat4 = java.text.NumberFormat.getCurrencyInstance(locale3);
        java.text.NumberFormat numberFormat5 = java.text.NumberFormat.getNumberInstance(locale3);
        java.lang.Object obj6 = numberFormat5.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "\u4e2d\u6587\u4e2d\u56fd)_JAVA.TEXT.FIELDPOSITION[FIELD=-1,ATTRIBUTE=JAVA.TEXT.NUMBERFORMAT$FIELD(CURRENCY),BEGININDEX=0,ENDINDEX=35]_100%");
        org.junit.Assert.assertNotNull(numberFormat4);
        org.junit.Assert.assertNotNull(numberFormat5);
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test11493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11493");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.EXPONENT;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) '#');
        int int4 = fieldPosition3.getField();
        fieldPosition3.setEndIndex((int) (byte) -16);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    }

    @Test
    public void test11494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11494");
        java.text.NumberFormat.Field field0 = java.text.NumberFormat.Field.GROUPING_SEPARATOR;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((java.text.Format.Field) field0);
        java.text.FieldPosition fieldPosition3 = new java.text.FieldPosition((java.text.Format.Field) field0, 1);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition((java.text.Format.Field) field0, (int) (short) 100);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayScript();
        java.lang.String str9 = locale6.getDisplayCountry(locale7);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleAttributes();
        org.apache.commons.math.fraction.FractionFormat fractionFormat11 = org.apache.commons.math.fraction.FractionFormat.getProperInstance(locale7);
        boolean boolean12 = field0.equals((java.lang.Object) locale7);
        java.text.FieldPosition fieldPosition13 = new java.text.FieldPosition((java.text.Format.Field) field0);
        fieldPosition13.setBeginIndex((int) 'a');
        fieldPosition13.setBeginIndex(1);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japan" + "'", str9, "Japan");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(fractionFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test11495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11495");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction(1, 121);
        byte byte3 = fraction2.byteValue();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0);
    }

    @Test
    public void test11496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11496");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("java.text.ParsePosition[index=52,errorIndex=52]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.text.parseposition[index=52,errorindex=52]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11497");
        java.text.ParseException parseException2 = new java.text.ParseException("\uc911\uad6d\uc5b4", (int) (byte) 10);
        int int3 = parseException2.getErrorOffset();
        int int4 = parseException2.getErrorOffset();
        java.lang.String str5 = parseException2.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str5, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test11498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11498");
        org.apache.commons.math.fraction.Fraction fraction2 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction3 = fraction2.negate();
        java.lang.String str4 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction2);
        org.apache.commons.math.fraction.Fraction fraction7 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        org.apache.commons.math.fraction.Fraction fraction8 = fraction7.reciprocal();
        org.apache.commons.math.fraction.Fraction fraction11 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction12 = fraction11.negate();
        org.apache.commons.math.fraction.Fraction fraction13 = fraction12.abs();
        org.apache.commons.math.fraction.Fraction fraction16 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction17 = fraction16.negate();
        org.apache.commons.math.fraction.Fraction fraction18 = fraction17.abs();
        long long19 = fraction17.longValue();
        org.apache.commons.math.fraction.Fraction fraction20 = fraction13.multiply(fraction17);
        org.apache.commons.math.fraction.Fraction fraction23 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction24 = fraction23.negate();
        org.apache.commons.math.fraction.Fraction fraction25 = fraction24.abs();
        org.apache.commons.math.fraction.Fraction fraction28 = org.apache.commons.math.fraction.Fraction.getReducedFraction((int) (byte) -1, (int) 'x');
        org.apache.commons.math.fraction.Fraction fraction29 = fraction28.negate();
        org.apache.commons.math.fraction.Fraction fraction30 = fraction29.abs();
        long long31 = fraction29.longValue();
        org.apache.commons.math.fraction.Fraction fraction32 = fraction25.multiply(fraction29);
        org.apache.commons.math.fraction.Fraction fraction33 = fraction17.subtract(fraction32);
        org.apache.commons.math.fraction.Fraction fraction36 = new org.apache.commons.math.fraction.Fraction((int) (byte) -1, (int) (short) 100);
        java.lang.String str37 = org.apache.commons.math.fraction.FractionFormat.formatFraction(fraction36);
        org.apache.commons.math.fraction.Fraction fraction38 = fraction17.subtract(fraction36);
        long long39 = fraction36.longValue();
        org.apache.commons.math.fraction.Fraction fraction40 = fraction8.divide(fraction36);
        org.apache.commons.math.fraction.Fraction fraction41 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction42 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction43 = fraction8.negate();
        org.apache.commons.math.fraction.Fraction fraction44 = fraction2.add(fraction43);
        org.apache.commons.math.fraction.Fraction fraction46 = new org.apache.commons.math.fraction.Fraction((double) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction47 = fraction43.add(fraction46);
        java.text.ParseException parseException50 = new java.text.ParseException("hi!", (int) '4');
        int int51 = parseException50.getErrorOffset();
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException54 = new org.apache.commons.math.fraction.FractionConversionException((double) 1L, (int) (short) 10);
        java.lang.Throwable[] throwableArray55 = fractionConversionException54.getSuppressed();
        parseException50.addSuppressed((java.lang.Throwable) fractionConversionException54);
        java.text.ParseException parseException59 = new java.text.ParseException("", (int) 'u');
        fractionConversionException54.addSuppressed((java.lang.Throwable) parseException59);
        org.apache.commons.math.fraction.FractionConversionException fractionConversionException64 = new org.apache.commons.math.fraction.FractionConversionException((double) 'u', (long) (-1), 1L);
        parseException59.addSuppressed((java.lang.Throwable) fractionConversionException64);
        boolean boolean66 = fraction46.equals((java.lang.Object) parseException59);
        int int67 = parseException59.getErrorOffset();
        java.text.ParseException parseException70 = new java.text.ParseException("\u4e2d\u6587\u4e2d\u570b)", (int) (byte) 16);
        java.lang.Throwable[] throwableArray71 = parseException70.getSuppressed();
        parseException59.addSuppressed((java.lang.Throwable) parseException70);
        java.lang.String str73 = parseException59.toString();
        org.junit.Assert.assertNotNull(fraction2);
        org.junit.Assert.assertNotNull(fraction3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1 / 120" + "'", str4, "-1 / 120");
        org.junit.Assert.assertNotNull(fraction8);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertNotNull(fraction13);
        org.junit.Assert.assertNotNull(fraction16);
        org.junit.Assert.assertNotNull(fraction17);
        org.junit.Assert.assertNotNull(fraction18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(fraction20);
        org.junit.Assert.assertNotNull(fraction23);
        org.junit.Assert.assertNotNull(fraction24);
        org.junit.Assert.assertNotNull(fraction25);
        org.junit.Assert.assertNotNull(fraction28);
        org.junit.Assert.assertNotNull(fraction29);
        org.junit.Assert.assertNotNull(fraction30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(fraction32);
        org.junit.Assert.assertNotNull(fraction33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1 / 100" + "'", str37, "-1 / 100");
        org.junit.Assert.assertNotNull(fraction38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(fraction40);
        org.junit.Assert.assertNotNull(fraction41);
        org.junit.Assert.assertNotNull(fraction42);
        org.junit.Assert.assertNotNull(fraction43);
        org.junit.Assert.assertNotNull(fraction44);
        org.junit.Assert.assertNotNull(fraction47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 117 + "'", int67 == 117);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.text.ParseException: " + "'", str73, "java.text.ParseException: ");
    }

    @Test
    public void test11499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11499");
        org.apache.commons.math.fraction.Fraction fraction3 = new org.apache.commons.math.fraction.Fraction((double) 52, 0.01d, (int) (short) -16165);
        org.apache.commons.math.fraction.Fraction fraction4 = fraction3.abs();
        org.apache.commons.math.fraction.Fraction fraction7 = org.apache.commons.math.fraction.Fraction.getReducedFraction(0, (int) (byte) 100);
        org.apache.commons.math.fraction.Fraction fraction10 = org.apache.commons.math.fraction.Fraction.getReducedFraction(35, 2);
        org.apache.commons.math.fraction.Fraction fraction11 = fraction7.multiply(fraction10);
        org.apache.commons.math.fraction.Fraction fraction12 = fraction4.add(fraction11);
        byte byte13 = fraction12.byteValue();
        org.junit.Assert.assertNotNull(fraction4);
        org.junit.Assert.assertNotNull(fraction7);
        org.junit.Assert.assertNotNull(fraction10);
        org.junit.Assert.assertNotNull(fraction11);
        org.junit.Assert.assertNotNull(fraction12);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 52 + "'", byte13 == (byte) 52);
    }

    @Test
    public void test11500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest22.test11500");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getISO3Language();
        java.lang.String str4 = locale0.getDisplayScript(locale2);
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.text.NumberFormat numberFormat7 = java.text.NumberFormat.getCurrencyInstance(locale0);
        java.lang.Object obj8 = numberFormat7.clone();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat11 = java.text.NumberFormat.getInstance(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat13 = java.text.NumberFormat.getPercentInstance(locale12);
        org.apache.commons.math.fraction.FractionFormat fractionFormat14 = new org.apache.commons.math.fraction.FractionFormat(numberFormat11, numberFormat13);
        numberFormat13.setMinimumFractionDigits((int) '4');
        java.text.NumberFormat.Field field18 = java.text.NumberFormat.Field.CURRENCY;
        java.text.FieldPosition fieldPosition19 = new java.text.FieldPosition((java.text.Format.Field) field18);
        java.lang.String str20 = fieldPosition19.toString();
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayScript();
        java.lang.String str24 = locale21.getDisplayName(locale22);
        boolean boolean25 = fieldPosition19.equals((java.lang.Object) locale22);
        fieldPosition19.setEndIndex((int) '#');
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.text.NumberFormat numberFormat29 = java.text.NumberFormat.getCurrencyInstance(locale28);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat30 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat29);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition((int) (short) 1);
        org.apache.commons.math.fraction.Fraction fraction34 = properFractionFormat30.parse("Overflow trying to convert {0} to fraction ({1}/{2})", parsePosition33);
        boolean boolean35 = fieldPosition19.equals((java.lang.Object) parsePosition33);
        java.lang.Number number36 = numberFormat13.parse("java.text.AttributedCharacterIterator$Attribute(reading)", parsePosition33);
        java.lang.Object obj37 = numberFormat7.parseObject("\ud55c\uad6d\uc5b4", parsePosition33);
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.text.NumberFormat numberFormat42 = java.text.NumberFormat.getPercentInstance(locale41);
        int int43 = numberFormat42.getMaximumIntegerDigits();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.text.NumberFormat numberFormat45 = java.text.NumberFormat.getPercentInstance(locale44);
        boolean boolean46 = numberFormat45.isGroupingUsed();
        java.util.Currency currency47 = numberFormat45.getCurrency();
        numberFormat42.setCurrency(currency47);
        java.util.Currency currency49 = numberFormat42.getCurrency();
        java.math.RoundingMode roundingMode50 = numberFormat42.getRoundingMode();
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition((int) 'a');
        java.lang.String str54 = parsePosition53.toString();
        java.lang.String str55 = parsePosition53.toString();
        java.lang.Object obj56 = numberFormat42.parseObject("zho", parsePosition53);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = locale57.getDisplayLanguage();
        java.lang.String str59 = locale57.toLanguageTag();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale60.getISO3Language();
        java.lang.String str63 = locale57.getDisplayScript(locale60);
        java.text.NumberFormat numberFormat64 = java.text.NumberFormat.getPercentInstance(locale60);
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat65 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat64);
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.util.Locale.Category category67 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        org.apache.commons.math.fraction.FractionFormat fractionFormat70 = org.apache.commons.math.fraction.FractionFormat.getImproperInstance(locale69);
        java.util.Locale.setDefault(category67, locale69);
        java.util.Locale locale72 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category67, locale72);
        java.lang.String str74 = locale66.getDisplayLanguage(locale72);
        java.text.NumberFormat numberFormat75 = java.text.NumberFormat.getInstance(locale66);
        int int76 = numberFormat75.getMinimumIntegerDigits();
        properFractionFormat65.setWholeFormat(numberFormat75);
        java.text.NumberFormat numberFormat78 = properFractionFormat65.getDenominatorFormat();
        org.apache.commons.math.fraction.ProperFractionFormat properFractionFormat79 = new org.apache.commons.math.fraction.ProperFractionFormat(numberFormat7, numberFormat42, numberFormat78);
        java.text.NumberFormat numberFormat80 = properFractionFormat79.getWholeFormat();
        java.lang.Object obj81 = numberFormat80.clone();
        java.lang.Class<?> wildcardClass82 = obj81.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "kor" + "'", str3, "kor");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(numberFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat13);
        org.junit.Assert.assertNotNull(field18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]" + "'", str20, "java.text.FieldPosition[field=-1,attribute=java.text.NumberFormat$Field(currency),beginIndex=0,endIndex=0]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (Taiwan)" + "'", str24, "Chinese (Taiwan)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(numberFormat29);
        org.junit.Assert.assertNull(fraction34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(number36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertNotNull(numberFormat42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2147483647 + "'", int43 == 2147483647);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(numberFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(currency47);
        org.junit.Assert.assertEquals(currency47.toString(), "XXX");
        org.junit.Assert.assertNotNull(currency49);
        org.junit.Assert.assertEquals(currency49.toString(), "XXX");
        org.junit.Assert.assertTrue("'" + roundingMode50 + "' != '" + java.math.RoundingMode.HALF_EVEN + "'", roundingMode50.equals(java.math.RoundingMode.HALF_EVEN));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str54, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=-1]" + "'", str55, "java.text.ParsePosition[index=97,errorIndex=-1]");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str58, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-TW" + "'", str59, "zh-TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zho" + "'", str62, "zho");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(numberFormat64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.FORMAT + "'", category67.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "ko");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertNotNull(fractionFormat70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "anglais" + "'", str74, "anglais");
        org.junit.Assert.assertNotNull(numberFormat75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(numberFormat78);
        org.junit.Assert.assertNotNull(numberFormat80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property34.getFieldType();
        org.joda.time.LocalDateTime localDateTime36 = property34.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = property34.setCopy("0097-02-20T19:45:13.933");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0097-02-20T19:45:13.933\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:01.999" + "'", str24, "+00:00:01.999");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology2);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str6 = iSOChronology5.toString();
        org.joda.time.DurationField durationField7 = iSOChronology5.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        int[] intArray14 = iSOChronology5.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology5.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDateTime4.toDateTime(dateTimeZone15);
        int[] intArray19 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime4, (long) 8);
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str6, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:01.999" + "'", str16, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1, 2007]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        boolean boolean8 = timeZone3.observesDaylightTime();
        int int10 = timeZone3.getOffset(1707644660798L);
        timeZone3.setID("2022-02-11T09:44:59.091");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.time.ZoneId zoneId15 = timeZone14.toZoneId();
        java.time.ZoneId zoneId16 = timeZone14.toZoneId();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone(zoneId16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone(zoneId16);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone(zoneId16);
        boolean boolean20 = timeZone3.hasSameRules(timeZone19);
        timeZone19.setRawOffset(789);
        int int23 = timeZone19.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList22);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsShortText(locale32);
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str39 = nameProvider34.getName(locale35, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale41 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.getScript();
        java.lang.String str44 = locale35.getDisplayVariant(locale41);
        java.lang.String str45 = locale35.getDisplayScript();
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale32, locale35 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = java.util.Locale.getDefault(category50);
        java.util.Locale locale52 = java.util.Locale.US;
        java.util.Locale.setDefault(category50, locale52);
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleAttributes();
        boolean boolean55 = strSet54.isEmpty();
        java.lang.String[] strArray66 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        java.util.Iterator<java.lang.String> strItor69 = strSet67.iterator();
        boolean boolean70 = strSet54.retainAll((java.util.Collection<java.lang.String>) strSet67);
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.lang.String str73 = locale71.getDisplayName(locale72);
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleKeys();
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        java.util.Locale.setDefault(locale75);
        java.util.Set<java.lang.String> strSet79 = locale75.getUnicodeLocaleAttributes();
        boolean boolean80 = strSet74.removeAll((java.util.Collection<java.lang.String>) strSet79);
        java.util.Iterator<java.lang.String> strItor81 = strSet74.iterator();
        java.util.stream.Stream<java.lang.String> strStream82 = strSet74.parallelStream();
        boolean boolean83 = strSet67.containsAll((java.util.Collection<java.lang.String>) strSet74);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet67, filteringMode84);
        boolean boolean86 = strSet67.isEmpty();
        boolean boolean87 = strSet67.isEmpty();
        strSet67.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals(locale41.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.FORMAT + "'", category50.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "English (Canada)" + "'", str73, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English (Canada)" + "'", str77, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strItor81);
        org.junit.Assert.assertNotNull(strStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode84.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        long long27 = dateTimeZone23.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int[] intArray30 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime28, (long) 52);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField32 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField33 = iSOChronology0.millis();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = property39.getAsShortText(locale40);
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = property39.getAsText(locale43);
        int int46 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime47 = property39.roundFloorCopy();
        long long49 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime47, 46L);
        int int50 = localDateTime47.getYear();
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1999L) + "'", long27 == (-1999L));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 2051]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English (Canada)" + "'", str44, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9" + "'", str45, "9");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644569998001L + "'", long49 == 1644569998001L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.lang.String str7 = timeZone1.getID();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = timeZone11.getRawOffset();
        boolean boolean16 = timeZone11.observesDaylightTime();
        int int18 = timeZone11.getOffset(1707644660798L);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.time.ZoneId zoneId26 = timeZone22.toZoneId();
        int int27 = timeZone22.getRawOffset();
        timeZone22.setID("2022-02-11T09:44:05.224");
        timeZone22.setRawOffset((int) '4');
        int int32 = timeZone22.getRawOffset();
        boolean boolean33 = timeZone22.observesDaylightTime();
        boolean boolean34 = timeZone11.hasSameRules(timeZone22);
        timeZone22.setRawOffset(0);
        int int38 = timeZone22.getOffset(0L);
        boolean boolean39 = timeZone1.hasSameRules(timeZone22);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField41 = iSOChronology40.halfdays();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        java.util.TimeZone.setDefault(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.Chronology chronology49 = iSOChronology40.withZone(dateTimeZone48);
        java.util.TimeZone timeZone50 = dateTimeZone48.toTimeZone();
        boolean boolean51 = timeZone50.observesDaylightTime();
        java.time.ZoneId zoneId52 = timeZone50.toZoneId();
        boolean boolean53 = timeZone50.observesDaylightTime();
        timeZone50.setID("2022-02-11T10:00:00.000");
        boolean boolean56 = timeZone1.hasSameRules(timeZone50);
        int int58 = timeZone1.getOffset(1644572798745L);
        boolean boolean59 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneId52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        boolean boolean13 = property10.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.era();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra((int) 'a');
        int[] intArray25 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime21.getFields();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusHours(1);
        int int29 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.withTime(1, 23, 51, 23);
        int int37 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DurationField durationField38 = property10.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str45 = nameProvider39.getShortName(locale41, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str46 = property10.getAsShortText(locale41);
        java.lang.String str47 = locale4.getDisplayScript(locale41);
        java.lang.String str48 = locale41.getDisplayLanguage();
        java.util.Locale.Builder builder49 = builder3.setLocale(locale41);
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str55 = nameProvider50.getName(locale51, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String str61 = nameProvider50.getShortName(locale56, "und", "2022-02-11T09:44:00.457");
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField63 = iSOChronology62.halfdays();
        java.lang.String str64 = iSOChronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology62.era();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology62.centuryOfEra();
        org.joda.time.DurationField durationField67 = iSOChronology62.minutes();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.year();
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str72 = locale71.getScript();
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str74 = locale71.getDisplayCountry(locale73);
        java.lang.String str75 = property69.getAsText(locale73);
        java.lang.String str78 = nameProvider50.getName(locale73, "yearOfCentury", "ETC/UTC");
        java.util.Locale.Builder builder79 = builder49.setLocale(locale73);
        java.util.Locale locale80 = builder79.build();
        java.util.Locale.Builder builder81 = builder79.clear();
        java.util.Locale.Builder builder83 = builder81.removeUnicodeLocaleAttribute("882");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder85 = builder83.addUnicodeLocaleAttribute("Japanese (Japan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Japanese (Japan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(durationField38);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English (Canada)" + "'", str58, "English (Canada)");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(durationField63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str64, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022" + "'", str75, "2022");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Locale.setDefault(locale4);
        java.util.Set<java.lang.String> strSet8 = locale4.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Iterator<java.lang.String> strItor10 = strSet3.iterator();
        java.util.Locale locale12 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale.setDefault(locale14);
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale12.getDisplayCountry(locale14);
        boolean boolean20 = locale12.hasExtensions();
        java.util.Set<java.lang.String> strSet21 = locale12.getUnicodeLocaleKeys();
        boolean boolean22 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet21);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        org.joda.time.DurationField durationField34 = iSOChronology23.years();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology23.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str37 = iSOChronology36.toString();
        org.joda.time.DurationField durationField38 = iSOChronology36.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        int[] intArray45 = iSOChronology36.get((org.joda.time.ReadablePartial) localDateTime41, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = iSOChronology36.getZone();
        long long50 = dateTimeZone46.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone46);
        int[] intArray53 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime51, (long) 52);
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology23.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        int int60 = localDateTime57.getWeekyear();
        int[] intArray62 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime57, (long) 37);
        boolean boolean63 = strSet21.contains((java.lang.Object) iSOChronology23);
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology23.millisOfDay();
        org.joda.time.Chronology chronology65 = iSOChronology23.withUTC();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertEquals(locale12.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iSOChronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str24, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str37, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1999L) + "'", long50 == (-1999L));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 2051]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 1, 2036]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology65);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField7 = iSOChronology0.halfdays();
        java.lang.String str8 = iSOChronology0.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str8, "ISOChronology[+00:00:01.999]");
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readablePeriod10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays(8);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(762);
        int int17 = property14.get();
        org.joda.time.tz.NameProvider nameProvider18 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str23 = nameProvider18.getName(locale19, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str29 = nameProvider18.getShortName(locale24, "und", "2022-02-11T09:44:00.457");
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField31 = iSOChronology30.halfdays();
        java.lang.String str32 = iSOChronology30.toString();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology30.era();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology30.centuryOfEra();
        org.joda.time.DurationField durationField35 = iSOChronology30.minutes();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.year();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str40 = locale39.getScript();
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale39.getDisplayCountry(locale41);
        java.lang.String str43 = property37.getAsText(locale41);
        java.lang.String str46 = nameProvider18.getName(locale41, "yearOfCentury", "ETC/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider18);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider18);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str50 = iSOChronology49.toString();
        org.joda.time.DurationField durationField51 = iSOChronology49.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        int[] intArray58 = iSOChronology49.get((org.joda.time.ReadablePartial) localDateTime54, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = iSOChronology49.getZone();
        long long63 = dateTimeZone59.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale64 = java.util.Locale.US;
        boolean boolean65 = dateTimeZone59.equals((java.lang.Object) locale64);
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("en");
        java.util.Locale locale69 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology70 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology70.dayOfYear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.hourOfDay();
        java.util.Locale locale76 = java.util.Locale.ENGLISH;
        java.lang.String str77 = property75.getAsShortText(locale76);
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.lang.String str80 = locale78.getDisplayName(locale79);
        java.lang.String str81 = property75.getAsText(locale79);
        java.util.Locale locale82 = java.util.Locale.ITALIAN;
        int int83 = property75.getMaximumShortTextLength(locale82);
        java.lang.String str84 = locale69.getDisplayName(locale82);
        java.lang.String str85 = locale82.getDisplayVariant();
        java.lang.String str86 = locale68.getDisplayScript(locale82);
        java.lang.String str87 = dateTimeZone59.getName(6830578589573L, locale82);
        java.lang.String str90 = nameProvider18.getName(locale82, "2022-02-12T01:30:05.482", "millisOfSecond");
        boolean boolean91 = property14.equals((java.lang.Object) "millisOfSecond");
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(nameProvider18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "English (Canada)" + "'", str26, "English (Canada)");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str32, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(iSOChronology49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str50, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1999L) + "'", long63 == (-1999L));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "9" + "'", str77, "9");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "English (Canada)" + "'", str80, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "9" + "'", str81, "9");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "cinese (Cina)" + "'", str84, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00:01.999" + "'", str87, "+00:00:01.999");
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        long long9 = iSOChronology0.add(1644572646636L, 23L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str12 = iSOChronology11.toString();
        org.joda.time.DurationField durationField13 = iSOChronology11.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        int[] intArray20 = iSOChronology11.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = iSOChronology11.getZone();
        org.joda.time.DurationField durationField22 = iSOChronology11.years();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology11.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str25 = iSOChronology24.toString();
        org.joda.time.DurationField durationField26 = iSOChronology24.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        int[] intArray33 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology24.getZone();
        long long38 = dateTimeZone34.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        int[] intArray41 = iSOChronology11.get((org.joda.time.ReadablePartial) localDateTime39, (long) 52);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minus(readableDuration42);
        int[] intArray45 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime43, 1644572681360L);
        org.joda.time.Chronology chronology46 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572648936L + "'", long9 == 1644572648936L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(iSOChronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str12, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str25, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1999L) + "'", long38 == (-1999L));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 2051]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2022, 2, 11, 35083359]");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plus(readablePeriod6);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDateTime7.isSupported(durationFieldType8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = localDateTime7.getFieldType(35168091);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35168091");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField21 = iSOChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.era();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfEra((int) 'a');
        int[] intArray31 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime27.getFields();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.minusHours(1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.minusMinutes((-1));
        int int37 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField40 = iSOChronology39.halfdays();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.TimeZone.setDefault(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.Chronology chronology48 = iSOChronology39.withZone(dateTimeZone47);
        long long51 = dateTimeZone47.adjustOffset((-1L), false);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) 35042587, dateTimeZone47);
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str54 = iSOChronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology53.weekOfWeekyear();
        long long59 = iSOChronology53.add((long) (short) 10, (long) 35054090, 3);
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology53.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField62 = iSOChronology61.halfdays();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone66 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean67 = timeZone64.hasSameRules(timeZone66);
        java.util.TimeZone.setDefault(timeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.Chronology chronology70 = iSOChronology61.withZone(dateTimeZone69);
        long long73 = dateTimeZone69.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withMillisOfSecond(5);
        org.joda.time.chrono.ISOChronology iSOChronology77 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology77.dayOfYear();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology83 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str84 = iSOChronology83.toString();
        org.joda.time.DurationField durationField85 = iSOChronology83.weeks();
        boolean boolean86 = property82.equals((java.lang.Object) durationField85);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property82.getFieldType();
        boolean boolean88 = localDateTime74.isSupported(dateTimeFieldType87);
        boolean boolean89 = iSOChronology53.equals((java.lang.Object) dateTimeFieldType87);
        org.joda.time.LocalDateTime.Property property90 = localDateTime52.property(dateTimeFieldType87);
        int int91 = localDateTime19.indexOf(dateTimeFieldType87);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime19.minusMillis(42);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime93.withWeekOfWeekyear((int) (byte) 1);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(iSOChronology53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str54, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 105162280L + "'", long59 == 105162280L);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 2022L + "'", long73 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(iSOChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(iSOChronology83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str84, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("0097-02-18T09:47:22.947", (double) 1644572856898L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644572856898E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.DateTimeField dateTimeField12 = property5.getField();
        org.joda.time.LocalDateTime localDateTime13 = property5.withMinimumValue();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        java.lang.String str15 = property14.getAsString();
        int int16 = property14.getLeapAmount();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        int int6 = localDateTime4.getYear();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.era();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfEra((int) 'a');
        int[] intArray24 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime20, (long) 100);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.withDurationAdded(readableDuration25, (int) '4');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        int int31 = localDateTime20.indexOf(dateTimeFieldType30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime20.plus(readableDuration32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime20.plusSeconds((int) 'a');
        boolean boolean36 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusWeeks(56);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology39.dayOfYear();
        java.lang.String str41 = iSOChronology39.toString();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology39.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField44 = iSOChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.era();
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYearOfEra((int) 'a');
        int[] intArray54 = iSOChronology43.get((org.joda.time.ReadablePartial) localDateTime50, (long) 100);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.withDurationAdded(readableDuration55, (int) '4');
        int[] intArray58 = localDateTime57.getValues();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusYears(2);
        long long62 = iSOChronology39.set((org.joda.time.ReadablePartial) localDateTime60, 1L);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology65 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField66 = iSOChronology65.halfdays();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology65.era();
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withYearOfEra((int) 'a');
        int[] intArray76 = iSOChronology65.get((org.joda.time.ReadablePartial) localDateTime72, (long) 100);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime72.withDurationAdded(readableDuration77, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = localDateTime79.getFieldType((int) (byte) 0);
        boolean boolean82 = localDateTime64.isSupported(dateTimeFieldType81);
        int int83 = localDateTime38.indexOf(dateTimeFieldType81);
        int int84 = localDateTime4.get(dateTimeFieldType81);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime4.withDurationAdded(readableDuration85, 453);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusWeeks(72);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str41, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 11, 35342308]");
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1707644940309L + "'", long62 == 1707644940309L);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(iSOChronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(iSOChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(intArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray5 = strSet4.toArray();
        java.util.Iterator<java.lang.String> strItor6 = strSet4.iterator();
        boolean boolean7 = strSet4.isEmpty();
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean9 = strSet8.isEmpty();
        boolean boolean11 = strSet8.add("+00:00:00.008");
        boolean boolean12 = strSet4.retainAll((java.util.Collection<java.lang.String>) strSet8);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = strSet4.add("ISOChronology[+117:00]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale1.getDisplayCountry(locale3);
        java.lang.String str9 = locale1.getScript();
        java.util.Set<java.lang.String> strSet10 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList17);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.util.Locale.setDefault(locale20);
        java.util.Set<java.lang.String> strSet24 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList31);
        java.util.stream.Stream<java.lang.String> strStream34 = strList33.parallelStream();
        boolean boolean35 = strSet24.containsAll((java.util.Collection<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet40);
        java.util.Collection<java.lang.String> strCollection42 = null;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, strCollection42);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Locale.setDefault(locale44);
        java.util.Set<java.lang.String> strSet48 = locale44.getUnicodeLocaleAttributes();
        int int49 = strSet48.size();
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet48.spliterator();
        java.lang.String str51 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet48);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.String str55 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet54);
        boolean boolean56 = strSet10.containsAll((java.util.Collection<java.lang.String>) strSet54);
        boolean boolean58 = strSet54.equals((java.lang.Object) 1707644930243L);
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English (Canada)" + "'", str5, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English (Canada)" + "'", str39, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "English (Canada)" + "'", str46, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("monthOfYear");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("hi!");
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        java.lang.String str6 = iSOChronology4.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology4.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = iSOChronology4.withZone(dateTimeZone9);
        boolean boolean12 = dateTimeZone9.isStandardOffset((long) (short) 1);
        java.util.Locale locale15 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = dateTimeZone9.getShortName(97L, locale15);
        java.lang.String str18 = locale3.getDisplayScript(locale15);
        java.lang.String str19 = locale1.getDisplayScript(locale15);
        java.lang.String str20 = locale15.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str6, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals(locale15.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:01.999" + "'", str17, "+00:00:01.999");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.weekyearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        long long14 = dateTimeZone10.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        boolean boolean17 = dateTimeZone10.isFixed();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1999L) + "'", long14 == (-1999L));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsShortText(locale21);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = property20.getAsText(locale24);
        org.joda.time.LocalDateTime localDateTime27 = property20.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = property20.roundHalfEvenCopy();
        boolean boolean29 = localDateTime13.equals((java.lang.Object) localDateTime28);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str31 = iSOChronology30.toString();
        org.joda.time.DurationField durationField32 = iSOChronology30.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        int[] intArray39 = iSOChronology30.get((org.joda.time.ReadablePartial) localDateTime35, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = iSOChronology30.getZone();
        boolean boolean42 = dateTimeZone40.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime43 = localDateTime28.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology44 = iSOChronology0.withZone(dateTimeZone40);
        boolean boolean46 = dateTimeZone40.isStandardOffset((long) 208800000);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9" + "'", str22, "9");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (Canada)" + "'", str25, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9" + "'", str26, "9");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(iSOChronology30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str31, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Chinese", (double) (short) 1);
        double double3 = languageRange2.getWeight();
        double double4 = languageRange2.getWeight();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        java.lang.String str8 = languageRange2.getRange();
        java.lang.String str9 = languageRange2.getRange();
        double double10 = languageRange2.getWeight();
        double double11 = languageRange2.getWeight();
        java.lang.String str12 = languageRange2.getRange();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.era();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfEra((int) 'a');
        int[] intArray24 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime20, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = localDateTime20.getFields();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minusHours(1);
        int int28 = localDateTime20.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime20.withYearOfEra(6);
        int int31 = localDateTime30.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.year();
        boolean boolean33 = languageRange2.equals((java.lang.Object) localDateTime30);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chinese" + "'", str7, "chinese");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinese" + "'", str8, "chinese");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinese" + "'", str9, "chinese");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "chinese" + "'", str12, "chinese");
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("9");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        int int4 = timeZone1.getRawOffset();
        int int5 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField4 = iSOChronology0.weekyears();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = iSOChronology0.add(readablePeriod6, 12L, 67564651);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 12L + "'", long9 == 12L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.withSecondOfMinute(56);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds(67441936);
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMinutes(626);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfSecond(2030);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2030 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str4, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:01.999" + "'", str14, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-11T09:49:56.654" + "'", str18, "2022-02-11T09:49:56.654");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        boolean boolean2 = locale1.hasExtensions();
        java.lang.Object obj3 = locale1.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "en_CA");
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        timeZone1.setRawOffset(4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        timeZone1.setRawOffset(1);
        int int12 = timeZone1.getOffset(1644572670961L);
        int int13 = timeZone1.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = timeZone1.getOffset(851, 35272793, 35137417, 0, (int) (byte) -1, 2000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.Chronology chronology10 = iSOChronology1.withZone(dateTimeZone9);
        long long13 = dateTimeZone9.adjustOffset((-1L), false);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 35042587, dateTimeZone9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfYear();
        long long19 = property18.remainder();
        java.lang.String str20 = property18.getAsText();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        int int24 = localDateTime23.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = property30.getAsShortText(locale31);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = property30.getAsText(locale34);
        org.joda.time.LocalDateTime localDateTime37 = property30.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = property30.roundHalfEvenCopy();
        boolean boolean39 = localDateTime23.equals((java.lang.Object) localDateTime38);
        int int40 = property18.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minus(readableDuration41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.withHourOfDay(0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = property55.getFieldType();
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str59 = locale58.getScript();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale58.getDisplayCountry(locale60);
        java.lang.String str62 = property55.getAsText(locale60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime63 = property45.setCopy("2022-02-11T09:44:59.277", locale60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:44:59.277\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35042587L + "'", long19 == 35042587L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9" + "'", str32, "9");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English (Canada)" + "'", str35, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "679" + "'", str62, "679");
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusMonths(35516061);
        long long16 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime11, (long) 46);
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.era();
        org.joda.time.DurationField durationField18 = iSOChronology0.years();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572940711L + "'", long16 == 1644572940711L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ISOChronology[+00:00:01.999]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=isochronology[+00:00:01.999]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField17 = iSOChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology16.era();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        int int24 = localDateTime23.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = property30.getAsShortText(locale31);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = property30.getAsText(locale34);
        org.joda.time.LocalDateTime localDateTime37 = property30.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = property30.roundHalfEvenCopy();
        boolean boolean39 = localDateTime23.equals((java.lang.Object) localDateTime38);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str41 = iSOChronology40.toString();
        org.joda.time.DurationField durationField42 = iSOChronology40.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        int[] intArray49 = iSOChronology40.get((org.joda.time.ReadablePartial) localDateTime45, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = iSOChronology40.getZone();
        boolean boolean52 = dateTimeZone50.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime53 = localDateTime38.toDateTime(dateTimeZone50);
        java.lang.String str54 = dateTime53.toString();
        int int55 = property20.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology56);
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str60 = iSOChronology59.toString();
        org.joda.time.DurationField durationField61 = iSOChronology59.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        int[] intArray68 = iSOChronology59.get((org.joda.time.ReadablePartial) localDateTime64, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone69 = iSOChronology59.getZone();
        java.lang.String str70 = dateTimeZone69.toString();
        org.joda.time.DateTime dateTime71 = localDateTime58.toDateTime(dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime71.getZone();
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime71.getZone();
        long long74 = dateTime71.getMillis();
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime71.getZone();
        boolean boolean76 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime71);
        long long77 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime78 = property12.roundHalfEvenCopy();
        java.util.Locale locale82 = new java.util.Locale("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", "2022-02-11T09:46:07.097", "2022-02-11T09:43:58.520");
        java.lang.String str83 = property12.getAsText(locale82);
        org.joda.time.LocalDateTime localDateTime85 = property12.addToCopy(11);
        org.joda.time.LocalDateTime localDateTime86 = property12.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime88 = localDateTime86.withSecondOfMinute(346);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 346 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9" + "'", str32, "9");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English (Canada)" + "'", str35, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(iSOChronology40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str41, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-11T10:00:00.000+00:00:01.999" + "'", str54, "2022-02-11T10:00:00.000+00:00:01.999");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(iSOChronology59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str60, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:01.999" + "'", str70, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1644572940743L + "'", long74 == 1644572940743L);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertEquals(locale82.toString(), "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)_2022-02-11T09:46:07.097_2022-02-11T09:43:58.520");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "20" + "'", str83, "20");
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.lang.String str14 = property5.getAsShortText(locale12);
        java.lang.String str15 = locale12.getVariant();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale12.getDisplayScript(locale16);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("0");
        boolean boolean20 = locale19.hasExtensions();
        boolean boolean21 = locale19.hasExtensions();
        java.util.Locale locale25 = new java.util.Locale("2022-02-11T09:44:09.708", "Property[millisOfDay]", "CHN");
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.lang.String str27 = locale26.getVariant();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.lang.String str32 = locale26.getDisplayScript(locale29);
        java.lang.String str33 = locale25.getDisplayVariant(locale26);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField36 = iSOChronology35.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.era();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = property45.getAsShortText(locale46);
        java.lang.String str48 = property39.getAsShortText(locale46);
        java.lang.String str49 = locale46.getVariant();
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.lang.String str51 = locale46.getDisplayScript(locale50);
        java.lang.String str52 = locale50.getDisplayVariant();
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale53.getScript();
        java.lang.String str55 = locale53.toLanguageTag();
        java.lang.String str56 = locale53.getDisplayScript();
        java.lang.String str57 = locale50.getDisplayName(locale53);
        java.lang.String str58 = locale25.getDisplayCountry(locale50);
        java.lang.String str59 = locale19.getDisplayVariant(locale50);
        java.lang.String str60 = locale12.getDisplayScript(locale19);
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str62 = iSOChronology61.toString();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        long long66 = iSOChronology61.add(readablePeriod63, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField67 = iSOChronology61.halfdays();
        org.joda.time.DurationField durationField68 = iSOChronology61.millis();
        org.joda.time.DurationField durationField69 = iSOChronology61.hours();
        org.joda.time.DurationField durationField70 = iSOChronology61.years();
        org.joda.time.Chronology chronology71 = iSOChronology61.withUTC();
        java.lang.String str72 = iSOChronology61.toString();
        org.joda.time.Chronology chronology73 = iSOChronology61.withUTC();
        boolean boolean74 = locale12.equals((java.lang.Object) chronology73);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2" + "'", str14, "2");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale25.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CHN" + "'", str33, "CHN");
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "9" + "'", str47, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2" + "'", str48, "2");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en-CA" + "'", str55, "en-CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Japanese (Japan)" + "'", str57, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str58, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iSOChronology61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str62, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(chronology71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str72, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setExtension('a', "fr_CA");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setRegion("2022-02-15T13:52:59.010");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-15T13:52:59.010 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.lang.String str3 = dateTimeZone1.getNameKey(360300051L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) 'a');
        int[] intArray14 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1);
        int int18 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        boolean boolean23 = iSOChronology0.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Chronology chronology24 = iSOChronology0.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology24.getDateTimeMillis(1707644926147L, 35142604, 0, 0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35142604 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusYears((int) 'u');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        int int23 = localDateTime21.size();
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withMonthOfYear(498);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 498 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap26);
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale29 = java.util.Locale.getDefault(category28);
        java.util.Locale locale30 = java.util.Locale.US;
        java.util.Locale.setDefault(category28, locale30);
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor33 = strSet32.iterator();
        java.util.Set<java.lang.String> strSet34 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean35 = strSet34.isEmpty();
        boolean boolean37 = strSet34.add("+00:00:00.008");
        boolean boolean38 = strSet32.removeAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.Iterator<java.lang.String> strItor39 = strSet34.iterator();
        java.util.stream.Stream<java.lang.String> strStream40 = strSet34.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream41 = strSet34.stream();
        java.lang.String str42 = java.util.Locale.lookupTag(languageRangeList27, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleKeys();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.util.Locale.setDefault(locale47);
        java.util.Set<java.lang.String> strSet51 = locale47.getUnicodeLocaleAttributes();
        boolean boolean52 = strSet46.removeAll((java.util.Collection<java.lang.String>) strSet51);
        int int53 = strSet46.size();
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Collection<java.util.Locale> localeCollection57 = null;
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, localeCollection57);
        java.lang.String[] strArray69 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        java.util.Iterator<java.lang.String> strItor72 = strSet70.iterator();
        java.lang.Object[] objArray73 = strSet70.toArray();
        java.lang.Object[] objArray74 = strSet70.toArray();
        java.util.stream.Stream<java.lang.String> strStream75 = strSet70.parallelStream();
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strSet70);
        java.util.Collection<java.lang.String> strCollection77 = null;
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strCollection77);
        boolean boolean79 = strSet46.removeAll((java.util.Collection<java.lang.String>) strList78);
        int int80 = strSet46.size();
        java.util.Iterator<java.lang.String> strItor81 = strSet46.iterator();
        boolean boolean82 = strSet34.containsAll((java.util.Collection<java.lang.String>) strSet46);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.FORMAT + "'", category28.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English (Canada)" + "'", str45, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English (Canada)" + "'", str49, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(strItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean7 = timeZone3.observesDaylightTime();
        java.lang.String str8 = timeZone3.getID();
        java.util.TimeZone.setDefault(timeZone3);
        java.time.ZoneId zoneId10 = timeZone3.toZoneId();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT" + "'", str8, "GMT");
        org.junit.Assert.assertNotNull(zoneId10);
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        java.util.Locale locale1 = new java.util.Locale("Property[dayOfWeek]");
        org.junit.Assert.assertEquals(locale1.toString(), "property[dayofweek]");
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withPeriodAdded(readablePeriod34, 9);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.Chronology chronology39 = localDateTime36.getChronology();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = property45.getAsShortText(locale46);
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = property45.getAsText(locale49);
        org.joda.time.LocalDateTime localDateTime52 = property45.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = property45.roundHalfEvenCopy();
        java.lang.String str54 = localDateTime53.toString();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property57 = localDateTime53.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusHours(20);
        boolean boolean62 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        int int63 = localDateTime61.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withMonthOfYear(85671986);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85671986 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:01.999" + "'", str24, "+00:00:01.999");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "9" + "'", str47, "9");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English (Canada)" + "'", str50, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9" + "'", str51, "9");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-11T10:00:00.000" + "'", str54, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20 + "'", int63 == 20);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds(23);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.DurationField durationField31 = iSOChronology29.weeks();
        boolean boolean32 = property28.equals((java.lang.Object) durationField31);
        org.joda.time.LocalDateTime localDateTime33 = property28.withMinimumValue();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime33.getFieldTypes();
        int int36 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime37 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime38 = property21.withMinimumValue();
        int int39 = property21.getMaximumValue();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str5, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:01.999" + "'", str15, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(iSOChronology29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str30, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 7 + "'", int39 == 7);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("PROPERTY[MILLISOFDAY]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PROPERTY[MILLISOFDAY]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusHours(5);
        int int22 = localDateTime18.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.yearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readablePeriod25);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setExtension('a', "fr_CA");
        java.util.Locale.Builder builder11 = builder6.setLanguage("GMT");
        java.util.Locale.Builder builder13 = builder6.removeUnicodeLocaleAttribute("35085083");
        java.util.Locale locale14 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder6.setScript("2022-02-13T19:45:07.745");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-13T19:45:07.745 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "gmt__#a-fr-ca");
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.withSecondOfMinute(56);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.withTime((int) (byte) 0, 13, 53, 4);
        org.joda.time.LocalDateTime.Property property23 = localDateTime2.millisOfSecond();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.LocalDateTime localDateTime26 = property23.addToCopy(11);
        java.lang.String str27 = property23.toString();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField30 = iSOChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.era();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays(836);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.era();
        boolean boolean38 = property23.equals((java.lang.Object) property37);
        boolean boolean40 = property23.equals((java.lang.Object) "2031-11-12T09:46:41.252");
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str4, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:01.999" + "'", str14, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[millisOfSecond]" + "'", str27, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField5 = iSOChronology0.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        int int8 = property7.get();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("0");
        java.lang.String str9 = locale8.getVariant();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale8);
        java.util.Locale locale12 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale.setDefault(locale14);
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale12.getDisplayCountry(locale14);
        java.lang.String str20 = locale14.getDisplayVariant();
        java.util.Locale.Builder builder21 = builder10.setLocale(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder10.setLanguageTag("0097-02-11T09:48:35.026+00:00:00.008");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 0097 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale12.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        java.lang.String str5 = iSOChronology0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int int11 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.minus(readableDuration13);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField16 = iSOChronology15.halfdays();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.TimeZone.setDefault(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology24 = iSOChronology15.withZone(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration13, dateTimeZone23);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("0");
        java.lang.String str29 = dateTimeZone23.getShortName(1644659045736L, locale28);
        org.joda.time.Chronology chronology30 = iSOChronology0.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(58);
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.Chronology chronology34 = iSOChronology0.withZone(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = iSOChronology0.getDateTimeMillis((long) 35569542, 35468231, 21, 24499209, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35468231 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str5, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime7.getFieldTypes();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology18.dayOfWeek();
        org.joda.time.Chronology chronology29 = iSOChronology18.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.monthOfYear();
        int[] intArray39 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime34, (long) (short) 10);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusWeeks((-1));
        java.lang.String str50 = localDateTime49.toString();
        boolean boolean51 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        boolean boolean52 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime49.withTime(22, (int) (short) 0, 0, 14);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.withWeekOfWeekyear(34);
        org.joda.time.LocalDateTime.Property property60 = localDateTime49.weekyear();
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str66 = nameProvider61.getName(locale62, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale67 = locale62.stripExtensions();
        int int68 = property60.getMaximumTextLength(locale62);
        java.util.Locale.setDefault(locale62);
        java.lang.String str70 = locale62.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(iSOChronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str19, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1, 2009]");
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0097-02-18T09:49:03.301" + "'", str50, "0097-02-18T09:49:03.301");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime25.getFields();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35343354]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707644941355L + "'", long23 == 1707644941355L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.weekyearOfCentury();
        long long11 = iSOChronology1.add(1644572637306L, 1644572653046L, 6);
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.dayOfYear();
        java.lang.String str14 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology1.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 11512008555582L + "'", long11 == 11512008555582L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.toLanguageTag();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsShortText(locale14);
        java.lang.String str16 = property7.getAsShortText(locale14);
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.lang.String str19 = locale14.getDisplayScript(locale18);
        java.lang.String str20 = locale0.getDisplayVariant(locale18);
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str26 = nameProvider21.getName(locale22, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str29 = locale28.getISO3Country();
        java.lang.String str30 = locale28.getScript();
        java.lang.String str31 = locale22.getDisplayVariant(locale28);
        java.lang.String str32 = locale22.getDisplayScript();
        java.lang.String str33 = locale22.getDisplayScript();
        java.lang.String str34 = locale22.getLanguage();
        java.util.Locale locale35 = locale22.stripExtensions();
        java.lang.String str36 = locale0.getDisplayName(locale22);
        java.util.Locale.setDefault(locale22);
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str43 = nameProvider38.getName(locale39, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str49 = nameProvider38.getShortName(locale44, "und", "2022-02-11T09:44:00.457");
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField51 = iSOChronology50.halfdays();
        java.lang.String str52 = iSOChronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology50.era();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology50.centuryOfEra();
        org.joda.time.DurationField durationField55 = iSOChronology50.minutes();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology50);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.year();
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str60 = locale59.getScript();
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale59.getDisplayCountry(locale61);
        java.lang.String str63 = property57.getAsText(locale61);
        java.lang.String str66 = nameProvider38.getName(locale61, "yearOfCentury", "ETC/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider38);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("monthOfYear");
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("hi!");
        org.joda.time.chrono.ISOChronology iSOChronology73 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology73.dayOfYear();
        java.lang.String str75 = iSOChronology73.toString();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology73.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology73.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology79 = iSOChronology73.withZone(dateTimeZone78);
        boolean boolean81 = dateTimeZone78.isStandardOffset((long) (short) 1);
        java.util.Locale locale84 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str85 = locale84.getDisplayCountry();
        java.lang.String str86 = dateTimeZone78.getShortName(97L, locale84);
        java.lang.String str87 = locale72.getDisplayScript(locale84);
        java.lang.String str88 = locale70.getDisplayScript(locale84);
        java.lang.String str91 = nameProvider38.getName(locale70, "16", "en-CA");
        java.lang.String str92 = locale22.getDisplayCountry(locale70);
        java.util.Set<java.lang.String> strSet93 = locale70.getUnicodeLocaleKeys();
        java.lang.String str94 = locale70.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-CN" + "'", str1, "zh-CN");
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2" + "'", str16, "2");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese (China)" + "'", str36, "Chinese (China)");
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "English (Canada)" + "'", str46, "English (Canada)");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(durationField51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str52, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022" + "'", str63, "2022");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(iSOChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str75, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals(locale84.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00:01.999" + "'", str86, "+00:00:01.999");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:46:07.092", (double) 1707644808074L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.707644808074E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.weekyearOfCentury();
        long long11 = iSOChronology1.add(1644572637306L, 1644572653046L, 6);
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology1.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology1.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 11512008555582L + "'", long11 == 11512008555582L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField9 = iSOChronology0.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = iSOChronology0.getDateTimeMillis(381, 35130505, 59, 35181813);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35130505 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("0000-02-11T08:44:26.096");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("Fri");
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("35127132");
        java.util.Set<java.lang.String> strSet9 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withPeriodAdded(readablePeriod34, 9);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.Chronology chronology39 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:01.999" + "'", str24, "+00:00:01.999");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        java.util.Locale locale3 = new java.util.Locale("0097-02-18T09:46:03.050", "2022-02-11T09:48:57.909", "0097-02-18T09:48:46.510");
        org.junit.Assert.assertEquals(locale3.toString(), "0097-02-18t09:46:03.050_2022-02-11T09:48:57.909_0097-02-18T09:48:46.510");
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale3 = new java.util.Locale("", "Etc/UTC");
        java.lang.String str4 = locale0.getDisplayLanguage(locale3);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsShortText(locale17);
        java.lang.String str19 = property10.getAsShortText(locale17);
        java.lang.String str20 = locale3.getDisplayCountry(locale17);
        java.util.Set<java.lang.String> strSet21 = locale3.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet22 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale3.getLanguage();
        java.lang.String str24 = locale3.getISO3Language();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        int int29 = localDateTime28.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = property35.getAsShortText(locale36);
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = property35.getAsText(locale39);
        org.joda.time.LocalDateTime localDateTime42 = property35.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = property35.roundHalfEvenCopy();
        boolean boolean44 = localDateTime28.equals((java.lang.Object) localDateTime43);
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str46 = iSOChronology45.toString();
        org.joda.time.DurationField durationField47 = iSOChronology45.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        int[] intArray54 = iSOChronology45.get((org.joda.time.ReadablePartial) localDateTime50, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = iSOChronology45.getZone();
        boolean boolean57 = dateTimeZone55.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime58 = localDateTime43.toDateTime(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime58.getZone();
        long long62 = dateTimeZone59.adjustOffset((long) 11, true);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone59);
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((java.lang.Object) str24, dateTimeZone59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale3.toString(), "_ETC/UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ETC/UTC" + "'", str20, "ETC/UTC");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9" + "'", str37, "9");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English (Canada)" + "'", str40, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(iSOChronology45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str46, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 11L + "'", long62 == 11L);
        org.junit.Assert.assertNotNull(iSOChronology64);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleKeys();
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap36);
        org.joda.time.tz.Provider provider38 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet39 = provider38.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider38);
        java.util.Set<java.lang.String> strSet41 = provider38.getAvailableIDs();
        java.util.Set<java.lang.String> strSet42 = provider38.getAvailableIDs();
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList37, (java.util.Collection<java.lang.String>) strSet42);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English (Canada)" + "'", str33, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(provider38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strList43);
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField13 = iSOChronology0.halfdays();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        int int24 = localDateTime21.getDayOfWeek();
        int int25 = localDateTime21.getSecondOfMinute();
        int int26 = localDateTime21.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.plusWeeks(35168091);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDateTime28.getFieldType(0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35343655]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707644941656L + "'", long23 == 1707644941656L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35343655 + "'", int26 == 35343655);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField11 = iSOChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.era();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra((int) 'a');
        int[] intArray21 = iSOChronology10.get((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime17.getFields();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusHours(1);
        int int25 = localDateTime17.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDateTime27.isSupported(dateTimeFieldType28);
        boolean boolean30 = iSOChronology7.equals((java.lang.Object) dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology7.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) 13, false);
        long long37 = dateTimeZone31.convertLocalToUTC(0L, false);
        java.util.Locale locale42 = new java.util.Locale("2022-02-11T09:44:01.355", "2022-02-11T10:00:00.000Z", "2022-02-11T09:44:05.224");
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = property48.getAsShortText(locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = property48.getAsText(locale52);
        org.joda.time.LocalDateTime localDateTime55 = property48.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str57 = iSOChronology56.toString();
        org.joda.time.DurationField durationField58 = iSOChronology56.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        int[] intArray65 = iSOChronology56.get((org.joda.time.ReadablePartial) localDateTime61, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = iSOChronology56.getZone();
        java.lang.String str67 = dateTimeZone66.toString();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime55, dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.yearOfCentury();
        org.joda.time.LocalDateTime.Property property72 = localDateTime68.yearOfCentury();
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder73.setLanguage("de");
        java.util.Locale.Builder builder76 = builder73.clearExtensions();
        java.util.Locale locale77 = builder73.build();
        int int78 = property72.getMaximumTextLength(locale77);
        java.lang.String str79 = locale42.getDisplayName(locale77);
        java.lang.String str80 = dateTimeZone31.getName(100L, locale77);
        org.joda.time.chrono.ISOChronology iSOChronology81 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology81.dayOfYear();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology81);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property86 = localDateTime83.hourOfDay();
        java.util.Locale locale87 = java.util.Locale.ENGLISH;
        java.lang.String str88 = property86.getAsShortText(locale87);
        boolean boolean89 = locale87.hasExtensions();
        java.lang.String str90 = locale77.getDisplayVariant(locale87);
        java.util.Set<java.lang.String> strSet91 = locale87.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = timeZone3.getDisplayName(true, 35211821, locale87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 35211821");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1986L) + "'", long34 == (-1986L));
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1999L) + "'", long37 == (-1999L));
        org.junit.Assert.assertEquals(locale42.toString(), "2022-02-11t09:44:01.355_2022-02-11T10:00:00.000Z_2022-02-11T09:44:05.224");
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "9" + "'", str50, "9");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (Canada)" + "'", str53, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9" + "'", str54, "9");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(iSOChronology56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str57, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:01.999" + "'", str67, "+00:00:01.999");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-11t09:44:01.355 (2022-02-11T10:00:00.000Z,2022-02-11T09:44:05.224)" + "'", str79, "2022-02-11t09:44:01.355 (2022-02-11T10:00:00.000Z,2022-02-11T09:44:05.224)");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:01.999" + "'", str80, "+00:00:01.999");
        org.junit.Assert.assertNotNull(iSOChronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "9" + "'", str88, "9");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strSet91);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        int int7 = property5.getMaximumValue();
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property5.getFieldType();
        org.joda.time.LocalDateTime localDateTime10 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property5.roundFloorCopy();
        java.lang.Object obj12 = null;
        boolean boolean13 = property5.equals(obj12);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMinutes((int) '4');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        int int9 = localDateTime7.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMonths(33);
        int int12 = localDateTime11.getYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 57 + "'", int9 == 57);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2019 + "'", int12 == 2019);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear(414);
        java.lang.String str15 = localDateTime14.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0414-02-11T09:49:03.742" + "'", str15, "0414-02-11T09:49:03.742");
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        int int32 = localDateTime31.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.weekOfWeekyear();
        java.util.Locale locale37 = new java.util.Locale("2022-02-11T09:43:51.591", "2022-02-11T09:43:52.830", "9");
        int int38 = property33.getMaximumShortTextLength(locale37);
        java.lang.String str39 = property33.getAsString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals(locale37.toString(), "2022-02-11t09:43:51.591_2022-02-11T09:43:52.830_9");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "10" + "'", str39, "10");
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.lang.String str4 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en" + "'", str1, "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "English" + "'", str4, "English");
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        java.util.Locale locale1 = new java.util.Locale("35127132");
        java.util.Locale locale3 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Locale.setDefault(locale5);
        java.util.Set<java.lang.String> strSet9 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale3.getDisplayCountry(locale5);
        java.lang.String str11 = locale3.getScript();
        java.util.Set<java.lang.String> strSet12 = locale3.getUnicodeLocaleKeys();
        java.lang.String str13 = locale1.getDisplayVariant(locale3);
        java.lang.String str14 = locale3.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "35127132");
        org.junit.Assert.assertEquals(locale3.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English (Canada)" + "'", str7, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "isochronology[etc/utc]" + "'", str14, "isochronology[etc/utc]");
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.millisOfSecond();
        org.joda.time.DurationField durationField4 = iSOChronology0.weekyears();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str6 = iSOChronology5.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = iSOChronology5.add(readablePeriod7, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology5.yearOfEra();
        org.joda.time.DurationField durationField12 = iSOChronology5.halfdays();
        boolean boolean13 = iSOChronology0.equals((java.lang.Object) iSOChronology5);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology5.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str6, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        java.lang.String str3 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.dayOfMonth();
        org.joda.time.DurationField durationField6 = iSOChronology1.millis();
        org.joda.time.DurationField durationField7 = iSOChronology1.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str12 = iSOChronology11.toString();
        org.joda.time.DurationField durationField13 = iSOChronology11.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        int[] intArray20 = iSOChronology11.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = iSOChronology11.getZone();
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime23.getZone();
        org.joda.time.Chronology chronology26 = iSOChronology1.withZone(dateTimeZone25);
        long long30 = iSOChronology1.add(56L, 1644572653745L, 51);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(1707644640383L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology1.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray39 = iSOChronology1.get(readablePeriod36, (long) 934, (-1644573607L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str3, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str12, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:01.999" + "'", str22, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 83873205341051L + "'", long30 == 83873205341051L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        org.joda.time.Chronology chronology5 = iSOChronology0.withZone(dateTimeZone4);
        java.lang.String str6 = iSOChronology0.toString();
        java.lang.String str7 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str6, "ISOChronology[+00:00:01.999]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str7, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder0.build();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        boolean boolean6 = strSet5.isEmpty();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDurationAdded(readableDuration13, 49);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str23 = iSOChronology22.toString();
        org.joda.time.DurationField durationField24 = iSOChronology22.weeks();
        boolean boolean25 = property21.equals((java.lang.Object) durationField24);
        org.joda.time.DurationField durationField26 = property21.getRangeDurationField();
        java.lang.String str27 = property21.getAsString();
        java.lang.String str28 = property21.getAsShortText();
        org.joda.time.LocalDateTime localDateTime30 = property21.addToCopy(35058029);
        int int31 = localDateTime30.getHourOfDay();
        boolean boolean32 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime30);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(iSOChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str23, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "9" + "'", str27, "9");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9" + "'", str28, "9");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 14 + "'", int31 == 14);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.monthOfYear();
        org.joda.time.Chronology chronology13 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        long long12 = iSOChronology0.add(59L, 1644572646636L, 50);
        org.joda.time.DurationField durationField13 = iSOChronology0.weekyears();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.era();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra((int) 'a');
        int[] intArray25 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfEvenCopy();
        int int28 = property26.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime29 = property26.roundHalfEvenCopy();
        int int30 = localDateTime29.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears(30);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minus(readableDuration35);
        long long38 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime36, (long) 35245027);
        org.joda.time.DurationField durationField39 = iSOChronology0.days();
        org.joda.time.DurationField durationField40 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 82228632331859L + "'", long12 == 82228632331859L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2922789 + "'", int28 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 946684798004L + "'", long38 == 946684798004L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = iSOChronology0.getDateTimeMillis(35290350, 97, 382, 318, (-52), 72, (int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 318 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsShortText(locale17);
        boolean boolean19 = property16.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField21 = iSOChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.era();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfEra((int) 'a');
        int[] intArray31 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime27.getFields();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.minusHours(1);
        int int35 = localDateTime27.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime27.withTime(1, 23, 51, 23);
        int int43 = property16.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DurationField durationField44 = property16.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property16.getFieldType();
        org.joda.time.LocalDateTime.Property property46 = localDateTime10.property(dateTimeFieldType45);
        boolean boolean47 = property46.isLeap();
        int int48 = property46.getLeapAmount();
        org.joda.time.DurationField durationField49 = property46.getLeapDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(durationField49);
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.era();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology12.yearOfEra();
        org.joda.time.DurationField durationField16 = iSOChronology12.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.era();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfEra((int) 'a');
        int[] intArray28 = iSOChronology17.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.withDurationAdded(readableDuration29, (int) '4');
        long long33 = iSOChronology12.set((org.joda.time.ReadablePartial) localDateTime31, 2022L);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        boolean boolean35 = localDateTime31.isSupported(durationFieldType34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withSecondOfMinute((int) (byte) 0);
        int int38 = localDateTime31.getSecondOfMinute();
        int[] intArray40 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime31, 1707644673185L);
        org.joda.time.DurationField durationField41 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology0.getZone();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray47 = iSOChronology0.get(readablePeriod45, (long) 421200000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644572942148L + "'", long33 == 1644572942148L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2024, 2, 11, 35075184]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = localDateTime25.withFieldAdded(durationFieldType31, 35135437);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:01.999" + "'", str24, "+00:00:01.999");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList23.parallelStream();
        boolean boolean25 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray33 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray41 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = strSet34.containsAll((java.util.Collection<java.lang.String>) strList42);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet34);
        boolean boolean47 = localDateTime0.equals((java.lang.Object) strSet34);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime0.withDayOfMonth(1);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plus(readableDuration50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minus(readableDuration52);
        int int54 = localDateTime49.getSecondOfMinute();
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        long long15 = iSOChronology0.add((-1L), (long) (byte) 1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField17 = iSOChronology0.millis();
        org.joda.time.DurationField durationField18 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.secondOfMinute();
        java.lang.String str20 = iSOChronology0.toString();
        org.joda.time.DurationField durationField21 = iSOChronology0.halfdays();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long25 = dateTimeZone22.convertLocalToUTC(1707644697254L, false);
        boolean boolean26 = dateTimeZone22.isFixed();
        org.joda.time.Chronology chronology27 = iSOChronology0.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField28 = iSOChronology0.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str20, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1707644695255L + "'", long25 == 1707644695255L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.lang.String str18 = property16.getAsShortText(locale17);
        java.lang.String str19 = property10.getAsShortText(locale17);
        java.util.Set<java.lang.String> strSet20 = locale17.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder21 = builder4.setLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder4.addUnicodeLocaleAttribute("2022-02-13T19:46:28.086+58:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-13T19:46:28.086+58:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2" + "'", str19, "2");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str11 = iSOChronology10.toString();
        org.joda.time.DurationField durationField12 = iSOChronology10.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        int[] intArray19 = iSOChronology10.get((org.joda.time.ReadablePartial) localDateTime15, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology10.getZone();
        long long24 = dateTimeZone20.convertLocalToUTC((long) 0, true, 0L);
        long long26 = dateTimeZone20.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology27 = iSOChronology7.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology7.centuryOfEra();
        org.joda.time.DurationField durationField29 = iSOChronology7.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(71188900, 35169682, 259, 27, (int) 'u', 54, 47, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str11, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1999L) + "'", long24 == (-1999L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime32 = localDateTime17.toDateTime(dateTimeZone29);
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.lang.String str36 = locale34.getDisplayScript(locale35);
        java.lang.String str37 = dateTimeZone29.getShortName(1644572652885L, locale34);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        java.lang.String str41 = dateTimeZone29.getNameKey(1707644690931L);
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfYear();
        java.lang.String str44 = iSOChronology42.toString();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology42.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology42.dayOfMonth();
        org.joda.time.DurationField durationField47 = iSOChronology42.weeks();
        org.joda.time.DurationField durationField48 = iSOChronology42.centuries();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology42.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology42.dayOfWeek();
        org.joda.time.DurationField durationField51 = iSOChronology42.millis();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology42.weekyearOfCentury();
        org.joda.time.DurationField durationField53 = iSOChronology42.days();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone57 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean58 = timeZone55.hasSameRules(timeZone57);
        java.util.TimeZone.setDefault(timeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int61 = timeZone57.getRawOffset();
        boolean boolean62 = timeZone57.observesDaylightTime();
        int int64 = timeZone57.getOffset(1707644660798L);
        java.util.TimeZone.setDefault(timeZone57);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        int int68 = dateTimeZone66.getOffsetFromLocal(1644572713159L);
        long long71 = dateTimeZone66.adjustOffset(1644659118701L, false);
        org.joda.time.Chronology chronology72 = iSOChronology42.withZone(dateTimeZone66);
        boolean boolean73 = dateTimeZone29.equals((java.lang.Object) dateTimeZone66);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iSOChronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str20, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:01.999" + "'", str37, "+00:00:01.999");
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str44, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1644659118701L + "'", long71 == 1644659118701L);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2031-11-12T09:52:23.315", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2031-11-12t09:52:23.315");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.era();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra((int) 'a');
        int[] intArray37 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime33, (long) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withDurationAdded(readableDuration38, (int) '4');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = property48.getAsShortText(locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = property48.getAsText(locale52);
        org.joda.time.LocalDateTime localDateTime55 = property48.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = property48.roundHalfEvenCopy();
        java.lang.String str57 = localDateTime56.toString();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.plusHours(6);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withYear(35054090);
        org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str68 = iSOChronology67.toString();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology67.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology67.dayOfYear();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology67.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology67);
        org.joda.time.Chronology chronology73 = iSOChronology67.withUTC();
        boolean boolean74 = localDateTime66.equals((java.lang.Object) chronology73);
        int int75 = localDateTime66.getSecondOfMinute();
        boolean boolean76 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime66);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:01.999" + "'", str24, "+00:00:01.999");
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "9" + "'", str50, "9");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (Canada)" + "'", str53, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9" + "'", str54, "9");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T10:00:00.000" + "'", str57, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(iSOChronology67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str68, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) 'a');
        int[] intArray14 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1);
        int int18 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        boolean boolean23 = iSOChronology0.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology0.getZone();
        long long27 = dateTimeZone24.convertLocalToUTC((long) 13, false);
        long long29 = dateTimeZone24.convertUTCToLocal(1644572763734L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minus(readableDuration31);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1986L) + "'", long27 == (-1986L));
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644572765733L + "'", long29 == 1644572765733L);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfWeek();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.halfdayOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology9.millisOfSecond();
        org.joda.time.Chronology chronology17 = iSOChronology9.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusWeeks((-1));
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        java.lang.String str30 = iSOChronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = iSOChronology28.withZone(dateTimeZone33);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = property40.getAsShortText(locale41);
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.lang.String str46 = property40.getAsText(locale44);
        org.joda.time.LocalDateTime localDateTime47 = property40.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusSeconds(6);
        int[] intArray51 = iSOChronology28.get((org.joda.time.ReadablePartial) localDateTime49, (long) 58);
        iSOChronology9.validate((org.joda.time.ReadablePartial) localDateTime24, intArray51);
        int int53 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = localDateTime24.toString("2022-02-13T19:46:45.628");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str11, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str30, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9" + "'", str42, "9");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English (Canada)" + "'", str45, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1, 2057]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        int int19 = localDateTime17.getYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYearOfEra(35168091);
        org.joda.time.Chronology chronology22 = localDateTime17.getChronology();
        int int23 = localDateTime17.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime17.withWeekOfWeekyear(661);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 661 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.Interval interval8 = property5.toInterval();
        boolean boolean9 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundFloorCopy();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = iSOChronology0.add(readablePeriod7, (long) 'u', (int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 117L + "'", long10 == 117L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        long long6 = iSOChronology0.add((long) (short) 10, (long) 35054090, 3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField8 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 105162280L + "'", long6 == 105162280L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.plusSeconds((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis(71111255);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = localDateTime21.isSupported(durationFieldType22);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-11T09:48:02.679", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology11.era();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra((int) 'a');
        int[] intArray22 = iSOChronology11.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withDurationAdded(readableDuration23, (int) '4');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        int int29 = localDateTime18.indexOf(dateTimeFieldType28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime18.plus(readableDuration30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.plusSeconds((int) 'a');
        boolean boolean34 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.minusSeconds(2);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withMillisOfDay(35054090);
        long long42 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime40, 9L);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusYears(50);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = property45.addWrapFieldToCopy(35211821);
        org.joda.time.LocalDateTime localDateTime48 = property45.roundHalfEvenCopy();
        java.util.Locale locale51 = new java.util.Locale("und", "2022-02-11T09:43:52.830");
        java.lang.String str52 = locale51.getDisplayCountry();
        org.joda.time.tz.NameProvider nameProvider53 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale54.getDisplayVariant();
        java.lang.String str58 = nameProvider53.getName(locale54, "English (Canada)", "Etc/UTC");
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str62 = nameProvider53.getShortName(locale59, "2022-02-11T09:43:52.830", "2022-02-11T09:43:58.520");
        java.util.Locale locale63 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology64.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.hourOfDay();
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.lang.String str71 = property69.getAsShortText(locale70);
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.lang.String str74 = locale72.getDisplayName(locale73);
        java.lang.String str75 = property69.getAsText(locale73);
        java.util.Locale locale76 = java.util.Locale.ITALIAN;
        int int77 = property69.getMaximumShortTextLength(locale76);
        java.lang.String str78 = locale63.getDisplayName(locale76);
        java.lang.String str79 = locale76.getDisplayVariant();
        java.util.Locale locale81 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str82 = locale76.getDisplayCountry(locale81);
        java.lang.String str85 = nameProvider53.getShortName(locale76, "2022-02-11T09:44:06.998", "2022-02-11T09:44:00.457");
        java.lang.String str86 = locale76.getDisplayCountry();
        java.lang.String str87 = locale51.getDisplayVariant(locale76);
        java.util.Locale locale91 = new java.util.Locale("2022-02-11T09:44:09.708", "Property[millisOfDay]", "CHN");
        java.lang.String str92 = locale91.getVariant();
        java.util.Set<java.lang.String> strSet93 = locale91.getUnicodeLocaleKeys();
        java.lang.String str94 = locale91.getVariant();
        java.lang.String str95 = locale76.getDisplayVariant(locale91);
        java.lang.String str96 = property45.getAsText(locale76);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644572652091L + "'", long42 == 1644572652091L);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertEquals(locale51.toString(), "und_2022-02-11T09:43:52.830");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-11T09:43:52.830" + "'", str52, "2022-02-11T09:43:52.830");
        org.junit.Assert.assertNotNull(nameProvider53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "9" + "'", str71, "9");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "English (Canada)" + "'", str74, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "9" + "'", str75, "9");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "cinese (Cina)" + "'", str78, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals(locale91.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "CHN" + "'", str92, "CHN");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "CHN" + "'", str94, "CHN");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "11" + "'", str96, "11");
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withPeriodAdded(readablePeriod34, 9);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusDays(67441936);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfSecond();
        org.joda.time.DurationField durationField42 = property41.getLeapDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:01.999" + "'", str24, "+00:00:01.999");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNull(durationField42);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        long long37 = dateTimeZone33.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.Chronology chronology39 = iSOChronology0.withZone(dateTimeZone33);
        java.util.TimeZone timeZone40 = dateTimeZone33.toTimeZone();
        java.lang.String str42 = dateTimeZone33.getNameKey((long) 0);
        java.lang.String str44 = dateTimeZone33.getShortName(1644572638343L);
        int int46 = dateTimeZone33.getOffset(1644572744665L);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        int int53 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.minus(readableDuration55);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField58 = iSOChronology57.halfdays();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone62 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean63 = timeZone60.hasSameRules(timeZone62);
        java.util.TimeZone.setDefault(timeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.Chronology chronology66 = iSOChronology57.withZone(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration55, dateTimeZone65);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("0");
        java.lang.String str71 = dateTimeZone65.getShortName(1644659045736L, locale70);
        java.lang.String str72 = dateTimeZone33.getName(1707435847380L, locale70);
        java.lang.Object obj73 = locale70.clone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str4, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1999L) + "'", long17 == (-1999L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str24, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1999L) + "'", long37 == (-1999L));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertNull(str42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:01.999" + "'", str44, "+00:00:01.999");
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1999 + "'", int46 == 1999);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:01.999" + "'", str72, "+00:00:01.999");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "");
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        org.joda.time.Chronology chronology5 = iSOChronology0.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        java.lang.String str8 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField10 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str8, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone0.convertLocalToUTC(1707644649273L, false, (long) 51);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra((int) 'a');
        int[] intArray16 = iSOChronology5.get((org.joda.time.ReadablePartial) localDateTime12, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime12.getFields();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.minusHours(1);
        int int20 = localDateTime12.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime12.minusSeconds(2022);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime12.plus(readablePeriod25);
        boolean boolean27 = dateTimeZone0.equals((java.lang.Object) readablePeriod25);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int int33 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.minus(readableDuration35);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField38 = iSOChronology37.halfdays();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.TimeZone.setDefault(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.Chronology chronology46 = iSOChronology37.withZone(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration35, dateTimeZone45);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("0");
        java.lang.String str51 = dateTimeZone45.getShortName(1644659045736L, locale50);
        long long53 = dateTimeZone0.getMillisKeepLocal(dateTimeZone45, (long) 51);
        java.util.TimeZone timeZone54 = dateTimeZone0.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:01.999' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1707644647274L + "'", long4 == 1707644647274L);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 2050L + "'", long53 == 2050L);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        int int10 = localDateTime9.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localDateTime9.toString(dateTimeFormatter11);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = property18.getAsShortText(locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = property18.getAsText(locale22);
        org.joda.time.LocalDateTime localDateTime25 = property18.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = property18.roundHalfEvenCopy();
        java.lang.String str27 = localDateTime26.toString();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.weekOfWeekyear();
        int int31 = localDateTime26.getYear();
        boolean boolean32 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        java.lang.String str35 = iSOChronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField38 = iSOChronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology37.era();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfEra((int) 'a');
        int[] intArray48 = iSOChronology37.get((org.joda.time.ReadablePartial) localDateTime44, (long) 100);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime44.withDurationAdded(readableDuration49, (int) '4');
        int[] intArray52 = localDateTime51.getValues();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusYears(2);
        long long56 = iSOChronology33.set((org.joda.time.ReadablePartial) localDateTime54, 1L);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField60 = iSOChronology59.halfdays();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology59.era();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYearOfEra((int) 'a');
        int[] intArray70 = iSOChronology59.get((org.joda.time.ReadablePartial) localDateTime66, (long) 100);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime66.withDurationAdded(readableDuration71, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = localDateTime73.getFieldType((int) (byte) 0);
        boolean boolean76 = localDateTime58.isSupported(dateTimeFieldType75);
        int int77 = localDateTime9.indexOf(dateTimeFieldType75);
        int int78 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime6.withPeriodAdded(readablePeriod79, 67);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime6.plusMinutes(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray84 = localDateTime83.getFields();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:49:04.946" + "'", str12, "2022-02-11T09:49:04.946");
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9" + "'", str20, "9");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English (Canada)" + "'", str23, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9" + "'", str24, "9");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11T10:00:00.000" + "'", str27, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str35, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2022, 2, 11, 35344946]");
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1707644942947L + "'", long56 == 1707644942947L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(dateTimeFieldArray84);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) 'a');
        int[] intArray14 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1);
        int int18 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        boolean boolean23 = iSOChronology0.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology0.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone24);
        long long28 = dateTimeZone24.previousTransition((long) (byte) 1);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.DurationField durationField31 = iSOChronology29.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        int[] intArray38 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime34, (long) 100);
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology29.dayOfWeek();
        org.joda.time.DurationField durationField40 = iSOChronology29.hours();
        org.joda.time.DateTimeZone dateTimeZone41 = iSOChronology29.getZone();
        long long43 = dateTimeZone24.getMillisKeepLocal(dateTimeZone41, 44L);
        java.lang.String str44 = dateTimeZone24.getID();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(iSOChronology29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str30, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 44L + "'", long43 == 44L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:01.999" + "'", str44, "+00:00:01.999");
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) 'a');
        int[] intArray14 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1);
        int int18 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        boolean boolean23 = iSOChronology0.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology0.getZone();
        long long27 = dateTimeZone24.convertLocalToUTC((long) 13, false);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone24);
        int int30 = dateTimeZone24.getOffset(1707644739781L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1986L) + "'", long27 == (-1986L));
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1999 + "'", int30 == 1999);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes((int) (short) 1);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.years();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str30 = dateTimeZone28.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.Chronology chronology32 = chronology16.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(iSOChronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str19, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:01.999" + "'", str29, "+00:00:01.999");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:01.999" + "'", str30, "+00:00:01.999");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("en-CA", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.util.Locale.setDefault(locale12);
        java.util.Set<java.lang.String> strSet16 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray22 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList25.parallelStream();
        boolean boolean27 = strSet16.containsAll((java.util.Collection<java.lang.String>) strList25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet16);
        int int29 = strSet16.size();
        java.util.Locale locale31 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str32 = locale31.getDisplayCountry();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.util.Locale.setDefault(locale33);
        java.util.Set<java.lang.String> strSet37 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale31.getDisplayCountry(locale33);
        java.lang.String str39 = locale31.getScript();
        java.util.Set<java.lang.String> strSet40 = locale31.getUnicodeLocaleKeys();
        boolean boolean41 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet40);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField47 = iSOChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology46.era();
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withYearOfEra((int) 'a');
        int[] intArray57 = iSOChronology46.get((org.joda.time.ReadablePartial) localDateTime53, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray58 = localDateTime53.getFields();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minusHours(1);
        int int61 = localDateTime53.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = localDateTime63.isSupported(dateTimeFieldType64);
        boolean boolean66 = iSOChronology43.equals((java.lang.Object) dateTimeFieldType64);
        org.joda.time.DateTimeZone dateTimeZone67 = iSOChronology43.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(1644572663400L, (org.joda.time.Chronology) iSOChronology68);
        boolean boolean70 = strSet40.equals((java.lang.Object) localDateTime69);
        java.util.Locale locale71 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology72 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology72.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.hourOfDay();
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.lang.String str79 = property77.getAsShortText(locale78);
        java.util.Locale locale80 = java.util.Locale.CANADA;
        java.util.Locale locale81 = java.util.Locale.CANADA;
        java.lang.String str82 = locale80.getDisplayName(locale81);
        java.lang.String str83 = property77.getAsText(locale81);
        java.util.Locale locale84 = java.util.Locale.ITALIAN;
        int int85 = property77.getMaximumShortTextLength(locale84);
        java.lang.String str86 = locale71.getDisplayName(locale84);
        java.lang.String str87 = locale84.getDisplayVariant();
        java.util.Locale locale89 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str90 = locale84.getDisplayCountry(locale89);
        java.util.Set<java.lang.String> strSet91 = locale84.getUnicodeLocaleAttributes();
        boolean boolean92 = strSet91.isEmpty();
        boolean boolean93 = strSet40.retainAll((java.util.Collection<java.lang.String>) strSet91);
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet40);
        java.util.stream.Stream<java.lang.String> strStream95 = strList94.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals(locale31.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English (Canada)" + "'", str35, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(iSOChronology68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "9" + "'", str79, "9");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "English (Canada)" + "'", str82, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "9" + "'", str83, "9");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "cinese (Cina)" + "'", str86, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(strStream95);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField26 = iSOChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.era();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra((int) 'a');
        int[] intArray36 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime32, (long) 100);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.withDurationAdded(readableDuration37, (int) '4');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime32.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        int int43 = localDateTime32.indexOf(dateTimeFieldType42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.plus(readableDuration44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime32.plusSeconds((int) 'a');
        boolean boolean48 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.minusSeconds(23);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.plusHours(0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusSeconds(47);
        int int57 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.withYear(35142604);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime54.withYearOfEra(35174938);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("Fri");
        java.util.Locale.Builder builder7 = builder6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("2031-11-12T09:46:33.927");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2031-11-12T09:46:33.927 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T00:47:39.549");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t00:47:39.549");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        java.util.Locale locale2 = new java.util.Locale("", "2022-02-11T09:43:58.520");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale2.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for 2022-02-11T09:43:58.520");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_2022-02-11T09:43:58.520");
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        int int15 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.minusDays((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime21 = property18.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMonths(588);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withSecondOfMinute(9);
        java.util.Date date26 = localDateTime21.toDate();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Dec 21 09:49:05 GMT 2021");
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withTime(2, (int) (byte) 1, 1, 10);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readableDuration37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.lang.String str43 = locale42.getScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = property39.setCopy("1970-01-01T09:44:02.587", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T09:44:02.587\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.lang.String str8 = property5.getAsText();
        org.joda.time.Interval interval9 = property5.toInterval();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str12 = property5.getAsText(locale11);
        int int13 = property5.getLeapAmount();
        long long14 = property5.remainder();
        int int15 = property5.getMinimumValueOverall();
        org.joda.time.DurationField durationField16 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9" + "'", str8, "9");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2945261L + "'", long14 == 2945261L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        int[] intArray15 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology6.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str18 = dateTimeZone16.toString();
        long long21 = dateTimeZone16.convertLocalToUTC(1707644647380L, true);
        org.joda.time.Chronology chronology22 = iSOChronology0.withZone(dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        long long26 = iSOChronology0.add(readablePeriod23, 1707644786086L, 18);
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str7, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:01.999" + "'", str17, "+00:00:01.999");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:01.999" + "'", str18, "+00:00:01.999");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1707644645381L + "'", long21 == 1707644645381L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1707644786086L + "'", long26 == 1707644786086L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusHours((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withDayOfYear(3);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str23 = iSOChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology22.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.Chronology chronology28 = iSOChronology22.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str33 = iSOChronology32.toString();
        org.joda.time.DurationField durationField34 = iSOChronology32.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        int[] intArray41 = iSOChronology32.get((org.joda.time.ReadablePartial) localDateTime37, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology32.getZone();
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDateTime31.toDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime31.minusHours(6);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusHours((-1));
        int[] intArray50 = chronology28.get((org.joda.time.ReadablePartial) localDateTime46, (long) 0);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray50);
        org.joda.time.DurationField durationField52 = iSOChronology0.millis();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str54 = iSOChronology53.toString();
        org.joda.time.DurationField durationField55 = iSOChronology53.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        int[] intArray62 = iSOChronology53.get((org.joda.time.ReadablePartial) localDateTime58, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = iSOChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology53.halfdayOfDay();
        org.joda.time.Chronology chronology65 = iSOChronology53.withUTC();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str68 = iSOChronology67.toString();
        org.joda.time.DurationField durationField69 = iSOChronology67.weeks();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology67.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        long long74 = iSOChronology67.add(readablePeriod71, 0L, (int) (byte) -1);
        boolean boolean75 = localDateTime66.equals((java.lang.Object) readablePeriod71);
        org.joda.time.chrono.ISOChronology iSOChronology76 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField77 = iSOChronology76.halfdays();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology76.era();
        org.joda.time.chrono.ISOChronology iSOChronology79 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField80 = iSOChronology79.dayOfYear();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology79);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withYearOfEra((int) 'a');
        int[] intArray87 = iSOChronology76.get((org.joda.time.ReadablePartial) localDateTime83, (long) 100);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime83.withDurationAdded(readableDuration88, (int) '4');
        int[] intArray91 = localDateTime90.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime66, intArray91);
        org.joda.time.DateTimeField dateTimeField93 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField94 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str23, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(iSOChronology32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str33, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:01.999" + "'", str43, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(iSOChronology53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str54, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(iSOChronology67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str68, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(iSOChronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(iSOChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(intArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(intArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[2022, 2, 11, 35345335]");
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        int int13 = dateTimeZone10.getStandardOffset(1707644640457L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusDays(28);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusHours(29);
        int int19 = localDateTime18.getYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:01.999" + "'", str11, "+00:00:01.999");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1999 + "'", int13 == 1999);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("English (United Kingdom)", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setLanguage("2");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(37);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfDay(17);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusHours(71111255);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.era();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYearOfEra((int) 'a');
        int[] intArray39 = iSOChronology28.get((org.joda.time.ReadablePartial) localDateTime35, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = localDateTime35.getFields();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusHours(1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime46 = localDateTime35.withCenturyOfEra(2010);
        boolean boolean47 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime35.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("0097-02-18T09:47:17.100", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0097-02-18t09:47:17.100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime32 = localDateTime17.toDateTime(dateTimeZone29);
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.lang.String str36 = locale34.getDisplayScript(locale35);
        java.lang.String str37 = dateTimeZone29.getShortName(1644572652885L, locale34);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField40 = iSOChronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology39.era();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusMonths(0);
        boolean boolean45 = dateTimeZone29.equals((java.lang.Object) localDateTime42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withCenturyOfEra(71188900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71188900 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iSOChronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str20, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:01.999" + "'", str37, "+00:00:01.999");
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes((int) (short) 1);
        int int16 = localDateTime13.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.year();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        org.joda.time.DurationField durationField29 = iSOChronology18.seconds();
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology18.getZone();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology18.yearOfEra();
        boolean boolean32 = property17.equals((java.lang.Object) iSOChronology18);
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology18.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(iSOChronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str19, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        java.lang.String str5 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = iSOChronology0.centuries();
        org.joda.time.ReadablePartial readablePartial8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = iSOChronology0.get(readablePartial8, 1644572720641L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str5, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMinutes((int) '4');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property8.addToCopy((long) 51);
        org.joda.time.Interval interval11 = property8.toInterval();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str14 = locale13.getISO3Language();
        int int15 = property8.getMaximumTextLength(locale13);
        java.lang.String str16 = locale13.toLanguageTag();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "und" + "'", str16, "und");
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        boolean boolean10 = timeZone6.observesDaylightTime();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.TimeZone.setDefault(timeZone14);
        boolean boolean17 = timeZone6.hasSameRules(timeZone14);
        boolean boolean18 = timeZone1.hasSameRules(timeZone14);
        boolean boolean19 = timeZone14.observesDaylightTime();
        int int21 = timeZone14.getOffset(1707644668512L);
        boolean boolean22 = timeZone14.observesDaylightTime();
        int int24 = timeZone14.getOffset(1707644882517L);
        java.lang.String str25 = timeZone14.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Greenwich Mean Time" + "'", str25, "Greenwich Mean Time");
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        boolean boolean13 = property10.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.era();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra((int) 'a');
        int[] intArray25 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime21.getFields();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusHours(1);
        int int29 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.withTime(1, 23, 51, 23);
        int int37 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DurationField durationField38 = property10.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str45 = nameProvider39.getShortName(locale41, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str46 = property10.getAsShortText(locale41);
        java.lang.String str47 = locale4.getDisplayScript(locale41);
        java.lang.String str48 = locale41.getDisplayLanguage();
        java.util.Locale.Builder builder49 = builder3.setLocale(locale41);
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str55 = nameProvider50.getName(locale51, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String str61 = nameProvider50.getShortName(locale56, "und", "2022-02-11T09:44:00.457");
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField63 = iSOChronology62.halfdays();
        java.lang.String str64 = iSOChronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology62.era();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology62.centuryOfEra();
        org.joda.time.DurationField durationField67 = iSOChronology62.minutes();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.year();
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str72 = locale71.getScript();
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str74 = locale71.getDisplayCountry(locale73);
        java.lang.String str75 = property69.getAsText(locale73);
        java.lang.String str78 = nameProvider50.getName(locale73, "yearOfCentury", "ETC/UTC");
        java.util.Locale.Builder builder79 = builder49.setLocale(locale73);
        java.lang.String str80 = locale73.getDisplayName();
        java.lang.Object obj81 = locale73.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(durationField38);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English (Canada)" + "'", str58, "English (Canada)");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(durationField63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str64, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022" + "'", str75, "2022");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Chinese (China)" + "'", str80, "Chinese (China)");
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "zh_CN");
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        java.lang.String str9 = iSOChronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology7.halfdayOfDay();
        org.joda.time.DurationField durationField11 = iSOChronology7.minutes();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology7.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = iSOChronology7.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField15 = iSOChronology7.days();
        org.joda.time.DurationField durationField16 = iSOChronology7.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(0, 0, (int) (short) 100, 25200000, 306, 36, 35151532, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str9, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime5.getFields();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusYears(999);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.plusMonths((int) (byte) 1);
        int int13 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withCenturyOfEra(845);
        int int16 = localDateTime5.getMinuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        long long14 = property5.remainder();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = property21.getAsShortText(locale22);
        boolean boolean24 = property21.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField26 = iSOChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.era();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra((int) 'a');
        int[] intArray36 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime32, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = localDateTime32.getFields();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.minusHours(1);
        int int40 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime32.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime32.withTime(1, 23, 51, 23);
        int int48 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.DurationField durationField49 = property21.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str56 = nameProvider50.getShortName(locale52, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str57 = property21.getAsShortText(locale52);
        java.lang.String str58 = locale15.getDisplayScript(locale52);
        java.lang.String str59 = locale52.getDisplayLanguage();
        java.lang.String str60 = property5.getAsText(locale52);
        boolean boolean61 = locale52.hasExtensions();
        java.util.Set<java.lang.Character> charSet62 = locale52.getExtensionKeys();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2945759L + "'", long14 == 2945759L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9" + "'", str23, "9");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "9" + "'", str57, "9");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "9" + "'", str60, "9");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(charSet62);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str10 = iSOChronology9.toString();
        org.joda.time.DurationField durationField11 = iSOChronology9.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        int[] intArray18 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = iSOChronology9.getZone();
        long long23 = dateTimeZone19.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale24 = java.util.Locale.US;
        boolean boolean25 = dateTimeZone19.equals((java.lang.Object) locale24);
        long long29 = dateTimeZone19.convertLocalToUTC((long) ' ', true, (long) '4');
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 'u', dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMillisOfSecond(316);
        long long34 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime32, 1707644767103L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withDayOfWeek(737);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 737 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str10, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1999L) + "'", long23 == (-1999L));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1967L) + "'", long29 == (-1967L));
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 317L + "'", long34 == 317L);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        java.util.Locale locale2 = new java.util.Locale("monthOfYear", "2022-02-11T09:47:48.967");
        org.junit.Assert.assertEquals(locale2.toString(), "monthofyear_2022-02-11T09:47:48.967");
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = property5.getName();
        int int15 = property5.getLeapAmount();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hourOfDay" + "'", str14, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setExtension('a', "fr_CA");
        java.util.Locale locale10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setUnicodeLocaleKeyword("2022-02-11T09:46:14.764Z", "2022-02-11T09:53:09.038");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:46:14.764Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "gmt__#a-fr-ca");
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withMillisOfDay(999);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withPeriodAdded(readablePeriod28, 49);
        int int31 = localDateTime30.getYearOfCentury();
        int int32 = localDateTime30.getYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35345833]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707644943834L + "'", long23 == 1707644943834L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 24 + "'", int31 == 24);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2024 + "'", int32 == 2024);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2031-11-12T09:46:33.927", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2031-11-12t09:46:33.927");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withMillisOfDay(59);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMillis(0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = property34.getFieldType();
        org.joda.time.LocalDateTime localDateTime36 = property34.roundCeilingCopy();
        int int37 = property34.getLeapAmount();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:01.999" + "'", str24, "+00:00:01.999");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        java.util.Locale locale1 = new java.util.Locale("0");
        java.util.Locale locale3 = new java.util.Locale("0097-02-18T09:44:15.719");
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale6 = builder4.build();
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale3.getDisplayCountry(locale6);
        java.lang.String str9 = locale1.getDisplayCountry(locale3);
        java.util.Locale locale11 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Locale locale14 = new java.util.Locale("0");
        java.lang.String str15 = locale11.getDisplayName(locale14);
        java.lang.String str16 = locale11.getDisplayLanguage();
        boolean boolean17 = locale11.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("ita");
        java.lang.String str20 = locale11.getDisplayCountry(locale19);
        java.lang.String str21 = locale11.getDisplayName();
        java.lang.String str22 = locale11.getDisplayName();
        java.lang.String str23 = locale3.getDisplayVariant(locale11);
        java.lang.String str24 = locale3.getDisplayName();
        org.junit.Assert.assertEquals(locale1.toString(), "0");
        org.junit.Assert.assertEquals(locale3.toString(), "0097-02-18t09:44:15.719");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale11.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale14.toString(), "0");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "isochronology[etc/utc]" + "'", str15, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "isochronology[etc/utc]" + "'", str16, "isochronology[etc/utc]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ita");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "isochronology[etc/utc]" + "'", str21, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "isochronology[etc/utc]" + "'", str22, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0097-02-18t09:44:15.719" + "'", str24, "0097-02-18t09:44:15.719");
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Locale locale4 = new java.util.Locale("0");
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2031-11-12T09:45:37.997");
        java.lang.String str8 = locale1.getDisplayScript(locale7);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str10 = iSOChronology9.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = iSOChronology9.add(readablePeriod11, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField15 = iSOChronology9.hours();
        org.joda.time.DurationField durationField16 = iSOChronology9.centuries();
        org.joda.time.DurationField durationField17 = iSOChronology9.minutes();
        boolean boolean18 = locale1.equals((java.lang.Object) iSOChronology9);
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "0");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "isochronology[etc/utc]" + "'", str5, "isochronology[etc/utc]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iSOChronology9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str10, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfCentury(12);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds(23);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-11T09:45:43.306", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.Chronology chronology10 = iSOChronology1.withZone(dateTimeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone9.toTimeZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(22);
        int int15 = localDateTime12.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withMonthOfYear(253);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 253 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = iSOChronology0.add((long) 42, 1707644862048L, 35127201);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1707644862048 * 35127201");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        long long12 = iSOChronology0.add(59L, 1644572646636L, 50);
        org.joda.time.DurationField durationField13 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 82228632331859L + "'", long12 == 82228632331859L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray5 = strSet4.toArray();
        java.util.Iterator<java.lang.String> strItor6 = strSet4.iterator();
        boolean boolean7 = strSet4.isEmpty();
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean9 = strSet8.isEmpty();
        boolean boolean11 = strSet8.add("+00:00:00.008");
        boolean boolean12 = strSet4.retainAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.stream.Stream<java.lang.String> strStream13 = strSet8.parallelStream();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField16 = iSOChronology15.halfdays();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.TimeZone.setDefault(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology24 = iSOChronology15.withZone(dateTimeZone23);
        long long27 = dateTimeZone23.adjustOffset((-1L), false);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 35042587, dateTimeZone23);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.minuteOfHour();
        int int31 = property30.get();
        org.joda.time.LocalDateTime localDateTime33 = property30.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withWeekyear(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withSecondOfMinute(56);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = strSet8.contains((java.lang.Object) localDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 44 + "'", int31 == 44);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) '4');
        int int22 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology25.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField30 = iSOChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.era();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfEra((int) 'a');
        int[] intArray40 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.withDurationAdded(readableDuration41, (int) '4');
        int[] intArray44 = localDateTime43.getValues();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusYears(2);
        long long48 = iSOChronology25.set((org.joda.time.ReadablePartial) localDateTime46, 1L);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minusMonths((int) (short) 100);
        boolean boolean51 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        int int52 = localDateTime23.getDayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str27, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[2022, 2, 11, 35346091]");
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1707644944092L + "'", long48 == 1707644944092L);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        int int13 = localDateTime12.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = property19.getAsShortText(locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = property19.getAsText(locale23);
        org.joda.time.LocalDateTime localDateTime26 = property19.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = property19.roundHalfEvenCopy();
        boolean boolean28 = localDateTime12.equals((java.lang.Object) localDateTime27);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.DurationField durationField31 = iSOChronology29.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        int[] intArray38 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime34, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = iSOChronology29.getZone();
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime42 = localDateTime27.toDateTime(dateTimeZone39);
        java.lang.String str43 = dateTime42.toString();
        int int44 = property9.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField47 = iSOChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology46.era();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        int int54 = localDateTime53.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = property60.getAsShortText(locale61);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = property60.getAsText(locale64);
        org.joda.time.LocalDateTime localDateTime67 = property60.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = property60.roundHalfEvenCopy();
        boolean boolean69 = localDateTime53.equals((java.lang.Object) localDateTime68);
        org.joda.time.chrono.ISOChronology iSOChronology70 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str71 = iSOChronology70.toString();
        org.joda.time.DurationField durationField72 = iSOChronology70.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology73 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology73.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology73);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusDays((int) (byte) 0);
        int[] intArray79 = iSOChronology70.get((org.joda.time.ReadablePartial) localDateTime75, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone80 = iSOChronology70.getZone();
        boolean boolean82 = dateTimeZone80.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime83 = localDateTime68.toDateTime(dateTimeZone80);
        java.lang.String str84 = dateTime83.toString();
        int int85 = property50.compareTo((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean86 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.ReadableInstant readableInstant87 = null;
        boolean boolean88 = dateTime83.isAfter(readableInstant87);
        org.joda.time.DateTimeZone dateTimeZone89 = dateTime83.getZone();
        org.joda.time.Chronology chronology90 = iSOChronology0.withZone(dateTimeZone89);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = iSOChronology0.getDateTimeMillis(33196386, 35311328, 35260829, 752);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35311328 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "9" + "'", str25, "9");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(iSOChronology29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str30, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-11T10:00:00.000+00:00:01.999" + "'", str43, "2022-02-11T10:00:00.000+00:00:01.999");
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9" + "'", str62, "9");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "English (Canada)" + "'", str65, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "9" + "'", str66, "9");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(iSOChronology70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str71, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(iSOChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2022-02-11T10:00:00.000+00:00:01.999" + "'", str84, "2022-02-11T10:00:00.000+00:00:01.999");
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(chronology90);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.era();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra((int) 'a');
        int[] intArray37 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime33, (long) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withDurationAdded(readableDuration38, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDateTime40.getFieldType((int) (byte) 0);
        boolean boolean43 = localDateTime25.isSupported(dateTimeFieldType42);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = property49.getAsShortText(locale50);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = property49.getAsText(locale53);
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        int int57 = property49.getMaximumShortTextLength(locale56);
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.hourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.minusMinutes((int) '4');
        int int66 = property49.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime68 = property49.addToCopy((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property49.getFieldType();
        int int70 = localDateTime25.get(dateTimeFieldType69);
        org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField72 = iSOChronology71.halfdays();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology71.era();
        org.joda.time.DurationField durationField74 = iSOChronology71.halfdays();
        org.joda.time.DateTimeField dateTimeField75 = iSOChronology71.centuryOfEra();
        java.lang.Object obj76 = null;
        org.joda.time.chrono.ISOChronology iSOChronology77 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology77.dayOfYear();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology77);
        org.joda.time.chrono.ISOChronology iSOChronology80 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str81 = iSOChronology80.toString();
        org.joda.time.DurationField durationField82 = iSOChronology80.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology83 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology83.dayOfYear();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology83);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.minusDays((int) (byte) 0);
        int[] intArray89 = iSOChronology80.get((org.joda.time.ReadablePartial) localDateTime85, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone90 = iSOChronology80.getZone();
        java.lang.String str91 = dateTimeZone90.toString();
        org.joda.time.DateTime dateTime92 = localDateTime79.toDateTime(dateTimeZone90);
        org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime(obj76, dateTimeZone90);
        org.joda.time.Chronology chronology94 = iSOChronology71.withZone(dateTimeZone90);
        org.joda.time.DateTime dateTime95 = localDateTime25.toDateTime(dateTimeZone90);
        java.lang.String str97 = dateTimeZone90.getNameKey(0L);
        java.lang.String str98 = dateTimeZone90.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35346208]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707644944209L + "'", long23 == 1707644944209L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9" + "'", str51, "9");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English (Canada)" + "'", str54, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "9" + "'", str55, "9");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(iSOChronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(iSOChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(iSOChronology80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str81, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(iSOChronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(intArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:01.999" + "'", str91, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTime95);
// flaky:         org.junit.Assert.assertNull(str97);
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "+00:00:01.999" + "'", str98, "+00:00:01.999");
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        boolean boolean13 = property10.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.era();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra((int) 'a');
        int[] intArray25 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime21.getFields();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusHours(1);
        int int29 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.withTime(1, 23, 51, 23);
        int int37 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DurationField durationField38 = property10.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str45 = nameProvider39.getShortName(locale41, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str46 = property10.getAsShortText(locale41);
        java.lang.String str47 = locale4.getDisplayScript(locale41);
        java.lang.String str48 = locale41.getDisplayLanguage();
        java.util.Locale.Builder builder49 = builder3.setLocale(locale41);
        java.util.Locale locale50 = builder3.build();
        java.util.Locale.Builder builder51 = builder3.clear();
        org.joda.time.tz.NameProvider nameProvider52 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.lang.String str54 = locale53.getDisplayVariant();
        java.lang.String str57 = nameProvider52.getName(locale53, "English (Canada)", "Etc/UTC");
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str61 = nameProvider52.getShortName(locale58, "2022-02-11T09:43:52.830", "2022-02-11T09:43:58.520");
        java.util.Locale locale62 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.hourOfDay();
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = property68.getAsShortText(locale69);
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.lang.String str73 = locale71.getDisplayName(locale72);
        java.lang.String str74 = property68.getAsText(locale72);
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        int int76 = property68.getMaximumShortTextLength(locale75);
        java.lang.String str77 = locale62.getDisplayName(locale75);
        java.lang.String str78 = locale75.getDisplayVariant();
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str81 = locale75.getDisplayCountry(locale80);
        java.lang.String str84 = nameProvider52.getShortName(locale75, "2022-02-11T09:44:06.998", "2022-02-11T09:44:00.457");
        java.util.Locale.Category category85 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale86 = java.util.Locale.getDefault(category85);
        java.util.Locale locale87 = java.util.Locale.US;
        java.util.Locale.setDefault(category85, locale87);
        java.util.Locale locale90 = java.util.Locale.forLanguageTag("yearOfCentury");
        java.util.Locale.setDefault(category85, locale90);
        java.lang.String str94 = nameProvider52.getShortName(locale90, "908", "2022-02-11T09:44:35.915");
        java.util.Locale.Builder builder95 = builder3.setLocale(locale90);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder97 = builder3.setLanguageTag("+00:48:42.789");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: +00:48:42.789 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(durationField38);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(nameProvider52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "9" + "'", str70, "9");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "English (Canada)" + "'", str73, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "9" + "'", str74, "9");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "cinese (Cina)" + "'", str77, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + category85 + "' != '" + java.util.Locale.Category.FORMAT + "'", category85.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "");
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str5 = nameProvider0.getName(locale1, "English (Canada)", "Etc/UTC");
        java.lang.String str6 = locale1.getDisplayCountry();
        java.lang.String str7 = locale1.getDisplayCountry();
        java.lang.String str8 = locale1.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet9 = locale1.getExtensionKeys();
        java.util.Locale locale10 = locale1.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = locale1.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japanese" + "'", str8, "Japanese");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        int int20 = localDateTime19.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfCentury(23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDayOfYear((-19));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMonthOfYear(10);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        java.lang.String str19 = iSOChronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField22 = iSOChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.era();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYearOfEra((int) 'a');
        int[] intArray32 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withDurationAdded(readableDuration33, (int) '4');
        int[] intArray36 = localDateTime35.getValues();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusYears(2);
        long long40 = iSOChronology17.set((org.joda.time.ReadablePartial) localDateTime38, 1L);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField44 = iSOChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.era();
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYearOfEra((int) 'a');
        int[] intArray54 = iSOChronology43.get((org.joda.time.ReadablePartial) localDateTime50, (long) 100);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.withDurationAdded(readableDuration55, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDateTime57.getFieldType((int) (byte) 0);
        boolean boolean60 = localDateTime42.isSupported(dateTimeFieldType59);
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.lang.String str68 = property66.getAsShortText(locale67);
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale69.getDisplayName(locale70);
        java.lang.String str72 = property66.getAsText(locale70);
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        int int74 = property66.getMaximumShortTextLength(locale73);
        org.joda.time.chrono.ISOChronology iSOChronology75 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology75.dayOfYear();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property80 = localDateTime77.hourOfDay();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.minusMinutes((int) '4');
        int int83 = property66.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime85 = property66.addToCopy((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property66.getFieldType();
        int int87 = localDateTime42.get(dateTimeFieldType86);
        int int88 = localDateTime14.indexOf(dateTimeFieldType86);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime14.minusMinutes(12);
        int int91 = localDateTime14.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str19, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[2022, 2, 11, 35346284]");
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1707644944285L + "'", long40 == 1707644944285L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "9" + "'", str68, "9");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "English (Canada)" + "'", str71, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "9" + "'", str72, "9");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(iSOChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 6 + "'", int91 == 6);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField12 = iSOChronology0.minutes();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DurationField durationField23 = iSOChronology13.months();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology13.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        long long27 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime25, 1644572713159L);
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572944320L + "'", long27 == 1644572944320L);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-11T09:47:22.947", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(35127201, 35432039, 14, 0, 923, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 923 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        timeZone3.setRawOffset((int) (byte) 0);
        java.time.ZoneId zoneId10 = timeZone3.toZoneId();
        timeZone3.setID("2022-02-11T00:46:26.985");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(zoneId10);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("+10:00", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=+10:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra((int) 'a');
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        int int23 = localDateTime22.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = localDateTime22.toString(dateTimeFormatter24);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsShortText(locale32);
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = property31.getAsText(locale35);
        org.joda.time.LocalDateTime localDateTime38 = property31.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = property31.roundHalfEvenCopy();
        java.lang.String str40 = localDateTime39.toString();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.weekOfWeekyear();
        int int44 = localDateTime39.getYear();
        boolean boolean45 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        java.lang.String str48 = iSOChronology46.toString();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology46.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField51 = iSOChronology50.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology50.era();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withYearOfEra((int) 'a');
        int[] intArray61 = iSOChronology50.get((org.joda.time.ReadablePartial) localDateTime57, (long) 100);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.withDurationAdded(readableDuration62, (int) '4');
        int[] intArray65 = localDateTime64.getValues();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plusYears(2);
        long long69 = iSOChronology46.set((org.joda.time.ReadablePartial) localDateTime67, 1L);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology72 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField73 = iSOChronology72.halfdays();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology72.era();
        org.joda.time.chrono.ISOChronology iSOChronology75 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology75.dayOfYear();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withYearOfEra((int) 'a');
        int[] intArray83 = iSOChronology72.get((org.joda.time.ReadablePartial) localDateTime79, (long) 100);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime79.withDurationAdded(readableDuration84, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = localDateTime86.getFieldType((int) (byte) 0);
        boolean boolean89 = localDateTime71.isSupported(dateTimeFieldType88);
        int int90 = localDateTime22.indexOf(dateTimeFieldType88);
        int int91 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime22.withMillisOfDay(54);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime93);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:49:06.381" + "'", str25, "2022-02-11T09:49:06.381");
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English (Canada)" + "'", str36, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9" + "'", str37, "9");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-11T10:00:00.000" + "'", str40, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str48, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[2022, 2, 11, 35346381]");
        org.junit.Assert.assertNotNull(localDateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1707644944382L + "'", long69 == 1707644944382L);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(iSOChronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(iSOChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(intArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getName(locale1, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale7 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale1.getDisplayVariant(locale7);
        java.lang.String str11 = locale1.getDisplayScript();
        java.lang.String str12 = locale1.getDisplayScript();
        java.lang.String str13 = locale1.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale1.getUnicodeLocaleType("2924901");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2924901");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals(locale7.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        java.util.Locale locale1 = new java.util.Locale("Kanada");
        org.junit.Assert.assertEquals(locale1.toString(), "kanada");
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = iSOChronology0.add(readablePeriod13, (long) 51, 971);
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField18 = iSOChronology0.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 51L + "'", long16 == 51L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        java.util.Locale locale11 = new java.util.Locale("970", "2022-02-11T09:43:55.701");
        java.lang.String str12 = property8.getAsShortText(locale11);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusMinutes((int) '4');
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.millisOfSecond();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.era();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = property34.getAsShortText(locale35);
        java.lang.String str37 = property28.getAsShortText(locale35);
        java.lang.String str38 = locale35.getVariant();
        java.lang.String str39 = property21.getAsText(locale35);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = locale35.getDisplayCountry(locale40);
        java.lang.String str43 = locale11.getDisplayName(locale35);
        java.util.Set<java.lang.String> strSet44 = locale35.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(locale11.toString(), "970_2022-02-11T09:43:55.701");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2" + "'", str37, "2");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "480" + "'", str39, "480");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "970 (2022-02-11T09:43:55.701)" + "'", str43, "970 (2022-02-11T09:43:55.701)");
        org.junit.Assert.assertNotNull(strSet44);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra((int) 'a');
        int[] intArray16 = iSOChronology5.get((org.joda.time.ReadablePartial) localDateTime12, (long) 100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withDurationAdded(readableDuration17, (int) '4');
        long long21 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime19, 2022L);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = localDateTime19.isSupported(durationFieldType22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withPeriodAdded(readablePeriod24, (-19034));
        int int27 = localDateTime19.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime19.minusHours(30);
        int int30 = localDateTime29.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localDateTime29.getValue(71111255);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 71111255");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572944499L + "'", long21 == 1644572944499L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 41 + "'", int30 == 41);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str3 = iSOChronology2.toString();
        org.joda.time.DurationField durationField4 = iSOChronology2.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        int[] intArray11 = iSOChronology2.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = iSOChronology2.getZone();
        java.lang.String str13 = dateTimeZone12.toString();
        java.lang.String str14 = dateTimeZone12.toString();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsShortText(locale21);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = property20.getAsText(locale24);
        org.joda.time.LocalDateTime localDateTime27 = property20.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = property20.roundHalfEvenCopy();
        java.lang.String str29 = localDateTime28.toString();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks((int) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plus(readableDuration32);
        boolean boolean34 = dateTimeZone12.equals((java.lang.Object) readableDuration32);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        java.lang.String str38 = iSOChronology36.toString();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = iSOChronology36.withZone(dateTimeZone41);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleKeys();
        java.lang.String str48 = dateTimeZone41.getName((long) (byte) 10, locale45);
        java.lang.String str49 = locale45.getDisplayLanguage();
        java.lang.String str50 = dateTimeZone12.getName(1707644656353L, locale45);
        java.util.Locale.setDefault(category0, locale45);
        java.util.Locale locale53 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str54 = locale53.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale53);
        java.util.Locale locale56 = java.util.Locale.getDefault(category0);
        java.util.Locale locale57 = java.util.Locale.getDefault(category0);
        java.util.Locale locale58 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(iSOChronology2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str3, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:01.999" + "'", str13, "+00:00:01.999");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:01.999" + "'", str14, "+00:00:01.999");
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9" + "'", str22, "9");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (Canada)" + "'", str25, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9" + "'", str26, "9");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-11T10:00:00.000" + "'", str29, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str38, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strSet47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:01.999" + "'", str48, "+00:00:01.999");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "German" + "'", str49, "German");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:01.999" + "'", str50, "+00:00:01.999");
        org.junit.Assert.assertEquals(locale53.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "isochronology[etc/utc]");
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) '4');
        int int22 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = property5.roundCeilingCopy();
        java.lang.String str24 = property5.getAsString();
        org.joda.time.LocalDateTime localDateTime25 = property5.getLocalDateTime();
        org.joda.time.Chronology chronology26 = localDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9" + "'", str24, "9");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        int int20 = localDateTime19.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withEra(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(55);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField13 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMonths((int) 'u');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusSeconds(2022);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        int int30 = localDateTime29.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = property39.getAsShortText(locale40);
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = property39.getAsText(locale43);
        org.joda.time.LocalDateTime localDateTime46 = property39.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str48 = iSOChronology47.toString();
        org.joda.time.DurationField durationField49 = iSOChronology47.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        int[] intArray56 = iSOChronology47.get((org.joda.time.ReadablePartial) localDateTime52, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = iSOChronology47.getZone();
        java.lang.String str58 = dateTimeZone57.toString();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime46, dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = localDateTime66.getFieldType(0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime32.property(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime32.yearOfCentury();
        boolean boolean72 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property73 = localDateTime24.monthOfYear();
        long long75 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime24, 1644572685608L);
        org.joda.time.DateTimeZone dateTimeZone76 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English (Canada)" + "'", str44, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9" + "'", str45, "9");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(iSOChronology47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str48, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:01.999" + "'", str58, "+00:00:01.999");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1952243344652L + "'", long75 == 1952243344652L);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = iSOChronology1.weeks();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 641, (org.joda.time.Chronology) iSOChronology1);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = iSOChronology1.add(1644572915299L, 1707644877505L, 35213176);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1707644877505 * 35213176");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        int int26 = strSet13.size();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str29 = locale28.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.util.Locale.setDefault(locale30);
        java.util.Set<java.lang.String> strSet34 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale28.getDisplayCountry(locale30);
        java.lang.String str36 = locale28.getScript();
        java.util.Set<java.lang.String> strSet37 = locale28.getUnicodeLocaleKeys();
        boolean boolean38 = strSet13.containsAll((java.util.Collection<java.lang.String>) strSet37);
        strSet13.clear();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField42 = iSOChronology41.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology41.era();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology41);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays(836);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.era();
        boolean boolean50 = strSet13.remove((java.lang.Object) localDateTime46);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField5 = iSOChronology0.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = iSOChronology0.add(readablePeriod7, (long) 1970, 31);
        org.joda.time.Chronology chronology11 = iSOChronology0.withUTC();
        java.lang.String str12 = iSOChronology0.toString();
        org.joda.time.DurationField durationField13 = iSOChronology0.millis();
        org.joda.time.DurationField durationField14 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1970L + "'", long10 == 1970L);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str12, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:46:52.499Z");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:46:52.499z");
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        java.lang.String str10 = iSOChronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.era();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfEra((int) 'a');
        int[] intArray23 = iSOChronology12.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withDurationAdded(readableDuration24, (int) '4');
        int[] intArray27 = localDateTime26.getValues();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusYears(2);
        long long31 = iSOChronology8.set((org.joda.time.ReadablePartial) localDateTime29, 1L);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.minusMonths((int) (short) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = localDateTime29.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField36 = iSOChronology35.halfdays();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.era();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYearOfEra((int) 'a');
        int[] intArray46 = iSOChronology35.get((org.joda.time.ReadablePartial) localDateTime42, (long) 100);
        iSOChronology7.validate((org.joda.time.ReadablePartial) localDateTime29, intArray46);
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology7.yearOfEra();
        org.joda.time.DurationField durationField49 = iSOChronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology7.era();
        org.joda.time.DurationField durationField51 = iSOChronology7.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(22478731, 35208074, (-21), 300, 35141054, 63, 377, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 300 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str10, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[2022, 2, 11, 35346752]");
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1707644944753L + "'", long31 == 1707644944753L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology8);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology8.era();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology8.weekyearOfCentury();
        long long18 = iSOChronology8.add(1644572637306L, 1644572653046L, 6);
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology8.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int int27 = localDateTime24.getWeekyear();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.minus(readableDuration29);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField32 = iSOChronology31.halfdays();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.TimeZone.setDefault(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.Chronology chronology40 = iSOChronology31.withZone(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration29, dateTimeZone39);
        int int43 = dateTimeZone39.getOffsetFromLocal((long) (short) 100);
        int int45 = dateTimeZone39.getStandardOffset(0L);
        org.joda.time.Chronology chronology46 = iSOChronology8.withZone(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now(chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(467839, 58, 35195796, 498, 35328570, 35181813, 1969, chronology46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 498 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 11512008555582L + "'", long18 == 11512008555582L);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        java.util.Locale locale2 = new java.util.Locale("2021-10-19T20:00:00.000", "2088-10-05T12:37:52.237");
        org.junit.Assert.assertEquals(locale2.toString(), "2021-10-19t20:00:00.000_2088-10-05T12:37:52.237");
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.minuteOfHour();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str35 = iSOChronology34.toString();
        org.joda.time.DurationField durationField36 = iSOChronology34.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        int[] intArray43 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime39, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology34.getZone();
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDateTime33.toDateTime(dateTimeZone44);
        boolean boolean47 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology49);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str53 = iSOChronology52.toString();
        org.joda.time.DurationField durationField54 = iSOChronology52.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        int[] intArray61 = iSOChronology52.get((org.joda.time.ReadablePartial) localDateTime57, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = iSOChronology52.getZone();
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.DateTime dateTime64 = localDateTime51.toDateTime(dateTimeZone62);
        org.joda.time.chrono.ISOChronology iSOChronology65 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology65);
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str69 = iSOChronology68.toString();
        org.joda.time.DurationField durationField70 = iSOChronology68.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        int[] intArray77 = iSOChronology68.get((org.joda.time.ReadablePartial) localDateTime73, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone78 = iSOChronology68.getZone();
        java.lang.String str79 = dateTimeZone78.toString();
        org.joda.time.DateTime dateTime80 = localDateTime67.toDateTime(dateTimeZone78);
        boolean boolean81 = dateTime64.isAfter((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        boolean boolean83 = dateTime64.isEqual(readableInstant82);
        boolean boolean84 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime64);
        java.lang.String str85 = dateTime64.toString();
        org.joda.time.Chronology chronology86 = dateTime64.getChronology();
        boolean boolean87 = iSOChronology1.equals((java.lang.Object) chronology86);
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime(1707644747529L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.era();
        java.util.Date date90 = localDateTime88.toDate();
        org.joda.time.LocalDateTime localDateTime91 = org.joda.time.LocalDateTime.fromDateFields(date90);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str19, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:01.999" + "'", str29, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(iSOChronology34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str35, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:01.999" + "'", str45, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(iSOChronology52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str53, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:01.999" + "'", str63, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(iSOChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(iSOChronology68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str69, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(iSOChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:01.999" + "'", str79, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-11T09:49:06.812+00:00:01.999" + "'", str85, "2022-02-11T09:49:06.812+00:00:01.999");
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(date90);
// flaky:         org.junit.Assert.assertEquals(date90.toString(), "Sun Feb 11 09:45:49 GMT 2024");
        org.junit.Assert.assertNotNull(localDateTime91);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfCeilingCopy();
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale14 = new java.util.Locale("", "Etc/UTC");
        java.lang.String str15 = locale11.getDisplayLanguage(locale14);
        int int16 = property5.getMaximumShortTextLength(locale11);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str18 = iSOChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.millisOfDay();
        boolean boolean20 = property5.equals((java.lang.Object) iSOChronology17);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str22 = iSOChronology21.toString();
        org.joda.time.DurationField durationField23 = iSOChronology21.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        int[] intArray30 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology21.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        int int34 = dateTimeZone31.getStandardOffset(1707644640457L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.Chronology chronology36 = iSOChronology17.withZone(dateTimeZone31);
        java.lang.String str37 = iSOChronology17.toString();
        org.joda.time.DurationField durationField38 = iSOChronology17.days();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology17.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str7, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale14.toString(), "_ETC/UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(iSOChronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str18, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(iSOChronology21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str22, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:01.999" + "'", str32, "+00:00:01.999");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1999 + "'", int34 == 1999);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str37, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:47:39.198");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField11 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.hourOfDay();
        org.joda.time.Chronology chronology14 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (byte) 0);
        long long24 = dateTimeZone17.getMillisKeepLocal(dateTimeZone20, 1707644669306L);
        java.lang.String str26 = dateTimeZone17.getNameKey(1644572807744L);
        java.lang.String str28 = dateTimeZone17.getName((long) (short) 0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str5, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:01.999" + "'", str15, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1707644671297L + "'", long24 == 1707644671297L);
// flaky:         org.junit.Assert.assertNull(str26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:01.999" + "'", str28, "+00:00:01.999");
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = property12.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property12.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime19, dateTimeZone30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField34 = iSOChronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.era();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYearOfEra((int) 'a');
        int[] intArray44 = iSOChronology33.get((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray45 = localDateTime40.getFields();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.minusHours(1);
        int int48 = localDateTime40.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime40.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime40.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property53 = localDateTime40.yearOfCentury();
        int int54 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime40.plusSeconds((int) (short) 100);
        int int57 = localDateTime40.getEra();
        int[] intArray59 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime40, 1707644669306L);
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology0.millisOfSecond();
        org.joda.time.DurationField durationField61 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField62 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(iSOChronology20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str21, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:01.999" + "'", str31, "+00:00:01.999");
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[2024, 2, 11, 35071305]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getDayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str6 = iSOChronology5.toString();
        org.joda.time.DurationField durationField7 = iSOChronology5.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        int[] intArray14 = iSOChronology5.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology5.getZone();
        long long19 = dateTimeZone15.convertLocalToUTC((long) 0, true, 0L);
        long long21 = dateTimeZone15.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology22 = iSOChronology2.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology2.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str26 = iSOChronology25.toString();
        org.joda.time.DurationField durationField27 = iSOChronology25.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int[] intArray34 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology25.getZone();
        long long39 = dateTimeZone35.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.Chronology chronology41 = iSOChronology2.withZone(dateTimeZone35);
        long long43 = dateTimeZone35.nextTransition((long) 14);
        long long45 = dateTimeZone35.previousTransition(1707644686574L);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime47 = localDateTime0.toDateTime(dateTimeZone35);
        boolean boolean48 = dateTimeZone35.isFixed();
        long long50 = dateTimeZone35.nextTransition(1707223449273L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str6, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1999L) + "'", long19 == (-1999L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str26, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1999L) + "'", long39 == (-1999L));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 14L + "'", long43 == 14L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1707644686574L + "'", long45 == 1707644686574L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1707223449273L + "'", long50 == 1707223449273L);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        java.lang.String str7 = property5.getAsString();
        java.lang.String str8 = property5.getAsText();
        boolean boolean9 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfFloorCopy();
        int int11 = localDateTime10.getMonthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9" + "'", str8, "9");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.LocalDateTime localDateTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        int int10 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusDays(2922789);
        int int13 = localDateTime8.getSecondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getCountry();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsShortText(locale16);
        java.lang.String str18 = property9.getAsShortText(locale16);
        java.lang.String str19 = locale16.getVariant();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        java.lang.String str21 = locale16.getDisplayScript(locale20);
        java.lang.String str22 = locale20.getDisplayVariant();
        java.lang.String str23 = locale0.getDisplayVariant(locale20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        int int33 = localDateTime28.getMonthOfYear();
        int[] intArray34 = localDateTime28.getValues();
        org.joda.time.LocalDateTime.Property property35 = localDateTime28.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = localDateTime28.toString(dateTimeFormatter36);
        int int38 = localDateTime28.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime28.minus(readablePeriod39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime28.yearOfCentury();
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str48 = nameProvider43.getName(locale44, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale50 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str51 = locale50.getISO3Country();
        java.lang.String str52 = locale50.getScript();
        java.lang.String str53 = locale44.getDisplayVariant(locale50);
        java.lang.String str54 = locale44.getDisplayScript();
        java.lang.String str55 = locale44.getDisplayScript();
        java.util.Set<java.lang.Character> charSet56 = locale44.getExtensionKeys();
        java.lang.String str57 = locale44.getDisplayScript();
        java.lang.String str58 = locale44.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime59 = property41.setCopy("ita", locale44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ita\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2022, 2, 11, 35444046]");
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:50:44.046" + "'", str37, "2022-02-11T09:50:44.046");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals(locale50.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime32 = localDateTime17.toDateTime(dateTimeZone29);
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.lang.String str36 = locale34.getDisplayScript(locale35);
        java.lang.String str37 = dateTimeZone29.getShortName(1644572652885L, locale34);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = localDateTime42.isSupported(dateTimeFieldType45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime42.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime48 = property47.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime50 = property47.addWrapFieldToCopy(52);
        java.util.Locale locale52 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = locale52.getScript();
        int int55 = property47.getMaximumTextLength(locale52);
        java.lang.String str56 = locale34.getDisplayVariant(locale52);
        boolean boolean57 = locale52.hasExtensions();
        java.util.Set<java.lang.String> strSet58 = locale52.getUnicodeLocaleKeys();
        org.joda.time.tz.NameProvider nameProvider59 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str62 = locale61.getDisplayScript();
        java.lang.String str65 = nameProvider59.getShortName(locale61, "Chinese", "ISOChronology[Etc/UTC]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider59);
        java.util.Locale.Category category67 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.util.Locale locale69 = java.util.Locale.US;
        java.util.Locale.setDefault(category67, locale69);
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("yearOfCentury");
        java.util.Locale.setDefault(category67, locale72);
        java.util.Locale locale74 = java.util.Locale.getDefault(category67);
        java.util.Set<java.lang.String> strSet75 = locale74.getUnicodeLocaleKeys();
        java.lang.String str78 = nameProvider59.getName(locale74, "0097-02-18T09:46:35.446", "0097-02-18T09:44:48.140");
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("hi!");
        org.joda.time.chrono.ISOChronology iSOChronology81 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology81.dayOfYear();
        java.lang.String str83 = iSOChronology81.toString();
        org.joda.time.DateTimeField dateTimeField84 = iSOChronology81.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField85 = iSOChronology81.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology87 = iSOChronology81.withZone(dateTimeZone86);
        boolean boolean89 = dateTimeZone86.isStandardOffset((long) (short) 1);
        java.util.Locale locale92 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str93 = locale92.getDisplayCountry();
        java.lang.String str94 = dateTimeZone86.getShortName(97L, locale92);
        java.lang.String str95 = locale80.getDisplayScript(locale92);
        java.lang.String str98 = nameProvider59.getShortName(locale80, "0097-02-18T09:45:50.802", "");
        java.lang.String str99 = locale52.getDisplayLanguage(locale80);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 7 + "'", int3 == 7);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iSOChronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str20, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:01.999" + "'", str37, "+00:00:01.999");
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertEquals(locale52.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(nameProvider59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.FORMAT + "'", category67.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(iSOChronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str83, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals(locale92.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:00:01.999" + "'", str94, "+00:00:01.999");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "isochronology[etc/utc]" + "'", str99, "isochronology[etc/utc]");
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getUnicodeLocaleType("2031-11-14T19:46:19.960");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2031-11-14T19:46:19.960");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfSecond();
        org.joda.time.Chronology chronology8 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusWeeks((-1));
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        java.lang.String str21 = iSOChronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology19.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = iSOChronology19.withZone(dateTimeZone24);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsShortText(locale32);
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = property31.getAsText(locale35);
        org.joda.time.LocalDateTime localDateTime38 = property31.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusSeconds(6);
        int[] intArray42 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime40, (long) 58);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime15, intArray42);
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField45 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str21, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English (Canada)" + "'", str36, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9" + "'", str37, "9");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 2057]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.era();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra((int) 'a');
        int[] intArray37 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime33, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = localDateTime33.getFields();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusHours(1);
        int int41 = localDateTime33.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime33.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property46 = localDateTime33.yearOfCentury();
        int int47 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime12.plusWeeks(945);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime12.withEra(35260770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35260770 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:01.999" + "'", str24, "+00:00:01.999");
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DurationField durationField5 = iSOChronology1.seconds();
        org.joda.time.DurationField durationField6 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int) (short) 0, 71114197, 35316324, 1365019, 599, 35169682);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1365019 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str2, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:46:26.068");
        java.lang.String str3 = locale1.getExtension('u');
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:46:26.068");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long10 = dateTimeZone8.previousTransition((long) 17);
        long long13 = dateTimeZone8.convertLocalToUTC(1709364013878L, true);
        java.lang.String str14 = dateTimeZone8.getID();
        long long17 = dateTimeZone8.convertLocalToUTC(1644572763734L, true);
        long long19 = dateTimeZone8.nextTransition(1707644678048L);
        long long21 = dateTimeZone8.convertUTCToLocal(726901157623448L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 17L + "'", long10 == 17L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1709364013878L + "'", long13 == 1709364013878L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572763734L + "'", long17 == 1644572763734L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1707644678048L + "'", long19 == 1707644678048L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 726901157623448L + "'", long21 == 726901157623448L);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str6 = nameProvider0.getShortName(locale2, "Chinese", "ISOChronology[Etc/UTC]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str14 = nameProvider9.getName(locale10, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale16 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = locale16.getScript();
        java.lang.String str19 = locale10.getDisplayVariant(locale16);
        java.lang.String str20 = locale10.getDisplayScript();
        java.lang.String str21 = locale10.getDisplayScript();
        java.lang.String str22 = locale10.getLanguage();
        java.lang.String str25 = nameProvider0.getName(locale10, "", "2022-02-11T10:05:47.691");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals(locale16.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str9 = timeZone3.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.centuryOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology12.millis();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology12.millisOfDay();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.TimeZone.setDefault(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.DurationField durationField31 = iSOChronology29.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        int[] intArray38 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime34, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = iSOChronology29.getZone();
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = localDateTime28.toDateTime(dateTimeZone39);
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology42);
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str46 = iSOChronology45.toString();
        org.joda.time.DurationField durationField47 = iSOChronology45.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        int[] intArray54 = iSOChronology45.get((org.joda.time.ReadablePartial) localDateTime50, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = iSOChronology45.getZone();
        java.lang.String str56 = dateTimeZone55.toString();
        org.joda.time.DateTime dateTime57 = localDateTime44.toDateTime(dateTimeZone55);
        boolean boolean58 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology60 = iSOChronology12.withZone(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone25);
        java.util.TimeZone timeZone62 = dateTimeZone25.toTimeZone();
        long long64 = dateTimeZone10.getMillisKeepLocal(dateTimeZone25, 1707644838303L);
        java.lang.String str65 = dateTimeZone25.toString();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(iSOChronology29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str30, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:01.999" + "'", str40, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(iSOChronology45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str46, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:01.999" + "'", str56, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1707644838303L + "'", long64 == 1707644838303L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology13 = iSOChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology0.add(readablePeriod14, (long) 46, 9);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField19 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 46L + "'", long17 == 46L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(36, 58);
        long long4 = dateTimeZone2.previousTransition(1707644753507L);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
        long long9 = dateTimeZone2.convertLocalToUTC(0L, false, 1707644906897L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1707644753507L + "'", long4 == 1707644753507L);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-133080000L) + "'", long9 == (-133080000L));
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField17 = iSOChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology16.era();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        int int24 = localDateTime23.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.hourOfDay();
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.lang.String str32 = property30.getAsShortText(locale31);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = property30.getAsText(locale34);
        org.joda.time.LocalDateTime localDateTime37 = property30.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = property30.roundHalfEvenCopy();
        boolean boolean39 = localDateTime23.equals((java.lang.Object) localDateTime38);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str41 = iSOChronology40.toString();
        org.joda.time.DurationField durationField42 = iSOChronology40.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        int[] intArray49 = iSOChronology40.get((org.joda.time.ReadablePartial) localDateTime45, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = iSOChronology40.getZone();
        boolean boolean52 = dateTimeZone50.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime53 = localDateTime38.toDateTime(dateTimeZone50);
        java.lang.String str54 = dateTime53.toString();
        int int55 = property20.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology56);
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str60 = iSOChronology59.toString();
        org.joda.time.DurationField durationField61 = iSOChronology59.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        int[] intArray68 = iSOChronology59.get((org.joda.time.ReadablePartial) localDateTime64, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone69 = iSOChronology59.getZone();
        java.lang.String str70 = dateTimeZone69.toString();
        org.joda.time.DateTime dateTime71 = localDateTime58.toDateTime(dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime71.getZone();
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime71.getZone();
        long long74 = dateTime71.getMillis();
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime71.getZone();
        boolean boolean76 = dateTime53.isAfter((org.joda.time.ReadableInstant) dateTime71);
        long long77 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.chrono.ISOChronology iSOChronology78 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField79 = iSOChronology78.dayOfYear();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology78);
        org.joda.time.DateTimeField dateTimeField81 = iSOChronology78.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology78.millisOfSecond();
        boolean boolean83 = property12.equals((java.lang.Object) iSOChronology78);
        org.joda.time.Chronology chronology84 = iSOChronology78.withUTC();
        org.joda.time.DateTimeZone dateTimeZone85 = iSOChronology78.getZone();
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology78.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9" + "'", str32, "9");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English (Canada)" + "'", str35, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(iSOChronology40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str41, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-11T10:00:00.000+00:00:01.999" + "'", str54, "2022-02-11T10:00:00.000+00:00:01.999");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(iSOChronology59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str60, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:01.999" + "'", str70, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1644572945627L + "'", long74 == 1644572945627L);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = iSOChronology0.years();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        int int7 = timeZone3.getRawOffset();
        int int8 = timeZone3.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.dayOfYear();
        org.joda.time.Chronology chronology6 = iSOChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.era();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        java.lang.String str3 = iSOChronology1.toString();
        org.joda.time.DurationField durationField4 = iSOChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(1644659318949L, (org.joda.time.Chronology) iSOChronology1);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str3, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder7 = builder5.setLanguage("Feb");
        java.util.Locale.Builder builder8 = builder5.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("270");
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str16 = nameProvider11.getName(locale12, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale18 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.getScript();
        java.lang.String str21 = locale12.getDisplayVariant(locale18);
        java.util.Locale.Builder builder22 = builder10.setLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setLanguage("2031-11-12T09:44:46.339");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2031-11-12T09:44:46.339 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(nameProvider11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(locale18.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField9 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField10 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:44:09.708", "Property[millisOfDay]", "CHN");
        java.lang.String str4 = locale3.getVariant();
        java.util.Locale locale5 = locale3.stripExtensions();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        boolean boolean14 = locale12.hasExtensions();
        java.lang.String str15 = locale3.getDisplayName(locale12);
        java.lang.Object obj16 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CHN" + "'", str4, "CHN");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11t09:44:09.708 (PROPERTY[MILLISOFDAY],CHN)" + "'", str15, "2022-02-11t09:44:09.708 (PROPERTY[MILLISOFDAY],CHN)");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        strSet1.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusHours(5);
        int int22 = localDateTime18.getDayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("0097-02-18T09:44:20.273");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("UTC");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.addUnicodeLocaleAttribute("2022-02-11T09:44:36.895");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:44:36.895 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("9");
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.era();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfEra((int) 'a');
        int[] intArray13 = iSOChronology2.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime9.getFields();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusHours(1);
        int int17 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.Chronology chronology18 = localDateTime9.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList26);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.util.Locale.setDefault(locale29);
        java.util.Set<java.lang.String> strSet33 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.lang.String[] strArray39 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList40);
        java.util.stream.Stream<java.lang.String> strStream43 = strList42.parallelStream();
        boolean boolean44 = strSet33.containsAll((java.util.Collection<java.lang.String>) strList42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet33);
        java.lang.String[] strArray52 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.lang.String[] strArray60 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList61);
        boolean boolean64 = strSet53.containsAll((java.util.Collection<java.lang.String>) strList61);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet53);
        boolean boolean66 = localDateTime19.equals((java.lang.Object) strSet53);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime19);
        java.util.Date date68 = localDateTime19.toDate();
        boolean boolean69 = timeZone1.inDaylightTime(date68);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English (Canada)" + "'", str31, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(date68);
// flaky:         org.junit.Assert.assertEquals(date68.toString(), "Fri Feb 11 09:49:07 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        boolean boolean6 = timeZone1.observesDaylightTime();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.TimeZone.setDefault(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int14 = timeZone10.getRawOffset();
        int int16 = timeZone10.getOffset((long) 53);
        boolean boolean17 = timeZone1.hasSameRules(timeZone10);
        timeZone10.setRawOffset(611);
        boolean boolean20 = timeZone10.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusHours(6);
        int int18 = localDateTime2.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        int int22 = localDateTime21.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = property28.getAsShortText(locale29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = property28.getAsText(locale32);
        org.joda.time.LocalDateTime localDateTime35 = property28.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = property28.roundHalfEvenCopy();
        boolean boolean37 = localDateTime21.equals((java.lang.Object) localDateTime36);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str39 = iSOChronology38.toString();
        org.joda.time.DurationField durationField40 = iSOChronology38.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        int[] intArray47 = iSOChronology38.get((org.joda.time.ReadablePartial) localDateTime43, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = iSOChronology38.getZone();
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime51 = localDateTime36.toDateTime(dateTimeZone48);
        int int52 = localDateTime36.getCenturyOfEra();
        org.joda.time.DateTime dateTime53 = localDateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        org.joda.time.DateTime dateTime55 = localDateTime2.toDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime2.plusMinutes(2922789);
        int int58 = localDateTime57.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withEra(35468231);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35468231 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str4, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:01.999" + "'", str14, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35347957 + "'", int18 == 35347957);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "9" + "'", str30, "9");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English (Canada)" + "'", str33, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9" + "'", str34, "9");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iSOChronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str39, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20 + "'", int58 == 20);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        long long27 = dateTimeZone23.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int[] intArray30 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime28, (long) 52);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField32 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField33 = iSOChronology0.millis();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = property39.getAsShortText(locale40);
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = property39.getAsText(locale43);
        int int46 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime47 = property39.roundFloorCopy();
        long long49 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime47, 46L);
        org.joda.time.DurationField durationField50 = iSOChronology0.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long58 = iSOChronology0.getDateTimeMillis(15, 442, 2, 100, 318, 248, 801);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str1, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str14, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1999L) + "'", long27 == (-1999L));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 2051]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English (Canada)" + "'", str44, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9" + "'", str45, "9");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644569998001L + "'", long49 == 1644569998001L);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.millisOfDay();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str35 = iSOChronology34.toString();
        org.joda.time.DurationField durationField36 = iSOChronology34.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        int[] intArray43 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime39, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology34.getZone();
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDateTime33.toDateTime(dateTimeZone44);
        boolean boolean47 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = iSOChronology1.withZone(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone14);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = property56.getAsShortText(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = property56.getAsText(locale60);
        org.joda.time.LocalDateTime localDateTime63 = property56.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = property56.roundHalfEvenCopy();
        java.lang.String str65 = localDateTime64.toString();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime64.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime64.withWeekOfWeekyear(50);
        boolean boolean73 = dateTimeZone14.isLocalDateTimeGap(localDateTime72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.secondOfMinute();
        java.util.Locale locale75 = java.util.Locale.CHINA;
        java.lang.String str76 = locale75.toLanguageTag();
        java.util.Set<java.lang.Character> charSet77 = locale75.getExtensionKeys();
        java.lang.String str78 = property74.getAsText(locale75);
        java.lang.String str79 = property74.getAsShortText();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str19, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:01.999" + "'", str29, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(iSOChronology34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[+00:00:01.999]" + "'", str35, "ISOChronology[+00:00:01.999]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 2099]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:01.999" + "'", str45, "+00:00:01.999");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9" + "'", str58, "9");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English (Canada)" + "'", str61, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9" + "'", str62, "9");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-11T10:00:00.000" + "'", str65, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zh-CN" + "'", str76, "zh-CN");
        org.junit.Assert.assertNotNull(charSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0" + "'", str78, "0");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:45:24.603");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:45:24.603");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusSeconds(17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withSecondOfMinute(58);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField22 = iSOChronology21.halfdays();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.util.TimeZone.setDefault(timeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.Chronology chronology30 = iSOChronology21.withZone(dateTimeZone29);
        java.lang.String str32 = dateTimeZone29.getName((long) 50);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime16, dateTimeZone29);
        int int35 = localDateTime16.getMillisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 35346104]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35346104 + "'", int35 == 35346104);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withPeriodAdded(readablePeriod34, 9);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.Chronology chronology39 = localDateTime36.getChronology();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime42 = property40.setCopy(72);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str14, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.008" + "'", str24, "+00:00:00.008");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = iSOChronology0.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) durationField16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str1, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str11, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.Interval interval8 = property5.toInterval();
        boolean boolean9 = property5.isLeap();
        int int10 = property5.getMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.TimeZone.setDefault(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology21 = iSOChronology12.withZone(dateTimeZone20);
        long long24 = dateTimeZone20.adjustOffset((-1L), false);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 35042587, dateTimeZone20);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str32 = iSOChronology31.toString();
        org.joda.time.DurationField durationField33 = iSOChronology31.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        int[] intArray40 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = iSOChronology31.getZone();
        long long45 = dateTimeZone41.convertLocalToUTC((long) 0, true, 0L);
        long long47 = dateTimeZone41.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology48 = iSOChronology28.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology28.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str52 = iSOChronology51.toString();
        org.joda.time.DurationField durationField53 = iSOChronology51.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        int[] intArray60 = iSOChronology51.get((org.joda.time.ReadablePartial) localDateTime56, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = iSOChronology51.getZone();
        long long65 = dateTimeZone61.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        org.joda.time.Chronology chronology67 = iSOChronology28.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime68 = localDateTime25.toDateTime(dateTimeZone61);
        long long69 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.LocalDateTime localDateTime70 = property5.withMinimumValue();
        java.lang.String str71 = property5.getAsText();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(iSOChronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str32, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-8L) + "'", long45 == (-8L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(iSOChronology51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str52, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone61);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-8L) + "'", long65 == (-8L));
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 456816L + "'", long69 == 456816L);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "9" + "'", str71, "9");
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.minusMinutes((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str31 = iSOChronology30.toString();
        org.joda.time.DurationField durationField32 = iSOChronology30.weeks();
        boolean boolean33 = property29.equals((java.lang.Object) durationField32);
        org.joda.time.DurationField durationField34 = property29.getRangeDurationField();
        java.lang.String str35 = property29.getAsString();
        java.lang.String str36 = property29.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property29.getFieldType();
        int int38 = localDateTime22.indexOf(dateTimeFieldType37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime22.plusMillis(33549745);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(iSOChronology30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str31, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "9" + "'", str35, "9");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(obj0, dateTimeZone14);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = dateTimeZone14.getShortName((long) 59, locale19);
        long long24 = dateTimeZone14.convertUTCToLocal((long) 2022);
        long long26 = dateTimeZone14.previousTransition(35066445L);
        boolean boolean27 = dateTimeZone14.isFixed();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str5, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.008" + "'", str15, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.008" + "'", str22, "+00:00:00.008");
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2030L + "'", long24 == 2030L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 35066445L + "'", long26 == 35066445L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        java.lang.String[] strArray32 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray40 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList41);
        boolean boolean44 = strSet33.containsAll((java.util.Collection<java.lang.String>) strList41);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        java.util.Locale locale47 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str48 = locale47.getDisplayCountry();
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.util.Locale.setDefault(locale49);
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale47.getDisplayCountry(locale49);
        boolean boolean55 = locale47.hasExtensions();
        java.util.Set<java.lang.String> strSet56 = locale47.getUnicodeLocaleKeys();
        java.lang.Object[] objArray57 = strSet56.toArray();
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap59);
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.util.Locale.setDefault(locale61);
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet65);
        int int67 = strSet65.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertEquals(locale47.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English (Canada)" + "'", str51, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English (Canada)" + "'", str63, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusHours(5);
        int int22 = localDateTime18.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.yearOfEra();
        int int24 = localDateTime18.getEra();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minusSeconds(39);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.halfdays();
        java.lang.String str30 = iSOChronology28.toString();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.era();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.centuryOfEra();
        org.joda.time.DurationField durationField33 = iSOChronology28.minutes();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.year();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str38 = locale37.getScript();
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale37.getDisplayCountry(locale39);
        java.lang.String str41 = property35.getAsText(locale39);
        java.lang.String str42 = locale39.getISO3Country();
        java.lang.String str43 = locale39.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = localDateTime26.toString("2022-02-11T09:46:19.605", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str30, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CHN" + "'", str42, "CHN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = null;
        boolean boolean7 = localDateTime2.isSupported(durationFieldType6);
        org.joda.time.DateTime dateTime8 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.plusMonths((-1));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(12);
        int int13 = localDateTime10.getDayOfWeek();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str18 = iSOChronology17.toString();
        org.joda.time.DurationField durationField19 = iSOChronology17.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        int[] intArray26 = iSOChronology17.get((org.joda.time.ReadablePartial) localDateTime22, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = iSOChronology17.getZone();
        java.lang.String str28 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime29 = localDateTime16.toDateTime(dateTimeZone27);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str34 = iSOChronology33.toString();
        org.joda.time.DurationField durationField35 = iSOChronology33.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        int[] intArray42 = iSOChronology33.get((org.joda.time.ReadablePartial) localDateTime38, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology33.getZone();
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime45 = localDateTime32.toDateTime(dateTimeZone43);
        boolean boolean46 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField49 = iSOChronology48.halfdays();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology48.era();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology48);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology53);
        int int56 = localDateTime55.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = property62.getAsShortText(locale63);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = property62.getAsText(locale66);
        org.joda.time.LocalDateTime localDateTime69 = property62.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = property62.roundHalfEvenCopy();
        boolean boolean71 = localDateTime55.equals((java.lang.Object) localDateTime70);
        org.joda.time.chrono.ISOChronology iSOChronology72 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str73 = iSOChronology72.toString();
        org.joda.time.DurationField durationField74 = iSOChronology72.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology75 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology75.dayOfYear();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusDays((int) (byte) 0);
        int[] intArray81 = iSOChronology72.get((org.joda.time.ReadablePartial) localDateTime77, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone82 = iSOChronology72.getZone();
        boolean boolean84 = dateTimeZone82.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime85 = localDateTime70.toDateTime(dateTimeZone82);
        java.lang.String str86 = dateTime85.toString();
        int int87 = property52.compareTo((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean88 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Instant instant89 = dateTime29.toInstant();
        org.joda.time.DateTimeZone dateTimeZone90 = instant89.getZone();
        org.joda.time.DateTime dateTime91 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) instant89);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str18, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.008" + "'", str28, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str34, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.008" + "'", str44, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "9" + "'", str64, "9");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English (Canada)" + "'", str67, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "9" + "'", str68, "9");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(iSOChronology72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str73, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(iSOChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(intArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022-02-11T10:00:00.000+00:00:00.008" + "'", str86, "2022-02-11T10:00:00.000+00:00:00.008");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = null;
        boolean boolean7 = localDateTime2.isSupported(durationFieldType6);
        org.joda.time.DateTime dateTime8 = localDateTime2.toDateTime();
        long long9 = dateTime8.getMillis();
        org.joda.time.Instant instant10 = dateTime8.toInstant();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology11.era();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra((int) 'a');
        int[] intArray22 = iSOChronology11.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDateTime18.getFields();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.minusHours(1);
        int int26 = localDateTime18.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.minusSeconds(2022);
        int int31 = localDateTime30.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.yearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str37 = iSOChronology36.toString();
        org.joda.time.DurationField durationField38 = iSOChronology36.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        int[] intArray45 = iSOChronology36.get((org.joda.time.ReadablePartial) localDateTime41, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = iSOChronology36.getZone();
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDateTime35.toDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        int int50 = property32.getDifference((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = instant10.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572946452L + "'", long9 == 1644572946452L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(iSOChronology36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str37, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.008" + "'", str47, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusWeeks((-1));
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plus(readablePeriod19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField22 = iSOChronology21.halfdays();
        java.lang.String str23 = iSOChronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.era();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology21.centuryOfEra();
        org.joda.time.DurationField durationField26 = iSOChronology21.minutes();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.year();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.TimeZone.setDefault(timeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str40 = iSOChronology39.toString();
        org.joda.time.DurationField durationField41 = iSOChronology39.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        int[] intArray48 = iSOChronology39.get((org.joda.time.ReadablePartial) localDateTime44, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = iSOChronology39.getZone();
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.DateTime dateTime51 = localDateTime38.toDateTime(dateTimeZone49);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology52);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str56 = iSOChronology55.toString();
        org.joda.time.DurationField durationField57 = iSOChronology55.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        int[] intArray64 = iSOChronology55.get((org.joda.time.ReadablePartial) localDateTime60, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = iSOChronology55.getZone();
        java.lang.String str66 = dateTimeZone65.toString();
        org.joda.time.DateTime dateTime67 = localDateTime54.toDateTime(dateTimeZone65);
        boolean boolean68 = dateTime51.isAfter((org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime67);
        int int70 = property28.getDifference((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField72 = iSOChronology71.halfdays();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology71.era();
        org.joda.time.chrono.ISOChronology iSOChronology74 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField75 = iSOChronology74.dayOfYear();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withYearOfEra((int) 'a');
        int[] intArray82 = iSOChronology71.get((org.joda.time.ReadablePartial) localDateTime78, (long) 100);
        org.joda.time.LocalDateTime.Property property83 = localDateTime78.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime84 = property83.roundHalfEvenCopy();
        int int85 = property83.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property83.getFieldType();
        int int87 = dateTime67.get(dateTimeFieldType86);
        org.joda.time.DateTime dateTime88 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean89 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str23, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(iSOChronology39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str40, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.008" + "'", str50, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(iSOChronology55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str56, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.008" + "'", str66, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(iSOChronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(iSOChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(intArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2922789 + "'", int85 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 20 + "'", int87 == 20);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.lang.String str12 = property5.getAsString();
        int int13 = property5.getMinimumValueOverall();
        int int14 = property5.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime15 = property5.roundFloorCopy();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = iSOChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.yearOfCentury();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.TimeZone.setDefault(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        java.lang.String str20 = dateTimeZone16.getName((long) (short) -1);
        java.lang.String str22 = dateTimeZone16.getShortName((long) 35123607);
        org.joda.time.Chronology chronology23 = iSOChronology1.withZone(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(1707644722958L, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfYear((int) 'a');
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.minuteOfHour();
        long long28 = property27.remainder();
        org.junit.Assert.assertNotNull(iSOChronology1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str2, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 22958L + "'", long28 == 22958L);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField11 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.hourOfDay();
        org.joda.time.Chronology chronology14 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField15 = iSOChronology0.minutes();
        java.lang.String str16 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str1, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str16, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.dayOfYear();
        int int30 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.minusHours(845);
        org.joda.time.LocalDateTime.Property property33 = localDateTime25.minuteOfHour();
        int int34 = localDateTime25.getDayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str14, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.008" + "'", str24, "+00:00:00.008");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) '4');
        int int22 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears(58);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField28 = iSOChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.era();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYearOfEra((int) 'a');
        int[] intArray38 = iSOChronology27.get((org.joda.time.ReadablePartial) localDateTime34, (long) 100);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withDurationAdded(readableDuration39, (int) '4');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusYears(0);
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology45);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str49 = iSOChronology48.toString();
        org.joda.time.DurationField durationField50 = iSOChronology48.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        int[] intArray57 = iSOChronology48.get((org.joda.time.ReadablePartial) localDateTime53, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = iSOChronology48.getZone();
        java.lang.String str59 = dateTimeZone58.toString();
        org.joda.time.DateTime dateTime60 = localDateTime47.toDateTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime60.getZone();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(0L, dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        java.lang.String str66 = dateTimeZone64.getNameKey((long) (byte) 0);
        long long68 = dateTimeZone61.getMillisKeepLocal(dateTimeZone64, 1707644669306L);
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str72 = locale71.getDisplayVariant();
        java.lang.String str73 = locale71.getISO3Language();
        java.lang.String str74 = locale71.getScript();
        java.lang.String str75 = dateTimeZone61.getName(1212L, locale71);
        org.joda.time.DateTime dateTime76 = localDateTime43.toDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime77 = localDateTime26.toDateTime(dateTimeZone61);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime26.plusHours(78537112);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(iSOChronology48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str49, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.008" + "'", str59, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNull(str66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1707644669306L + "'", long68 == 1707644669306L);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.008" + "'", str75, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.lang.String str14 = property5.getAsShortText(locale12);
        org.joda.time.DurationField durationField15 = property5.getDurationField();
        int int16 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = property5.addToCopy(71282747);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMillis(934);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.joda.time.Chronology chronology7 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str2, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology12 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str1, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusDays(845);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 18);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        java.lang.String str23 = iSOChronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField26 = iSOChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.era();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra((int) 'a');
        int[] intArray36 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime32, (long) 100);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.withDurationAdded(readableDuration37, (int) '4');
        int[] intArray40 = localDateTime39.getValues();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusYears(2);
        long long44 = iSOChronology21.set((org.joda.time.ReadablePartial) localDateTime42, 1L);
        int int45 = localDateTime42.getDayOfWeek();
        int int46 = localDateTime42.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minus(readablePeriod47);
        org.joda.time.DateTimeField[] dateTimeFieldArray49 = localDateTime42.getFields();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property51 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = property51.withMaximumValue();
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.getDefault(category53);
        java.util.Locale locale55 = java.util.Locale.US;
        java.util.Locale.setDefault(category53, locale55);
        java.util.Locale locale58 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str59 = locale58.getDisplayCountry();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.util.Locale.setDefault(locale60);
        java.util.Set<java.lang.String> strSet64 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale58.getDisplayCountry(locale60);
        java.util.Locale.setDefault(category53, locale58);
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category53, locale67);
        java.util.Locale locale70 = new java.util.Locale("0");
        java.util.Locale.setDefault(category53, locale70);
        java.util.Locale locale72 = java.util.Locale.getDefault(category53);
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.lang.String str74 = locale73.getScript();
        java.lang.String str75 = locale73.toLanguageTag();
        java.lang.String str76 = locale73.getDisplayScript();
        java.util.Locale locale78 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str79 = locale78.getISO3Country();
        java.util.Set<java.lang.Character> charSet80 = locale78.getExtensionKeys();
        java.lang.String str81 = locale78.getDisplayScript();
        java.lang.String str82 = locale78.getVariant();
        java.util.Locale.Category category83 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale84 = java.util.Locale.getDefault(category83);
        java.util.Locale locale85 = java.util.Locale.US;
        java.util.Locale.setDefault(category83, locale85);
        java.util.Set<java.lang.String> strSet87 = locale85.getUnicodeLocaleAttributes();
        java.lang.String str88 = locale78.getDisplayScript(locale85);
        java.lang.String str89 = locale73.getDisplayLanguage(locale78);
        java.util.Locale.setDefault(category53, locale78);
        java.util.Locale locale91 = java.util.Locale.getDefault(category53);
        int int92 = property51.getMaximumTextLength(locale91);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 35346882]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str23, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 11, 35346882]");
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1707644946874L + "'", long44 == 1707644946874L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.FORMAT + "'", category53.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals(locale58.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English (Canada)" + "'", str62, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertEquals(locale70.toString(), "0");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "0");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "en-CA" + "'", str75, "en-CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals(locale78.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(charSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + category83 + "' != '" + java.util.Locale.Category.FORMAT + "'", category83.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "0");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "English" + "'", str89, "English");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 9 + "'", int92 == 9);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getName(locale1, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str11 = nameProvider0.getShortName(locale6, "und", "2022-02-11T09:44:00.457");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setLanguage("de");
        java.util.Locale.Builder builder16 = builder13.clearExtensions();
        java.util.Locale.Builder builder18 = builder13.setLanguageTag("GMT");
        java.util.Locale.Builder builder20 = builder18.setLanguage("Feb");
        java.util.Locale.Builder builder21 = builder18.clearExtensions();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = property27.getAsShortText(locale28);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = property27.getAsText(locale31);
        java.lang.String str34 = locale31.getISO3Language();
        java.util.Locale.Builder builder35 = builder18.setLocale(locale31);
        java.lang.String str38 = nameProvider0.getShortName(locale31, "2022-02-11T03:46:24.622", "0097-02-18T09:47:41.113");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "9" + "'", str29, "9");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "eng" + "'", str34, "eng");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.hourOfHalfday();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(1707644644992L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths((int) 'x');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusHours(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.dayOfMonth();
        int int14 = localDateTime8.getDayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str2, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DurationField durationField3 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        java.lang.Object obj5 = null;
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str10 = iSOChronology9.toString();
        org.joda.time.DurationField durationField11 = iSOChronology9.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        int[] intArray18 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = iSOChronology9.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime8.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj5, dateTimeZone19);
        org.joda.time.Chronology chronology23 = iSOChronology0.withZone(dateTimeZone19);
        long long26 = dateTimeZone19.convertLocalToUTC(1644659110423L, true);
        long long29 = dateTimeZone19.adjustOffset(1644572863813L, true);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        int int33 = localDateTime32.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plus(readablePeriod39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusHours(53);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.minusMillis(37);
        boolean boolean45 = dateTimeZone19.isLocalDateTimeGap(localDateTime40);
        java.lang.String str46 = localDateTime40.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str10, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.008" + "'", str20, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644659110415L + "'", long26 == 1644659110415L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644572863813L + "'", long29 == 1644572863813L);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-10T09:00:00.000" + "'", str46, "2022-02-10T09:00:00.000");
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str23 = iSOChronology22.toString();
        org.joda.time.DurationField durationField24 = iSOChronology22.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        int[] intArray31 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = iSOChronology22.getZone();
        org.joda.time.DurationField durationField33 = iSOChronology22.years();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology22.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str36 = iSOChronology35.toString();
        org.joda.time.DurationField durationField37 = iSOChronology35.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        int[] intArray44 = iSOChronology35.get((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = iSOChronology35.getZone();
        long long49 = dateTimeZone45.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(dateTimeZone45);
        int[] intArray52 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime50, (long) 52);
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology22.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        int int59 = localDateTime56.getWeekyear();
        int[] intArray61 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime56, (long) 37);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime56.minusSeconds(34);
        long long65 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime63, 0L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str4, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-8L) + "'", long17 == (-8L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str23, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(iSOChronology35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str36, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-8L) + "'", long49 == (-8L));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1, 60]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1970, 1, 1, 45]");
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1644572912999L + "'", long65 == 1644572912999L);
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Chronology chronology9 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str1, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.lang.String[] strArray15 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Iterator<java.lang.String> strItor18 = strSet16.iterator();
        java.lang.Object[] objArray19 = strSet16.toArray();
        java.lang.Object[] objArray20 = strSet16.toArray();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet16.parallelStream();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Collection<java.util.Locale> localeCollection26 = null;
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection26);
        java.lang.String[] strArray38 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        java.util.Iterator<java.lang.String> strItor41 = strSet39.iterator();
        java.lang.Object[] objArray42 = strSet39.toArray();
        java.lang.Object[] objArray43 = strSet39.toArray();
        java.util.stream.Stream<java.lang.String> strStream44 = strSet39.parallelStream();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Collection<java.lang.String> strCollection46 = null;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strCollection46);
        java.util.Collection<java.util.Locale> localeCollection48 = null;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection48);
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection48);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str53 = locale52.getDisplayVariant();
        java.lang.String str54 = locale52.getISO3Language();
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet55);
        java.util.Spliterator<java.lang.String> strSpliterator57 = strSet55.spliterator();
        java.lang.String[] strArray68 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        java.util.Iterator<java.lang.String> strItor71 = strSet69.iterator();
        java.lang.Object[] objArray72 = strSet69.toArray();
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.lang.String str75 = locale73.getDisplayName(locale74);
        java.util.Locale.setDefault(locale73);
        java.util.Set<java.lang.String> strSet77 = locale73.getUnicodeLocaleAttributes();
        boolean boolean78 = strSet69.retainAll((java.util.Collection<java.lang.String>) strSet77);
        java.lang.String[] strArray89 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        java.util.Iterator<java.lang.String> strItor92 = strSet90.iterator();
        java.lang.Object[] objArray93 = strSet90.toArray();
        java.util.Iterator<java.lang.String> strItor94 = strSet90.iterator();
        boolean boolean95 = strSet69.containsAll((java.util.Collection<java.lang.String>) strSet90);
        boolean boolean96 = strSet55.retainAll((java.util.Collection<java.lang.String>) strSet90);
        strSet55.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strSpliterator57);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strItor71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "English (Canada)" + "'", str75, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strItor94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.DateTimeField dateTimeField10 = property5.getField();
        int int11 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property5.withMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str18 = iSOChronology17.toString();
        org.joda.time.DurationField durationField19 = iSOChronology17.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        int[] intArray26 = iSOChronology17.get((org.joda.time.ReadablePartial) localDateTime22, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = iSOChronology17.getZone();
        java.lang.String str28 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime29 = localDateTime16.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(0L, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        java.lang.String str35 = dateTimeZone33.getNameKey((long) (byte) 0);
        long long37 = dateTimeZone30.getMillisKeepLocal(dateTimeZone33, 1707644669306L);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withPeriodAdded(readablePeriod39, 35058029);
        int int42 = localDateTime41.getMillisOfSecond();
        boolean boolean43 = localDateTime12.isEqual((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime12.minusMonths(50);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str7, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str18, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.008" + "'", str28, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNull(str35);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1707644669306L + "'", long37 == 1707644669306L);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 102 + "'", int42 == 102);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:48:27.491");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks((int) (byte) 0);
        int int10 = localDateTime7.getEra();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withDurationAdded(readableDuration11, 22);
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        java.util.Locale locale1 = new java.util.Locale("2031-11-12T09:44:11.126");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "2031-11-12t09:44:11.126");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = property12.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property12.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime19, dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.withYearOfCentury((int) (short) 10);
        java.util.Date date40 = localDateTime39.toDate();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.fromDateFields(date40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withPeriodAdded(readablePeriod43, 2010);
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField48 = iSOChronology47.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology47.era();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology47.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology47);
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology47.era();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology47.weekyearOfCentury();
        long long57 = iSOChronology47.add(1644572637306L, 1644572653046L, 6);
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology47.secondOfDay();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime45, (org.joda.time.Chronology) iSOChronology47);
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology47.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(32400000, 498, 587, (int) 'x', 224, 71187720, 33297549, (org.joda.time.Chronology) iSOChronology47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(iSOChronology20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str21, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.008" + "'", str31, "+00:00:00.008");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Thu Feb 11 09:49:07 GMT 2010");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 11512008555582L + "'", long57 == 11512008555582L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField22 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField24 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology0.secondOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsShortText(locale32);
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = property31.getAsText(locale35);
        org.joda.time.LocalDateTime localDateTime38 = property31.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str40 = iSOChronology39.toString();
        org.joda.time.DurationField durationField41 = iSOChronology39.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        int[] intArray48 = iSOChronology39.get((org.joda.time.ReadablePartial) localDateTime44, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = iSOChronology39.getZone();
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime38, dateTimeZone49);
        boolean boolean53 = dateTimeZone49.isStandardOffset((long) 0);
        org.joda.time.Chronology chronology54 = iSOChronology0.withZone(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.DurationFieldType durationFieldType56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withFieldAdded(durationFieldType56, 801);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str4, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-8L) + "'", long17 == (-8L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English (Canada)" + "'", str36, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9" + "'", str37, "9");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(iSOChronology39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str40, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.008" + "'", str50, "+00:00:00.008");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        long long12 = dateTimeZone8.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDateTime19.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime27 = property24.addWrapFieldToCopy(52);
        int int28 = localDateTime27.size();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withYearOfCentury(5);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.withWeekyear(59);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusDays(2010);
        boolean boolean35 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime13.withYearOfEra(35341416);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2022L + "'", long12 == 2022L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(29);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusHours(5);
        int int22 = localDateTime18.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.yearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        int int25 = property23.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = property33.getAsShortText(locale34);
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = property33.getAsText(locale37);
        org.joda.time.LocalDateTime localDateTime40 = property33.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = property33.roundHalfEvenCopy();
        java.lang.String str42 = localDateTime41.toString();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plusWeeks((int) 'x');
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str50 = iSOChronology49.toString();
        org.joda.time.DurationField durationField51 = iSOChronology49.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        int[] intArray58 = iSOChronology49.get((org.joda.time.ReadablePartial) localDateTime54, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = iSOChronology49.getZone();
        long long63 = dateTimeZone59.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale64 = java.util.Locale.US;
        boolean boolean65 = dateTimeZone59.equals((java.lang.Object) locale64);
        long long69 = dateTimeZone59.convertLocalToUTC((long) ' ', true, (long) '4');
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 'u', dateTimeZone59);
        org.joda.time.DateTime dateTime71 = localDateTime41.toDateTime(dateTimeZone59);
        int int72 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime71);
        java.lang.String str73 = dateTime71.toString();
        org.joda.time.Instant instant74 = dateTime71.toInstant();
        long long75 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime71);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "9" + "'", str35, "9");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English (Canada)" + "'", str38, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "9" + "'", str39, "9");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T10:00:00.000" + "'", str42, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(iSOChronology49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str50, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-8L) + "'", long63 == (-8L));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 24L + "'", long69 == 24L);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T10:00:00.000+00:00:00.008" + "'", str73, "2022-02-11T10:00:00.000+00:00:00.008");
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone5);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = property12.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds(6);
        int[] intArray23 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime21, (long) 58);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMinutes(3);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis(31);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime27.getFields();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.minusWeeks(8);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.minusYears(594);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str2, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 66]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        boolean boolean13 = property10.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.era();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra((int) 'a');
        int[] intArray25 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime21.getFields();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusHours(1);
        int int29 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.withTime(1, 23, 51, 23);
        int int37 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DurationField durationField38 = property10.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str45 = nameProvider39.getShortName(locale41, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str46 = property10.getAsShortText(locale41);
        java.lang.String str47 = locale4.getDisplayScript(locale41);
        java.lang.String str48 = locale41.getDisplayLanguage();
        java.util.Locale.Builder builder49 = builder3.setLocale(locale41);
        java.util.Locale locale50 = builder3.build();
        java.util.Locale locale51 = java.util.Locale.UK;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale52.getScript();
        java.lang.String str54 = locale52.getDisplayName();
        java.lang.String str55 = locale51.getDisplayLanguage(locale52);
        java.util.Locale.Builder builder56 = builder3.setLocale(locale52);
        java.util.Locale.Builder builder58 = builder56.removeUnicodeLocaleAttribute("DEU");
        java.util.Locale locale60 = new java.util.Locale("0097-02-18T09:44:15.719");
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("Jan");
        java.lang.String str63 = locale60.getDisplayCountry(locale62);
        java.util.Locale.Builder builder64 = builder56.setLocale(locale62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder66 = builder64.setScript("2031-11-16T13:52:57.200");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2031-11-16T13:52:57.200 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(durationField38);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English (Canada)" + "'", str54, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals(locale60.toString(), "0097-02-18t09:44:15.719");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "jan");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readablePeriod5);
        int int7 = localDateTime2.getWeekOfWeekyear();
        int int8 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withDate(275, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-13T19:45:13.026");
        timeZone1.setRawOffset(275);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int6 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 275 + "'", int6 == 275);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField7 = iSOChronology0.hours();
        org.joda.time.Chronology chronology8 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = iSOChronology6.add(readablePeriod8, (long) (byte) -1, (-1));
        org.joda.time.Chronology chronology12 = iSOChronology6.withUTC();
        boolean boolean13 = iSOChronology0.equals((java.lang.Object) iSOChronology6);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField15 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField17 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = iSOChronology0.getDateTimeMillis(71111255, 997, 997, 366, 89, (int) (byte) 10, 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str7, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        org.joda.time.DurationField durationField24 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology0.yearOfEra();
        java.lang.String str26 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str2, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35347357]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707644947349L + "'", long23 == 1707644947349L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str26, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.minusSeconds(23);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.plusHours(0);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.halfdays();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology42.era();
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYearOfEra((int) 'a');
        int[] intArray53 = iSOChronology42.get((org.joda.time.ReadablePartial) localDateTime49, (long) 100);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.withDurationAdded(readableDuration54, (int) '4');
        org.joda.time.LocalDateTime localDateTime58 = localDateTime49.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        int int60 = localDateTime49.indexOf(dateTimeFieldType59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime49.plus(readableDuration61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime49.plusSeconds((int) 'a');
        boolean boolean65 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.hourOfDay();
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.lang.String str73 = property71.getAsShortText(locale72);
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.lang.String str76 = locale74.getDisplayName(locale75);
        java.lang.String str77 = property71.getAsText(locale75);
        org.joda.time.LocalDateTime localDateTime78 = property71.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology79 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str80 = iSOChronology79.toString();
        org.joda.time.DurationField durationField81 = iSOChronology79.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology82 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology82.dayOfYear();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology82);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusDays((int) (byte) 0);
        int[] intArray88 = iSOChronology79.get((org.joda.time.ReadablePartial) localDateTime84, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone89 = iSOChronology79.getZone();
        java.lang.String str90 = dateTimeZone89.toString();
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime78, dateTimeZone89);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime91.withDayOfYear((int) '#');
        boolean boolean94 = localDateTime64.isEqual((org.joda.time.ReadablePartial) localDateTime91);
        int int95 = localDateTime35.compareTo((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.DateTimeField[] dateTimeFieldArray96 = localDateTime35.getFields();
        org.joda.time.LocalDateTime.Property property97 = localDateTime35.secondOfMinute();
        java.lang.String str99 = localDateTime35.toString("11");
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "9" + "'", str73, "9");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "English (Canada)" + "'", str76, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "9" + "'", str77, "9");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(iSOChronology79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str80, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(iSOChronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.008" + "'", str90, "+00:00:00.008");
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "11" + "'", str99, "11");
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) 'a');
        int[] intArray14 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1);
        int int18 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        boolean boolean23 = iSOChronology0.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology0.getZone();
        long long27 = dateTimeZone24.convertLocalToUTC((long) 13, false);
        long long30 = dateTimeZone24.convertLocalToUTC(0L, false);
        long long33 = dateTimeZone24.convertLocalToUTC(1644572818825L, true);
        long long36 = dateTimeZone24.convertLocalToUTC((-239883L), true);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 5L + "'", long27 == 5L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-8L) + "'", long30 == (-8L));
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644572818817L + "'", long33 == 1644572818817L);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-239891L) + "'", long36 == (-239891L));
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone.setDefault(timeZone8);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusSeconds(51);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.secondOfMinute();
        int int9 = localDateTime7.getWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(35159191, 35042587, 0, 35137417, 16, 15, 35203010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35137417 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) 'u');
        java.lang.String str9 = localDateTime8.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusYears(626);
        int int12 = localDateTime8.getYearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2031-11-12T09:49:07.453" + "'", str9, "2031-11-12T09:49:07.453");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2031 + "'", int12 == 2031);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) '4');
        int int22 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = property5.roundCeilingCopy();
        int int24 = localDateTime23.getWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusDays(16);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withPeriodAdded(readablePeriod27, 641);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField31 = iSOChronology30.halfdays();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.util.TimeZone.setDefault(timeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.Chronology chronology39 = iSOChronology30.withZone(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minus(readablePeriod41);
        int int43 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        boolean boolean52 = localDateTime48.isSupported(dateTimeFieldType51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime48.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.lang.String str61 = property59.getAsShortText(locale60);
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.lang.String str65 = property59.getAsText(locale63);
        org.joda.time.LocalDateTime localDateTime66 = property59.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str68 = iSOChronology67.toString();
        org.joda.time.DurationField durationField69 = iSOChronology67.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology70 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology70.dayOfYear();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusDays((int) (byte) 0);
        int[] intArray76 = iSOChronology67.get((org.joda.time.ReadablePartial) localDateTime72, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone77 = iSOChronology67.getZone();
        java.lang.String str78 = dateTimeZone77.toString();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime66, dateTimeZone77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime86 = localDateTime79.withYearOfCentury((int) (short) 10);
        int int87 = localDateTime86.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property88 = localDateTime86.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property88.getFieldType();
        org.joda.time.LocalDateTime.Property property90 = localDateTime48.property(dateTimeFieldType89);
        int int91 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "9" + "'", str61, "9");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English (Canada)" + "'", str64, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "9" + "'", str65, "9");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(iSOChronology67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str68, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(iSOChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(intArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.008" + "'", str78, "+00:00:00.008");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.dayOfYear();
        org.joda.time.DurationField durationField6 = iSOChronology1.weekyears();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int int12 = localDateTime9.getWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minus(readableDuration14);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField17 = iSOChronology16.halfdays();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean22 = timeZone19.hasSameRules(timeZone21);
        java.util.TimeZone.setDefault(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.Chronology chronology25 = iSOChronology16.withZone(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration14, dateTimeZone24);
        int int28 = dateTimeZone24.getOffsetFromLocal((long) (short) 100);
        org.joda.time.Chronology chronology29 = iSOChronology1.withZone(dateTimeZone24);
        long long31 = dateTimeZone24.convertUTCToLocal((long) 35223288);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 35223288L + "'", long31 == 35223288L);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        int int32 = localDateTime31.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.weekOfWeekyear();
        int int35 = localDateTime31.getValue((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withEra(35323899);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35323899 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = property12.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property12.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime19, dateTimeZone30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField34 = iSOChronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.era();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYearOfEra((int) 'a');
        int[] intArray44 = iSOChronology33.get((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray45 = localDateTime40.getFields();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.minusHours(1);
        int int48 = localDateTime40.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime40.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime40.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property53 = localDateTime40.yearOfCentury();
        int int54 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime40.plusSeconds((int) (short) 100);
        int int57 = localDateTime40.getEra();
        int[] intArray59 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime40, 1707644669306L);
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology0.millisOfSecond();
        java.lang.String str61 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(iSOChronology20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str21, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.008" + "'", str31, "+00:00:00.008");
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[2024, 2, 11, 35069314]");
        org.junit.Assert.assertNotNull(dateTimeField60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str61, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfEra(97);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(38);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(35179551);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 'u', (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        boolean boolean11 = property10.isLeap();
        org.junit.Assert.assertNotNull(iSOChronology1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str2, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.era();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfEra((int) 'a');
        int[] intArray18 = iSOChronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime14.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusHours(1);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra((int) 'a');
        int[] intArray33 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withDurationAdded(readableDuration34, (int) '4');
        int[] intArray37 = localDateTime36.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) 'u');
        org.joda.time.Chronology chronology43 = iSOChronology0.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DurationField durationField46 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str1, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 11, 35347673]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = property5.getName();
        org.joda.time.DurationField durationField15 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime17 = property5.addWrapFieldToCopy(59);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMinutes(971);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDateTime17.getValue(35151532);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35151532");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hourOfDay" + "'", str14, "hourOfDay");
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2031-11-12T09:47:04.373");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2031-11-12t09:47:04.373");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        java.lang.Object obj1 = null;
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology2);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str6 = iSOChronology5.toString();
        org.joda.time.DurationField durationField7 = iSOChronology5.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        int[] intArray14 = iSOChronology5.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology5.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime17 = localDateTime4.toDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(obj1, dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal((long) 23);
        java.lang.String str21 = dateTimeZone15.toString();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 35208074, dateTimeZone15);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str6, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.008" + "'", str16, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 31L + "'", long20 == 31L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.008" + "'", str21, "+00:00:00.008");
        org.junit.Assert.assertNotNull(iSOChronology22);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        int[] intArray7 = localDateTime6.getValues();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withYear(0);
        org.joda.time.DurationFieldType durationFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withFieldAdded(durationFieldType10, 576);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str1, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 2, 11, 35347755]");
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.Object obj2 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "");
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime10.isSupported(durationFieldType14);
        org.joda.time.DateTime dateTime16 = localDateTime10.toDateTime();
        long long17 = dateTime16.getMillis();
        long long18 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        int int19 = property6.get();
        java.lang.String str20 = property6.toString();
        org.joda.time.LocalDateTime localDateTime21 = property6.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField22 = property6.getDurationField();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray28 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList29);
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.util.Locale.setDefault(locale32);
        java.util.Set<java.lang.String> strSet36 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.lang.String[] strArray42 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList45.parallelStream();
        boolean boolean47 = strSet36.containsAll((java.util.Collection<java.lang.String>) strList45);
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet36);
        int int49 = strSet36.size();
        boolean boolean50 = property6.equals((java.lang.Object) int49);
        org.joda.time.LocalDateTime localDateTime51 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = property6.addToCopy(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withDate(20, 35347377, 35181813);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35347377 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 7 + "'", int3 == 7);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572947768L + "'", long17 == 1644572947768L);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-23L) + "'", long18 == (-23L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[hourOfDay]" + "'", str20, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English (Canada)" + "'", str34, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        int int6 = localDateTime5.getMinuteOfHour();
        int int7 = localDateTime5.getEra();
        int int8 = localDateTime5.getYearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str1, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 49 + "'", int6 == 49);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale locale6 = builder0.build();
        java.util.Locale.Builder builder7 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setRegion("2022-02-11T09:47:33.371");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:47:33.371 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "gmt");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) '4');
        int int22 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        java.lang.String str27 = iSOChronology25.toString();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology25.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField30 = iSOChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.era();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfEra((int) 'a');
        int[] intArray40 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.withDurationAdded(readableDuration41, (int) '4');
        int[] intArray44 = localDateTime43.getValues();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusYears(2);
        long long48 = iSOChronology25.set((org.joda.time.ReadablePartial) localDateTime46, 1L);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minusMonths((int) (short) 100);
        boolean boolean51 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        int int52 = localDateTime23.getWeekyear();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime23.withDurationAdded(readableDuration53, 35569542);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str27, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[2022, 2, 11, 35347848]");
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1707644947840L + "'", long48 == 1707644947840L);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property20 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMonths(6);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withPeriodAdded(readablePeriod24, 169);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minus(readablePeriod27);
        int int29 = localDateTime28.getYearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        long long13 = iSOChronology0.add(1707644654297L, (long) '4', (int) ' ');
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = iSOChronology0.getDateTimeMillis(35167262, 18, 269, 35276876);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str1, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 108]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1707644655961L + "'", long13 == 1707644655961L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusHours(6);
        int int18 = localDateTime2.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        int int22 = localDateTime21.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = property28.getAsShortText(locale29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = property28.getAsText(locale32);
        org.joda.time.LocalDateTime localDateTime35 = property28.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = property28.roundHalfEvenCopy();
        boolean boolean37 = localDateTime21.equals((java.lang.Object) localDateTime36);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str39 = iSOChronology38.toString();
        org.joda.time.DurationField durationField40 = iSOChronology38.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        int[] intArray47 = iSOChronology38.get((org.joda.time.ReadablePartial) localDateTime43, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = iSOChronology38.getZone();
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime51 = localDateTime36.toDateTime(dateTimeZone48);
        int int52 = localDateTime36.getCenturyOfEra();
        org.joda.time.DateTime dateTime53 = localDateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        org.joda.time.DateTime dateTime55 = localDateTime2.toDateTime(dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime2.minus(readablePeriod56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime59 = property58.withMinimumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str4, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.008" + "'", str14, "+00:00:00.008");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35348016 + "'", int18 == 35348016);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "9" + "'", str30, "9");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English (Canada)" + "'", str33, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9" + "'", str34, "9");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iSOChronology38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str39, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(691);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        int int29 = property28.getMaximumValueOverall();
        org.joda.time.DurationField durationField30 = property28.getDurationField();
        org.joda.time.DurationField durationField31 = property28.getRangeDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str33 = iSOChronology32.toString();
        org.joda.time.DurationField durationField34 = iSOChronology32.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        int[] intArray41 = iSOChronology32.get((org.joda.time.ReadablePartial) localDateTime37, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology32.getZone();
        long long46 = dateTimeZone42.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withSecondOfMinute(2);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(2922789);
        org.joda.time.DateTime dateTime52 = localDateTime49.toDateTime(dateTimeZone51);
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField54 = iSOChronology53.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology53.era();
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withYearOfEra((int) 'a');
        int[] intArray64 = iSOChronology53.get((org.joda.time.ReadablePartial) localDateTime60, (long) 100);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime60.withDurationAdded(readableDuration65, (int) '4');
        int int68 = localDateTime60.getWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime60.minusDays((int) '4');
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.plusMillis(2022);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.plusMinutes(414);
        org.joda.time.DateTime dateTime76 = localDateTime70.toDateTime();
        boolean boolean77 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTime52.getZone();
        int int79 = property28.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str14, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.008" + "'", str24, "+00:00:00.008");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 99 + "'", int29 == 99);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str33, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-8L) + "'", long46 == (-8L));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setLanguage("35292024");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 35292024 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.withTime(1, 23, 51, 23);
        int int23 = localDateTime22.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusWeeks(71123553);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.weekyear();
        java.util.Locale locale27 = null;
        java.lang.String str28 = property26.getAsShortText(locale27);
        int int29 = property26.getMaximumValue();
        org.joda.time.DurationField durationField30 = property26.getDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 292278993 + "'", int29 == 292278993);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfSecond();
        org.joda.time.Chronology chronology8 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField9 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField11 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField12 = iSOChronology0.centuries();
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology0.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str2, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(925, 35495689, (int) (short) 10, 1440, 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1440 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) 'u');
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readablePeriod9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, 453);
        org.joda.time.DateTime dateTime14 = localDateTime10.toDateTime();
        int int15 = localDateTime10.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 46 + "'", int15 == 46);
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Chinese", (double) (short) 1);
        double double3 = languageRange2.getWeight();
        double double4 = languageRange2.getWeight();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        java.lang.String str8 = languageRange2.getRange();
        double double9 = languageRange2.getWeight();
        java.lang.String str10 = languageRange2.getRange();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str13 = iSOChronology12.toString();
        org.joda.time.DurationField durationField14 = iSOChronology12.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        int[] intArray21 = iSOChronology12.get((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology12.getZone();
        org.joda.time.DurationField durationField23 = iSOChronology12.years();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.Chronology chronology27 = iSOChronology12.withZone(dateTimeZone26);
        java.lang.String str29 = dateTimeZone26.getShortName(1707435847380L);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 202, dateTimeZone26);
        long long32 = dateTimeZone26.previousTransition(1644572856566L);
        boolean boolean33 = languageRange2.equals((java.lang.Object) 1644572856566L);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chinese" + "'", str7, "chinese");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinese" + "'", str8, "chinese");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "chinese" + "'", str10, "chinese");
        org.junit.Assert.assertNotNull(iSOChronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str13, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1644572856566L + "'", long32 == 1644572856566L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = property7.getAsShortText(locale8);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = property7.getAsText(locale11);
        org.joda.time.LocalDateTime localDateTime14 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = property7.roundHalfEvenCopy();
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusWeeks((int) 'x');
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        long long37 = dateTimeZone33.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale38 = java.util.Locale.US;
        boolean boolean39 = dateTimeZone33.equals((java.lang.Object) locale38);
        long long43 = dateTimeZone33.convertLocalToUTC((long) ' ', true, (long) '4');
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 'u', dateTimeZone33);
        org.joda.time.DateTime dateTime45 = localDateTime15.toDateTime(dateTimeZone33);
        int int46 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone48 = dateTimeZone1.toTimeZone();
        int int50 = dateTimeZone1.getStandardOffset((long) 35223288);
        java.lang.String str52 = dateTimeZone1.getNameKey(1707644686430L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9" + "'", str9, "9");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T10:00:00.000" + "'", str16, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+00:00:00.008]" + "'", str24, "ISOChronology[+00:00:00.008]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 108]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-8L) + "'", long37 == (-8L));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 24L + "'", long43 == 24L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getName(locale1, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str11 = nameProvider0.getShortName(locale6, "und", "2022-02-11T09:44:00.457");
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        java.lang.String str14 = iSOChronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology12.era();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology12.centuryOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology12.minutes();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.year();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str22 = locale21.getScript();
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale21.getDisplayCountry(locale23);
        java.lang.String str25 = property19.getAsText(locale23);
        java.lang.String str28 = nameProvider0.getName(locale23, "yearOfCentury", "ETC/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("monthOfYear");
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("hi!");
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        java.lang.String str37 = iSOChronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = iSOChronology35.withZone(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isStandardOffset((long) (short) 1);
        java.util.Locale locale46 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str47 = locale46.getDisplayCountry();
        java.lang.String str48 = dateTimeZone40.getShortName(97L, locale46);
        java.lang.String str49 = locale34.getDisplayScript(locale46);
        java.lang.String str50 = locale32.getDisplayScript(locale46);
        java.lang.String str53 = nameProvider0.getName(locale32, "16", "en-CA");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals(locale46.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfEra(97);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withDurationAdded(readableDuration9, 57);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        java.util.Locale locale2 = new java.util.Locale("und", "2022-02-11T09:43:52.830");
        java.lang.String str3 = locale2.getDisplayCountry();
        org.joda.time.tz.NameProvider nameProvider4 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.lang.String str9 = nameProvider4.getName(locale5, "English (Canada)", "Etc/UTC");
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str13 = nameProvider4.getShortName(locale10, "2022-02-11T09:43:52.830", "2022-02-11T09:43:58.520");
        java.util.Locale locale14 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsShortText(locale21);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = property20.getAsText(locale24);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        int int28 = property20.getMaximumShortTextLength(locale27);
        java.lang.String str29 = locale14.getDisplayName(locale27);
        java.lang.String str30 = locale27.getDisplayVariant();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str33 = locale27.getDisplayCountry(locale32);
        java.lang.String str36 = nameProvider4.getShortName(locale27, "2022-02-11T09:44:06.998", "2022-02-11T09:44:00.457");
        java.lang.String str37 = locale27.getDisplayCountry();
        java.lang.String str38 = locale2.getDisplayVariant(locale27);
        java.util.Locale locale42 = new java.util.Locale("2022-02-11T09:44:09.708", "Property[millisOfDay]", "CHN");
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.lang.String str44 = locale43.getVariant();
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleKeys();
        java.lang.String str49 = locale43.getDisplayScript(locale46);
        java.lang.String str50 = locale42.getDisplayVariant(locale43);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.era();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology52);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = property62.getAsShortText(locale63);
        java.lang.String str65 = property56.getAsShortText(locale63);
        java.lang.String str66 = locale63.getVariant();
        java.util.Locale locale67 = java.util.Locale.JAPAN;
        java.lang.String str68 = locale63.getDisplayScript(locale67);
        java.lang.String str69 = locale67.getDisplayVariant();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getScript();
        java.lang.String str72 = locale70.toLanguageTag();
        java.lang.String str73 = locale70.getDisplayScript();
        java.lang.String str74 = locale67.getDisplayName(locale70);
        java.lang.String str75 = locale42.getDisplayCountry(locale67);
        java.lang.String str76 = locale27.getDisplayVariant(locale42);
        java.util.Set<java.lang.String> strSet77 = locale27.getUnicodeLocaleKeys();
        java.lang.String str78 = locale27.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "und_2022-02-11T09:43:52.830");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:43:52.830" + "'", str3, "2022-02-11T09:43:52.830");
        org.junit.Assert.assertNotNull(nameProvider4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9" + "'", str22, "9");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (Canada)" + "'", str25, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9" + "'", str26, "9");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cinese (Cina)" + "'", str29, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals(locale42.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CHN" + "'", str50, "CHN");
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "9" + "'", str64, "9");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "en-CA" + "'", str72, "en-CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Japanese (Japan)" + "'", str74, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PROPERTY[MILLISOFDAY]" + "'", str75, "PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField11 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        long long6 = iSOChronology0.add((long) (short) 10, (long) 35054090, 3);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = iSOChronology0.get(readablePeriod8, 1644572686100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 105162280L + "'", long6 == 105162280L);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMinutes((int) '4');
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.millisOfSecond();
        int int12 = property11.getMinimumValueOverall();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.era();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = property24.getAsShortText(locale25);
        java.lang.String str27 = property18.getAsShortText(locale25);
        java.lang.String str28 = locale25.getVariant();
        java.lang.String str29 = property11.getAsText(locale25);
        java.lang.String str30 = locale2.getDisplayScript(locale25);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale32 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9" + "'", str26, "9");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "601" + "'", str29, "601");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setExtension('#', "17");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsShortText(locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = property13.getAsText(locale17);
        org.joda.time.LocalDateTime localDateTime20 = property13.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str22 = iSOChronology21.toString();
        org.joda.time.DurationField durationField23 = iSOChronology21.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        int[] intArray30 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology21.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField35 = iSOChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology34.era();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYearOfEra((int) 'a');
        int[] intArray45 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime41, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray46 = localDateTime41.getFields();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.minusHours(1);
        int int49 = localDateTime41.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime41.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime41.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property54 = localDateTime41.yearOfCentury();
        int int55 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime41.plusSeconds((int) (short) 100);
        int int58 = localDateTime41.getEra();
        int[] intArray60 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime41, 1707644669306L);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology1.millisOfSecond();
        org.joda.time.DurationField durationField62 = iSOChronology1.centuries();
        org.joda.time.DurationField durationField63 = iSOChronology1.seconds();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 2922, (org.joda.time.Chronology) iSOChronology1);
        int int65 = localDateTime64.getMinuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English (Canada)" + "'", str18, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[2024, 2, 11, 35069306]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.clockhourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str15 = iSOChronology14.toString();
        org.joda.time.DurationField durationField16 = iSOChronology14.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        int[] intArray23 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology14.getZone();
        org.joda.time.DurationField durationField25 = iSOChronology14.years();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.Chronology chronology29 = iSOChronology14.withZone(dateTimeZone28);
        java.lang.String str31 = dateTimeZone28.getShortName(1707435847380L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        long long34 = dateTimeZone28.previousTransition((long) 35491048);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.lang.String str37 = dateTimeZone28.getShortName(1644403218701L);
        org.joda.time.Chronology chronology38 = iSOChronology12.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35491048L + "'", long34 == 35491048L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale1.getDisplayCountry(locale3);
        java.util.Set<java.lang.String> strSet9 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray15 = strSet14.toArray();
        java.util.Iterator<java.lang.String> strItor16 = strSet14.iterator();
        boolean boolean17 = strSet14.isEmpty();
        boolean boolean18 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet14);
        boolean boolean19 = strSet14.isEmpty();
        boolean boolean20 = strSet14.isEmpty();
        java.lang.String[] strArray27 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray35 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList36);
        boolean boolean39 = strSet28.containsAll((java.util.Collection<java.lang.String>) strList36);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.TimeZone.setDefault(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int47 = timeZone43.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean53 = timeZone50.hasSameRules(timeZone52);
        java.util.TimeZone.setDefault(timeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        boolean boolean56 = timeZone43.hasSameRules(timeZone52);
        boolean boolean57 = strSet28.remove((java.lang.Object) timeZone52);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        long long60 = dateTimeZone58.previousTransition(1707644683405L);
        boolean boolean61 = strSet14.equals((java.lang.Object) dateTimeZone58);
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        int int67 = localDateTime64.getWeekyear();
        org.joda.time.LocalDateTime.Property property68 = localDateTime64.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.minus(readableDuration69);
        org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField72 = iSOChronology71.halfdays();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone76 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean77 = timeZone74.hasSameRules(timeZone76);
        java.util.TimeZone.setDefault(timeZone76);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone76);
        org.joda.time.Chronology chronology80 = iSOChronology71.withZone(dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration69, dateTimeZone79);
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("0");
        java.lang.String str85 = dateTimeZone79.getShortName(1644659045736L, locale84);
        long long88 = dateTimeZone79.adjustOffset(0L, true);
        boolean boolean89 = strSet14.remove((java.lang.Object) 0L);
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English (Canada)" + "'", str5, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1707644683405L + "'", long60 == 1707644683405L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(iSOChronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00" + "'", str85, "+00:00");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("0097-02-18T09:44:41.650", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0097-02-18t09:44:41.650");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(577, 35304690);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 35304690");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("0000-02-11T08:44:26.096");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2022-02-11T09:47:33.371");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.lang.String str2 = locale1.toLanguageTag();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int int8 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.secondOfMinute();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = property9.getAsText(locale10);
        java.lang.String str13 = locale1.getDisplayLanguage(locale10);
        java.lang.String str16 = nameProvider0.getName(locale1, "970", "2022-02-11T09:44:41.203Z");
        java.util.Locale locale18 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str19 = locale18.getDisplayCountry();
        java.util.Locale locale21 = new java.util.Locale("0");
        java.lang.String str22 = locale18.getDisplayName(locale21);
        java.lang.String str25 = nameProvider0.getShortName(locale21, "0097-02-18T09:45:39.739", "1970-01-01T00:00:00.010");
        java.util.Locale locale26 = java.util.Locale.UK;
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale27.getDisplayVariant();
        java.lang.String str30 = locale26.getDisplayVariant(locale27);
        java.lang.String str33 = nameProvider0.getShortName(locale27, "2022-02-13T19:45:12.370", "2031-11-12T09:46:16.084");
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale35.getDisplayVariant();
        java.lang.String str39 = nameProvider34.getName(locale35, "English (Canada)", "Etc/UTC");
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str43 = nameProvider34.getShortName(locale40, "2022-02-11T09:43:52.830", "2022-02-11T09:43:58.520");
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale40.getDisplayVariant(locale44);
        java.lang.String str48 = nameProvider0.getShortName(locale44, "JP", "2022-02-15T13:52:59.010");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh-CN" + "'", str2, "zh-CN");
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8" + "'", str12, "8");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese" + "'", str13, "Chinese");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(locale18.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals(locale21.toString(), "0");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "isochronology[etc/utc]" + "'", str22, "isochronology[etc/utc]");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en" + "'", str28, "en");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.era();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfEra((int) 'a');
        int[] intArray18 = iSOChronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime14.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusHours(1);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra((int) 'a');
        int[] intArray33 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withDurationAdded(readableDuration34, (int) '4');
        int[] intArray37 = localDateTime36.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime21.withYear((int) '#');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYear(71117797);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.era();
        int int45 = property44.getMaximumValue();
        int int46 = property44.getMinimumValueOverall();
        org.joda.time.DurationField durationField47 = property44.getLeapDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 11, 35348815]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(durationField47);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        java.util.Locale locale1 = new java.util.Locale("0097-02-18T09:44:42.202");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        boolean boolean3 = strSet2.isEmpty();
        org.junit.Assert.assertEquals(locale1.toString(), "0097-02-18t09:44:42.202");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) '4');
        int int22 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.plusMonths(7);
        java.lang.String str25 = localDateTime16.toString();
        int int26 = localDateTime16.getMillisOfSecond();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField28 = iSOChronology27.halfdays();
        java.lang.String str29 = iSOChronology27.toString();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.era();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology27.centuryOfEra();
        org.joda.time.DurationField durationField32 = iSOChronology27.minutes();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra((int) 'u');
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.withWeekyear(2);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField47 = iSOChronology46.halfdays();
        java.lang.String str48 = iSOChronology46.toString();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology46.era();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology46.centuryOfEra();
        org.joda.time.DurationField durationField51 = iSOChronology46.minutes();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.year();
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str56 = locale55.getScript();
        java.util.Locale locale57 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str58 = locale55.getDisplayCountry(locale57);
        java.lang.String str59 = property53.getAsText(locale57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property53.getFieldType();
        int int61 = localDateTime45.indexOf(dateTimeFieldType60);
        int int62 = localDateTime33.get(dateTimeFieldType60);
        org.joda.time.LocalDateTime.Property property63 = localDateTime16.property(dateTimeFieldType60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = localDateTime16.withYearOfCentury(35135437);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35135437 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:49:08.847" + "'", str25, "2022-02-11T09:49:08.847");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 847 + "'", int26 == 847);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022" + "'", str59, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.Chronology chronology16 = localDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfDay();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.DurationField durationField20 = chronology16.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        boolean boolean7 = timeZone3.observesDaylightTime();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        boolean boolean14 = timeZone3.hasSameRules(timeZone11);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.time.ZoneId zoneId22 = timeZone18.toZoneId();
        boolean boolean23 = timeZone16.hasSameRules(timeZone18);
        int int24 = timeZone16.getRawOffset();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.time.ZoneId zoneId32 = timeZone28.toZoneId();
        boolean boolean33 = timeZone26.hasSameRules(timeZone28);
        java.lang.String str34 = timeZone26.getID();
        boolean boolean35 = timeZone16.hasSameRules(timeZone26);
        boolean boolean36 = timeZone11.hasSameRules(timeZone26);
        java.util.TimeZone timeZone37 = null;
        boolean boolean38 = timeZone26.hasSameRules(timeZone37);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(zoneId22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GMT" + "'", str34, "GMT");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField6 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withPeriodAdded(readablePeriod34, 9);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMonthOfYear((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str15 = iSOChronology14.toString();
        org.joda.time.DurationField durationField16 = iSOChronology14.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        int[] intArray23 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray23);
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology0.weekyear();
        org.joda.time.Chronology chronology26 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) '4');
        int int22 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime24 = property5.addToCopy((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property5.getFieldType();
        int int26 = property5.getMaximumValue();
        int int27 = property5.getLeapAmount();
        org.joda.time.Interval interval28 = property5.toInterval();
        java.lang.Object obj29 = null;
        boolean boolean30 = property5.equals(obj29);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 23 + "'", int26 == 23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Chinese", (double) (short) 1);
        java.lang.String str3 = languageRange2.getRange();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsShortText(locale16);
        java.lang.String str18 = property9.getAsShortText(locale16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.setLanguage("de");
        java.util.Locale locale26 = builder23.build();
        java.lang.String str27 = dateTimeZone21.getShortName(2030L, locale26);
        java.lang.String str28 = locale19.getDisplayVariant(locale26);
        java.lang.String str29 = locale16.getDisplayScript(locale26);
        java.lang.String str30 = locale26.getISO3Country();
        boolean boolean31 = languageRange2.equals((java.lang.Object) str30);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "chinese" + "'", str3, "chinese");
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.006" + "'", str27, "+00:00:00.006");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears(26);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T10:00:00.000" + "'", str14, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withTime(2, (int) (byte) 1, 1, 10);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readableDuration37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfDay();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minus(readableDuration40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withSecondOfMinute(35315837);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35315837 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        long long37 = dateTimeZone33.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.Chronology chronology39 = iSOChronology0.withZone(dateTimeZone33);
        long long41 = dateTimeZone33.nextTransition((long) 14);
        long long43 = dateTimeZone33.previousTransition(1707644686574L);
        java.lang.String str44 = dateTimeZone33.getID();
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone33);
        org.joda.time.DurationField durationField46 = iSOChronology45.millis();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology45.monthOfYear();
        org.joda.time.DurationField durationField48 = iSOChronology45.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long53 = iSOChronology45.getDateTimeMillis(2922789, (-1), 208800000, 44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 14L + "'", long41 == 14L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1707644686574L + "'", long43 == 1707644686574L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus(readableDuration7);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.TimeZone.setDefault(timeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.Chronology chronology18 = iSOChronology9.withZone(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration7, dateTimeZone17);
        int int21 = dateTimeZone17.getOffsetFromLocal((long) (short) 100);
        java.lang.String str22 = dateTimeZone17.getID();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfHour();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfWeek();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        int int18 = localDateTime17.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = property24.getAsShortText(locale25);
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = property24.getAsText(locale28);
        org.joda.time.LocalDateTime localDateTime31 = property24.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = property24.roundHalfEvenCopy();
        boolean boolean33 = localDateTime17.equals((java.lang.Object) localDateTime32);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str35 = iSOChronology34.toString();
        org.joda.time.DurationField durationField36 = iSOChronology34.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        int[] intArray43 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime39, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology34.getZone();
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime47 = localDateTime32.toDateTime(dateTimeZone44);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime47.getZone();
        org.joda.time.Chronology chronology50 = iSOChronology0.withZone(dateTimeZone49);
        org.joda.time.DurationField durationField51 = chronology50.months();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology50);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9" + "'", str26, "9");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (Canada)" + "'", str29, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "9" + "'", str30, "9");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-11T10:00:00.000Z" + "'", str48, "2022-02-11T10:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.millisOfSecond();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.lang.String str38 = property36.getAsShortText(locale37);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = property36.getAsText(locale40);
        org.joda.time.LocalDateTime localDateTime43 = property36.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str45 = iSOChronology44.toString();
        org.joda.time.DurationField durationField46 = iSOChronology44.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        int[] intArray53 = iSOChronology44.get((org.joda.time.ReadablePartial) localDateTime49, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = iSOChronology44.getZone();
        java.lang.String str55 = dateTimeZone54.toString();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime43, dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.yearOfCentury();
        int int60 = property59.getMaximumValueOverall();
        org.joda.time.DurationField durationField61 = property59.getDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.lang.String str69 = property67.getAsShortText(locale68);
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.lang.String str72 = locale70.getDisplayName(locale71);
        java.lang.String str73 = property67.getAsText(locale71);
        java.lang.String str74 = property59.getAsText(locale71);
        org.joda.time.LocalDateTime localDateTime75 = property59.roundHalfFloorCopy();
        boolean boolean76 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9" + "'", str38, "9");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English (Canada)" + "'", str41, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9" + "'", str42, "9");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 99 + "'", int60 == 99);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "9" + "'", str69, "9");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "English (Canada)" + "'", str72, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "9" + "'", str73, "9");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "22" + "'", str74, "22");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DurationField durationField3 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        java.lang.Object obj5 = null;
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str10 = iSOChronology9.toString();
        org.joda.time.DurationField durationField11 = iSOChronology9.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        int[] intArray18 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = iSOChronology9.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime8.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj5, dateTimeZone19);
        org.joda.time.Chronology chronology23 = iSOChronology0.withZone(dateTimeZone19);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.era();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfEra((int) 'a');
        int[] intArray35 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime31, (long) 100);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withDurationAdded(readableDuration36, (int) '4');
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readableDuration39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfMonth();
        int int44 = property43.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime45 = property43.roundHalfFloorCopy();
        boolean boolean46 = dateTimeZone19.equals((java.lang.Object) localDateTime45);
        int int47 = localDateTime45.getYearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str6 = iSOChronology5.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = iSOChronology5.add(readablePeriod7, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField11 = iSOChronology5.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        iSOChronology5.validate((org.joda.time.ReadablePartial) localDateTime18, intArray28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime18.yearOfEra();
        java.util.Date date31 = localDateTime18.toDate();
        boolean boolean32 = timeZone3.inDaylightTime(date31);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Sat Feb 12 09:49:09 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        java.lang.String str13 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.clockhourOfDay();
        long long19 = iSOChronology0.add(2798420L, 0L, 240000);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale20.getDisplayCountry();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField24 = iSOChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.era();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYearOfEra((int) 'a');
        int[] intArray34 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = localDateTime30.getFields();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minusHours(1);
        int int38 = localDateTime30.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime30.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime30.minusSeconds(2022);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime30.plus(readablePeriod43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = property45.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.lang.String str54 = property52.getAsShortText(locale53);
        java.lang.String str55 = locale53.getISO3Country();
        java.lang.String str56 = property45.getAsText(locale53);
        java.lang.String str57 = locale20.getDisplayName(locale53);
        boolean boolean58 = iSOChronology0.equals((java.lang.Object) str57);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2798420L + "'", long19 == 2798420L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9" + "'", str54, "9");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "35349240" + "'", str56, "35349240");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.lang.Class<?> wildcardClass2 = strSet0.getClass();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfMonth();
        org.joda.time.Chronology chronology13 = iSOChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours(17);
        org.joda.time.Chronology chronology16 = iSOChronology0.withZone(dateTimeZone15);
        org.joda.time.DurationField durationField17 = iSOChronology0.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) 'x');
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str22 = iSOChronology21.toString();
        org.joda.time.DurationField durationField23 = iSOChronology21.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        int[] intArray30 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology21.getZone();
        long long35 = dateTimeZone31.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale36 = java.util.Locale.US;
        boolean boolean37 = dateTimeZone31.equals((java.lang.Object) locale36);
        long long41 = dateTimeZone31.convertLocalToUTC((long) ' ', true, (long) '4');
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 'u', dateTimeZone31);
        org.joda.time.DateTime dateTime43 = localDateTime13.toDateTime(dateTimeZone31);
        java.lang.String str44 = dateTimeZone31.getID();
        long long48 = dateTimeZone31.convertLocalToUTC(1707644670915L, true, (long) '#');
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T10:00:00.000" + "'", str14, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1707644670915L + "'", long48 == 1707644670915L);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(37);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfDay(17);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusHours(71111255);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minus(readableDuration26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withHourOfDay(33152594);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33152594 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        boolean boolean13 = property10.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.era();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra((int) 'a');
        int[] intArray25 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime21.getFields();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusHours(1);
        int int29 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.withTime(1, 23, 51, 23);
        int int37 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DurationField durationField38 = property10.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str45 = nameProvider39.getShortName(locale41, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str46 = property10.getAsShortText(locale41);
        java.lang.String str47 = locale4.getDisplayScript(locale41);
        java.lang.String str48 = locale41.getDisplayLanguage();
        java.util.Locale.Builder builder49 = builder3.setLocale(locale41);
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str55 = nameProvider50.getName(locale51, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String str61 = nameProvider50.getShortName(locale56, "und", "2022-02-11T09:44:00.457");
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField63 = iSOChronology62.halfdays();
        java.lang.String str64 = iSOChronology62.toString();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology62.era();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology62.centuryOfEra();
        org.joda.time.DurationField durationField67 = iSOChronology62.minutes();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.year();
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str72 = locale71.getScript();
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str74 = locale71.getDisplayCountry(locale73);
        java.lang.String str75 = property69.getAsText(locale73);
        java.lang.String str78 = nameProvider50.getName(locale73, "yearOfCentury", "ETC/UTC");
        java.util.Locale.Builder builder79 = builder49.setLocale(locale73);
        java.util.Locale.Builder builder82 = builder49.setExtension('a', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder84 = builder49.setScript("2022-02-11T09:48:13.206");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:48:13.206 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(durationField38);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English (Canada)" + "'", str58, "English (Canada)");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022" + "'", str75, "2022");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        java.lang.String str16 = localDateTime14.toString("9");
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology18.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = iSOChronology18.add(readablePeriod25, (long) 'u', (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(1644573600000L, (org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) str16, (org.joda.time.Chronology) iSOChronology18);
        java.util.Date date31 = localDateTime30.toDate();
        int int32 = localDateTime30.getMillisOfSecond();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 117L + "'", long28 == 117L);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Tue Jan 01 00:00:00 GMT 9");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Etc/UTC");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getDisplayName();
        java.lang.String str4 = locale1.getDisplayVariant();
        java.lang.Object obj5 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "");
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withDurationAdded(readableDuration4, 6);
        int int7 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withTime(2010, 59242, 71282403, 187200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2010 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        java.lang.String str7 = property6.toString();
        java.lang.String str8 = property6.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[secondOfMinute]" + "'", str7, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondOfMinute" + "'", str8, "secondOfMinute");
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.monthOfYear();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        int int12 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundFloorCopy();
        java.lang.String str14 = property5.toString();
        org.joda.time.LocalDateTime localDateTime15 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[hourOfDay]" + "'", str14, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.withSecondOfMinute(56);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.withTime((int) (byte) 0, 13, 53, 4);
        org.joda.time.LocalDateTime.Property property23 = localDateTime2.millisOfSecond();
        int int24 = property23.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property23.addToCopy((long) 836);
        org.joda.time.LocalDateTime localDateTime28 = property23.addToCopy(1644573600000L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime2.plusMillis(71122738);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime2.withSecondOfMinute(21);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withWeekyear(2);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.era();
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.withWeekyear(2);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField57 = iSOChronology56.halfdays();
        java.lang.String str58 = iSOChronology56.toString();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology56.era();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology56.centuryOfEra();
        org.joda.time.DurationField durationField61 = iSOChronology56.minutes();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology56);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.year();
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str66 = locale65.getScript();
        java.util.Locale locale67 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str68 = locale65.getDisplayCountry(locale67);
        java.lang.String str69 = property63.getAsText(locale67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property63.getFieldType();
        int int71 = localDateTime55.indexOf(dateTimeFieldType70);
        int int72 = localDateTime44.indexOf(dateTimeFieldType70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime34.withField(dateTimeFieldType70, 691);
        org.joda.time.LocalDateTime.Property property75 = localDateTime34.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime34.plusMinutes(752);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[UTC]" + "'", str58, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022" + "'", str69, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        int int14 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy(56);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        int int5 = localDateTime4.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.DurationField durationField13 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime14 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths(0);
        int int17 = localDateTime16.getMonthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        int int8 = localDateTime7.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property14.getAsShortText(locale15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = property14.getAsText(locale18);
        org.joda.time.LocalDateTime localDateTime21 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property14.roundHalfEvenCopy();
        boolean boolean23 = localDateTime7.equals((java.lang.Object) localDateTime22);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str25 = iSOChronology24.toString();
        org.joda.time.DurationField durationField26 = iSOChronology24.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        int[] intArray33 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology24.getZone();
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime37 = localDateTime22.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.Chronology chronology39 = iSOChronology1.withZone(dateTimeZone38);
        java.lang.String str41 = dateTimeZone38.getNameKey(1644659045736L);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        long long46 = dateTimeZone43.convertLocalToUTC((long) (-19034), true);
        long long48 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, 1707644708226L);
        long long50 = dateTimeZone38.previousTransition(1707644827190L);
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.hourOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.minusMinutes((int) '4');
        org.joda.time.LocalDateTime.Property property61 = localDateTime55.millisOfSecond();
        int int62 = property61.getMinimumValueOverall();
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField65 = iSOChronology64.halfdays();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology64.era();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology64);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology69.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.hourOfDay();
        java.util.Locale locale75 = java.util.Locale.ENGLISH;
        java.lang.String str76 = property74.getAsShortText(locale75);
        java.lang.String str77 = property68.getAsShortText(locale75);
        java.lang.String str78 = locale75.getVariant();
        java.lang.String str79 = property61.getAsText(locale75);
        java.lang.String str80 = locale52.getDisplayScript(locale75);
        java.lang.String str81 = locale75.getDisplayVariant();
        java.lang.String str82 = dateTimeZone38.getName(1707644762787L, locale75);
        java.lang.Object obj83 = locale75.clone();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9" + "'", str20, "9");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-19042L) + "'", long46 == (-19042L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1707644708218L + "'", long48 == 1707644708218L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1707644827190L + "'", long50 == 1707644827190L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "9" + "'", str76, "9");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "0" + "'", str77, "0");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "710" + "'", str79, "710");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00" + "'", str82, "+00:00");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "en");
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2031-11-12T09:44:23.993");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = dateTimeZone2.getShortName(1707644646846L, locale4);
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str13 = nameProvider8.getName(locale9, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str19 = nameProvider8.getShortName(locale14, "und", "2022-02-11T09:44:00.457");
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField21 = iSOChronology20.halfdays();
        java.lang.String str22 = iSOChronology20.toString();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology20.era();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology20.centuryOfEra();
        org.joda.time.DurationField durationField25 = iSOChronology20.minutes();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.year();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str30 = locale29.getScript();
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale29.getDisplayCountry(locale31);
        java.lang.String str33 = property27.getAsText(locale31);
        java.lang.String str36 = nameProvider8.getName(locale31, "yearOfCentury", "ETC/UTC");
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str40 = locale39.getDisplayScript();
        java.lang.String str43 = nameProvider37.getShortName(locale39, "Chinese", "ISOChronology[Etc/UTC]");
        java.util.Locale locale45 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str46 = locale45.getDisplayCountry();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.util.Locale.setDefault(locale47);
        java.util.Set<java.lang.String> strSet51 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale45.getDisplayCountry(locale47);
        java.lang.String str55 = nameProvider37.getShortName(locale45, "hi!", "");
        java.lang.String str56 = locale31.getDisplayScript(locale45);
        java.lang.String str58 = locale31.getUnicodeLocaleType("11");
        java.lang.String str59 = dateTimeZone2.getShortName((long) 632, locale31);
        java.lang.String str60 = locale31.getDisplayLanguage();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField63 = iSOChronology62.halfdays();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone67 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean68 = timeZone65.hasSameRules(timeZone67);
        java.util.TimeZone.setDefault(timeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.Chronology chronology71 = iSOChronology62.withZone(dateTimeZone70);
        java.util.TimeZone timeZone72 = dateTimeZone70.toTimeZone();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone70);
        boolean boolean75 = dateTimeZone70.isStandardOffset(11512008555582L);
        java.lang.String str76 = dateTimeZone70.toString();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Locale locale80 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str81 = locale80.getISO3Country();
        java.lang.String str82 = locale80.getScript();
        java.lang.String str83 = locale78.getDisplayName(locale80);
        java.lang.String str84 = locale80.toLanguageTag();
        java.util.Locale locale86 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str87 = locale86.getISO3Country();
        java.lang.String str88 = locale86.toLanguageTag();
        java.lang.String str89 = locale80.getDisplayLanguage(locale86);
        java.lang.String str90 = dateTimeZone70.getName((long) 414, locale86);
        java.lang.String str91 = locale86.getLanguage();
        java.lang.String str92 = locale31.getDisplayScript(locale86);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de" + "'", str5, "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals(locale45.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English (Canada)" + "'", str49, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese" + "'", str60, "Chinese");
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "UTC" + "'", str76, "UTC");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertEquals(locale80.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Korean" + "'", str83, "Korean");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "und" + "'", str84, "und");
        org.junit.Assert.assertEquals(locale86.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "und" + "'", str88, "und");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "isochronology[etc/utc]" + "'", str89, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00" + "'", str90, "+00:00");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "isochronology[etc/utc]" + "'", str91, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        java.lang.String str13 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.lang.String str4 = locale1.getDisplayScript();
        java.lang.String str5 = locale1.getVariant();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale.setDefault(category6, locale8);
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale1.getDisplayScript(locale8);
        java.lang.String str12 = locale8.getDisplayName();
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (United States)" + "'", str12, "English (United States)");
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.era();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfEra((int) 'a');
        int[] intArray35 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime31, (long) 100);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withDurationAdded(readableDuration36, (int) '4');
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        int int42 = localDateTime31.indexOf(dateTimeFieldType41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime31.plus(readableDuration43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime31.plusSeconds((int) 'a');
        boolean boolean47 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusWeeks(56);
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology50.dayOfYear();
        java.lang.String str52 = iSOChronology50.toString();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology50.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField55 = iSOChronology54.halfdays();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology54.era();
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withYearOfEra((int) 'a');
        int[] intArray65 = iSOChronology54.get((org.joda.time.ReadablePartial) localDateTime61, (long) 100);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime61.withDurationAdded(readableDuration66, (int) '4');
        int[] intArray69 = localDateTime68.getValues();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.plusYears(2);
        long long73 = iSOChronology50.set((org.joda.time.ReadablePartial) localDateTime71, 1L);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology76 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField77 = iSOChronology76.halfdays();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology76.era();
        org.joda.time.chrono.ISOChronology iSOChronology79 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField80 = iSOChronology79.dayOfYear();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology79);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withYearOfEra((int) 'a');
        int[] intArray87 = iSOChronology76.get((org.joda.time.ReadablePartial) localDateTime83, (long) 100);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime83.withDurationAdded(readableDuration88, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = localDateTime90.getFieldType((int) (byte) 0);
        boolean boolean93 = localDateTime75.isSupported(dateTimeFieldType92);
        int int94 = localDateTime49.indexOf(dateTimeFieldType92);
        int int95 = localDateTime16.get(dateTimeFieldType92);
        org.joda.time.LocalDateTime localDateTime97 = localDateTime16.minusWeeks(41);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[2022, 2, 11, 35349809]");
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1707644949809L + "'", long73 == 1707644949809L);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(iSOChronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(iSOChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2022 + "'", int95 == 2022);
        org.junit.Assert.assertNotNull(localDateTime97);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localDateTime6.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis(35072674);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusYears(53);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMonths(35130505);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.dayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1644573599), 35348016);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 35348016");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        java.lang.String str3 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField5 = iSOChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(1707644641355L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology1.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology1.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[UTC]" + "'", str3, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfSecond();
        org.joda.time.DurationField durationField5 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str5 = nameProvider0.getName(locale1, "English (Canada)", "Etc/UTC");
        java.lang.String str6 = locale1.getDisplayCountry();
        java.lang.String str7 = locale1.getDisplayCountry();
        java.lang.String str8 = locale1.getDisplayLanguage();
        java.lang.String str9 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Japanese" + "'", str8, "Japanese");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 21, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(999);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = localDateTime5.toString("2022-02-11t09:44:09.708");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.era();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra((int) 'a');
        int[] intArray37 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime33, (long) 100);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.withDurationAdded(readableDuration38, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDateTime40.getFieldType((int) (byte) 0);
        boolean boolean43 = localDateTime25.isSupported(dateTimeFieldType42);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = property49.getAsShortText(locale50);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = property49.getAsText(locale53);
        java.util.Locale locale56 = java.util.Locale.ITALIAN;
        int int57 = property49.getMaximumShortTextLength(locale56);
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology58.dayOfYear();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property63 = localDateTime60.hourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime60.minusMinutes((int) '4');
        int int66 = property49.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime68 = property49.addToCopy((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property49.getFieldType();
        int int70 = localDateTime25.get(dateTimeFieldType69);
        java.util.Date date71 = localDateTime25.toDate();
        int int72 = localDateTime25.size();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime25.minusSeconds(587);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35349909]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707644949909L + "'", long23 == 1707644949909L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9" + "'", str51, "9");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English (Canada)" + "'", str54, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "9" + "'", str55, "9");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(date71);
// flaky:         org.junit.Assert.assertEquals(date71.toString(), "Sun Oct 11 09:49:09 GMT 2015");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(localDateTime74);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        boolean boolean20 = property19.isLeap();
        org.joda.time.Interval interval21 = property19.toInterval();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str16 = iSOChronology15.toString();
        org.joda.time.DurationField durationField17 = iSOChronology15.weeks();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology15.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology15.dayOfMonth();
        org.joda.time.DurationField durationField20 = iSOChronology15.seconds();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology15.era();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.util.TimeZone.setDefault(timeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        int int30 = timeZone26.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        long long33 = dateTimeZone31.previousTransition((long) 17);
        boolean boolean34 = dateTimeZone31.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField37 = iSOChronology36.halfdays();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone41 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        java.util.TimeZone.setDefault(timeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Chronology chronology45 = iSOChronology36.withZone(dateTimeZone44);
        java.util.TimeZone timeZone46 = dateTimeZone44.toTimeZone();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone44);
        long long49 = dateTimeZone31.getMillisKeepLocal(dateTimeZone44, 1707644635723L);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 18, dateTimeZone31);
        org.joda.time.Chronology chronology51 = iSOChronology15.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime52 = localDateTime13.toDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime13.minusWeeks(71115569);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusSeconds(351562);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 17L + "'", long33 == 17L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1707644635723L + "'", long49 == 1707644635723L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.era();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra((int) 'a');
        int[] intArray37 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime33, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = localDateTime33.getFields();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusHours(1);
        int int41 = localDateTime33.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime33.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property46 = localDateTime33.yearOfCentury();
        int int47 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime33.plusSeconds((int) (short) 100);
        int int50 = localDateTime33.getEra();
        org.joda.time.Chronology chronology51 = localDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime33.withMinuteOfHour(49);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(71122738, 104400000, (-8077), 42357874, 21, 35494564, 35491048);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42357874 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
        long long15 = dateTimeZone10.convertLocalToUTC((long) 35569542, false);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 35569542L + "'", long15 == 35569542L);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.weekyearOfCentury();
        long long11 = iSOChronology1.add(1644572637306L, 1644572653046L, 6);
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.dayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField21 = iSOChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.era();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfEra((int) 'a');
        int[] intArray31 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.withDurationAdded(readableDuration32, (int) '4');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        int int38 = localDateTime27.indexOf(dateTimeFieldType37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.plus(readableDuration39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime27.plusSeconds((int) 'a');
        boolean boolean43 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.minusSeconds(23);
        long long49 = iSOChronology1.set((org.joda.time.ReadablePartial) localDateTime47, 1644572727257L);
        org.joda.time.DurationField durationField50 = iSOChronology1.centuries();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 11512008555582L + "'", long11 == 11512008555582L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644573024062L + "'", long49 == 1644573024062L);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withDate(35335217, 35516061, 36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35516061 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        long long37 = dateTimeZone33.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.Chronology chronology39 = iSOChronology0.withZone(dateTimeZone33);
        java.util.TimeZone timeZone40 = dateTimeZone33.toTimeZone();
        java.lang.String str42 = dateTimeZone33.getNameKey((long) 0);
        java.lang.String str44 = dateTimeZone33.getShortName(1644572638343L);
        int int46 = dateTimeZone33.getOffset(1644572744665L);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        int int53 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.minus(readableDuration55);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField58 = iSOChronology57.halfdays();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone62 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean63 = timeZone60.hasSameRules(timeZone62);
        java.util.TimeZone.setDefault(timeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.Chronology chronology66 = iSOChronology57.withZone(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration55, dateTimeZone65);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("0");
        java.lang.String str71 = dateTimeZone65.getShortName(1644659045736L, locale70);
        java.lang.String str72 = dateTimeZone33.getName(1707435847380L, locale70);
        java.lang.String str73 = locale70.getVariant();
        java.util.Set<java.lang.String> strSet74 = locale70.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.era();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra((int) 'a');
        int[] intArray37 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime33, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = localDateTime33.getFields();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusHours(1);
        int int41 = localDateTime33.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime33.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property46 = localDateTime33.yearOfCentury();
        int int47 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property48 = localDateTime33.weekOfWeekyear();
        int int49 = property48.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime51 = property48.addWrapFieldToCopy(0);
        int int52 = property48.getLeapAmount();
        org.joda.time.DurationField durationField53 = property48.getRangeDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DurationField durationField33 = property5.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str40 = nameProvider34.getShortName(locale36, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str41 = property5.getAsShortText(locale36);
        org.joda.time.LocalDateTime localDateTime42 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime44 = property5.addToCopy((long) 292278993);
        org.joda.time.DurationField durationField45 = property5.getDurationField();
        org.joda.time.LocalDateTime localDateTime46 = property5.withMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str48 = iSOChronology47.toString();
        org.joda.time.DurationField durationField49 = iSOChronology47.weeks();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology47.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology47.halfdayOfDay();
        org.joda.time.DurationField durationField54 = iSOChronology47.millis();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withYearOfEra((int) 'a');
        int[] intArray63 = iSOChronology47.get((org.joda.time.ReadablePartial) localDateTime59, 1707995358805L);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.withYearOfEra(801);
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.hourOfDay();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.minusMinutes((int) '4');
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime76 = property74.addToCopy((long) 51);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property74.getFieldType();
        int int78 = localDateTime59.get(dateTimeFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime46.withField(dateTimeFieldType77, 35125748);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35125748 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[2024, 2, 15, 40158805]");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 20 + "'", int78 == 20);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.plusMonths(25);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = localDateTime21.getValue(71114197);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 71114197");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale.Builder builder5 = builder0.setLanguage("en");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setUnicodeLocaleKeyword("0097-02-18T09:51:12.489", "2022-02-15T14:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 0097-02-18T09:51:12.489 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en__Chinese");
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        java.util.Date date33 = localDateTime32.toDate();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.fromDateFields(date33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.DurationField durationField37 = property35.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime39 = property35.addToCopy((int) '4');
        org.joda.time.DurationField durationField40 = property35.getLeapDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Thu Feb 11 09:49:10 GMT 2010");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNull(durationField37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNull(durationField40);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("GMT");
        double double2 = languageRange1.getWeight();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        boolean boolean9 = languageRange1.equals((java.lang.Object) property8);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(obj0, dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.toString();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.time.ZoneId zoneId7 = timeZone3.toZoneId();
        boolean boolean8 = timeZone1.hasSameRules(timeZone3);
        int int9 = timeZone1.getRawOffset();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.time.ZoneId zoneId17 = timeZone13.toZoneId();
        boolean boolean18 = timeZone11.hasSameRules(timeZone13);
        java.lang.String str19 = timeZone11.getID();
        boolean boolean20 = timeZone1.hasSameRules(timeZone11);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.time.ZoneId zoneId28 = timeZone24.toZoneId();
        boolean boolean29 = timeZone22.hasSameRules(timeZone24);
        java.lang.String str30 = timeZone22.getID();
        java.util.TimeZone.setDefault(timeZone22);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.time.ZoneId zoneId37 = timeZone33.toZoneId();
        int int38 = timeZone33.getRawOffset();
        java.lang.String str39 = timeZone33.getID();
        boolean boolean40 = timeZone22.hasSameRules(timeZone33);
        boolean boolean41 = timeZone1.hasSameRules(timeZone22);
        java.time.ZoneId zoneId42 = timeZone1.toZoneId();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT" + "'", str19, "GMT");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneId28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GMT" + "'", str30, "GMT");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GMT" + "'", str39, "GMT");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(zoneId42);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) 'u');
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsShortText(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = property17.getAsText(locale21);
        org.joda.time.LocalDateTime localDateTime24 = property17.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str26 = iSOChronology25.toString();
        org.joda.time.DurationField durationField27 = iSOChronology25.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int[] intArray34 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology25.getZone();
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime24, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime44 = localDateTime37.withYearOfCentury((int) (short) 10);
        int int45 = localDateTime44.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withPeriodAdded(readablePeriod46, 9);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        boolean boolean51 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime10.withYear(400);
        org.joda.time.DurationFieldType durationFieldType54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime56 = localDateTime10.withFieldAdded(durationFieldType54, 35213176);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9" + "'", str23, "9");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plus(readablePeriod5);
        int int7 = localDateTime2.getWeekOfWeekyear();
        int int8 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.year();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minus(readablePeriod10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime2.getFields();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-18T09:46:37.624Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-18T09:46:37.624Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.DurationField durationField3 = iSOChronology1.months();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 400, (org.joda.time.Chronology) iSOChronology1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfMonth(44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.util.TimeZone.setDefault(timeZone1);
        int int8 = timeZone1.getOffset(1644572798978L);
        java.lang.String str9 = timeZone1.getID();
        int int10 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.era();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfEra((int) 'a');
        int[] intArray18 = iSOChronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime14.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusHours(1);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra((int) 'a');
        int[] intArray33 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withDurationAdded(readableDuration34, (int) '4');
        int[] intArray37 = localDateTime36.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime21.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMinuteOfHour((int) ' ');
        int int44 = localDateTime40.getDayOfWeek();
        org.joda.time.DurationFieldType durationFieldType45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime40.withFieldAdded(durationFieldType45, 35470880);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 11, 35350506]");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("en-CA", strMap1);
        java.lang.String[] strArray9 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray17 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList18);
        boolean boolean21 = strSet10.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.TimeZone.setDefault(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        int int29 = timeZone25.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.TimeZone.setDefault(timeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        boolean boolean38 = timeZone25.hasSameRules(timeZone34);
        boolean boolean39 = strSet10.remove((java.lang.Object) timeZone34);
        java.lang.Object[] objArray40 = strSet10.toArray();
        java.lang.String str41 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap42);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[0, 2022-02-11T09:43:52.830, Greenwich Mean Time, , Etc/UTC]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[0, 2022-02-11T09:43:52.830, Greenwich Mean Time, , Etc/UTC]");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeList43);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        long long14 = dateTimeZone10.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        int int18 = dateTimeZone10.getOffset((long) 2024);
        java.lang.String str20 = dateTimeZone10.getName(1644572670961L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) 'u');
        int int9 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.withTime(3, 56, 3, (int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.withYear(292278993);
        java.util.Date date17 = localDateTime6.toDate();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.fromDateFields(date17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localDateTime18.toString("2022-02-13T19:46:43.933");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 12 09:49:10 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:45:41.864Z");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withDurationAdded(readableDuration21, (int) '4');
        int[] intArray24 = localDateTime23.getValues();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusYears(2);
        int[] intArray28 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime23, 35054090L);
        org.joda.time.DurationField durationField29 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology0.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2022, 2, 11, 35350698]");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 35054090]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property20 = localDateTime7.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withPeriodAdded(readablePeriod21, 8);
        int int24 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime.Property property26 = localDateTime7.year();
        int int27 = localDateTime7.getDayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.lang.String str7 = timeZone1.getID();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = timeZone11.getRawOffset();
        boolean boolean16 = timeZone11.observesDaylightTime();
        int int18 = timeZone11.getOffset(1707644660798L);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.time.ZoneId zoneId26 = timeZone22.toZoneId();
        int int27 = timeZone22.getRawOffset();
        timeZone22.setID("2022-02-11T09:44:05.224");
        timeZone22.setRawOffset((int) '4');
        int int32 = timeZone22.getRawOffset();
        boolean boolean33 = timeZone22.observesDaylightTime();
        boolean boolean34 = timeZone11.hasSameRules(timeZone22);
        timeZone22.setRawOffset(0);
        int int38 = timeZone22.getOffset(0L);
        boolean boolean39 = timeZone1.hasSameRules(timeZone22);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField41 = iSOChronology40.halfdays();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        java.util.TimeZone.setDefault(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.Chronology chronology49 = iSOChronology40.withZone(dateTimeZone48);
        java.util.TimeZone timeZone50 = dateTimeZone48.toTimeZone();
        boolean boolean51 = timeZone50.observesDaylightTime();
        java.time.ZoneId zoneId52 = timeZone50.toZoneId();
        boolean boolean53 = timeZone50.observesDaylightTime();
        timeZone50.setID("2022-02-11T10:00:00.000");
        boolean boolean56 = timeZone1.hasSameRules(timeZone50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) timeZone50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.SimpleTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zoneId52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DurationField durationField3 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        java.lang.Object obj5 = null;
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str10 = iSOChronology9.toString();
        org.joda.time.DurationField durationField11 = iSOChronology9.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        int[] intArray18 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = iSOChronology9.getZone();
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime8.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj5, dateTimeZone19);
        org.joda.time.Chronology chronology23 = iSOChronology0.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology0.year();
        org.joda.time.DurationField durationField26 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        boolean boolean16 = property12.equals((java.lang.Object) durationField15);
        org.joda.time.DurationField durationField17 = property12.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime18 = property12.roundHalfCeilingCopy();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField20 = iSOChronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology19.era();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra((int) 'a');
        int[] intArray30 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.withDurationAdded(readableDuration31, (int) '4');
        int[] intArray34 = localDateTime33.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime18, intArray34);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str40 = iSOChronology39.toString();
        org.joda.time.DurationField durationField41 = iSOChronology39.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        int[] intArray48 = iSOChronology39.get((org.joda.time.ReadablePartial) localDateTime44, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = iSOChronology39.getZone();
        long long53 = dateTimeZone49.convertLocalToUTC((long) 0, true, 0L);
        long long55 = dateTimeZone49.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology56 = iSOChronology36.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology36.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str60 = iSOChronology59.toString();
        org.joda.time.DurationField durationField61 = iSOChronology59.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        int[] intArray68 = iSOChronology59.get((org.joda.time.ReadablePartial) localDateTime64, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone69 = iSOChronology59.getZone();
        long long73 = dateTimeZone69.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        org.joda.time.Chronology chronology75 = iSOChronology36.withZone(dateTimeZone69);
        long long77 = dateTimeZone69.nextTransition((long) 14);
        org.joda.time.Chronology chronology78 = iSOChronology0.withZone(dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(dateTimeZone69);
        java.util.TimeZone timeZone80 = dateTimeZone69.toTimeZone();
        int int81 = timeZone80.getDSTSavings();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2022, 2, 11, 35350764]");
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10L + "'", long55 == 10L);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[UTC]" + "'", str60, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 14L + "'", long77 == 14L);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra((int) 'a');
        int[] intArray16 = iSOChronology5.get((org.joda.time.ReadablePartial) localDateTime12, (long) 100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withDurationAdded(readableDuration17, (int) '4');
        long long21 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime19, 2022L);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.minusDays(35088377);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localDateTime25.getValue(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 46");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572950787L + "'", long21 == 1644572950787L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime25.getFields();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusYears(27);
        int int33 = localDateTime25.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime25.withDate(49977439, 35468231, 49977439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35468231 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.LocalDateTime localDateTime10 = property5.withMinimumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 6);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readableDuration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusSeconds(71114197);
        int int18 = localDateTime17.getMonthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField13 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.secondOfMinute();
        long long20 = iSOChronology0.add((long) 35195131, (long) 48, 35311328);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1730138875L + "'", long20 == 1730138875L);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfCentury(19);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withCenturyOfEra(2048);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DurationField durationField33 = property5.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str40 = nameProvider34.getShortName(locale36, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str41 = property5.getAsShortText(locale36);
        org.joda.time.LocalDateTime localDateTime42 = property5.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property5.getFieldType();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDateTime4.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(537);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDateTime10.getFields();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMonths(46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology22);
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology22.era();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology22.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology22.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(1013424422609L, (org.joda.time.Chronology) iSOChronology22);
        boolean boolean31 = localDateTime18.isEqual((org.joda.time.ReadablePartial) localDateTime30);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        timeZone1.setRawOffset(4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        timeZone1.setRawOffset(1);
        int int12 = timeZone1.getOffset(1644572670961L);
        int int13 = timeZone1.getRawOffset();
        timeZone1.setRawOffset(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        int int8 = timeZone4.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        long long11 = dateTimeZone9.previousTransition((long) 17);
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.TimeZone.setDefault(timeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Chronology chronology23 = iSOChronology14.withZone(dateTimeZone22);
        java.util.TimeZone timeZone24 = dateTimeZone22.toTimeZone();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone22);
        long long27 = dateTimeZone9.getMillisKeepLocal(dateTimeZone22, 1707644635723L);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 18, dateTimeZone9);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        java.lang.String str32 = iSOChronology30.toString();
        org.joda.time.DurationField durationField33 = iSOChronology30.hours();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology30.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        java.lang.String str37 = iSOChronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = iSOChronology35.withZone(dateTimeZone40);
        int int43 = dateTimeZone40.getOffsetFromLocal(6830578589573L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone40);
        int[] intArray46 = iSOChronology30.get((org.joda.time.ReadablePartial) localDateTime44, (long) 22);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.hourOfDay();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getDisplayVariant();
        java.lang.String str50 = locale48.getDisplayName();
        java.util.Set<java.lang.Character> charSet51 = locale48.getExtensionKeys();
        java.lang.String str52 = property47.getAsShortText(locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = localDateTime28.toString("2022-02-13T19:46:43.933", locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 17L + "'", long11 == 17L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1707644635723L + "'", long27 == 1707644635723L);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1, 22]");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Japanese" + "'", str50, "Japanese");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "9" + "'", str52, "9");
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("ISOChronology[+00:04]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = iSOChronology1.months();
        org.joda.time.DurationField durationField9 = iSOChronology1.millis();
        org.joda.time.DurationField durationField10 = iSOChronology1.hours();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = iSOChronology1.get(readablePeriod11, 1707644880312L, 1707644757148L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyear();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.era();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = property23.getAsShortText(locale24);
        java.lang.String str26 = property17.getAsShortText(locale24);
        org.joda.time.DurationField durationField27 = property17.getDurationField();
        org.joda.time.LocalDateTime localDateTime29 = property17.setCopy("0");
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str32 = iSOChronology31.toString();
        org.joda.time.DurationField durationField33 = iSOChronology31.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        int[] intArray40 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology31.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        int int47 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.minus(readableDuration49);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField52 = iSOChronology51.halfdays();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.TimeZone.setDefault(timeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.Chronology chronology60 = iSOChronology51.withZone(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration49, dateTimeZone59);
        int[] intArray63 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime61, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime29, intArray63);
        org.joda.time.DurationField durationField65 = iSOChronology0.centuries();
        org.joda.time.DateTimeZone dateTimeZone66 = iSOChronology0.getZone();
        long long69 = dateTimeZone66.convertLocalToUTC(208800001L, false);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "9" + "'", str25, "9");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 208800001L + "'", long69 == 208800001L);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField6 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        boolean boolean27 = dateTimeZone23.isStandardOffset((long) 0);
        int int29 = dateTimeZone23.getOffset((long) 16);
        java.util.TimeZone timeZone30 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.time.ZoneId zoneId32 = timeZone30.toZoneId();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(zoneId32);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusHours(6);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDateTime2.getFields();
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = localDateTime2.isSupported(durationFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.minusMinutes(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime2.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DurationField durationField12 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField17 = iSOChronology0.weeks();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray20 = iSOChronology0.get(readablePeriod18, (long) 59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = iSOChronology0.get(readablePeriod8, 1707644640457L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-16T06:46:54.288");
        int int3 = timeZone1.getOffset(1644572828890L);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("2031-11-12T09:44:42.236");
        java.util.TimeZone.setDefault(timeZone5);
        int int8 = timeZone5.getOffset(1644572708553L);
        boolean boolean9 = timeZone1.hasSameRules(timeZone5);
        java.lang.Object obj10 = timeZone5.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        int int5 = strSet4.size();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.util.Locale.setDefault(locale18);
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray28 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList29);
        java.util.stream.Stream<java.lang.String> strStream32 = strList31.parallelStream();
        boolean boolean33 = strSet22.containsAll((java.util.Collection<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strSet22);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList34);
        boolean boolean36 = strSet4.containsAll((java.util.Collection<java.lang.String>) strList34);
        java.util.stream.Stream<java.lang.String> strStream37 = strSet4.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English (Canada)" + "'", str20, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strStream37);
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.lang.String str14 = property5.getAsShortText(locale12);
        org.joda.time.DurationField durationField15 = property5.getDurationField();
        int int16 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = property5.addToCopy(71282747);
        boolean boolean19 = property5.isLeap();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("2022-02-11T09:47:12.537Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:47:12.537Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        java.lang.String str3 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField5 = iSOChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(1707644641355L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DurationField durationField8 = iSOChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology1.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology1.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[UTC]" + "'", str3, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusDays(845);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 18);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        java.lang.String str23 = iSOChronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField26 = iSOChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.era();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra((int) 'a');
        int[] intArray36 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime32, (long) 100);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.withDurationAdded(readableDuration37, (int) '4');
        int[] intArray40 = localDateTime39.getValues();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusYears(2);
        long long44 = iSOChronology21.set((org.joda.time.ReadablePartial) localDateTime42, 1L);
        int int45 = localDateTime42.getDayOfWeek();
        int int46 = localDateTime42.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minus(readablePeriod47);
        org.joda.time.DateTimeField[] dateTimeFieldArray49 = localDateTime42.getFields();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = localDateTime20.toString("0097-02-20T19:45:15.373");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 35351417]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 11, 35351417]");
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1707644951417L + "'", long44 == 1707644951417L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 11 + "'", int46 == 11);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray49);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfYear(35289224);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35289224 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.halfdays();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = iSOChronology0.add(readablePeriod6, 1644572742132L, 611);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572742132L + "'", long9 == 1644572742132L);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField5 = iSOChronology0.minutes();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology6.yearOfEra();
        org.joda.time.DurationField durationField10 = iSOChronology6.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology11.era();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra((int) 'a');
        int[] intArray22 = iSOChronology11.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withDurationAdded(readableDuration23, (int) '4');
        long long27 = iSOChronology6.set((org.joda.time.ReadablePartial) localDateTime25, 2022L);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        boolean boolean29 = localDateTime25.isSupported(durationFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withPeriodAdded(readablePeriod30, (-19034));
        long long34 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime25, 1106601927587193581L);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        int int40 = localDateTime37.getWeekyear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.minus(readableDuration42);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField45 = iSOChronology44.halfdays();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone49 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.TimeZone.setDefault(timeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.Chronology chronology53 = iSOChronology44.withZone(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration42, dateTimeZone52);
        int int56 = dateTimeZone52.getOffsetFromLocal((long) (short) 100);
        org.joda.time.Chronology chronology57 = iSOChronology0.withZone(dateTimeZone52);
        long long59 = dateTimeZone52.convertUTCToLocal(1707644718280L);
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone52);
        org.joda.time.DurationField durationField61 = iSOChronology60.hours();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572951451L + "'", long27 == 1644572951451L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644572951451L + "'", long34 == 1644572951451L);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1707644718280L + "'", long59 == 1707644718280L);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.era();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfEra((int) 'a');
        int[] intArray18 = iSOChronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime14.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusHours(1);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra((int) 'a');
        int[] intArray33 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withDurationAdded(readableDuration34, (int) '4');
        int[] intArray37 = localDateTime36.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology0.year();
        org.joda.time.DurationField durationField41 = iSOChronology0.days();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        java.util.TimeZone.setDefault(timeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        int int49 = timeZone45.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        long long52 = dateTimeZone50.previousTransition((long) 17);
        boolean boolean53 = dateTimeZone50.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField56 = iSOChronology55.halfdays();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.TimeZone.setDefault(timeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.Chronology chronology64 = iSOChronology55.withZone(dateTimeZone63);
        java.util.TimeZone timeZone65 = dateTimeZone63.toTimeZone();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone63);
        long long68 = dateTimeZone50.getMillisKeepLocal(dateTimeZone63, 1707644635723L);
        org.joda.time.Chronology chronology69 = iSOChronology0.withZone(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField71 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 11, 35351475]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 17L + "'", long52 == 17L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1707644635723L + "'", long68 == 1707644635723L);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withPeriodAdded(readablePeriod34, 9);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMonthOfYear((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withPeriodAdded(readablePeriod41, 33110121);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology44);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        boolean boolean52 = localDateTime48.isSupported(dateTimeFieldType51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime48.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime56 = property53.addWrapFieldToCopy(52);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.hourOfDay();
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.lang.String str64 = property62.getAsShortText(locale63);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = property62.getAsText(locale66);
        org.joda.time.LocalDateTime localDateTime69 = property62.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology70 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str71 = iSOChronology70.toString();
        org.joda.time.DurationField durationField72 = iSOChronology70.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology73 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology73.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology73);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusDays((int) (byte) 0);
        int[] intArray79 = iSOChronology70.get((org.joda.time.ReadablePartial) localDateTime75, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone80 = iSOChronology70.getZone();
        java.lang.String str81 = dateTimeZone80.toString();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime69, dateTimeZone80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime82.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime89 = localDateTime82.withYearOfCentury((int) (short) 10);
        int int90 = localDateTime89.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property91 = localDateTime89.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property91.getFieldType();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime56.withField(dateTimeFieldType92, 99);
        org.joda.time.LocalDateTime.Property property95 = localDateTime38.property(dateTimeFieldType92);
        org.joda.time.LocalDateTime localDateTime97 = localDateTime38.withMillisOfDay(36);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "9" + "'", str64, "9");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English (Canada)" + "'", str67, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "9" + "'", str68, "9");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(iSOChronology70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ISOChronology[UTC]" + "'", str71, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(iSOChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "UTC" + "'", str81, "UTC");
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 6 + "'", int90 == 6);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(localDateTime97);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = iSOChronology0.withZone(dateTimeZone6);
        java.lang.String[] strArray14 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray22 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList23);
        boolean boolean26 = strSet15.containsAll((java.util.Collection<java.lang.String>) strList23);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.TimeZone.setDefault(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        int int34 = timeZone30.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.TimeZone.setDefault(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        boolean boolean43 = timeZone30.hasSameRules(timeZone39);
        boolean boolean44 = strSet15.remove((java.lang.Object) timeZone39);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.Chronology chronology46 = iSOChronology0.withZone(dateTimeZone45);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeZone45.getName((long) 752, locale48);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getName(locale1, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str11 = nameProvider0.getShortName(locale6, "und", "2022-02-11T09:44:00.457");
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str14 = locale13.getISO3Language();
        java.lang.String str17 = nameProvider0.getName(locale13, "1970-01-01T00:00:00.010", "2022-02-11T10:00:00.000Z");
        java.util.Locale locale19 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str20 = locale19.getISO3Country();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.util.Locale.setDefault(locale21);
        java.util.Set<java.lang.String> strSet25 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale19.getDisplayCountry(locale21);
        java.util.Set<java.lang.String> strSet27 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str30 = nameProvider0.getName(locale19, "0097-02-18T09:44:03.425", "Deutsch");
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str33 = locale32.getScript();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale32.getDisplayCountry(locale34);
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.lang.String str37 = locale36.getVariant();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleKeys();
        java.lang.String str42 = locale36.getDisplayScript(locale39);
        java.lang.String str43 = locale32.getDisplayCountry(locale36);
        java.lang.String str45 = locale36.getExtension('a');
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("0");
        boolean boolean48 = locale47.hasExtensions();
        boolean boolean49 = locale47.hasExtensions();
        java.util.Locale.setDefault(locale47);
        java.lang.String str51 = locale36.getDisplayName(locale47);
        java.lang.String str54 = nameProvider0.getName(locale36, "2022-02-11T09:45:34.877", "2022-02-11T09:47:44.040");
        java.util.Locale.setDefault(locale36);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals(locale19.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English (Canada)" + "'", str23, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Japanese (Japan)" + "'", str51, "Japanese (Japan)");
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        java.lang.String str4 = iSOChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        int[] intArray21 = localDateTime20.getValues();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusYears(2);
        long long25 = iSOChronology2.set((org.joda.time.ReadablePartial) localDateTime23, 1L);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusMonths((int) (short) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = localDateTime23.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField30 = iSOChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.era();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfEra((int) 'a');
        int[] intArray40 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        iSOChronology1.validate((org.joda.time.ReadablePartial) localDateTime23, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(1707644762190L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusYears(155);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.dayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 11, 35351637]");
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1707644951637L + "'", long25 == 1707644951637L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Collection<java.util.Locale> localeCollection34 = null;
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, localeCollection34);
        java.lang.String[] strArray46 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.util.Iterator<java.lang.String> strItor49 = strSet47.iterator();
        java.lang.Object[] objArray50 = strSet47.toArray();
        java.lang.Object[] objArray51 = strSet47.toArray();
        java.util.stream.Stream<java.lang.String> strStream52 = strSet47.parallelStream();
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet47);
        java.util.Collection<java.lang.String> strCollection54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strCollection54);
        java.util.Collection<java.util.Locale> localeCollection56 = null;
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, localeCollection56);
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.util.Locale.setDefault(locale59);
        java.util.Set<java.lang.String> strSet63 = locale59.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray64 = strSet63.toArray();
        java.util.Iterator<java.lang.String> strItor65 = strSet63.iterator();
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet63);
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.lang.String[] strArray72 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList73);
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.lang.String str78 = locale76.getDisplayName(locale77);
        java.util.Locale.setDefault(locale76);
        java.util.Set<java.lang.String> strSet80 = locale76.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.lang.String[] strArray86 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strList87);
        java.util.stream.Stream<java.lang.String> strStream90 = strList89.parallelStream();
        boolean boolean91 = strSet80.containsAll((java.util.Collection<java.lang.String>) strList89);
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strSet80);
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet80);
        java.util.stream.Stream<java.lang.String> strStream94 = strList93.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English (Canada)" + "'", str61, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "English (Canada)" + "'", str78, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strStream90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(strStream94);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.withSecondOfMinute(56);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.withTime((int) (byte) 0, 13, 53, 4);
        org.joda.time.LocalDateTime.Property property23 = localDateTime2.millisOfSecond();
        int int24 = property23.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property23.addToCopy((long) 836);
        org.joda.time.LocalDateTime localDateTime27 = property23.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(833);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 833 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.getLocalDateTime();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DurationField durationField33 = property5.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str40 = nameProvider34.getShortName(locale36, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str41 = property5.getAsShortText(locale36);
        org.joda.time.tz.NameProvider nameProvider42 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str47 = nameProvider42.getName(locale43, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale49 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = locale49.getScript();
        java.lang.String str52 = locale43.getDisplayVariant(locale49);
        java.lang.String str53 = locale43.getDisplayScript();
        java.util.Locale locale55 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str56 = locale43.getDisplayLanguage(locale55);
        java.lang.String str57 = locale36.getDisplayVariant(locale43);
        java.lang.Object obj58 = locale36.clone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(nameProvider42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals(locale49.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals(locale55.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "");
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str5 = nameProvider0.getName(locale1, "English (Canada)", "Etc/UTC");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str11 = nameProvider0.getShortName(locale6, "+00:00:00.008", "2022-02-11T09:44:45.381");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = locale6.getUnicodeLocaleType("2031-11-12T09:44:29.023");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2031-11-12T09:44:29.023");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.DurationField durationField10 = property5.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime11 = property5.roundHalfCeilingCopy();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsShortText(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = property17.getAsText(locale21);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        int int25 = property17.getMaximumShortTextLength(locale24);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.minusMinutes((int) '4');
        int int34 = property17.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime36 = property17.addToCopy((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plusMonths(0);
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.halfdays();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean48 = timeZone45.hasSameRules(timeZone47);
        java.util.TimeZone.setDefault(timeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.Chronology chronology51 = iSOChronology42.withZone(dateTimeZone50);
        long long54 = dateTimeZone50.adjustOffset((-1L), false);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) 35042587, dateTimeZone50);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str57 = iSOChronology56.toString();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology56.weekOfWeekyear();
        long long62 = iSOChronology56.add((long) (short) 10, (long) 35054090, 3);
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology56.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField65 = iSOChronology64.halfdays();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone69 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean70 = timeZone67.hasSameRules(timeZone69);
        java.util.TimeZone.setDefault(timeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.Chronology chronology73 = iSOChronology64.withZone(dateTimeZone72);
        long long76 = dateTimeZone72.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(dateTimeZone72);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withMillisOfSecond(5);
        org.joda.time.chrono.ISOChronology iSOChronology80 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField81 = iSOChronology80.dayOfYear();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology86 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str87 = iSOChronology86.toString();
        org.joda.time.DurationField durationField88 = iSOChronology86.weeks();
        boolean boolean89 = property85.equals((java.lang.Object) durationField88);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property85.getFieldType();
        boolean boolean91 = localDateTime77.isSupported(dateTimeFieldType90);
        boolean boolean92 = iSOChronology56.equals((java.lang.Object) dateTimeFieldType90);
        org.joda.time.LocalDateTime.Property property93 = localDateTime55.property(dateTimeFieldType90);
        int int94 = localDateTime40.get(dateTimeFieldType90);
        boolean boolean95 = localDateTime11.isSupported(dateTimeFieldType90);
        int int96 = localDateTime11.getWeekOfWeekyear();
        int int97 = localDateTime11.getDayOfYear();
        org.joda.time.LocalDateTime.Property property98 = localDateTime11.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9" + "'", str23, "9");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[UTC]" + "'", str57, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 105162280L + "'", long62 == 105162280L);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 2022L + "'", long76 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(iSOChronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(iSOChronology86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ISOChronology[UTC]" + "'", str87, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 6 + "'", int96 == 6);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 42 + "'", int97 == 42);
        org.junit.Assert.assertNotNull(property98);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        int int18 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withDurationAdded(readableDuration20, 33);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears(33196386);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusMinutes(35491048);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.time.ZoneId zoneId7 = timeZone3.toZoneId();
        boolean boolean8 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        java.time.ZoneId zoneId14 = timeZone10.toZoneId();
        int int15 = timeZone10.getRawOffset();
        java.util.TimeZone.setDefault(timeZone10);
        boolean boolean17 = timeZone1.hasSameRules(timeZone10);
        boolean boolean18 = timeZone10.observesDaylightTime();
        int int20 = timeZone10.getOffset(1707644734168L);
        boolean boolean21 = timeZone10.observesDaylightTime();
        int int23 = timeZone10.getOffset(1644561854090L);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("2031-11-12T09:44:23.993");
        int int27 = timeZone25.getOffset(0L);
        boolean boolean28 = timeZone25.observesDaylightTime();
        boolean boolean29 = timeZone10.hasSameRules(timeZone25);
        java.lang.Object obj30 = timeZone10.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        java.util.TimeZone.setDefault(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        int int16 = timeZone12.getRawOffset();
        timeZone12.setRawOffset((int) (byte) 100);
        timeZone12.setID("Feb");
        boolean boolean21 = timeZone8.hasSameRules(timeZone12);
        java.util.TimeZone.setDefault(timeZone8);
        int int23 = timeZone8.getRawOffset();
        timeZone8.setRawOffset(33110121);
        timeZone8.setID("137047897-01-11T00:00:00.000");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+09:11");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        java.lang.String[] strArray32 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray40 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList41);
        boolean boolean44 = strSet33.containsAll((java.util.Collection<java.lang.String>) strList41);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Collection<java.util.Locale> localeCollection49 = null;
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, localeCollection49);
        java.lang.String[] strArray61 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        java.util.Iterator<java.lang.String> strItor64 = strSet62.iterator();
        java.lang.Object[] objArray65 = strSet62.toArray();
        java.lang.Object[] objArray66 = strSet62.toArray();
        java.util.stream.Stream<java.lang.String> strStream67 = strSet62.parallelStream();
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strSet62);
        java.util.Collection<java.lang.String> strCollection69 = null;
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strCollection69);
        java.util.Collection<java.util.Locale> localeCollection71 = null;
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, localeCollection71);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection71);
        java.util.Collection<java.lang.String> strCollection74 = null;
        java.lang.String str75 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection74);
        java.util.Collection<java.lang.String> strCollection76 = null;
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection76);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Locale.setDefault(locale4);
        java.util.Set<java.lang.String> strSet8 = locale4.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Iterator<java.lang.String> strItor10 = strSet8.iterator();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet8.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strStream11);
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.minusMinutes((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.minus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withWeekyear(29);
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = property29.setCopy(89);
        java.lang.String str32 = property29.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str38 = iSOChronology37.toString();
        org.joda.time.DurationField durationField39 = iSOChronology37.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        int[] intArray46 = iSOChronology37.get((org.joda.time.ReadablePartial) localDateTime42, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = iSOChronology37.getZone();
        java.lang.String str48 = dateTimeZone47.toString();
        org.joda.time.DateTime dateTime49 = localDateTime36.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        int int51 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withDurationAdded(readableDuration53, 33);
        int int56 = localDateTime52.getMinuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withYearOfEra(51);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withWeekyear(35068789);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.plus(readableDuration66);
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology68.dayOfYear();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology68);
        int int71 = localDateTime70.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.hourOfDay();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.plus(readablePeriod77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusSeconds(36);
        boolean boolean81 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime78);
        int int82 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        int int83 = property29.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.ReadablePeriod readablePeriod84 = null;
        org.joda.time.LocalDateTime localDateTime86 = localDateTime67.withPeriodAdded(readablePeriod84, 23);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "337" + "'", str32, "337");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 49 + "'", int56 == 49);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(iSOChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 11 + "'", int71 == 11);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        int int8 = localDateTime7.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property14.getAsShortText(locale15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = property14.getAsText(locale18);
        org.joda.time.LocalDateTime localDateTime21 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property14.roundHalfEvenCopy();
        boolean boolean23 = localDateTime7.equals((java.lang.Object) localDateTime22);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str25 = iSOChronology24.toString();
        org.joda.time.DurationField durationField26 = iSOChronology24.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        int[] intArray33 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology24.getZone();
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime37 = localDateTime22.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.Chronology chronology39 = iSOChronology1.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField40 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology1.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9" + "'", str20, "9");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField11 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.hourOfDay();
        org.joda.time.Chronology chronology14 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField15 = iSOChronology0.minutes();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.TimeZone.setDefault(timeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.lang.String str23 = dateTimeZone22.getID();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.Chronology chronology25 = iSOChronology0.withZone(dateTimeZone22);
        org.joda.time.DurationField durationField26 = chronology25.years();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.minuteOfHour();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str35 = iSOChronology34.toString();
        org.joda.time.DurationField durationField36 = iSOChronology34.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        int[] intArray43 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime39, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology34.getZone();
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDateTime33.toDateTime(dateTimeZone44);
        boolean boolean47 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology49);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str53 = iSOChronology52.toString();
        org.joda.time.DurationField durationField54 = iSOChronology52.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        int[] intArray61 = iSOChronology52.get((org.joda.time.ReadablePartial) localDateTime57, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = iSOChronology52.getZone();
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.DateTime dateTime64 = localDateTime51.toDateTime(dateTimeZone62);
        org.joda.time.chrono.ISOChronology iSOChronology65 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology65);
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str69 = iSOChronology68.toString();
        org.joda.time.DurationField durationField70 = iSOChronology68.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        int[] intArray77 = iSOChronology68.get((org.joda.time.ReadablePartial) localDateTime73, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone78 = iSOChronology68.getZone();
        java.lang.String str79 = dateTimeZone78.toString();
        org.joda.time.DateTime dateTime80 = localDateTime67.toDateTime(dateTimeZone78);
        boolean boolean81 = dateTime64.isAfter((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.ReadableInstant readableInstant82 = null;
        boolean boolean83 = dateTime64.isEqual(readableInstant82);
        boolean boolean84 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime64);
        java.lang.String str85 = dateTime64.toString();
        org.joda.time.Chronology chronology86 = dateTime64.getChronology();
        boolean boolean87 = iSOChronology1.equals((java.lang.Object) chronology86);
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime(1707644747529L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.era();
        java.util.Date date90 = localDateTime88.toDate();
        org.joda.time.LocalDateTime.Property property91 = localDateTime88.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "UTC" + "'", str63, "UTC");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(iSOChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(iSOChronology68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[UTC]" + "'", str69, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(iSOChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "UTC" + "'", str79, "UTC");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-11T09:49:12.173Z" + "'", str85, "2022-02-11T09:49:12.173Z");
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(date90);
        org.junit.Assert.assertEquals(date90.toString(), "Sun Feb 11 09:45:47 GMT 2024");
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.time.ZoneId zoneId7 = timeZone3.toZoneId();
        boolean boolean8 = timeZone1.hasSameRules(timeZone3);
        timeZone1.setID("und");
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.halfdays();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.Chronology chronology20 = iSOChronology11.withZone(dateTimeZone19);
        java.util.TimeZone timeZone21 = dateTimeZone19.toTimeZone();
        boolean boolean22 = timeZone21.observesDaylightTime();
        java.time.ZoneId zoneId23 = timeZone21.toZoneId();
        boolean boolean24 = timeZone1.hasSameRules(timeZone21);
        timeZone21.setRawOffset((int) (short) 10);
        timeZone21.setRawOffset(35344361);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.plusHours(35569542);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.year();
        org.joda.time.DurationField durationField10 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = property11.getAsText(locale15);
        org.joda.time.LocalDateTime localDateTime18 = property11.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime18, dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withYearOfCentury((int) (short) 10);
        int int39 = localDateTime38.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withPeriodAdded(readablePeriod40, 9);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        int[] intArray46 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime42, 1707644672408L);
        java.lang.String str47 = iSOChronology0.toString();
        long long51 = iSOChronology0.add((long) 2031, (long) (-8077), (int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            long long59 = iSOChronology0.getDateTimeMillis(42, 35569542, 663, 71114197, 35341160, 19, 675);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71114197 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[2024, 2, 11, 35072408]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-942978L) + "'", long51 == (-942978L));
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.LocalDateTime localDateTime10 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withWeekyear(2);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.era();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.withWeekyear(2);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField34 = iSOChronology33.halfdays();
        java.lang.String str35 = iSOChronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.era();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology33.centuryOfEra();
        org.joda.time.DurationField durationField38 = iSOChronology33.minutes();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.year();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str43 = locale42.getScript();
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale42.getDisplayCountry(locale44);
        java.lang.String str46 = property40.getAsText(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property40.getFieldType();
        int int48 = localDateTime32.indexOf(dateTimeFieldType47);
        int int49 = localDateTime21.indexOf(dateTimeFieldType47);
        boolean boolean50 = localDateTime11.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.yearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.halfdayOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology9.minutes();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology9.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Chronology chronology16 = iSOChronology9.withZone(dateTimeZone15);
        java.lang.String[] strArray23 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray31 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = strSet24.containsAll((java.util.Collection<java.lang.String>) strList32);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.TimeZone.setDefault(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        int int43 = timeZone39.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        java.util.TimeZone.setDefault(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        boolean boolean52 = timeZone39.hasSameRules(timeZone48);
        boolean boolean53 = strSet24.remove((java.lang.Object) timeZone48);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.Chronology chronology55 = iSOChronology9.withZone(dateTimeZone54);
        long long57 = dateTimeZone54.convertUTCToLocal((-19034L));
        org.joda.time.Chronology chronology58 = iSOChronology0.withZone(dateTimeZone54);
        long long60 = dateTimeZone54.convertUTCToLocal((long) 35324780);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-19034L) + "'", long57 == (-19034L));
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 35324780L + "'", long60 == 35324780L);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsShortText(locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = property13.getAsText(locale17);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        int int21 = property13.getMaximumShortTextLength(locale20);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.minusMinutes((int) '4');
        int int30 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime31 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime32 = property13.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField34 = iSOChronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.era();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYearOfEra((int) 'a');
        int[] intArray44 = iSOChronology33.get((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray45 = localDateTime40.getFields();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.minusHours(1);
        int int48 = localDateTime40.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime40.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime40.minusSeconds(2022);
        int int53 = localDateTime52.getWeekyear();
        int int54 = localDateTime52.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withYear((int) ' ');
        int[] intArray57 = localDateTime52.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime32, intArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime60 = localDateTime32.withEra((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English (Canada)" + "'", str18, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 33330314 + "'", int54 == 33330314);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[2022, 2, 11, 33330314]");
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.lang.String[] strArray15 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Iterator<java.lang.String> strItor18 = strSet16.iterator();
        java.lang.Object[] objArray19 = strSet16.toArray();
        java.lang.Object[] objArray20 = strSet16.toArray();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet16.parallelStream();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Collection<java.util.Locale> localeCollection26 = null;
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection26);
        java.lang.String[] strArray38 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        java.util.Iterator<java.lang.String> strItor41 = strSet39.iterator();
        java.lang.Object[] objArray42 = strSet39.toArray();
        java.lang.Object[] objArray43 = strSet39.toArray();
        java.util.stream.Stream<java.lang.String> strStream44 = strSet39.parallelStream();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Collection<java.lang.String> strCollection46 = null;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strCollection46);
        java.util.Collection<java.util.Locale> localeCollection48 = null;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection48);
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection48);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str53 = locale52.getDisplayVariant();
        java.lang.String str54 = locale52.getISO3Language();
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet55);
        java.util.Spliterator<java.lang.String> strSpliterator57 = strSet55.spliterator();
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField59 = iSOChronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology58.era();
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withYearOfEra((int) 'a');
        int[] intArray69 = iSOChronology58.get((org.joda.time.ReadablePartial) localDateTime65, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray70 = localDateTime65.getFields();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime65.minusHours(1);
        int int73 = localDateTime65.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime65.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime65.minusSeconds(2022);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime65.plus(readablePeriod78);
        org.joda.time.LocalDateTime.Property property80 = localDateTime65.millisOfDay();
        org.joda.time.LocalDateTime localDateTime81 = property80.getLocalDateTime();
        org.joda.time.Interval interval82 = property80.toInterval();
        boolean boolean83 = strSet55.remove((java.lang.Object) property80);
        java.lang.Object obj84 = null;
        boolean boolean85 = strSet55.equals(obj84);
        java.util.Locale locale87 = java.util.Locale.forLanguageTag("yearOfCentury");
        java.lang.String str88 = locale87.getVariant();
        boolean boolean89 = strSet55.equals((java.lang.Object) str88);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strSpliterator57);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str15 = iSOChronology14.toString();
        org.joda.time.DurationField durationField16 = iSOChronology14.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        int[] intArray23 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray23);
        org.joda.time.Chronology chronology25 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime.Property property26 = localDateTime13.millisOfSecond();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str15 = iSOChronology14.toString();
        org.joda.time.DurationField durationField16 = iSOChronology14.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        int[] intArray23 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray23);
        int int25 = localDateTime13.getDayOfWeek();
        int int26 = localDateTime13.getWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        long long15 = iSOChronology0.add((-1L), (long) (byte) 1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField17 = iSOChronology0.millis();
        org.joda.time.DurationField durationField18 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.weekyearOfCentury();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str25 = iSOChronology24.toString();
        org.joda.time.DurationField durationField26 = iSOChronology24.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        int[] intArray33 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology24.getZone();
        long long38 = dateTimeZone34.convertLocalToUTC((long) 0, true, 0L);
        long long40 = dateTimeZone34.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology41 = iSOChronology21.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology21.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str45 = iSOChronology44.toString();
        org.joda.time.DurationField durationField46 = iSOChronology44.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        int[] intArray53 = iSOChronology44.get((org.joda.time.ReadablePartial) localDateTime49, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = iSOChronology44.getZone();
        long long58 = dateTimeZone54.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.Chronology chronology60 = iSOChronology21.withZone(dateTimeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.Chronology chronology62 = iSOChronology0.withZone(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minus(readablePeriod64);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        int int13 = localDateTime12.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = property19.getAsShortText(locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = property19.getAsText(locale23);
        org.joda.time.LocalDateTime localDateTime26 = property19.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = property19.roundHalfEvenCopy();
        boolean boolean28 = localDateTime12.equals((java.lang.Object) localDateTime27);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.DurationField durationField31 = iSOChronology29.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        int[] intArray38 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime34, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = iSOChronology29.getZone();
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime42 = localDateTime27.toDateTime(dateTimeZone39);
        java.lang.String str43 = dateTime42.toString();
        int int44 = property9.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField47 = iSOChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology46.era();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        int int54 = localDateTime53.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = property60.getAsShortText(locale61);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = property60.getAsText(locale64);
        org.joda.time.LocalDateTime localDateTime67 = property60.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = property60.roundHalfEvenCopy();
        boolean boolean69 = localDateTime53.equals((java.lang.Object) localDateTime68);
        org.joda.time.chrono.ISOChronology iSOChronology70 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str71 = iSOChronology70.toString();
        org.joda.time.DurationField durationField72 = iSOChronology70.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology73 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology73.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology73);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusDays((int) (byte) 0);
        int[] intArray79 = iSOChronology70.get((org.joda.time.ReadablePartial) localDateTime75, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone80 = iSOChronology70.getZone();
        boolean boolean82 = dateTimeZone80.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime83 = localDateTime68.toDateTime(dateTimeZone80);
        java.lang.String str84 = dateTime83.toString();
        int int85 = property50.compareTo((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean86 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.ReadableInstant readableInstant87 = null;
        boolean boolean88 = dateTime83.isAfter(readableInstant87);
        org.joda.time.DateTimeZone dateTimeZone89 = dateTime83.getZone();
        org.joda.time.Chronology chronology90 = iSOChronology0.withZone(dateTimeZone89);
        org.joda.time.LocalDateTime localDateTime91 = org.joda.time.LocalDateTime.now(dateTimeZone89);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (Canada)" + "'", str24, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "9" + "'", str25, "9");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-11T10:00:00.000Z" + "'", str43, "2022-02-11T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 12 + "'", int54 == 12);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9" + "'", str62, "9");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "English (Canada)" + "'", str65, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "9" + "'", str66, "9");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(iSOChronology70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ISOChronology[UTC]" + "'", str71, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(iSOChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "2022-02-11T10:00:00.000Z" + "'", str84, "2022-02-11T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(localDateTime91);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus(readableDuration7);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.TimeZone.setDefault(timeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.Chronology chronology18 = iSOChronology9.withZone(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration7, dateTimeZone17);
        int int21 = dateTimeZone17.getOffsetFromLocal((long) (short) 100);
        int int23 = dateTimeZone17.getStandardOffset(0L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekOfWeekyear();
        int int26 = localDateTime24.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusMinutes(934);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withSecondOfMinute(413);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 413 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = null;
        boolean boolean6 = timeZone1.hasSameRules(timeZone5);
        int int7 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        java.util.Locale locale2 = new java.util.Locale("en-CA", "0097-02-18T09:44:20.014");
        java.lang.String str3 = locale2.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "en-ca_0097-02-18T09:44:20.014");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0097-02-18T09:44:20.014" + "'", str3, "0097-02-18T09:44:20.014");
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        long long14 = dateTimeZone10.convertLocalToUTC((long) 0, true, 0L);
        long long17 = dateTimeZone10.adjustOffset(0L, false);
        long long19 = dateTimeZone10.convertUTCToLocal((long) 37);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setLanguage("de");
        java.util.Locale.Builder builder24 = builder21.clearExtensions();
        java.util.Locale.Builder builder26 = builder21.setLanguageTag("GMT");
        java.util.Locale locale27 = builder21.build();
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.lang.String str29 = dateTimeZone10.getShortName(1707644686574L, locale27);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = locale31.getDisplayVariant();
        java.lang.String str33 = locale31.getCountry();
        java.lang.String str34 = locale30.getDisplayVariant(locale31);
        java.lang.String str35 = locale27.getDisplayLanguage(locale30);
        java.util.Locale locale39 = new java.util.Locale("2022-02-11T09:44:09.708", "Property[millisOfDay]", "CHN");
        java.lang.String str40 = locale39.getVariant();
        java.util.Locale locale41 = locale39.stripExtensions();
        boolean boolean42 = locale39.hasExtensions();
        java.lang.String str43 = locale30.getDisplayLanguage(locale39);
        java.lang.String str44 = locale39.getDisplayLanguage();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 37L + "'", long19 == 37L);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "gmt");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gmt" + "'", str35, "gmt");
        org.junit.Assert.assertEquals(locale39.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CHN" + "'", str40, "CHN");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11t09:44:09.708" + "'", str44, "2022-02-11t09:44:09.708");
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        boolean boolean6 = property5.isLeap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property5.setCopy("2022-04-13T00:45:05.112");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-04-13T00:45:05.112\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("0000-02-11T08:44:26.096");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("Korean");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("2022-02-11t09:44:01.355 (2022-02-11T10:00:00.000Z,2022-02-11T09:44:05.224)");
        java.util.Set<java.lang.String> strSet11 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale1.getDisplayCountry(locale3);
        java.lang.String str9 = locale1.toLanguageTag();
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English (Canada)" + "'", str5, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str9 = property6.getAsText(locale7);
        org.joda.time.DateTimeField dateTimeField10 = property6.getField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en" + "'", str8, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "12" + "'", str9, "12");
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DurationField durationField3 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField5 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.secondOfMinute();
        org.joda.time.Chronology chronology7 = iSOChronology0.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId3);
        java.time.ZoneId zoneId6 = timeZone5.toZoneId();
        java.lang.String str7 = timeZone5.getID();
        java.util.TimeZone.setDefault(timeZone5);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) '4');
        int int22 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMillis(17);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYear(0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withDayOfYear(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfWeek(35323899);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35323899 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setScript("35151532-02-11T09:48:37.874");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 35151532-02-11T09:48:37.874 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        int int8 = localDateTime7.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property14.getAsShortText(locale15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = property14.getAsText(locale18);
        org.joda.time.LocalDateTime localDateTime21 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property14.roundHalfEvenCopy();
        boolean boolean23 = localDateTime7.equals((java.lang.Object) localDateTime22);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str25 = iSOChronology24.toString();
        org.joda.time.DurationField durationField26 = iSOChronology24.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        int[] intArray33 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology24.getZone();
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime37 = localDateTime22.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.Chronology chronology39 = iSOChronology1.withZone(dateTimeZone38);
        java.lang.String str41 = dateTimeZone38.getNameKey(1644659045736L);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        long long46 = dateTimeZone43.convertLocalToUTC((long) (-19034), true);
        long long48 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, 1707644708226L);
        java.lang.String str49 = dateTimeZone43.toString();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9" + "'", str20, "9");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-19042L) + "'", long46 == (-19042L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1707644708218L + "'", long48 == 1707644708218L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.008" + "'", str49, "+00:00:00.008");
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(33110121, 0, 35125748, 2023, 53, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        java.util.Locale locale2 = new java.util.Locale("970", "2022-02-11T09:43:55.701");
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "970_2022-02-11T09:43:55.701");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str9 = timeZone3.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int12 = dateTimeZone10.getOffset((long) 86399999);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(obj0, dateTimeZone14);
        long long19 = dateTimeZone14.convertUTCToLocal((long) 23);
        java.lang.String str20 = dateTimeZone14.toString();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
        org.joda.time.DurationField durationField22 = iSOChronology21.minutes();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.Chronology chronology29 = iSOChronology23.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str34 = iSOChronology33.toString();
        org.joda.time.DurationField durationField35 = iSOChronology33.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        int[] intArray42 = iSOChronology33.get((org.joda.time.ReadablePartial) localDateTime38, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology33.getZone();
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime45 = localDateTime32.toDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime32.minusHours(6);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusHours((-1));
        int[] intArray51 = chronology29.get((org.joda.time.ReadablePartial) localDateTime47, (long) 0);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.minus(readableDuration52);
        long long55 = iSOChronology21.set((org.joda.time.ReadablePartial) localDateTime53, 1644572887692L);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 23L + "'", long19 == 23L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1644551353023L + "'", long55 == 1644551353023L);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int10 = dateTimeZone8.getOffset((long) 22);
        long long14 = dateTimeZone8.convertLocalToUTC((long) 32, true, (long) (byte) 0);
        java.lang.String str16 = dateTimeZone8.getShortName((long) 33110121);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        org.joda.time.DateTimeField dateTimeField10 = property5.getField();
        java.lang.String str11 = property5.toString();
        org.joda.time.DurationField durationField12 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[hourOfDay]" + "'", str11, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.monthOfYear();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology7 = iSOChronology0.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withPeriodAdded(readablePeriod34, 9);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusDays(67441936);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusDays((int) (short) 0);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withMonthOfYear(31495257);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31495257 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.era();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfEra((int) 'a');
        int[] intArray18 = iSOChronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime14.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusHours(1);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra((int) 'a');
        int[] intArray33 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withDurationAdded(readableDuration34, (int) '4');
        int[] intArray37 = localDateTime36.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = iSOChronology0.add(readablePeriod40, 1644572652885L, 56);
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.clockhourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField46 = iSOChronology45.halfdays();
        java.lang.String str47 = iSOChronology45.toString();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology45.era();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology45.centuryOfEra();
        org.joda.time.DurationField durationField50 = iSOChronology45.minutes();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology45);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.year();
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str55 = locale54.getScript();
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str57 = locale54.getDisplayCountry(locale56);
        java.lang.String str58 = property52.getAsText(locale56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property52.getFieldType();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField61 = iSOChronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology60.era();
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withYearOfEra((int) 'a');
        int[] intArray71 = iSOChronology60.get((org.joda.time.ReadablePartial) localDateTime67, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray72 = localDateTime67.getFields();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime67.minusHours(1);
        int int75 = localDateTime67.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime67.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        boolean boolean79 = localDateTime77.isSupported(dateTimeFieldType78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.plusYears((int) 'u');
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.millisOfDay();
        int int83 = property52.compareTo((org.joda.time.ReadablePartial) localDateTime81);
        long long85 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime81, 1644572727138L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime90 = localDateTime81.withTime(26, 31714644, 997, 90);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 11, 35353110]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644572652885L + "'", long43 == 1644572652885L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022" + "'", str58, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-58282121446890L) + "'", long85 == (-58282121446890L));
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.centuryOfEra();
        int int15 = property14.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime17 = property14.setCopy(28);
        int int18 = property14.getMinimumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property20 = localDateTime7.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withPeriodAdded(readablePeriod21, 8);
        int int24 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime7.withDayOfYear(58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withSecondOfMinute(117660000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117660000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        boolean boolean13 = property10.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.era();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra((int) 'a');
        int[] intArray25 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime21.getFields();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusHours(1);
        int int29 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime21.withTime(1, 23, 51, 23);
        int int37 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DurationField durationField38 = property10.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str45 = nameProvider39.getShortName(locale41, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str46 = property10.getAsShortText(locale41);
        java.lang.String str47 = locale4.getDisplayScript(locale41);
        java.lang.String str48 = locale41.getDisplayLanguage();
        java.util.Locale.Builder builder49 = builder3.setLocale(locale41);
        java.util.Locale locale50 = builder3.build();
        java.util.Locale locale51 = java.util.Locale.UK;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale52.getScript();
        java.lang.String str54 = locale52.getDisplayName();
        java.lang.String str55 = locale51.getDisplayLanguage(locale52);
        java.util.Locale.Builder builder56 = builder3.setLocale(locale52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder59 = builder56.setUnicodeLocaleKeyword("401", "636567-01-10T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 401 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNull(durationField38);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English (Canada)" + "'", str54, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        java.util.Locale locale3 = new java.util.Locale("2031-11-12T09:48:09.920", "0097-02-11T09:45:27.189+00:00:00.008", "2022-02-12T09:46:09.948");
        org.junit.Assert.assertEquals(locale3.toString(), "2031-11-12t09:48:09.920_0097-02-11T09:45:27.189+00:00:00.008_2022-02-12T09:46:09.948");
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        boolean boolean8 = timeZone3.observesDaylightTime();
        int int10 = timeZone3.getOffset(1707644660798L);
        timeZone3.setID("2022-02-11T09:44:59.091");
        boolean boolean13 = timeZone3.observesDaylightTime();
        boolean boolean14 = timeZone3.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T10:00:00.000");
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t10:00:00.000");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-11t10:00:00.000" + "'", str2, "2022-02-11t10:00:00.000");
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        int int26 = strSet13.size();
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str29 = locale28.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.util.Locale.setDefault(locale30);
        java.util.Set<java.lang.String> strSet34 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale28.getDisplayCountry(locale30);
        java.lang.String str36 = locale28.getScript();
        java.util.Set<java.lang.String> strSet37 = locale28.getUnicodeLocaleKeys();
        boolean boolean38 = strSet13.containsAll((java.util.Collection<java.lang.String>) strSet37);
        strSet13.clear();
        java.lang.Object[] objArray40 = strSet13.toArray();
        java.util.stream.Stream<java.lang.String> strStream41 = strSet13.stream();
        java.util.stream.Stream<java.lang.String> strStream42 = strSet13.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(strStream42);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = iSOChronology0.weekyears();
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = iSOChronology1.add(readablePeriod3, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField7 = iSOChronology1.hours();
        org.joda.time.DurationField durationField8 = iSOChronology1.centuries();
        org.joda.time.DurationField durationField9 = iSOChronology1.minutes();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 577, (org.joda.time.Chronology) iSOChronology1);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        int int9 = timeZone3.getOffset((long) 53);
        int int10 = timeZone3.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(iSOChronology12);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((-19034), 0, 23, 32400000, 169, 35145598, 41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(37);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears(32400000);
        int int24 = localDateTime21.getSecondOfMinute();
        int int25 = localDateTime21.size();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        int[] intArray15 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = iSOChronology6.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        java.lang.String str18 = dateTimeZone16.toString();
        long long21 = dateTimeZone16.convertLocalToUTC(1707644647380L, true);
        org.joda.time.Chronology chronology22 = iSOChronology0.withZone(dateTimeZone16);
        org.joda.time.DurationField durationField23 = iSOChronology0.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = iSOChronology0.getDateTimeMillis(33152594, 35165291, (-8077), 58, 33, 35123607, 718);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 58 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1707644647380L + "'", long21 == 1707644647380L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        boolean boolean10 = timeZone6.observesDaylightTime();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.TimeZone.setDefault(timeZone14);
        boolean boolean17 = timeZone6.hasSameRules(timeZone14);
        boolean boolean18 = timeZone1.hasSameRules(timeZone14);
        timeZone1.setID("2031-11-12T09:46:13.179");
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.minusMinutes((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime2.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType30 = null;
        boolean boolean31 = localDateTime26.isSupported(durationFieldType30);
        org.joda.time.DateTime dateTime32 = localDateTime26.toDateTime();
        long long33 = dateTime32.getMillis();
        org.joda.time.Instant instant34 = dateTime32.toInstant();
        java.lang.String str35 = instant34.toString();
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        int int37 = property23.getDifference((org.joda.time.ReadableInstant) instant34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = instant34.isSupported(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 13 + "'", int3 == 13);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644572953505L + "'", long33 == 1644572953505L);
        org.junit.Assert.assertNotNull(instant34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-11T09:49:13.505Z" + "'", str35, "2022-02-11T09:49:13.505Z");
        org.junit.Assert.assertNotNull(chronology36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra(51);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear(35068789);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readableDuration9);
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plus(readablePeriod20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusSeconds(36);
        boolean boolean24 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localDateTime21.getValue(35216284);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35216284");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 13 + "'", int14 == 13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DurationField durationField12 = iSOChronology0.months();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks(33035117);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minus(readableDuration16);
        int int18 = localDateTime13.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMillis(186);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusHours(2022);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.era();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfEra((int) 'a');
        int[] intArray28 = iSOChronology17.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.withDurationAdded(readableDuration29, (int) '4');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = localDateTime24.indexOf(dateTimeFieldType34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.plus(readableDuration36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime24.plusSeconds((int) 'a');
        boolean boolean40 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime13.minus(readablePeriod41);
        long long44 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime13, 2L);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime13.withCenturyOfEra(26);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(46);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField52 = localDateTime50.getField(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 50");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1644572953611L + "'", long44 == 1644572953611L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("UTC");
        java.util.Locale locale6 = builder5.build();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "utc");
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.isStandardOffset((long) (short) 1);
        int int10 = dateTimeZone5.getOffset((long) 58);
        long long12 = dateTimeZone5.convertUTCToLocal(0L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        java.util.Locale locale2 = new java.util.Locale("0097-02-18T09:45:41.724", "Property[secondOfMinute]");
        java.util.Locale locale3 = locale2.stripExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "0097-02-18t09:45:41.724_PROPERTY[SECONDOFMINUTE]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "0097-02-18t09:45:41.724_PROPERTY[SECONDOFMINUTE]");
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plus(readablePeriod11);
        int int13 = localDateTime12.size();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.Chronology chronology15 = iSOChronology0.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField17 = iSOChronology0.centuries();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMinutes(0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plus(readableDuration19);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.minusMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime23);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str34 = iSOChronology33.toString();
        org.joda.time.DurationField durationField35 = iSOChronology33.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        int[] intArray42 = iSOChronology33.get((org.joda.time.ReadablePartial) localDateTime38, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology33.getZone();
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime45 = localDateTime32.toDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime32.minusHours(6);
        boolean boolean48 = localDateTime29.isEqual((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withDurationAdded(readableDuration49, (int) '4');
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.era();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withYearOfEra((int) 'a');
        int[] intArray63 = iSOChronology52.get((org.joda.time.ReadablePartial) localDateTime59, (long) 100);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.withDurationAdded(readableDuration64, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = localDateTime66.getFieldType((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime51.withField(dateTimeFieldType68, 5);
        org.joda.time.LocalDateTime.Property property71 = localDateTime51.monthOfYear();
        java.lang.String str72 = property71.toString();
        org.joda.time.LocalDateTime localDateTime73 = property71.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime73);
        int int75 = localDateTime74.getEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Property[monthOfYear]" + "'", str72, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale1.getDisplayCountry(locale3);
        java.lang.String str9 = locale1.getScript();
        java.util.Set<java.lang.String> strSet10 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList17);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.util.Locale.setDefault(locale20);
        java.util.Set<java.lang.String> strSet24 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList31);
        java.util.stream.Stream<java.lang.String> strStream34 = strList33.parallelStream();
        boolean boolean35 = strSet24.containsAll((java.util.Collection<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet24);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet40);
        java.util.Collection<java.lang.String> strCollection42 = null;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, strCollection42);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Locale.setDefault(locale44);
        java.util.Set<java.lang.String> strSet48 = locale44.getUnicodeLocaleAttributes();
        int int49 = strSet48.size();
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet48.spliterator();
        java.lang.String str51 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet48);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.String str55 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet54);
        boolean boolean56 = strSet10.containsAll((java.util.Collection<java.lang.String>) strSet54);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str58 = iSOChronology57.toString();
        org.joda.time.DurationField durationField59 = iSOChronology57.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        int[] intArray66 = iSOChronology57.get((org.joda.time.ReadablePartial) localDateTime62, (long) 100);
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology57.dayOfWeek();
        org.joda.time.DurationField durationField68 = iSOChronology57.halfdays();
        org.joda.time.DurationField durationField69 = iSOChronology57.weekyears();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology57);
        boolean boolean71 = strSet54.equals((java.lang.Object) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.minusDays((-8077));
        org.joda.time.DurationFieldType durationFieldType74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime76 = localDateTime70.withFieldAdded(durationFieldType74, 42357874);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English (Canada)" + "'", str5, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English (Canada)" + "'", str39, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "English (Canada)" + "'", str46, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[UTC]" + "'", str58, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest34 {

    public static boolean debug = false;

    @Test
    public void test17001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17001");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("Fri");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale locale5 = builder0.build();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str8 = locale7.getScript();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str10 = locale7.getDisplayCountry(locale9);
        java.lang.String str11 = locale9.getDisplayScript();
        java.util.Locale.Builder builder12 = builder0.setLocale(locale9);
        java.lang.String str13 = locale9.getDisplayLanguage();
        boolean boolean14 = locale9.hasExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese" + "'", str13, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test17002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17002");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getDisplayVariant();
        java.lang.String str10 = locale8.getCountry();
        java.util.Locale.setDefault(locale8);
        java.util.Locale.Builder builder12 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder13 = builder7.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test17003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17003");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet29);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str32 = iSOChronology31.toString();
        org.joda.time.DurationField durationField33 = iSOChronology31.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        int[] intArray40 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology31.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology31.clockhourOfDay();
        boolean boolean43 = strSet29.contains((java.lang.Object) iSOChronology31);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology31.getZone();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone44);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str47 = iSOChronology46.toString();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = iSOChronology46.add(readablePeriod48, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField52 = iSOChronology46.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str61 = iSOChronology60.toString();
        org.joda.time.DurationField durationField62 = iSOChronology60.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology63.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusDays((int) (byte) 0);
        int[] intArray69 = iSOChronology60.get((org.joda.time.ReadablePartial) localDateTime65, (long) 100);
        iSOChronology46.validate((org.joda.time.ReadablePartial) localDateTime59, intArray69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime59.yearOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology73 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField74 = iSOChronology73.halfdays();
        org.joda.time.DateTimeField dateTimeField75 = iSOChronology73.era();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology73.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology73);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plus(readablePeriod78);
        org.joda.time.DateTimeField[] dateTimeFieldArray80 = localDateTime77.getFields();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.minusYears(999);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime77.plusMonths((int) (byte) 1);
        int int85 = property71.compareTo((org.joda.time.ReadablePartial) localDateTime84);
        int int86 = localDateTime84.getMonthOfYear();
        int int87 = localDateTime84.getYearOfEra();
        boolean boolean88 = dateTimeZone44.isLocalDateTimeGap(localDateTime84);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(iSOChronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str32, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(iSOChronology46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str47, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(iSOChronology60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str61, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(iSOChronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldArray80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1970 + "'", int87 == 1970);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test17004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17004");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime32 = localDateTime17.toDateTime(dateTimeZone29);
        int int33 = localDateTime17.getCenturyOfEra();
        org.joda.time.DateTime dateTime34 = localDateTime17.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime17.withDate(35125748, 35829570, 35523761);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35829570 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 18 + "'", int3 == 18);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iSOChronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str20, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test17005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17005");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((int) '4');
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.millisOfSecond();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.era();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = property22.getAsShortText(locale23);
        java.lang.String str25 = property16.getAsShortText(locale23);
        java.lang.String str26 = locale23.getVariant();
        java.lang.String str27 = property9.getAsText(locale23);
        java.lang.String str28 = locale0.getDisplayScript(locale23);
        java.lang.String str29 = locale0.getLanguage();
        java.util.Set<java.lang.Character> charSet30 = locale0.getExtensionKeys();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str38 = iSOChronology37.toString();
        org.joda.time.DurationField durationField39 = iSOChronology37.weeks();
        boolean boolean40 = property36.equals((java.lang.Object) durationField39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property36.getFieldType();
        java.lang.String str42 = property36.getAsString();
        org.joda.time.LocalDateTime localDateTime43 = property36.getLocalDateTime();
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("2022-02-11T09:44:59.277");
        java.lang.String str46 = locale45.getISO3Country();
        int int47 = property36.getMaximumTextLength(locale45);
        java.lang.String str48 = locale0.getDisplayCountry(locale45);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9" + "'", str24, "9");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "560" + "'", str27, "560");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ja" + "'", str29, "ja");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(iSOChronology37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str38, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9" + "'", str42, "9");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test17006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17006");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1707644667235L, dateTimeZone7);
        java.lang.String str12 = dateTimeZone7.getNameKey(1644572720274L);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17007");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test17008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17008");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.secondOfMinute();
        java.lang.Object obj7 = null;
        boolean boolean8 = iSOChronology0.equals(obj7);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.year();
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = iSOChronology0.getDateTimeMillis(2780549999360L, 0, 5, 840, 35542967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 840 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str2, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test17009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17009");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        java.lang.String str7 = iSOChronology5.toString();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology5.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = iSOChronology5.withZone(dateTimeZone10);
        int int13 = dateTimeZone10.getOffsetFromLocal(6830578589573L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        int[] intArray16 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime14, (long) 22);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = property17.roundHalfEvenCopy();
        org.joda.time.ReadableInstant readableInstant20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = property17.compareTo(readableInstant20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str2, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str7, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1, 53]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17010");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder6 = builder2.setExtension('a', "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test17011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17011");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.weekyearOfCentury();
        long long11 = iSOChronology1.add(1644572637306L, 1644572653046L, 6);
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.dayOfYear();
        java.lang.String str14 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology1.weekyear();
        java.lang.String str16 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology1.year();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 11512008555582L + "'", long11 == 11512008555582L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str14, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str16, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test17012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17012");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = iSOChronology0.getDateTimeMillis(35424468, 161, 71455575, 35356151);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 161 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test17013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17013");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(1707644826598L, (org.joda.time.Chronology) iSOChronology1);
        java.lang.Class<?> wildcardClass8 = localDateTime7.getClass();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test17014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17014");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        org.joda.time.DurationField durationField9 = iSOChronology0.weekyears();
        org.joda.time.DurationField durationField10 = iSOChronology0.millis();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.year();
        org.joda.time.DurationField durationField13 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str11, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test17015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17015");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.DurationField durationField3 = iSOChronology1.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        int[] intArray10 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime6, (long) 100);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 1644572717854L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekyear(42);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfYear(8);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusSeconds(588);
        org.junit.Assert.assertNotNull(iSOChronology1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str2, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17016");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.Chronology chronology16 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList24);
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Locale.setDefault(locale27);
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList38);
        java.util.stream.Stream<java.lang.String> strStream41 = strList40.parallelStream();
        boolean boolean42 = strSet31.containsAll((java.util.Collection<java.lang.String>) strList40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet31);
        java.lang.String[] strArray50 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray58 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList59);
        boolean boolean62 = strSet51.containsAll((java.util.Collection<java.lang.String>) strList59);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet51);
        boolean boolean64 = localDateTime17.equals((java.lang.Object) strSet51);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime17);
        java.util.Date date66 = localDateTime17.toDate();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime17.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusMonths(35054090);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (Canada)" + "'", str29, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(date66);
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Fri Feb 11 09:53:18 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test17017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17017");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        java.lang.String str3 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.dayOfMonth();
        org.joda.time.DurationField durationField6 = iSOChronology1.millis();
        org.joda.time.DurationField durationField7 = iSOChronology1.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str12 = iSOChronology11.toString();
        org.joda.time.DurationField durationField13 = iSOChronology11.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        int[] intArray20 = iSOChronology11.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = iSOChronology11.getZone();
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = localDateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime23.getZone();
        org.joda.time.Chronology chronology26 = iSOChronology1.withZone(dateTimeZone25);
        long long30 = iSOChronology1.add(56L, 1644572653745L, 51);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(1707644640383L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.Chronology chronology32 = iSOChronology1.withUTC();
        org.joda.time.DurationField durationField33 = iSOChronology1.years();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str3, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str12, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.031" + "'", str22, "+00:00:00.031");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 83873205341051L + "'", long30 == 83873205341051L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test17018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17018");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) 'u');
        int int9 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.withTime(3, 56, 3, (int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.withYear(292278993);
        java.util.Date date17 = localDateTime6.toDate();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField19 = iSOChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.era();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology18.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology18.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = iSOChronology18.getZone();
        long long28 = dateTimeZone25.convertLocalToUTC(0L, true);
        java.lang.String str30 = dateTimeZone25.getName(1644572700908L);
        org.joda.time.DateTime dateTime31 = localDateTime6.toDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime6.plusMinutes(71369552);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 12 09:53:18 GMT 2022");
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-31L) + "'", long28 == (-31L));
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.031" + "'", str30, "+00:00:00.031");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test17019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17019");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T12:48:56.384");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = localDateTime1.toString("2022-02-13T19:51:56.940");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test17020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17020");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        java.lang.String[] strArray32 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray40 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList41);
        boolean boolean44 = strSet33.containsAll((java.util.Collection<java.lang.String>) strList41);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        java.lang.String[] strArray56 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        java.util.Iterator<java.lang.String> strItor59 = strSet57.iterator();
        java.lang.Object[] objArray60 = strSet57.toArray();
        java.util.Iterator<java.lang.String> strItor61 = strSet57.iterator();
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet57);
        java.lang.String[] strArray73 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        java.util.Iterator<java.lang.String> strItor76 = strSet74.iterator();
        java.lang.Object[] objArray77 = strSet74.toArray();
        java.lang.Object[] objArray78 = strSet74.toArray();
        java.lang.String str79 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet74);
        java.util.Locale locale80 = java.util.Locale.CANADA;
        java.util.Locale locale81 = java.util.Locale.CANADA;
        java.lang.String str82 = locale80.getDisplayName(locale81);
        java.util.Set<java.lang.String> strSet83 = locale80.getUnicodeLocaleKeys();
        java.util.Locale locale84 = java.util.Locale.CANADA;
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.lang.String str86 = locale84.getDisplayName(locale85);
        java.util.Locale.setDefault(locale84);
        java.util.Set<java.lang.String> strSet88 = locale84.getUnicodeLocaleAttributes();
        boolean boolean89 = strSet83.removeAll((java.util.Collection<java.lang.String>) strSet88);
        java.util.Iterator<java.lang.String> strItor90 = strSet83.iterator();
        java.lang.String str91 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet83);
        boolean boolean92 = strSet83.isEmpty();
        java.lang.Object[] objArray93 = strSet83.toArray();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strItor76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "English (Canada)" + "'", str82, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "English (Canada)" + "'", str86, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strItor90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[]");
    }

    @Test
    public void test17021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17021");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17022");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.year();
        int int34 = property33.getMaximumValueOverall();
        int int35 = property33.get();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str14, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.031" + "'", str24, "+00:00:00.031");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2010 + "'", int35 == 2010);
    }

    @Test
    public void test17023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17023");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyear();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.era();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = property23.getAsShortText(locale24);
        java.lang.String str26 = property17.getAsShortText(locale24);
        org.joda.time.DurationField durationField27 = property17.getDurationField();
        org.joda.time.LocalDateTime localDateTime29 = property17.setCopy("0");
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str32 = iSOChronology31.toString();
        org.joda.time.DurationField durationField33 = iSOChronology31.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        int[] intArray40 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology31.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        int int47 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.minus(readableDuration49);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField52 = iSOChronology51.halfdays();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.TimeZone.setDefault(timeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.Chronology chronology60 = iSOChronology51.withZone(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration49, dateTimeZone59);
        int[] intArray63 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime61, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime29, intArray63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime29.era();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime29.minusYears(2);
        int int68 = localDateTime67.getMillisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "9" + "'", str25, "9");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(iSOChronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str32, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(intArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 41 + "'", int68 == 41);
    }

    @Test
    public void test17024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17024");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField7 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str2, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17025");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.era();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra((int) 'a');
        int[] intArray37 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime33, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = localDateTime33.getFields();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusHours(1);
        int int41 = localDateTime33.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime33.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property46 = localDateTime33.yearOfCentury();
        int int47 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property48 = localDateTime33.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property49 = localDateTime33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime33.plusHours(255);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str14, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.031" + "'", str24, "+00:00:00.031");
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test17026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17026");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int11 = localDateTime10.getYearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test17027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17027");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getCountry();
        java.lang.String str4 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale5 = locale0.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = property12.getAsText(locale16);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        int int20 = property12.getMaximumShortTextLength(locale19);
        java.lang.String str21 = locale6.getDisplayName(locale19);
        java.lang.String str22 = locale19.getDisplayVariant();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str25 = locale19.getDisplayCountry(locale24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str29 = locale28.getISO3Country();
        java.lang.String str30 = locale28.getScript();
        java.lang.String str31 = locale26.getDisplayName(locale28);
        java.lang.String str32 = locale28.toLanguageTag();
        java.util.Locale locale34 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = locale34.toLanguageTag();
        java.lang.String str37 = locale28.getDisplayLanguage(locale34);
        java.lang.String str38 = locale19.getDisplayVariant(locale28);
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale42 = new java.util.Locale("", "Etc/UTC");
        java.lang.String str43 = locale39.getDisplayLanguage(locale42);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str46 = locale45.getDisplayVariant();
        java.lang.String str47 = locale45.getISO3Language();
        java.lang.String str48 = locale45.getScript();
        java.lang.String str49 = locale42.getDisplayVariant(locale45);
        java.lang.String str50 = locale28.getDisplayVariant(locale45);
        java.lang.String str51 = locale5.getDisplayScript(locale45);
        java.lang.String str52 = locale5.getDisplayLanguage();
        org.joda.time.tz.NameProvider nameProvider53 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str58 = nameProvider53.getName(locale54, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.lang.String str59 = locale54.getCountry();
        java.lang.String str60 = locale5.getDisplayCountry(locale54);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese (Cina)" + "'", str21, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Korean" + "'", str31, "Korean");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertEquals(locale34.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "und" + "'", str36, "und");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "isochronology[etc/utc]" + "'", str37, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale42.toString(), "_ETC/UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese" + "'", str43, "Chinese");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "French" + "'", str52, "French");
        org.junit.Assert.assertNotNull(nameProvider53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test17028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17028");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus(readableDuration18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.minusWeeks(202);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.minusMinutes(35549420);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T10:00:00.000" + "'", str14, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test17029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17029");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        long long14 = dateTimeZone10.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        long long17 = dateTimeZone10.nextTransition((long) 'x');
        int int19 = dateTimeZone10.getOffsetFromLocal((long) (short) 100);
        int int21 = dateTimeZone10.getOffset((long) 52);
        java.lang.String str23 = dateTimeZone10.getShortName(11512008555582L);
        java.util.Locale locale28 = new java.util.Locale("2022-02-11T09:44:01.355", "2022-02-11T10:00:00.000Z", "2022-02-11T09:44:05.224");
        java.lang.String str29 = dateTimeZone10.getShortName(1707644640457L, locale28);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = locale28.getDisplayScript(locale30);
        java.util.Locale locale35 = new java.util.Locale("2022-02-11T09:44:09.708", "Property[millisOfDay]", "CHN");
        java.util.Locale.setDefault(locale35);
        java.lang.String str37 = locale30.getDisplayCountry(locale35);
        java.lang.String str38 = locale30.getDisplayLanguage();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-31L) + "'", long14 == (-31L));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 120L + "'", long17 == 120L);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.031" + "'", str23, "+00:00:00.031");
        org.junit.Assert.assertEquals(locale28.toString(), "2022-02-11t09:44:01.355_2022-02-11T10:00:00.000Z_2022-02-11T09:44:05.224");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.031" + "'", str29, "+00:00:00.031");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals(locale35.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Germany" + "'", str37, "Germany");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "German" + "'", str38, "German");
    }

    @Test
    public void test17030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17030");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2031-11-12T09:51:40.547", (double) 1644573000723L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644573000723E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17031");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.minusMinutes((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime2.withMonthOfYear(9);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str28 = iSOChronology27.toString();
        org.joda.time.DurationField durationField29 = iSOChronology27.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        int[] intArray36 = iSOChronology27.get((org.joda.time.ReadablePartial) localDateTime32, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = iSOChronology27.getZone();
        long long41 = dateTimeZone37.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        long long44 = dateTimeZone37.nextTransition((long) 'x');
        int int46 = dateTimeZone37.getOffsetFromLocal((long) (short) 100);
        int int48 = dateTimeZone37.getOffset((long) 52);
        java.lang.String str50 = dateTimeZone37.getShortName(11512008555582L);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime26, dateTimeZone37);
        java.lang.String str52 = dateTimeZone37.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(iSOChronology27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str28, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-31L) + "'", long41 == (-31L));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 120L + "'", long44 == 120L);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 31 + "'", int48 == 31);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.031" + "'", str50, "+00:00:00.031");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.031" + "'", str52, "+00:00:00.031");
    }

    @Test
    public void test17032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17032");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = property11.getAsText(locale15);
        org.joda.time.LocalDateTime localDateTime18 = property11.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime18, dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withYearOfCentury((int) (short) 10);
        int int39 = localDateTime38.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withPeriodAdded(readablePeriod40, 9);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        int[] intArray46 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime42, 1707644672408L);
        java.lang.String str47 = iSOChronology0.toString();
        long long51 = iSOChronology0.add((long) 2031, (long) (-8077), (int) 'u');
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(iSOChronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str20, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.031" + "'", str30, "+00:00:00.031");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[2024, 2, 11, 35072439]");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str47, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-942978L) + "'", long51 == (-942978L));
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test17033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17033");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.LocalDateTime localDateTime10 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str7, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test17034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17034");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField9 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone11 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17035");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths((int) 'u');
        int int14 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withTime(3, 56, 3, (int) '#');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.withYear(292278993);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 6);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfCentury(51);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readablePeriod26);
        int int28 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minusSeconds(51);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.era();
        boolean boolean38 = localDateTime25.equals((java.lang.Object) property37);
        long long40 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime25, 1644572737138L);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime25.plusMinutes((int) ' ');
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-599615999994L) + "'", long40 == (-599615999994L));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test17036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17036");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.minusMinutes((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime2.millisOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime2.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime2.withMonthOfYear(9);
        int[] intArray27 = localDateTime2.getValues();
        org.joda.time.LocalDateTime.Property property28 = localDateTime2.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[2022, 2, 11, 35599183]");
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test17037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17037");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        java.lang.String str11 = property5.getAsString();
        boolean boolean12 = property5.isLeap();
        java.lang.String str13 = property5.getAsText();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDurationAdded(readableDuration19, 18);
        boolean boolean22 = property5.equals((java.lang.Object) localDateTime18);
        org.joda.time.LocalDateTime localDateTime23 = property5.roundHalfEvenCopy();
        int int24 = localDateTime23.getYearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str7, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
    }

    @Test
    public void test17038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17038");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField7 = iSOChronology0.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = iSOChronology0.getDateTimeMillis(0, 35357926, 35276876, 35543370, 369, (int) (short) 0, 35234994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35543370 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test17039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17039");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        int int12 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundFloorCopy();
        java.lang.String str14 = property5.toString();
        org.joda.time.LocalDateTime localDateTime15 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(641);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        long long33 = dateTimeZone29.convertLocalToUTC((long) 0, true, 0L);
        long long35 = dateTimeZone29.previousTransition((long) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(1644573108135L, dateTimeZone29);
        boolean boolean37 = localDateTime15.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[hourOfDay]" + "'", str14, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(iSOChronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str20, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-31L) + "'", long33 == (-31L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17040");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.LocalDateTime localDateTime10 = property5.withMinimumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime15 = property11.addToCopy(59);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(2031);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str7, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17041");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime10.isSupported(durationFieldType14);
        org.joda.time.DateTime dateTime16 = localDateTime10.toDateTime();
        long long17 = dateTime16.getMillis();
        long long18 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        int int19 = property6.get();
        java.lang.String str20 = property6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property6.getFieldType();
        org.joda.time.Interval interval22 = property6.toInterval();
        org.joda.time.LocalDateTime localDateTime24 = property6.addToCopy(351562);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644573199258L + "'", long17 == 1644573199258L);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-23L) + "'", long18 == (-23L));
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[hourOfDay]" + "'", str20, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test17042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17042");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        long long9 = iSOChronology0.add(1644572646636L, 23L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField14 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572648936L + "'", long9 == 1644572648936L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test17043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17043");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = property5.getName();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfEra((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(dateTimeZone22);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        java.lang.String str30 = localDateTime26.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localDateTime26.getFields();
        int int32 = localDateTime26.size();
        boolean boolean33 = dateTime23.equals((java.lang.Object) int32);
        java.lang.String str34 = dateTime23.toString();
        int int35 = property5.getDifference((org.joda.time.ReadableInstant) dateTime23);
        java.lang.String str36 = property5.getAsString();
        org.joda.time.LocalDateTime localDateTime38 = property5.addToCopy(1644572871996L);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withDayOfMonth(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField42 = localDateTime40.getField(35208074);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35208074");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hourOfDay" + "'", str14, "hourOfDay");
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-11T09:53:19.336" + "'", str30, "2022-02-11T09:53:19.336");
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0097-02-11T09:53:19.335+00:00:00.031" + "'", str34, "0097-02-11T09:53:19.335+00:00:00.031");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16874184 + "'", int35 == 16874184);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test17044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17044");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfCentury(12);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minus(readableDuration13);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField17 = iSOChronology16.halfdays();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean22 = timeZone19.hasSameRules(timeZone21);
        java.util.TimeZone.setDefault(timeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.Chronology chronology25 = iSOChronology16.withZone(dateTimeZone24);
        long long28 = dateTimeZone24.adjustOffset((-1L), false);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 35042587, dateTimeZone24);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        int int33 = localDateTime32.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.lang.String str44 = property42.getAsShortText(locale43);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = property42.getAsText(locale46);
        org.joda.time.LocalDateTime localDateTime49 = property42.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str51 = iSOChronology50.toString();
        org.joda.time.DurationField durationField52 = iSOChronology50.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        int[] intArray59 = iSOChronology50.get((org.joda.time.ReadablePartial) localDateTime55, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = iSOChronology50.getZone();
        java.lang.String str61 = dateTimeZone60.toString();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime49, dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime69 = localDateTime62.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = localDateTime69.getFieldType(0);
        org.joda.time.LocalDateTime.Property property73 = localDateTime35.property(dateTimeFieldType72);
        int int74 = localDateTime29.indexOf(dateTimeFieldType72);
        boolean boolean75 = localDateTime10.equals((java.lang.Object) int74);
        int int76 = localDateTime10.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime10.plusHours(63);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "9" + "'", str44, "9");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "English (Canada)" + "'", str47, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "9" + "'", str48, "9");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(iSOChronology50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str51, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.031" + "'", str61, "+00:00:00.031");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 53 + "'", int76 == 53);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test17045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17045");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyear();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.era();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = property23.getAsShortText(locale24);
        java.lang.String str26 = property17.getAsShortText(locale24);
        org.joda.time.DurationField durationField27 = property17.getDurationField();
        org.joda.time.LocalDateTime localDateTime29 = property17.setCopy("0");
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str32 = iSOChronology31.toString();
        org.joda.time.DurationField durationField33 = iSOChronology31.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        int[] intArray40 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology31.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology42.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusDays((int) (byte) 0);
        int int47 = localDateTime44.getWeekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.minus(readableDuration49);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField52 = iSOChronology51.halfdays();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.TimeZone.setDefault(timeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.Chronology chronology60 = iSOChronology51.withZone(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration49, dateTimeZone59);
        int[] intArray63 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime61, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime29, intArray63);
        org.joda.time.DurationField durationField65 = iSOChronology0.centuries();
        org.joda.time.DateTimeZone dateTimeZone66 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField67 = iSOChronology0.weeks();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str1, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "9" + "'", str25, "9");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(iSOChronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+00:00:00.031]" + "'", str32, "ISOChronology[+00:00:00.031]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(intArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 131]");
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test17046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17046");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        java.lang.String str11 = dateTimeZone8.getName((long) 50);
        java.lang.String str12 = dateTimeZone8.toString();
        long long14 = dateTimeZone8.convertUTCToLocal(1707644729630L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1707644729630L + "'", long14 == 1707644729630L);
    }

    @Test
    public void test17047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17047");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str5 = nameProvider0.getName(locale1, "English (Canada)", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.lang.String str13 = nameProvider0.getName(locale8, "2022-02-13T19:46:53.485", "2022-02-11T09:47:17.166");
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale14.getISO3Country();
        java.lang.String str19 = nameProvider0.getName(locale14, "2031-11-12T12:45:53.627", "CA");
        java.lang.String str20 = locale14.getLanguage();
        java.lang.String str21 = locale14.getDisplayName();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de" + "'", str15, "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "de" + "'", str20, "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "German" + "'", str21, "German");
    }

    @Test
    public void test17048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17048");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:46:15.276", "71192638");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:46:15.276_71192638");
    }

    @Test
    public void test17049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17049");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T03:45:57.171", "feb", "zho");
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str6 = locale3.getExtension('a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = locale3.getUnicodeLocaleType("German");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: German");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t03:45:57.171_FEB_zho");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test17050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17050");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(51);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime16.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime16.withSecondOfMinute((int) (short) 10);
        boolean boolean29 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.minusSeconds(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withWeekOfWeekyear(35174007);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35174007 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test17051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17051");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsShortText(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = property17.getAsText(locale21);
        org.joda.time.LocalDateTime localDateTime24 = property17.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str26 = iSOChronology25.toString();
        org.joda.time.DurationField durationField27 = iSOChronology25.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int[] intArray34 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology25.getZone();
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime24, dateTimeZone35);
        boolean boolean39 = dateTimeZone35.isStandardOffset((long) 0);
        int int41 = dateTimeZone35.getOffset((long) 16);
        java.util.TimeZone timeZone42 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.Chronology chronology44 = iSOChronology0.withZone(dateTimeZone43);
        org.joda.time.DurationField durationField45 = chronology44.halfdays();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9" + "'", str23, "9");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test17052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17052");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime5.getFields();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusYears(999);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) 'u');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17053");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        int int24 = localDateTime21.getDayOfWeek();
        int int25 = localDateTime21.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.minusSeconds(35179551);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35599575]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707645199575L + "'", long23 == 1707645199575L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test17054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17054");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMinutes((int) '4');
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.millisOfSecond();
        int int9 = property8.getMinimumValueOverall();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology11.era();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = property21.getAsShortText(locale22);
        java.lang.String str24 = property15.getAsShortText(locale22);
        java.lang.String str25 = locale22.getVariant();
        java.lang.String str26 = property8.getAsText(locale22);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("de");
        org.joda.time.tz.NameProvider nameProvider29 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str32 = locale31.getDisplayScript();
        java.lang.String str35 = nameProvider29.getShortName(locale31, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str36 = locale28.getDisplayName(locale31);
        int int37 = property8.getMaximumShortTextLength(locale31);
        int int38 = property8.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime40 = property8.addWrapFieldToCopy(169);
        int int41 = localDateTime40.getDayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9" + "'", str23, "9");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "591" + "'", str26, "591");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(nameProvider29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "German" + "'", str36, "German");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
    }

    @Test
    public void test17055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17055");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DurationField durationField3 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test17056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17056");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        int int33 = localDateTime28.getMonthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.minusHours((-1));
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plus(readablePeriod42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withWeekyear(957);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        int int49 = localDateTime48.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = property52.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plus(readablePeriod55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = localDateTime56.getFieldType(3);
        int int59 = localDateTime45.indexOf(dateTimeFieldType58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime28.property(dateTimeFieldType58);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime28.minusMinutes(589);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray63 = localDateTime62.getFieldTypes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19 + "'", int49 == 19);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray63);
    }

    @Test
    public void test17057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17057");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime2.secondOfMinute();
        int int32 = property31.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test17058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17058");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("2022");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.removeUnicodeLocaleAttribute("2022-02-11T13:00:00.000+03:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T13:00:00.000+03:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test17059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17059");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = iSOChronology0.add(readablePeriod10, 1644551332024L, 35353452);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644551332024L + "'", long13 == 1644551332024L);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test17060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17060");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        long long10 = dateTimeZone8.previousTransition((long) 17);
        boolean boolean11 = dateTimeZone8.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.halfdays();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.TimeZone.setDefault(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.Chronology chronology22 = iSOChronology13.withZone(dateTimeZone21);
        java.util.TimeZone timeZone23 = dateTimeZone21.toTimeZone();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone21);
        long long26 = dateTimeZone8.getMillisKeepLocal(dateTimeZone21, 1707644635723L);
        java.util.TimeZone timeZone27 = dateTimeZone8.toTimeZone();
        timeZone27.setRawOffset(42357874);
        java.lang.Object obj30 = timeZone27.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 17L + "'", long10 == 17L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1707644635723L + "'", long26 == 1707644635723L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "java.util.SimpleTimeZone[id=UTC,offset=42357874,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "java.util.SimpleTimeZone[id=UTC,offset=42357874,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "java.util.SimpleTimeZone[id=UTC,offset=42357874,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test17061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17061");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        org.joda.time.LocalDateTime localDateTime12 = property5.addWrapFieldToCopy((int) 'x');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay(97);
        org.joda.time.Chronology chronology15 = localDateTime12.getChronology();
        int int16 = localDateTime12.getMinuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test17062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17062");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        int int6 = timeZone1.getRawOffset();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setID("33");
        java.lang.String str11 = timeZone1.getID();
        int int13 = timeZone1.getOffset((-421200000L));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = timeZone1.getDisplayName(false, 35644724);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 35644724");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "33" + "'", str11, "33");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test17063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17063");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.monthOfYear();
        long long11 = iSOChronology0.add(1707644980061L, 1707644751963L, 890);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1521511474227131L + "'", long11 == 1521511474227131L);
    }

    @Test
    public void test17064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17064");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.clockhourOfDay();
        java.lang.String str8 = iSOChronology0.toString();
        org.joda.time.DurationField durationField9 = iSOChronology0.weeks();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = iSOChronology0.add(readablePeriod10, 1644572688120L, 442);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644572688120L + "'", long13 == 1644572688120L);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test17065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17065");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.time.ZoneId zoneId7 = timeZone3.toZoneId();
        boolean boolean8 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean10 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test17066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17066");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.lang.String str12 = property5.getAsString();
        int int13 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime15 = property5.addToCopy(1644572689440L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, 11);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusYears(7);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFieldAdded(durationFieldType21, 35276876);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test17067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17067");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Chinese", (double) (short) 1);
        double double3 = languageRange2.getWeight();
        double double4 = languageRange2.getWeight();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        double double8 = languageRange2.getWeight();
        double double9 = languageRange2.getWeight();
        double double10 = languageRange2.getWeight();
        double double11 = languageRange2.getWeight();
        java.lang.String str12 = languageRange2.getRange();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.dayOfYear();
        org.joda.time.DurationField durationField26 = iSOChronology13.halfdays();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withYearOfEra(762);
        boolean boolean32 = languageRange2.equals((java.lang.Object) localDateTime31);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chinese" + "'", str7, "chinese");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "chinese" + "'", str12, "chinese");
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test17068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17068");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList23.parallelStream();
        boolean boolean25 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray33 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray41 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = strSet34.containsAll((java.util.Collection<java.lang.String>) strList42);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet34);
        boolean boolean47 = localDateTime0.equals((java.lang.Object) strSet34);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime0.withPeriodAdded(readablePeriod48, 54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = localDateTime50.toString(dateTimeFormatter51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.plusSeconds(35569477);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-11T09:53:19.851" + "'", str52, "2022-02-11T09:53:19.851");
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test17069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17069");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = iSOChronology0.millis();
        org.joda.time.DurationField durationField14 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17070");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone8.toTimeZone();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.time.ZoneId zoneId12 = timeZone10.toZoneId();
        java.util.Locale locale17 = new java.util.Locale("804", "2022-02-11T09:50:46.816");
        java.lang.String str18 = timeZone10.getDisplayName(true, 0, locale17);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertEquals(locale17.toString(), "804_2022-02-11T09:50:46.816");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test17071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17071");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList22);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsShortText(locale32);
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str39 = nameProvider34.getName(locale35, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale41 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.getScript();
        java.lang.String str44 = locale35.getDisplayVariant(locale41);
        java.lang.String str45 = locale35.getDisplayScript();
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale32, locale35 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList47);
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = java.util.Locale.getDefault(category50);
        java.util.Locale locale52 = java.util.Locale.US;
        java.util.Locale.setDefault(category50, locale52);
        java.util.Set<java.lang.String> strSet54 = locale52.getUnicodeLocaleAttributes();
        boolean boolean55 = strSet54.isEmpty();
        java.lang.String[] strArray66 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        java.util.Iterator<java.lang.String> strItor69 = strSet67.iterator();
        boolean boolean70 = strSet54.retainAll((java.util.Collection<java.lang.String>) strSet67);
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.lang.String str73 = locale71.getDisplayName(locale72);
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleKeys();
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        java.util.Locale.setDefault(locale75);
        java.util.Set<java.lang.String> strSet79 = locale75.getUnicodeLocaleAttributes();
        boolean boolean80 = strSet74.removeAll((java.util.Collection<java.lang.String>) strSet79);
        java.util.Iterator<java.lang.String> strItor81 = strSet74.iterator();
        java.util.stream.Stream<java.lang.String> strStream82 = strSet74.parallelStream();
        boolean boolean83 = strSet67.containsAll((java.util.Collection<java.lang.String>) strSet74);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet67, filteringMode84);
        boolean boolean86 = strSet67.isEmpty();
        boolean boolean87 = strSet67.isEmpty();
        org.joda.time.chrono.ISOChronology iSOChronology89 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField90 = iSOChronology89.halfdays();
        org.joda.time.DateTimeField dateTimeField91 = iSOChronology89.era();
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology89);
        long long96 = iSOChronology89.add(0L, 1707644686430L, 0);
        boolean boolean97 = strSet67.equals((java.lang.Object) iSOChronology89);
        int int98 = strSet67.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals(locale41.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.FORMAT + "'", category50.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "English (Canada)" + "'", str73, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English (Canada)" + "'", str77, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strItor81);
        org.junit.Assert.assertNotNull(strStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode84.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(iSOChronology89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 6 + "'", int98 == 6);
    }

    @Test
    public void test17072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17072");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.Locale locale16 = null;
        java.lang.String str17 = dateTimeZone14.getName(1707644655216L, locale16);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = property24.getAsShortText(locale25);
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = property24.getAsText(locale28);
        int int31 = property24.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime32 = property24.roundFloorCopy();
        java.lang.String str33 = property24.toString();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale34.getScript();
        java.lang.String str36 = property24.getAsText(locale34);
        java.util.Locale locale37 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = property43.getAsShortText(locale44);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale46.getDisplayName(locale47);
        java.lang.String str49 = property43.getAsText(locale47);
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        int int51 = property43.getMaximumShortTextLength(locale50);
        java.lang.String str52 = locale37.getDisplayName(locale50);
        java.lang.String str53 = locale50.getDisplayVariant();
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str56 = locale50.getDisplayCountry(locale55);
        java.lang.String str57 = locale34.getDisplayScript(locale50);
        java.lang.String str58 = locale50.getDisplayCountry();
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder59.clear();
        java.util.Locale.Builder builder62 = builder59.setVariant("Chinese");
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale.Builder builder65 = builder63.removeUnicodeLocaleAttribute("Fri");
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.lang.String str68 = locale67.getDisplayVariant();
        java.lang.String str69 = locale67.getCountry();
        java.lang.String str70 = locale66.getDisplayVariant(locale67);
        java.util.Locale locale71 = locale66.stripExtensions();
        java.util.Locale.Builder builder72 = builder65.setLocale(locale66);
        java.lang.String str73 = locale50.getDisplayScript(locale66);
        java.util.Set<java.lang.String> strSet74 = locale66.getUnicodeLocaleKeys();
        java.lang.String str75 = dateTimeZone14.getName(1644572778102L, locale66);
        java.lang.String str76 = locale6.getDisplayLanguage(locale66);
        org.joda.time.chrono.ISOChronology iSOChronology77 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology77.dayOfYear();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.hourOfDay();
        java.util.Locale locale83 = java.util.Locale.ENGLISH;
        java.lang.String str84 = property82.getAsShortText(locale83);
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.util.Locale locale86 = java.util.Locale.CANADA;
        java.lang.String str87 = locale85.getDisplayName(locale86);
        java.lang.String str88 = property82.getAsText(locale86);
        java.lang.String str89 = locale86.getScript();
        java.lang.String str91 = locale86.getExtension('a');
        java.lang.String str92 = locale6.getDisplayLanguage(locale86);
        java.lang.String str93 = locale86.getVariant();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9" + "'", str26, "9");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (Canada)" + "'", str29, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "9" + "'", str30, "9");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[hourOfDay]" + "'", str33, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9" + "'", str45, "9");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English (Canada)" + "'", str48, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "9" + "'", str49, "9");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese (Cina)" + "'", str52, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "anglais" + "'", str76, "anglais");
        org.junit.Assert.assertNotNull(iSOChronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "9" + "'", str84, "9");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "English (Canada)" + "'", str87, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "9" + "'", str88, "9");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "English" + "'", str92, "English");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test17073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17073");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        boolean boolean10 = timeZone6.observesDaylightTime();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.TimeZone.setDefault(timeZone14);
        boolean boolean17 = timeZone6.hasSameRules(timeZone14);
        boolean boolean18 = timeZone1.hasSameRules(timeZone14);
        boolean boolean19 = timeZone14.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = timeZone14.getDisplayName(false, 789);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 789");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test17074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17074");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale1.getDisplayCountry(locale3);
        java.util.Set<java.lang.String> strSet9 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray15 = strSet14.toArray();
        java.util.Iterator<java.lang.String> strItor16 = strSet14.iterator();
        boolean boolean17 = strSet14.isEmpty();
        boolean boolean18 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet14);
        boolean boolean19 = strSet14.isEmpty();
        boolean boolean20 = strSet14.isEmpty();
        java.lang.String[] strArray27 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray35 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList36);
        boolean boolean39 = strSet28.containsAll((java.util.Collection<java.lang.String>) strList36);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.TimeZone.setDefault(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        int int47 = timeZone43.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean53 = timeZone50.hasSameRules(timeZone52);
        java.util.TimeZone.setDefault(timeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        boolean boolean56 = timeZone43.hasSameRules(timeZone52);
        boolean boolean57 = strSet28.remove((java.lang.Object) timeZone52);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        long long60 = dateTimeZone58.previousTransition(1707644683405L);
        boolean boolean61 = strSet14.equals((java.lang.Object) dateTimeZone58);
        long long64 = dateTimeZone58.convertLocalToUTC(35196948L, false);
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English (Canada)" + "'", str5, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1707644683405L + "'", long60 == 1707644683405L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 35196948L + "'", long64 == 35196948L);
    }

    @Test
    public void test17075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17075");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        long long27 = dateTimeZone23.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int[] intArray30 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime28, (long) 52);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField32 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField33 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField35 = iSOChronology0.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 52]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test17076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17076");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds(23);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.DurationField durationField31 = iSOChronology29.weeks();
        boolean boolean32 = property28.equals((java.lang.Object) durationField31);
        org.joda.time.LocalDateTime localDateTime33 = property28.withMinimumValue();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime33.getFieldTypes();
        int int36 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime37 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime38 = property21.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime39 = property21.withMinimumValue();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField42 = iSOChronology41.halfdays();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        java.util.TimeZone.setDefault(timeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.Chronology chronology50 = iSOChronology41.withZone(dateTimeZone49);
        long long53 = dateTimeZone49.adjustOffset((-1L), false);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 35042587, dateTimeZone49);
        int int55 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale56.getDisplayScript();
        java.util.Set<java.lang.Character> charSet58 = locale56.getExtensionKeys();
        java.lang.String str59 = locale56.getDisplayCountry();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        boolean boolean63 = locale60.hasExtensions();
        java.lang.String str64 = locale56.getDisplayLanguage(locale60);
        int int65 = property21.getMaximumTextLength(locale60);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English (Canada)" + "'", str62, "English (Canada)");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Korean" + "'", str64, "Korean");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
    }

    @Test
    public void test17077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17077");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("0097-02-18T09:48:46.510", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=0097-02-18t09:48:46.510");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17078");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.dayOfWeek();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime8.getFields();
        long long14 = iSOChronology1.set((org.joda.time.ReadablePartial) localDateTime8, (long) 4);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.plus(readablePeriod15);
        int int17 = localDateTime8.getSecondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644573200169L + "'", long14 == 1644573200169L);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
    }

    @Test
    public void test17079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17079");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime10.isSupported(durationFieldType14);
        org.joda.time.DateTime dateTime16 = localDateTime10.toDateTime();
        long long17 = dateTime16.getMillis();
        long long18 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        int int19 = property6.get();
        java.lang.String str20 = property6.toString();
        org.joda.time.LocalDateTime localDateTime21 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusHours(16874193);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfSecond(46);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfDay(35260770);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644573200185L + "'", long17 == 1644573200185L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-24L) + "'", long18 == (-24L));
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[hourOfDay]" + "'", str20, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test17080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17080");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        long long19 = iSOChronology0.getDateTimeMillis(292278993, 3, 30, 19, 35, 5, 55);
        long long23 = iSOChronology0.add(1644572733836L, 39534807350312L, 7);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology0.era();
        org.joda.time.DurationField durationField25 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9223371993267305055L + "'", long19 == 9223371993267305055L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 278388224186020L + "'", long23 == 278388224186020L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test17081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17081");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField13 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.year();
        org.joda.time.DurationField durationField16 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test17082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17082");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str15 = iSOChronology14.toString();
        org.joda.time.DurationField durationField16 = iSOChronology14.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        int[] intArray23 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime13.yearOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField28 = iSOChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.era();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology27.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology27);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plus(readablePeriod32);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = localDateTime31.getFields();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minusYears(999);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.plusMonths((int) (byte) 1);
        int int39 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusMinutes(9);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusHours(864);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test17083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17083");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minus(readablePeriod18);
        int int20 = localDateTime17.getYearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
    }

    @Test
    public void test17084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17084");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DurationField durationField3 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField5 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17085");
        java.util.Locale locale2 = new java.util.Locale("hi!", "908");
        org.joda.time.tz.NameProvider nameProvider3 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str8 = nameProvider3.getName(locale4, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str14 = nameProvider3.getShortName(locale9, "und", "2022-02-11T09:44:00.457");
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField16 = iSOChronology15.halfdays();
        java.lang.String str17 = iSOChronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology15.era();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology15.centuryOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology15.minutes();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.year();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str25 = locale24.getScript();
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str27 = locale24.getDisplayCountry(locale26);
        java.lang.String str28 = property22.getAsText(locale26);
        java.lang.String str31 = nameProvider3.getName(locale26, "yearOfCentury", "ETC/UTC");
        org.joda.time.tz.NameProvider nameProvider32 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str35 = locale34.getDisplayScript();
        java.lang.String str38 = nameProvider32.getShortName(locale34, "Chinese", "ISOChronology[Etc/UTC]");
        java.util.Locale locale40 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str41 = locale40.getDisplayCountry();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.util.Locale.setDefault(locale42);
        java.util.Set<java.lang.String> strSet46 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale40.getDisplayCountry(locale42);
        java.lang.String str50 = nameProvider32.getShortName(locale40, "hi!", "");
        java.lang.String str51 = locale26.getDisplayScript(locale40);
        java.lang.String str53 = locale26.getUnicodeLocaleType("11");
        java.lang.String str54 = locale2.getDisplayCountry(locale26);
        java.lang.String str55 = locale2.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_908");
        org.junit.Assert.assertNotNull(nameProvider3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(nameProvider32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals(locale40.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English (Canada)" + "'", str44, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "908" + "'", str54, "908");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!_908" + "'", str55, "hi!_908");
    }

    @Test
    public void test17086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17086");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plusWeeks((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minus(readablePeriod17);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17087");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        java.lang.String str3 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 25, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, 28);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMinutes(742);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[UTC]" + "'", str3, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17088");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17089");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField15 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test17090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17090");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plus(readablePeriod6);
        int int8 = localDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime2.getFieldTypes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
    }

    @Test
    public void test17091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17091");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        long long15 = iSOChronology0.add((-1L), (long) (byte) 1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField21 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField26 = iSOChronology0.months();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test17092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17092");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime5.getFields();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusYears(999);
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = localDateTime10.isSupported(durationFieldType11);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17093");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        long long12 = dateTimeZone8.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(51);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusMillis(35380187);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2022L + "'", long12 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17094");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test17095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17095");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField13 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        java.lang.String str17 = iSOChronology15.toString();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology15.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = iSOChronology15.withZone(dateTimeZone20);
        int int23 = dateTimeZone20.getOffsetFromLocal(6830578589573L);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        int int26 = dateTimeZone20.getOffsetFromLocal((long) 845);
        org.joda.time.Chronology chronology27 = iSOChronology0.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField28 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField31 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test17096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17096");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setExtension('4', "801");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test17097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17097");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField13 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test17098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17098");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField13 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17099");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDateTime4.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.addWrapFieldToCopy(52);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        int int16 = localDateTime15.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = property22.getAsShortText(locale23);
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = property22.getAsText(locale26);
        org.joda.time.LocalDateTime localDateTime29 = property22.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = property22.roundHalfEvenCopy();
        boolean boolean31 = localDateTime15.equals((java.lang.Object) localDateTime30);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str33 = iSOChronology32.toString();
        org.joda.time.DurationField durationField34 = iSOChronology32.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        int[] intArray41 = iSOChronology32.get((org.joda.time.ReadablePartial) localDateTime37, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology32.getZone();
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime45 = localDateTime30.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime12.plusYears(71467292);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime12.withMillisOfDay(0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9" + "'", str24, "9");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9" + "'", str28, "9");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test17100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17100");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getScript();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getLanguage();
        java.lang.String str6 = locale1.getDisplayLanguage(locale4);
        java.lang.String str7 = locale4.getDisplayScript();
        java.util.Locale locale8 = locale4.stripExtensions();
        java.lang.String str9 = locale8.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "isochronology[etc/utc]" + "'", str6, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test17101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17101");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.lang.String str12 = property5.getAsString();
        int int13 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime15 = property5.addToCopy(1644572689440L);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withDurationAdded(readableDuration16, 11);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withPeriodAdded(readablePeriod19, 35442103);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test17102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17102");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfSecond();
        org.joda.time.DurationField durationField5 = iSOChronology0.seconds();
        java.lang.String str6 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17103");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime14);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.year();
        org.joda.time.DurationField durationField18 = property17.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property17.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 35600619]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17104");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusDays(845);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 18);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        java.lang.String str23 = iSOChronology21.toString();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology21.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField26 = iSOChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.era();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra((int) 'a');
        int[] intArray36 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime32, (long) 100);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.withDurationAdded(readableDuration37, (int) '4');
        int[] intArray40 = localDateTime39.getValues();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusYears(2);
        long long44 = iSOChronology21.set((org.joda.time.ReadablePartial) localDateTime42, 1L);
        int int45 = localDateTime42.getDayOfWeek();
        int int46 = localDateTime42.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minus(readablePeriod47);
        org.joda.time.DateTimeField[] dateTimeFieldArray49 = localDateTime42.getFields();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfMonth();
        int int52 = localDateTime50.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 35600633]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 11, 35600633]");
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1707645200633L + "'", long44 == 1707645200633L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
    }

    @Test
    public void test17105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17105");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Japanese (Japan)" + "'", str2, "Japanese (Japan)");
    }

    @Test
    public void test17106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17106");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = iSOChronology0.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test17107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17107");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("0");
        java.lang.String str9 = locale8.getVariant();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder0.setLanguage("ISOChronology[+00:00:00.641]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ISOChronology[+00:00:00.641] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test17108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17108");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        java.lang.String str3 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra((int) 'a');
        int[] intArray16 = iSOChronology5.get((org.joda.time.ReadablePartial) localDateTime12, (long) 100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withDurationAdded(readableDuration17, (int) '4');
        int[] intArray20 = localDateTime19.getValues();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusYears(2);
        long long24 = iSOChronology1.set((org.joda.time.ReadablePartial) localDateTime22, 1L);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = localDateTime22.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.era();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYearOfEra((int) 'a');
        int[] intArray39 = iSOChronology28.get((org.joda.time.ReadablePartial) localDateTime35, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime22, intArray39);
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.halfdays();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology42.era();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology42);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.lang.String str54 = property52.getAsShortText(locale53);
        java.lang.String str55 = property46.getAsShortText(locale53);
        org.joda.time.DurationField durationField56 = property46.getDurationField();
        org.joda.time.LocalDateTime localDateTime58 = property46.setCopy("0");
        org.joda.time.LocalDateTime localDateTime60 = property46.addToCopy((long) 16);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property46.getFieldType();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property46.getFieldType();
        org.joda.time.LocalDateTime.Property property63 = localDateTime22.property(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime22.plusMinutes(35068789);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime22.plusMonths(945);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.monthOfYear();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withDurationAdded(readableDuration69, 2022);
        org.joda.time.LocalDateTime.Property property72 = localDateTime67.dayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[UTC]" + "'", str3, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2022, 2, 11, 35600698]");
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1707645200698L + "'", long24 == 1707645200698L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9" + "'", str54, "9");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test17109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17109");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField13 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        java.lang.String str16 = iSOChronology14.toString();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology14.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology14.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = iSOChronology14.withZone(dateTimeZone19);
        int int22 = dateTimeZone19.getOffsetFromLocal(6830578589573L);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        long long26 = dateTimeZone19.convertLocalToUTC(0L, false);
        org.joda.time.Chronology chronology27 = iSOChronology0.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology0.era();
        org.joda.time.DurationField durationField30 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField32 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test17110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17110");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str3 = locale2.getISO3Country();
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale0.getDisplayName(locale2);
        java.lang.String str6 = locale2.getScript();
        java.util.Set<java.lang.String> strSet7 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale2.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals(locale2.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Korean" + "'", str5, "Korean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "isochronology[etc/utc]" + "'", str8, "isochronology[etc/utc]");
    }

    @Test
    public void test17111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17111");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = localDateTime2.toString(dateTimeFormatter4);
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = property11.getAsText(locale15);
        org.joda.time.LocalDateTime localDateTime18 = property11.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = property11.roundHalfEvenCopy();
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.weekOfWeekyear();
        int int24 = localDateTime19.getYear();
        boolean boolean25 = localDateTime2.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsShortText(locale32);
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = property31.getAsText(locale35);
        org.joda.time.LocalDateTime localDateTime38 = property31.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.era();
        org.joda.time.LocalDateTime localDateTime41 = property39.addWrapFieldToCopy(58);
        boolean boolean42 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.year();
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField46 = iSOChronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology45.era();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology45);
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology45.era();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology45.hourOfHalfday();
        org.joda.time.DurationField durationField52 = iSOChronology45.minutes();
        org.joda.time.DurationField durationField53 = iSOChronology45.millis();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(72, 28);
        long long59 = dateTimeZone56.adjustOffset((long) 35142604, true);
        org.joda.time.Chronology chronology60 = iSOChronology45.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = localDateTime41.toDateTime(dateTimeZone56);
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet66 = locale64.getUnicodeLocaleKeys();
        boolean boolean67 = locale64.hasExtensions();
        java.lang.String str68 = dateTimeZone56.getName((long) 70, locale64);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:53:20.760" + "'", str5, "2022-02-11T09:53:20.760");
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T10:00:00.000" + "'", str20, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English (Canada)" + "'", str36, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9" + "'", str37, "9");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 35142604L + "'", long59 == 35142604L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+72:28" + "'", str68, "+72:28");
    }

    @Test
    public void test17112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17112");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        long long4 = iSOChronology0.add(1707644765176L, 1644572727496L, 58);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        int int8 = localDateTime7.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withSecondOfMinute((int) '4');
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField17 = iSOChronology16.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology16.era();
        org.joda.time.DurationField durationField19 = iSOChronology16.halfdays();
        java.lang.String str20 = iSOChronology16.toString();
        java.lang.String str21 = iSOChronology16.toString();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField24 = iSOChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.era();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = property33.getAsShortText(locale34);
        java.lang.String str36 = property27.getAsShortText(locale34);
        org.joda.time.DurationField durationField37 = property27.getDurationField();
        org.joda.time.LocalDateTime localDateTime39 = property27.setCopy("0");
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withYear(10);
        int int43 = localDateTime39.getYearOfEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = localDateTime39.getFields();
        int[] intArray46 = iSOChronology16.get((org.joda.time.ReadablePartial) localDateTime39, (long) 90);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime12, intArray46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime12.minusMillis(35362625);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 97092862959944L + "'", long4 == 97092862959944L);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "9" + "'", str35, "9");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1, 90]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test17113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17113");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder7 = builder5.setLanguage("Feb");
        java.util.Locale.Builder builder8 = builder5.clearExtensions();
        java.util.Locale.Builder builder10 = builder5.setLanguage("ja");
        java.util.Locale.Builder builder11 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder5.setVariant("Property[dayOfWeek]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Property[dayOfWeek] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test17114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17114");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfDay();
        java.lang.String str9 = iSOChronology0.toString();
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(obj10, chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear(248);
        long long16 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime14, 1707644720731L);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        int int18 = localDateTime14.getMillisOfSecond();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-54337529199176L) + "'", long16 == (-54337529199176L));
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 824 + "'", int18 == 824);
    }

    @Test
    public void test17115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17115");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfHalfday();
        java.lang.String str12 = iSOChronology0.toString();
        org.joda.time.Chronology chronology13 = iSOChronology0.withUTC();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test17116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17116");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(1644572662063L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DurationField durationField7 = iSOChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17117");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList23.parallelStream();
        boolean boolean25 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray33 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray41 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = strSet34.containsAll((java.util.Collection<java.lang.String>) strList42);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet34);
        boolean boolean47 = localDateTime0.equals((java.lang.Object) strSet34);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime0.withDayOfMonth(1);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.minuteOfHour();
        org.joda.time.LocalDateTime.Property property51 = localDateTime49.era();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.dayOfYear();
        java.lang.String str55 = iSOChronology53.toString();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology53.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology53.dayOfMonth();
        org.joda.time.DurationField durationField58 = iSOChronology53.millis();
        org.joda.time.DurationField durationField59 = iSOChronology53.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology60);
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str64 = iSOChronology63.toString();
        org.joda.time.DurationField durationField65 = iSOChronology63.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) (byte) 0);
        int[] intArray72 = iSOChronology63.get((org.joda.time.ReadablePartial) localDateTime68, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = iSOChronology63.getZone();
        java.lang.String str74 = dateTimeZone73.toString();
        org.joda.time.DateTime dateTime75 = localDateTime62.toDateTime(dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime75.getZone();
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime75.getZone();
        org.joda.time.Chronology chronology78 = iSOChronology53.withZone(dateTimeZone77);
        long long82 = iSOChronology53.add(56L, 1644572653745L, 51);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime(1707644640383L, (org.joda.time.Chronology) iSOChronology53);
        boolean boolean84 = localDateTime49.isEqual((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime.Property property85 = localDateTime83.dayOfYear();
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 83873205341051L + "'", long82 == 83873205341051L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test17118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17118");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(22);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusWeeks(35315837);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localDateTime14.getValue(400);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 400");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17119");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 21, dateTimeZone2);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology4.hours();
        boolean boolean8 = dateTimeZone2.equals((java.lang.Object) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int10 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMinutes(682);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setLanguage("de");
        java.util.Locale.Builder builder16 = builder13.clearExtensions();
        java.util.Locale.Builder builder18 = builder13.setLanguageTag("GMT");
        java.util.Locale.Builder builder19 = builder13.clearExtensions();
        java.util.Locale.Builder builder22 = builder19.setExtension('a', "fr_CA");
        java.util.Locale.Builder builder24 = builder19.setLanguage("GMT");
        java.util.Locale.Builder builder26 = builder19.removeUnicodeLocaleAttribute("35085083");
        java.util.Locale locale27 = builder19.build();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        boolean boolean29 = localDateTime12.equals((java.lang.Object) strSet28);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32000939 + "'", int10 == 32000939);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "gmt__#a-fr-ca");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test17120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17120");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        org.joda.time.DurationField durationField24 = iSOChronology0.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35600955]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707645200955L + "'", long23 == 1707645200955L);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test17121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17121");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(2021, 630, 836, 453, 46271538, 71188900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 453 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17122");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("0");
        java.lang.String str9 = locale8.getVariant();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale8);
        java.util.Locale locale12 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale.setDefault(locale14);
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale12.getDisplayCountry(locale14);
        java.lang.String str20 = locale14.getDisplayVariant();
        java.util.Locale.Builder builder21 = builder10.setLocale(locale14);
        boolean boolean22 = locale14.hasExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale12.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test17123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17123");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDateTime4.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.addWrapFieldToCopy(52);
        java.util.Locale locale14 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.getScript();
        int int17 = property9.getMaximumTextLength(locale14);
        java.lang.String str18 = locale14.getDisplayScript();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals(locale14.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test17124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17124");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        java.lang.String str13 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(10);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withPeriodAdded(readablePeriod18, 67564651);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField22 = iSOChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.era();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYearOfEra((int) 'a');
        int[] intArray32 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = localDateTime28.getFields();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minusHours(1);
        int int36 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime28.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.halfdays();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.TimeZone.setDefault(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.Chronology chronology47 = iSOChronology38.withZone(dateTimeZone46);
        long long50 = dateTimeZone46.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withMillisOfSecond(5);
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str61 = iSOChronology60.toString();
        org.joda.time.DurationField durationField62 = iSOChronology60.weeks();
        boolean boolean63 = property59.equals((java.lang.Object) durationField62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property59.getFieldType();
        boolean boolean65 = localDateTime51.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime28.withField(dateTimeFieldType64, 3);
        boolean boolean68 = localDateTime17.isSupported(dateTimeFieldType64);
        org.joda.time.LocalDateTime.Property property69 = localDateTime17.yearOfEra();
        java.lang.String str70 = property69.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2022L + "'", long50 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Property[yearOfEra]" + "'", str70, "Property[yearOfEra]");
    }

    @Test
    public void test17125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17125");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test17126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17126");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        java.lang.String str4 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray8 = iSOChronology0.get(readablePeriod5, (long) 35195131, 1644659331240L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
    }

    @Test
    public void test17127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17127");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = iSOChronology0.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = iSOChronology0.add(1599L, 1707644898170L, 71464121);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1707644898170 * 71464121");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test17128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17128");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plusYears((int) ' ');
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.minus(readableDuration17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusHours(351562);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMonthOfYear(684);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 684 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test17129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17129");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.time.ZoneId zoneId7 = timeZone3.toZoneId();
        boolean boolean8 = timeZone1.hasSameRules(timeZone3);
        timeZone3.setRawOffset(22);
        java.time.ZoneId zoneId11 = timeZone3.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId11);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test17130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17130");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfWeek();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = property11.getAsText(locale15);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        int int19 = property11.getMaximumShortTextLength(locale18);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusMinutes((int) '4');
        int int28 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime22.plusMonths(7);
        java.lang.String str31 = localDateTime22.toString();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withDayOfYear(33);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        java.lang.String str36 = iSOChronology34.toString();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology34.halfdayOfDay();
        org.joda.time.DurationField durationField38 = iSOChronology34.minutes();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology34.millisOfSecond();
        org.joda.time.Chronology chronology42 = iSOChronology34.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minusWeeks((-1));
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.dayOfYear();
        java.lang.String str55 = iSOChronology53.toString();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology53.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology53.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology59 = iSOChronology53.withZone(dateTimeZone58);
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.lang.String str67 = property65.getAsShortText(locale66);
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.lang.String str71 = property65.getAsText(locale69);
        org.joda.time.LocalDateTime localDateTime72 = property65.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusSeconds(6);
        int[] intArray76 = iSOChronology53.get((org.joda.time.ReadablePartial) localDateTime74, (long) 58);
        iSOChronology34.validate((org.joda.time.ReadablePartial) localDateTime49, intArray76);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime33, intArray76);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime33.withWeekyear(2030);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withDayOfWeek(808);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 808 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:53:21.125" + "'", str31, "2022-02-11T09:53:21.125");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "9" + "'", str67, "9");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English (Canada)" + "'", str70, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "9" + "'", str71, "9");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1970, 1, 1, 58]");
        org.junit.Assert.assertNotNull(localDateTime80);
    }

    @Test
    public void test17131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17131");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = localDateTime2.toString(dateTimeFormatter4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy(100);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = property19.getAsShortText(locale20);
        java.lang.String str22 = property19.getAsText();
        org.joda.time.Interval interval23 = property19.toInterval();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str26 = property19.getAsText(locale25);
        int int27 = property19.getLeapAmount();
        long long28 = property19.remainder();
        int int29 = property19.getMinimumValueOverall();
        java.util.Locale locale31 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str32 = locale31.getISO3Country();
        java.lang.String str33 = locale31.getScript();
        java.util.Locale locale36 = new java.util.Locale("617", "0097-02-18T09:45:26.783");
        java.lang.String str37 = locale31.getDisplayVariant(locale36);
        java.lang.String str38 = locale31.getISO3Country();
        java.lang.String str39 = locale31.getDisplayName();
        int int40 = property19.getMaximumTextLength(locale31);
        org.joda.time.LocalDateTime localDateTime41 = property19.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime42 = property19.withMinimumValue();
        boolean boolean43 = dateTime13.equals((java.lang.Object) localDateTime42);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:53:21.162" + "'", str5, "2022-02-11T09:53:21.162");
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "21" + "'", str7, "21");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9" + "'", str22, "9");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "gmt");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9" + "'", str26, "9");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3201162L + "'", long28 == 3201162L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals(locale31.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals(locale36.toString(), "617_0097-02-18T09:45:26.783");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "isochronology[etc/utc]" + "'", str39, "isochronology[etc/utc]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test17132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17132");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        int int17 = localDateTime14.getEra();
        int int18 = localDateTime14.getMillisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35601184 + "'", int18 == 35601184);
    }

    @Test
    public void test17133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17133");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField6 = iSOChronology0.months();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test17134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17134");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        int int31 = localDateTime25.getHourOfDay();
        org.joda.time.LocalDateTime.Property property32 = localDateTime25.centuryOfEra();
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str38 = nameProvider33.getName(locale34, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale40 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = locale40.getScript();
        java.lang.String str43 = locale34.getDisplayVariant(locale40);
        java.lang.String str44 = locale40.toLanguageTag();
        java.lang.String str45 = property32.getAsShortText(locale40);
        org.joda.time.LocalDateTime localDateTime46 = property32.roundHalfFloorCopy();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = locale48.getDisplayVariant();
        java.lang.String str50 = locale48.getCountry();
        java.lang.String str51 = locale47.getDisplayVariant(locale48);
        java.util.Locale locale52 = locale47.stripExtensions();
        java.lang.String str53 = locale52.getDisplayCountry();
        int int54 = property32.getMaximumTextLength(locale52);
        int int55 = property32.get();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals(locale40.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "und" + "'", str44, "und");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "20" + "'", str45, "20");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7 + "'", int54 == 7);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20 + "'", int55 == 20);
    }

    @Test
    public void test17135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17135");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        timeZone1.setRawOffset(4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = locale11.getDisplayVariant();
        java.lang.String str13 = locale11.getCountry();
        java.lang.String str14 = locale10.getDisplayVariant(locale11);
        java.lang.String str15 = locale11.getScript();
        java.lang.String str16 = dateTimeZone8.getShortName(1644572720266L, locale11);
        long long18 = dateTimeZone8.nextTransition(1644659223280L);
        java.lang.String str20 = dateTimeZone8.getName(2780550000001L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644659223280L + "'", long18 == 1644659223280L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test17136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17136");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField11 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology13 = iSOChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology0.add(readablePeriod14, (long) 35066445, 0);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = iSOChronology0.add(readablePeriod18, 1644572792152L, 2022);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = iSOChronology0.getDateTimeMillis(507, 35540035, 2015, 337, 59242, 938, 35213176);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 337 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35066445L + "'", long17 == 35066445L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572792152L + "'", long21 == 1644572792152L);
    }

    @Test
    public void test17137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17137");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DurationField durationField12 = iSOChronology0.months();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DurationFieldType durationFieldType16 = null;
        boolean boolean17 = localDateTime13.isSupported(durationFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMinutes(35571145);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17138");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField11 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test17139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17139");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:44:17.797");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:44:17.797");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17140");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfDay();
        java.lang.String str9 = iSOChronology0.toString();
        org.joda.time.DurationField durationField10 = iSOChronology0.weekyears();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.era();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfEra((int) 'a');
        int[] intArray28 = iSOChronology17.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.withDurationAdded(readableDuration29, (int) '4');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = localDateTime24.indexOf(dateTimeFieldType34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.plus(readableDuration36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime24.plusSeconds((int) 'a');
        boolean boolean40 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.minusSeconds(2);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.withMillisOfDay(35054090);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str52 = iSOChronology51.toString();
        org.joda.time.DurationField durationField53 = iSOChronology51.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays((int) (byte) 0);
        int[] intArray60 = iSOChronology51.get((org.joda.time.ReadablePartial) localDateTime56, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = iSOChronology51.getZone();
        java.lang.String str62 = dateTimeZone61.toString();
        org.joda.time.DateTime dateTime63 = localDateTime50.toDateTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        int int65 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str67 = iSOChronology66.toString();
        org.joda.time.DurationField durationField68 = iSOChronology66.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology69.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusDays((int) (byte) 0);
        int[] intArray75 = iSOChronology66.get((org.joda.time.ReadablePartial) localDateTime71, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = iSOChronology66.getZone();
        java.lang.String str77 = dateTimeZone76.toString();
        java.lang.String str78 = dateTimeZone76.toString();
        java.lang.String str80 = dateTimeZone76.getNameKey(0L);
        long long82 = dateTimeZone47.getMillisKeepLocal(dateTimeZone76, 100L);
        boolean boolean84 = dateTimeZone76.isStandardOffset((long) 0);
        org.joda.time.DateTime dateTime85 = localDateTime46.toDateTime(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime85.getZone();
        org.joda.time.Chronology chronology87 = iSOChronology0.withZone(dateTimeZone86);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTC" + "'", str62, "UTC");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ISOChronology[UTC]" + "'", str67, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "UTC" + "'", str77, "UTC");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "UTC" + "'", str78, "UTC");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L + "'", long82 == 100L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(chronology87);
    }

    @Test
    public void test17141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17141");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField5 = iSOChronology0.hours();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test17142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17142");
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.era();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology2);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology2.dayOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology2.months();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 8, (org.joda.time.Chronology) iSOChronology2);
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology2.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology2.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = iSOChronology2.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology2.dayOfMonth();
        java.lang.String str13 = iSOChronology2.toString();
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
    }

    @Test
    public void test17143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17143");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.LocalDateTime localDateTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        int int10 = localDateTime8.getMinuteOfHour();
        int int11 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.weekOfWeekyear();
        boolean boolean13 = property12.isLeap();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) 'u');
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str23 = nameProvider17.getShortName(locale19, "Chinese", "ISOChronology[Etc/UTC]");
        java.util.Locale locale25 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str26 = locale25.getDisplayCountry();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Locale.setDefault(locale27);
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale25.getDisplayCountry(locale27);
        java.lang.String str35 = nameProvider17.getShortName(locale25, "hi!", "");
        java.lang.String str36 = locale25.getLanguage();
        java.lang.String str37 = dateTimeZone15.getName(1644572643331L, locale25);
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.lang.String str40 = dateTimeZone15.getName(1707644641328L, locale39);
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str42 = property12.getAsText(locale39);
        org.joda.time.LocalDateTime localDateTime44 = property12.addToCopy(35449468);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals(locale25.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (Canada)" + "'", str29, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "isochronology[etc/utc]" + "'", str36, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+117:00" + "'", str37, "+117:00");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+117:00" + "'", str40, "+117:00");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "6" + "'", str42, "6");
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test17144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17144");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.LocalDateTime localDateTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
        int int10 = localDateTime8.getMinuteOfHour();
        int int11 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.weekOfWeekyear();
        boolean boolean13 = property12.isLeap();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) 'u');
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str23 = nameProvider17.getShortName(locale19, "Chinese", "ISOChronology[Etc/UTC]");
        java.util.Locale locale25 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str26 = locale25.getDisplayCountry();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Locale.setDefault(locale27);
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale25.getDisplayCountry(locale27);
        java.lang.String str35 = nameProvider17.getShortName(locale25, "hi!", "");
        java.lang.String str36 = locale25.getLanguage();
        java.lang.String str37 = dateTimeZone15.getName(1644572643331L, locale25);
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.lang.String str40 = dateTimeZone15.getName(1707644641328L, locale39);
        java.util.Set<java.lang.String> strSet41 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str42 = property12.getAsText(locale39);
        java.util.Locale locale46 = new java.util.Locale("0097-02-18T09:46:39.639", "", "35159387");
        java.lang.String str47 = locale39.getDisplayCountry(locale46);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals(locale25.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (Canada)" + "'", str29, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "isochronology[etc/utc]" + "'", str36, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+117:00" + "'", str37, "+117:00");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+117:00" + "'", str40, "+117:00");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "6" + "'", str42, "6");
        org.junit.Assert.assertEquals(locale46.toString(), "0097-02-18t09:46:39.639__35159387");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "China" + "'", str47, "China");
    }

    @Test
    public void test17145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17145");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime2.plusMillis(71122738);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str34 = iSOChronology33.toString();
        org.joda.time.DurationField durationField35 = iSOChronology33.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        int[] intArray42 = iSOChronology33.get((org.joda.time.ReadablePartial) localDateTime38, (long) 100);
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology33.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology33.millisOfDay();
        long long48 = iSOChronology33.add((long) 67441936, (long) 8, 3);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str50 = iSOChronology49.toString();
        org.joda.time.DurationField durationField51 = iSOChronology49.weeks();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology49.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology49.era();
        boolean boolean55 = iSOChronology33.equals((java.lang.Object) iSOChronology49);
        org.joda.time.DurationField durationField56 = iSOChronology49.millis();
        org.joda.time.DurationField durationField57 = iSOChronology49.hours();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology49);
        boolean boolean59 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime58);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 67441960L + "'", long48 == 67441960L);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[UTC]" + "'", str50, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test17146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17146");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone8.toTimeZone();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.time.ZoneId zoneId12 = timeZone10.toZoneId();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId12);
        java.lang.String str14 = timeZone13.getID();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
    }

    @Test
    public void test17147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17147");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(2922789);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        int int7 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.secondOfMinute();
        boolean boolean9 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withMillisOfSecond(24);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.era();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfEra((int) 'a');
        int[] intArray23 = iSOChronology12.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDateTime19.getFields();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.minusHours(1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMinutes(0);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plus(readableDuration31);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = property38.getAsShortText(locale39);
        boolean boolean41 = property38.isLeap();
        org.joda.time.LocalDateTime localDateTime42 = property38.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property38.getFieldType();
        int int44 = localDateTime28.indexOf(dateTimeFieldType43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime28.withYearOfEra(186);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime28);
        java.lang.String str48 = localDateTime47.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "9" + "'", str40, "9");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-11T18:53:21.418" + "'", str48, "2022-02-11T18:53:21.418");
    }

    @Test
    public void test17148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17148");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.centuryOfEra();
        org.joda.time.DurationField durationField20 = iSOChronology17.millis();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.minuteOfHour();
        boolean boolean22 = dateTime15.equals((java.lang.Object) iSOChronology17);
        org.joda.time.Instant instant23 = dateTime15.toInstant();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        int int27 = localDateTime26.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = property33.getAsShortText(locale34);
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = property33.getAsText(locale37);
        org.joda.time.LocalDateTime localDateTime40 = property33.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = property33.roundHalfEvenCopy();
        boolean boolean42 = localDateTime26.equals((java.lang.Object) localDateTime41);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str44 = iSOChronology43.toString();
        org.joda.time.DurationField durationField45 = iSOChronology43.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        int[] intArray52 = iSOChronology43.get((org.joda.time.ReadablePartial) localDateTime48, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = iSOChronology43.getZone();
        boolean boolean55 = dateTimeZone53.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime56 = localDateTime41.toDateTime(dateTimeZone53);
        int int57 = localDateTime41.getCenturyOfEra();
        org.joda.time.DateTime dateTime58 = localDateTime41.toDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.lang.String str66 = property64.getAsShortText(locale65);
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.lang.String str69 = locale67.getDisplayName(locale68);
        java.lang.String str70 = property64.getAsText(locale68);
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        int int72 = property64.getMaximumShortTextLength(locale71);
        org.joda.time.chrono.ISOChronology iSOChronology73 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology73.dayOfYear();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology73);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property78 = localDateTime75.hourOfDay();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime75.minusMinutes((int) '4');
        int int81 = property64.compareTo((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime82 = property64.roundCeilingCopy();
        org.joda.time.DateTime dateTime83 = localDateTime82.toDateTime();
        boolean boolean84 = dateTime58.isBefore((org.joda.time.ReadableInstant) dateTime83);
        boolean boolean85 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.chrono.ISOChronology iSOChronology86 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField87 = iSOChronology86.dayOfYear();
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology86);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property91 = localDateTime88.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType92 = null;
        boolean boolean93 = localDateTime88.isSupported(durationFieldType92);
        org.joda.time.DateTime dateTime94 = localDateTime88.toDateTime();
        long long95 = dateTime94.getMillis();
        org.joda.time.Instant instant96 = dateTime94.toInstant();
        java.lang.String str97 = instant96.toString();
        org.joda.time.Chronology chronology98 = instant96.getChronology();
        boolean boolean99 = dateTime15.isAfter((org.joda.time.ReadableInstant) instant96);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 21 + "'", int27 == 21);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "9" + "'", str35, "9");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English (Canada)" + "'", str38, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "9" + "'", str39, "9");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 20 + "'", int57 == 20);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "9" + "'", str66, "9");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English (Canada)" + "'", str69, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "9" + "'", str70, "9");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNotNull(iSOChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(iSOChronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime94);
// flaky:         org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1644573201438L + "'", long95 == 1644573201438L);
        org.junit.Assert.assertNotNull(instant96);
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "2022-02-11T09:53:21.438Z" + "'", str97, "2022-02-11T09:53:21.438Z");
        org.junit.Assert.assertNotNull(chronology98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test17149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17149");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.lang.String str8 = property5.getAsText();
        org.joda.time.Interval interval9 = property5.toInterval();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str12 = property5.getAsText(locale11);
        java.lang.String str13 = locale11.getLanguage();
        java.util.Locale locale14 = locale11.stripExtensions();
        java.lang.String str15 = locale11.getDisplayCountry();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.lang.String str17 = locale16.toLanguageTag();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField20 = iSOChronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology19.era();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology19);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.lang.String str31 = property29.getAsShortText(locale30);
        java.lang.String str32 = property23.getAsShortText(locale30);
        java.lang.String str33 = locale30.getVariant();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale30.getDisplayScript(locale34);
        java.lang.String str36 = locale16.getDisplayVariant(locale34);
        java.util.Locale locale40 = new java.util.Locale("gmt", "0097-02-20T19:45:03.339", "0097-02-18T09:44:41.650");
        java.lang.String str41 = locale16.getDisplayScript(locale40);
        java.lang.String str42 = locale40.getCountry();
        java.lang.String str43 = locale11.getDisplayVariant(locale40);
        java.lang.String str44 = locale40.getDisplayLanguage();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9" + "'", str8, "9");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "gmt");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gmt" + "'", str13, "gmt");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-CN" + "'", str17, "zh-CN");
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "9" + "'", str31, "9");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale40.toString(), "gmt_0097-02-20T19:45:03.339_0097-02-18T09:44:41.650");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0097-02-20T19:45:03.339" + "'", str42, "0097-02-20T19:45:03.339");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "gmt" + "'", str44, "gmt");
    }

    @Test
    public void test17150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17150");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = null;
        boolean boolean7 = localDateTime2.isSupported(durationFieldType6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withYear((int) 'x');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDayOfYear(35507780);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35507780 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test17151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17151");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField5 = iSOChronology0.days();
        org.joda.time.DateTimeZone dateTimeZone6 = iSOChronology0.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusWeeks((-1));
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = property23.getAsShortText(locale24);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = property23.getAsText(locale27);
        org.joda.time.LocalDateTime localDateTime30 = property23.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str32 = iSOChronology31.toString();
        org.joda.time.DurationField durationField33 = iSOChronology31.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        int[] intArray40 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = iSOChronology31.getZone();
        java.lang.String str42 = dateTimeZone41.toString();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime30, dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime50 = localDateTime43.withYearOfCentury((int) (short) 10);
        int int51 = localDateTime50.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withPeriodAdded(readablePeriod52, 9);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.withDurationAdded(readableDuration55, 15);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.centuryOfEra();
        boolean boolean59 = localDateTime16.isAfter((org.joda.time.ReadablePartial) localDateTime57);
        long long61 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime16, (long) 35042587);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime16.withDurationAdded(readableDuration62, 421200000);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfDay(0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0097-02-18T09:53:21.537" + "'", str17, "0097-02-18T09:53:21.537");
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "9" + "'", str25, "9");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "9" + "'", str29, "9");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-59101884398463L) + "'", long61 == (-59101884398463L));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
    }

    @Test
    public void test17152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17152");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology10 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test17153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17153");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withSecondOfMinute((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(22);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withYearOfEra(35150081);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17154");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.minusSeconds(2);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusSeconds(35054090);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusYears(1999);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMillisOfDay(381);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test17155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17155");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str3 = locale2.getISO3Country();
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale0.getDisplayName(locale2);
        java.lang.String str6 = locale2.getScript();
        java.util.Set<java.lang.String> strSet7 = locale2.getUnicodeLocaleAttributes();
        strSet7.clear();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet7.stream();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        boolean boolean14 = strSet7.remove((java.lang.Object) strSet13);
        int int15 = strSet7.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals(locale2.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Korean" + "'", str5, "Korean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test17156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17156");
        java.lang.String[] strArray10 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.util.Iterator<java.lang.String> strItor13 = strSet11.iterator();
        java.lang.Object[] objArray14 = strSet11.toArray();
        java.util.Iterator<java.lang.String> strItor15 = strSet11.iterator();
        boolean boolean16 = strSet11.isEmpty();
        java.lang.Object[] objArray17 = strSet11.toArray();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
    }

    @Test
    public void test17157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17157");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        int int19 = localDateTime17.getYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withWeekyear(53);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra((int) 'a');
        int[] intArray33 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = localDateTime29.getFields();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.minusHours(1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime29.minusMinutes((-1));
        int int39 = localDateTime29.getDayOfWeek();
        boolean boolean40 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property41 = localDateTime29.millisOfDay();
        int int42 = localDateTime29.size();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
    }

    @Test
    public void test17158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17158");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime10.isSupported(durationFieldType14);
        org.joda.time.DateTime dateTime16 = localDateTime10.toDateTime();
        long long17 = dateTime16.getMillis();
        long long18 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        int int19 = property6.get();
        java.lang.String str20 = property6.toString();
        org.joda.time.LocalDateTime localDateTime21 = property6.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField22 = property6.getDurationField();
        org.joda.time.Interval interval23 = property6.toInterval();
        long long24 = property6.remainder();
        org.joda.time.LocalDateTime localDateTime25 = property6.withMinimumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644573201655L + "'", long17 == 1644573201655L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-24L) + "'", long18 == (-24L));
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[hourOfDay]" + "'", str20, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(interval23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3201655L + "'", long24 == 3201655L);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test17159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17159");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2031-11-12T09:44:21.734");
        java.util.Locale locale2 = locale1.stripExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test17160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17160");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DurationField durationField33 = property5.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str40 = nameProvider34.getShortName(locale36, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str41 = property5.getAsShortText(locale36);
        org.joda.time.LocalDateTime localDateTime42 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYear(845);
        int int45 = localDateTime44.getDayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 42 + "'", int45 == 42);
    }

    @Test
    public void test17161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17161");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField7 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test17162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17162");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str11 = iSOChronology10.toString();
        org.joda.time.DurationField durationField12 = iSOChronology10.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        int[] intArray19 = iSOChronology10.get((org.joda.time.ReadablePartial) localDateTime15, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = iSOChronology10.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime22 = localDateTime9.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime9.minusHours(6);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusHours((-1));
        int[] intArray28 = chronology6.get((org.joda.time.ReadablePartial) localDateTime24, (long) 0);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.withDurationAdded(readableDuration29, 4);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime24.withDurationAdded(readableDuration32, 3);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusMillis(21);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 6);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYearOfCentury(51);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plus(readablePeriod42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.plusDays(35137417);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime34.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime38.plusSeconds(35249197);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime38.minusMinutes(50);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test17163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17163");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = property5.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField34 = property5.getField();
        org.joda.time.LocalDateTime localDateTime35 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMillis(35534807);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test17164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17164");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.weekOfWeekyear();
        long long7 = iSOChronology1.add((long) (short) 10, (long) 35054090, 3);
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.yearOfCentury();
        org.joda.time.Chronology chronology9 = iSOChronology1.withUTC();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1707644793532L, chronology9);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 105162280L + "'", long7 == 105162280L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test17165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17165");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str7 = dateTimeZone6.getID();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        boolean boolean10 = dateTimeZone6.isStandardOffset(1707644734168L);
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone6);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str17 = iSOChronology16.toString();
        org.joda.time.DurationField durationField18 = iSOChronology16.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        int[] intArray25 = iSOChronology16.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = iSOChronology16.getZone();
        java.lang.String str27 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime28 = localDateTime15.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(0L, dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        java.lang.String str34 = dateTimeZone32.getNameKey((long) (byte) 0);
        long long36 = dateTimeZone29.getMillisKeepLocal(dateTimeZone32, 1707644669306L);
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str40 = locale39.getDisplayVariant();
        java.lang.String str41 = locale39.getISO3Language();
        java.lang.String str42 = locale39.getScript();
        java.lang.String str43 = dateTimeZone29.getName(1212L, locale39);
        int int45 = dateTimeZone29.getStandardOffset((long) 30);
        boolean boolean46 = iSOChronology11.equals((java.lang.Object) dateTimeZone29);
        boolean boolean48 = dateTimeZone29.isStandardOffset(1644572748388L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1707644669298L + "'", long36 == 1707644669298L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test17166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17166");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.Chronology chronology10 = iSOChronology1.withZone(dateTimeZone9);
        long long13 = dateTimeZone9.adjustOffset((-1L), false);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 35042587, dateTimeZone9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        long long34 = dateTimeZone30.convertLocalToUTC((long) 0, true, 0L);
        long long36 = dateTimeZone30.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology37 = iSOChronology17.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology17.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str41 = iSOChronology40.toString();
        org.joda.time.DurationField durationField42 = iSOChronology40.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        int[] intArray49 = iSOChronology40.get((org.joda.time.ReadablePartial) localDateTime45, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = iSOChronology40.getZone();
        long long54 = dateTimeZone50.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(dateTimeZone50);
        org.joda.time.Chronology chronology56 = iSOChronology17.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime57 = localDateTime14.toDateTime(dateTimeZone50);
        java.util.Locale.Category category59 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale60 = java.util.Locale.getDefault(category59);
        java.util.Locale locale61 = java.util.Locale.US;
        java.util.Locale.setDefault(category59, locale61);
        java.util.Locale locale64 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str65 = locale64.getDisplayCountry();
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        java.util.Locale.setDefault(locale66);
        java.util.Set<java.lang.String> strSet70 = locale66.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale64.getDisplayCountry(locale66);
        java.util.Locale.setDefault(category59, locale64);
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category59, locale73);
        java.lang.String str75 = locale73.getDisplayName();
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleKeys();
        java.util.Locale locale77 = locale73.stripExtensions();
        java.lang.String str78 = dateTimeZone50.getName((long) 191, locale77);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.FORMAT + "'", category59.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertEquals(locale64.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "English (Canada)" + "'", str68, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Japanese" + "'", str75, "Japanese");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
    }

    @Test
    public void test17167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17167");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.DurationField durationField3 = iSOChronology1.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        int[] intArray10 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime6, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = iSOChronology1.getZone();
        long long15 = dateTimeZone11.convertLocalToUTC((long) 0, true, 0L);
        long long18 = dateTimeZone11.adjustOffset(0L, false);
        java.util.Locale locale21 = new java.util.Locale("0");
        java.lang.String str22 = dateTimeZone11.getName(1644572637306L, locale21);
        java.lang.String str25 = nameProvider0.getShortName(locale21, "0097-02-18T09:44:42.988", "0097-02-18T09:44:41.650");
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str27 = iSOChronology26.toString();
        org.joda.time.DurationField durationField28 = iSOChronology26.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        int[] intArray35 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime31, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = iSOChronology26.getZone();
        long long40 = dateTimeZone36.convertLocalToUTC((long) 0, true, 0L);
        long long43 = dateTimeZone36.adjustOffset(0L, false);
        long long45 = dateTimeZone36.convertUTCToLocal((long) 37);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.setLanguage("de");
        java.util.Locale.Builder builder50 = builder47.clearExtensions();
        java.util.Locale.Builder builder52 = builder47.setLanguageTag("GMT");
        java.util.Locale locale53 = builder47.build();
        java.util.Set<java.lang.Character> charSet54 = locale53.getExtensionKeys();
        java.lang.String str55 = dateTimeZone36.getShortName(1707644686574L, locale53);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale57.getDisplayVariant();
        java.lang.String str59 = locale57.getCountry();
        java.lang.String str60 = locale56.getDisplayVariant(locale57);
        java.lang.String str61 = locale53.getDisplayLanguage(locale56);
        java.lang.String str64 = nameProvider0.getShortName(locale53, "31539918", "0097-02-18T09:44:52.228");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.lang.Class<?> wildcardClass66 = nameProvider0.getClass();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals(locale21.toString(), "0");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 37L + "'", long45 == 37L);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "gmt");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "gmt" + "'", str61, "gmt");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test17168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17168");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        java.lang.String str11 = property5.getAsString();
        boolean boolean12 = property5.isLeap();
        java.lang.String str13 = property5.getAsText();
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = property5.getAsShortText(locale14);
        org.joda.time.DateTimeField dateTimeField16 = property5.getField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test17169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17169");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField13 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMonths((int) 'u');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusSeconds(2022);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        int int30 = localDateTime29.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = property39.getAsShortText(locale40);
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = property39.getAsText(locale43);
        org.joda.time.LocalDateTime localDateTime46 = property39.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str48 = iSOChronology47.toString();
        org.joda.time.DurationField durationField49 = iSOChronology47.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        int[] intArray56 = iSOChronology47.get((org.joda.time.ReadablePartial) localDateTime52, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = iSOChronology47.getZone();
        java.lang.String str58 = dateTimeZone57.toString();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime46, dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = localDateTime66.getFieldType(0);
        org.joda.time.LocalDateTime.Property property70 = localDateTime32.property(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime32.yearOfCentury();
        boolean boolean72 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime.Property property73 = localDateTime24.monthOfYear();
        long long75 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime24, 1644572685608L);
        org.joda.time.DateTimeZone dateTimeZone76 = iSOChronology0.getZone();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = iSOChronology0.get(readablePeriod77, 1644659264131L, (-239968L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English (Canada)" + "'", str44, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9" + "'", str45, "9");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "UTC" + "'", str58, "UTC");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1952243601853L + "'", long75 == 1952243601853L);
        org.junit.Assert.assertNotNull(dateTimeZone76);
    }

    @Test
    public void test17170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17170");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:46:23.870+00:00:00.008");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:46:23.870+00:00:00.008");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17171");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-20T19:44:18.075");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-20T19:44:18.075' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17172");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str15 = iSOChronology14.toString();
        org.joda.time.DurationField durationField16 = iSOChronology14.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        int[] intArray23 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime13.yearOfEra();
        java.util.Date date26 = localDateTime13.toDate();
        org.joda.time.LocalDateTime.Property property27 = localDateTime13.weekyear();
        int int28 = localDateTime13.getSecondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Sat Feb 12 09:53:21 GMT 2022");
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 21 + "'", int28 == 21);
    }

    @Test
    public void test17173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17173");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getCountry();
        java.lang.String str4 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale5 = locale0.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = property12.getAsText(locale16);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        int int20 = property12.getMaximumShortTextLength(locale19);
        java.lang.String str21 = locale6.getDisplayName(locale19);
        java.lang.String str22 = locale19.getDisplayVariant();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str25 = locale19.getDisplayCountry(locale24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str29 = locale28.getISO3Country();
        java.lang.String str30 = locale28.getScript();
        java.lang.String str31 = locale26.getDisplayName(locale28);
        java.lang.String str32 = locale28.toLanguageTag();
        java.util.Locale locale34 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = locale34.toLanguageTag();
        java.lang.String str37 = locale28.getDisplayLanguage(locale34);
        java.lang.String str38 = locale19.getDisplayVariant(locale28);
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale42 = new java.util.Locale("", "Etc/UTC");
        java.lang.String str43 = locale39.getDisplayLanguage(locale42);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str46 = locale45.getDisplayVariant();
        java.lang.String str47 = locale45.getISO3Language();
        java.lang.String str48 = locale45.getScript();
        java.lang.String str49 = locale42.getDisplayVariant(locale45);
        java.lang.String str50 = locale28.getDisplayVariant(locale45);
        java.lang.String str51 = locale5.getDisplayScript(locale45);
        java.lang.String str52 = locale45.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet53 = locale45.getUnicodeLocaleKeys();
        int int54 = strSet53.size();
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.util.Locale.setDefault(locale55);
        java.util.Set<java.lang.String> strSet59 = locale55.getUnicodeLocaleAttributes();
        int int60 = strSet59.size();
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str66 = nameProvider61.getName(locale62, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale68 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str69 = locale68.getISO3Country();
        java.lang.String str70 = locale68.getScript();
        java.lang.String str71 = locale62.getDisplayVariant(locale68);
        java.lang.String str72 = locale62.getDisplayScript();
        java.util.Locale locale74 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str75 = locale62.getDisplayLanguage(locale74);
        boolean boolean76 = strSet59.equals((java.lang.Object) locale62);
        boolean boolean77 = strSet53.removeAll((java.util.Collection<java.lang.String>) strSet59);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese (Cina)" + "'", str21, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals(locale28.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Korean" + "'", str31, "Korean");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertEquals(locale34.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "und" + "'", str36, "und");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "isochronology[etc/utc]" + "'", str37, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale42.toString(), "_ETC/UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese" + "'", str43, "Chinese");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "English (Canada)" + "'", str57, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals(locale68.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals(locale74.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test17174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17174");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField11 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology13 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str15 = iSOChronology14.toString();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = iSOChronology14.add(readablePeriod16, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology14.dayOfWeek();
        long long26 = iSOChronology14.add(59L, 1644572646636L, 50);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str28 = iSOChronology27.toString();
        org.joda.time.DurationField durationField29 = iSOChronology27.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        int[] intArray36 = iSOChronology27.get((org.joda.time.ReadablePartial) localDateTime32, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = iSOChronology27.getZone();
        long long41 = dateTimeZone37.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale42 = java.util.Locale.US;
        boolean boolean43 = dateTimeZone37.equals((java.lang.Object) locale42);
        long long47 = dateTimeZone37.convertLocalToUTC((long) ' ', true, (long) '4');
        org.joda.time.Chronology chronology48 = iSOChronology14.withZone(dateTimeZone37);
        java.lang.String str50 = dateTimeZone37.getShortName(1644572654082L);
        org.joda.time.Chronology chronology51 = iSOChronology0.withZone(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now(dateTimeZone37);
        org.joda.time.DateTimeField[] dateTimeFieldArray53 = localDateTime52.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMonthOfYear(845);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 845 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 82228632331859L + "'", long26 == 82228632331859L);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldArray53);
    }

    @Test
    public void test17175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17175");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        int int17 = dateTimeZone15.getOffsetFromLocal(1644572833497L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test17176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17176");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("Fri");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField11 = iSOChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.era();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra((int) 'a');
        int[] intArray21 = iSOChronology10.get((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime17.getFields();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusHours(1);
        int int25 = localDateTime17.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDateTime27.isSupported(dateTimeFieldType28);
        boolean boolean30 = iSOChronology7.equals((java.lang.Object) dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology7.getZone();
        long long34 = dateTimeZone31.convertLocalToUTC((long) 13, false);
        long long37 = dateTimeZone31.convertLocalToUTC(0L, false);
        java.util.Locale locale42 = new java.util.Locale("2022-02-11T09:44:01.355", "2022-02-11T10:00:00.000Z", "2022-02-11T09:44:05.224");
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = property48.getAsShortText(locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = property48.getAsText(locale52);
        org.joda.time.LocalDateTime localDateTime55 = property48.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str57 = iSOChronology56.toString();
        org.joda.time.DurationField durationField58 = iSOChronology56.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        int[] intArray65 = iSOChronology56.get((org.joda.time.ReadablePartial) localDateTime61, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = iSOChronology56.getZone();
        java.lang.String str67 = dateTimeZone66.toString();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime55, dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.yearOfCentury();
        org.joda.time.LocalDateTime.Property property72 = localDateTime68.yearOfCentury();
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder73.setLanguage("de");
        java.util.Locale.Builder builder76 = builder73.clearExtensions();
        java.util.Locale locale77 = builder73.build();
        int int78 = property72.getMaximumTextLength(locale77);
        java.lang.String str79 = locale42.getDisplayName(locale77);
        java.lang.String str80 = dateTimeZone31.getName(100L, locale77);
        org.joda.time.chrono.ISOChronology iSOChronology82 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology82.dayOfYear();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology82);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.hourOfDay();
        java.util.Locale locale88 = java.util.Locale.ENGLISH;
        java.lang.String str89 = property87.getAsShortText(locale88);
        java.lang.String str90 = locale88.getISO3Country();
        java.lang.String str91 = dateTimeZone31.getShortName(1644539721713L, locale88);
        java.util.Locale.Builder builder92 = builder6.setLocale(locale88);
        java.util.Locale.Builder builder93 = builder6.clearExtensions();
        java.util.Locale.Builder builder94 = builder93.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder96 = builder94.setVariant("2022-02-11T12:49:20.765");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T12:49:20.765 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 13L + "'", long34 == 13L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals(locale42.toString(), "2022-02-11t09:44:01.355_2022-02-11T10:00:00.000Z_2022-02-11T09:44:05.224");
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "9" + "'", str50, "9");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (Canada)" + "'", str53, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9" + "'", str54, "9");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[UTC]" + "'", str57, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "UTC" + "'", str67, "UTC");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-11t09:44:01.355 (2022-02-11T10:00:00.000Z,2022-02-11T09:44:05.224)" + "'", str79, "2022-02-11t09:44:01.355 (2022-02-11T10:00:00.000Z,2022-02-11T09:44:05.224)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertNotNull(iSOChronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "9" + "'", str89, "9");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test17177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17177");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) 'u');
        java.lang.String str9 = localDateTime8.toString();
        int int10 = localDateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfEvenCopy();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = property18.getAsShortText(locale19);
        java.lang.String str21 = locale19.getISO3Country();
        java.lang.String str22 = locale19.getLanguage();
        java.lang.String str23 = property11.getAsText(locale19);
        org.joda.time.LocalDateTime localDateTime24 = property11.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfCentury(41);
        org.joda.time.DurationFieldType durationFieldType27 = null;
        boolean boolean28 = localDateTime26.isSupported(durationFieldType27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plusHours(33807570);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2031-11-12T09:53:21.988" + "'", str9, "2031-11-12T09:53:21.988");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 46 + "'", int10 == 46);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9" + "'", str20, "9");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "35601988" + "'", str23, "35601988");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test17178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17178");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        long long27 = dateTimeZone23.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int[] intArray30 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime28, (long) 52);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology0.millisOfSecond();
        org.joda.time.DurationField durationField33 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 52]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test17179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17179");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getName(locale1, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str11 = nameProvider0.getShortName(locale6, "und", "2022-02-11T09:44:00.457");
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        java.lang.String str14 = iSOChronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology12.era();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology12.centuryOfEra();
        org.joda.time.DurationField durationField17 = iSOChronology12.minutes();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.year();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str22 = locale21.getScript();
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale21.getDisplayCountry(locale23);
        java.lang.String str25 = property19.getAsText(locale23);
        java.lang.String str28 = nameProvider0.getName(locale23, "yearOfCentury", "ETC/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("monthOfYear");
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("hi!");
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        java.lang.String str37 = iSOChronology35.toString();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = iSOChronology35.withZone(dateTimeZone40);
        boolean boolean43 = dateTimeZone40.isStandardOffset((long) (short) 1);
        java.util.Locale locale46 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str47 = locale46.getDisplayCountry();
        java.lang.String str48 = dateTimeZone40.getShortName(97L, locale46);
        java.lang.String str49 = locale34.getDisplayScript(locale46);
        java.lang.String str50 = locale32.getDisplayScript(locale46);
        java.lang.String str53 = nameProvider0.getName(locale32, "16", "en-CA");
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale55.getDisplayVariant();
        java.lang.String str57 = locale55.getCountry();
        java.lang.String str58 = locale54.getDisplayVariant(locale55);
        java.util.Locale locale59 = locale54.stripExtensions();
        java.lang.String str62 = nameProvider0.getName(locale54, "Property[hourOfDay]", "2022-02-11T09:46:17.068");
        java.util.Locale locale65 = new java.util.Locale("2022-02-10T09:44:39.022", "cinese (Cina)");
        java.util.Locale locale67 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str68 = locale67.getISO3Country();
        java.util.Locale.setDefault(locale67);
        java.lang.String str70 = locale67.getVariant();
        java.lang.String str71 = locale65.getDisplayScript(locale67);
        java.lang.String str74 = nameProvider0.getName(locale65, "35292024", "156");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals(locale46.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals(locale65.toString(), "2022-02-10t09:44:39.022_CINESE (CINA)");
        org.junit.Assert.assertEquals(locale67.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test17180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17180");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.isStandardOffset((long) (short) 1);
        long long12 = dateTimeZone5.convertLocalToUTC(1644572683232L, true, (long) 35);
        long long16 = dateTimeZone5.convertLocalToUTC(1707644679456L, true, 35081963L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone5);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks(35141054);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1644572683232L + "'", long12 == 1644572683232L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1707644679456L + "'", long16 == 1707644679456L);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17181");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = null;
        boolean boolean7 = localDateTime2.isSupported(durationFieldType6);
        org.joda.time.DateTime dateTime8 = localDateTime2.toDateTime();
        long long9 = dateTime8.getMillis();
        org.joda.time.Instant instant10 = dateTime8.toInstant();
        java.lang.String str11 = instant10.toString();
        java.lang.String str12 = instant10.toString();
        org.joda.time.Instant instant13 = instant10.toInstant();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644573202062L + "'", long9 == 1644573202062L);
        org.junit.Assert.assertNotNull(instant10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:53:22.062Z" + "'", str11, "2022-02-11T09:53:22.062Z");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:53:22.062Z" + "'", str12, "2022-02-11T09:53:22.062Z");
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test17182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17182");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfSecond();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property14.getAsShortText(locale15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = property14.getAsText(locale18);
        org.joda.time.LocalDateTime localDateTime21 = property14.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str23 = iSOChronology22.toString();
        org.joda.time.DurationField durationField24 = iSOChronology22.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        int[] intArray31 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = iSOChronology22.getZone();
        java.lang.String str33 = dateTimeZone32.toString();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime21, dateTimeZone32);
        boolean boolean36 = dateTimeZone32.isStandardOffset((long) 0);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(dateTimeZone32);
        java.lang.String str39 = dateTimeZone32.getShortName((long) 35);
        org.joda.time.Chronology chronology40 = iSOChronology0.withZone(dateTimeZone32);
        org.joda.time.DurationField durationField41 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(1644572659642L);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.era();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withYearOfEra((int) 'a');
        int[] intArray63 = iSOChronology52.get((org.joda.time.ReadablePartial) localDateTime59, (long) 100);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.withDurationAdded(readableDuration64, (int) '4');
        org.joda.time.LocalDateTime localDateTime68 = localDateTime59.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        int int70 = localDateTime59.indexOf(dateTimeFieldType69);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime59.plus(readableDuration71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime59.plusSeconds((int) 'a');
        boolean boolean75 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.plusWeeks(56);
        org.joda.time.LocalDateTime.Property property78 = localDateTime74.dayOfMonth();
        int int79 = localDateTime74.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime74.minusMinutes(2022);
        int int82 = localDateTime81.getYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray83 = localDateTime81.getFields();
        int[] intArray84 = localDateTime81.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime45, intArray84);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9" + "'", str20, "9");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldArray83);
        org.junit.Assert.assertNotNull(intArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[2022, 2, 10, 779073]");
    }

    @Test
    public void test17183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17183");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList23.parallelStream();
        boolean boolean25 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray33 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.lang.String[] strArray41 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = strSet34.containsAll((java.util.Collection<java.lang.String>) strList42);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet34);
        boolean boolean47 = localDateTime0.equals((java.lang.Object) strSet34);
        int int48 = strSet34.size();
        boolean boolean50 = strSet34.add("2022-02-11T09:49:42.700");
        java.util.Iterator<java.lang.String> strItor51 = strSet34.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strItor51);
    }

    @Test
    public void test17184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17184");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusYears(58);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str16 = locale15.getDisplayCountry();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Locale.setDefault(locale17);
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale15.getDisplayCountry(locale17);
        java.util.Locale.setDefault(category10, locale15);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category10, locale24);
        java.lang.String str26 = locale24.getDisplayName();
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleKeys();
        java.util.Locale locale28 = locale24.stripExtensions();
        int int29 = property9.getMaximumTextLength(locale28);
        java.lang.String str31 = locale28.getExtension('x');
        java.lang.String str32 = locale28.getLanguage();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals(locale15.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Japanese" + "'", str26, "Japanese");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ja" + "'", str32, "ja");
    }

    @Test
    public void test17185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17185");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        int int10 = localDateTime9.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localDateTime9.toString(dateTimeFormatter11);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = property18.getAsShortText(locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = property18.getAsText(locale22);
        org.joda.time.LocalDateTime localDateTime25 = property18.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = property18.roundHalfEvenCopy();
        java.lang.String str27 = localDateTime26.toString();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.weekOfWeekyear();
        int int31 = localDateTime26.getYear();
        boolean boolean32 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        java.lang.String str35 = iSOChronology33.toString();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology33.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField38 = iSOChronology37.halfdays();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology37.era();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfEra((int) 'a');
        int[] intArray48 = iSOChronology37.get((org.joda.time.ReadablePartial) localDateTime44, (long) 100);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime44.withDurationAdded(readableDuration49, (int) '4');
        int[] intArray52 = localDateTime51.getValues();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusYears(2);
        long long56 = iSOChronology33.set((org.joda.time.ReadablePartial) localDateTime54, 1L);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField60 = iSOChronology59.halfdays();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology59.era();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYearOfEra((int) 'a');
        int[] intArray70 = iSOChronology59.get((org.joda.time.ReadablePartial) localDateTime66, (long) 100);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime66.withDurationAdded(readableDuration71, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = localDateTime73.getFieldType((int) (byte) 0);
        boolean boolean76 = localDateTime58.isSupported(dateTimeFieldType75);
        int int77 = localDateTime9.indexOf(dateTimeFieldType75);
        int int78 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property79 = localDateTime6.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:53:22.196" + "'", str12, "2022-02-11T09:53:22.196");
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9" + "'", str20, "9");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English (Canada)" + "'", str23, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9" + "'", str24, "9");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11T10:00:00.000" + "'", str27, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2022, 2, 11, 35602196]");
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1707645202196L + "'", long56 == 1707645202196L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test17186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17186");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        long long27 = dateTimeZone23.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        int[] intArray30 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime28, (long) 52);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology0.dayOfYear();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.TimeZone.setDefault(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        int int40 = timeZone36.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        long long43 = dateTimeZone41.previousTransition((long) 17);
        long long46 = dateTimeZone41.convertLocalToUTC(1709364013878L, true);
        java.lang.String str47 = dateTimeZone41.getID();
        java.lang.String str48 = dateTimeZone41.getID();
        org.joda.time.Chronology chronology49 = iSOChronology0.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 52]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 17L + "'", long43 == 17L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1709364013878L + "'", long46 == 1709364013878L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test17187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17187");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.withYearOfCentury((int) (short) 10);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withPeriodAdded(readablePeriod34, 9);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMonthOfYear((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withDurationAdded(readableDuration41, 18);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYearOfEra(35066445);
        int int46 = localDateTime45.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusHours(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField50 = localDateTime48.getField(300);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 300");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35602261 + "'", int46 == 35602261);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test17188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17188");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = iSOChronology0.withZone(dateTimeZone12);
        long long17 = iSOChronology0.add(1644572685530L, 1707644722958L, 22);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 39212756590606L + "'", long17 == 39212756590606L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test17189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17189");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfDay();
        org.joda.time.DurationField durationField7 = iSOChronology0.years();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = iSOChronology0.getDateTimeMillis(35416033, 35203010, 71111255, 35429010, 21, 303, 160);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35429010 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test17190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17190");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField5 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeZone dateTimeZone7 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField8 = iSOChronology0.centuries();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17191");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds(23);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.DurationField durationField31 = iSOChronology29.weeks();
        boolean boolean32 = property28.equals((java.lang.Object) durationField31);
        org.joda.time.LocalDateTime localDateTime33 = property28.withMinimumValue();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime33.getFieldTypes();
        int int36 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime37 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusSeconds(35516043);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test17192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17192");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de" + "'", str4, "de");
    }

    @Test
    public void test17193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17193");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusHours(6);
        int int18 = localDateTime2.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        int int22 = localDateTime21.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = property28.getAsShortText(locale29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = property28.getAsText(locale32);
        org.joda.time.LocalDateTime localDateTime35 = property28.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = property28.roundHalfEvenCopy();
        boolean boolean37 = localDateTime21.equals((java.lang.Object) localDateTime36);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str39 = iSOChronology38.toString();
        org.joda.time.DurationField durationField40 = iSOChronology38.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        int[] intArray47 = iSOChronology38.get((org.joda.time.ReadablePartial) localDateTime43, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = iSOChronology38.getZone();
        boolean boolean50 = dateTimeZone48.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime51 = localDateTime36.toDateTime(dateTimeZone48);
        int int52 = localDateTime36.getCenturyOfEra();
        org.joda.time.DateTime dateTime53 = localDateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        org.joda.time.DateTime dateTime55 = localDateTime2.toDateTime(dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime2.minus(readablePeriod56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime2.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField60 = iSOChronology59.halfdays();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology59.era();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withYearOfEra((int) 'a');
        int[] intArray70 = iSOChronology59.get((org.joda.time.ReadablePartial) localDateTime66, (long) 100);
        org.joda.time.LocalDateTime.Property property71 = localDateTime66.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime77 = property76.getLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', 41);
        org.joda.time.chrono.ISOChronology iSOChronology81 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology81.dayOfYear();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology81);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property86 = localDateTime83.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType87 = null;
        boolean boolean88 = localDateTime83.isSupported(durationFieldType87);
        org.joda.time.DateTime dateTime89 = localDateTime83.toDateTime();
        long long90 = dateTime89.getMillis();
        int int91 = dateTimeZone80.getOffset((org.joda.time.ReadableInstant) dateTime89);
        int int92 = property76.getDifference((org.joda.time.ReadableInstant) dateTime89);
        int int93 = property58.compareTo((org.joda.time.ReadableInstant) dateTime89);
        java.lang.String str94 = dateTime89.toString();
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime89.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35602339 + "'", int18 == 35602339);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "9" + "'", str30, "9");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English (Canada)" + "'", str33, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9" + "'", str34, "9");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(iSOChronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime89);
// flaky:         org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1644573202339L + "'", long90 == 1644573202339L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 117660000 + "'", int91 == 117660000);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-21) + "'", int92 == (-21));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2022-02-11T09:53:22.339Z" + "'", str94, "2022-02-11T09:53:22.339Z");
        org.junit.Assert.assertNotNull(dateTimeZone95);
    }

    @Test
    public void test17194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17194");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Chinese", (double) (short) 1);
        double double3 = languageRange2.getWeight();
        double double4 = languageRange2.getWeight();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        java.lang.String str8 = languageRange2.getRange();
        java.lang.String str9 = languageRange2.getRange();
        double double10 = languageRange2.getWeight();
        double double11 = languageRange2.getWeight();
        double double12 = languageRange2.getWeight();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chinese" + "'", str7, "chinese");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinese" + "'", str8, "chinese");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinese" + "'", str9, "chinese");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
    }

    @Test
    public void test17195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17195");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        long long37 = dateTimeZone33.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.Chronology chronology39 = iSOChronology0.withZone(dateTimeZone33);
        java.util.TimeZone timeZone40 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        long long45 = dateTimeZone33.convertLocalToUTC(1707644743635L, true, 345L);
        int int47 = dateTimeZone33.getStandardOffset(0L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1707644743635L + "'", long45 == 1707644743635L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test17196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17196");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime33 = property5.roundCeilingCopy();
        int int34 = property5.get();
        java.lang.String str35 = property5.getAsShortText();
        org.joda.time.DurationField durationField36 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField37 = property5.getField();
        org.joda.time.Interval interval38 = property5.toInterval();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "9" + "'", str35, "9");
        org.junit.Assert.assertNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(interval38);
    }

    @Test
    public void test17197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17197");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        int int19 = localDateTime17.getYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusDays((int) 'u');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withYear(59);
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test17198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17198");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.minusSeconds(2);
        int int34 = localDateTime28.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property35 = localDateTime28.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test17199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17199");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.monthOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.secondOfMinute();
        org.joda.time.Chronology chronology9 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = iSOChronology0.getDateTimeMillis(858, 71187720, 35512711, (-86126), 68400000, 2022, 35543370);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -86126 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17200");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) 'u');
        java.lang.String str9 = localDateTime8.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusYears(626);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(843);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2031-11-12T09:53:22.483" + "'", str9, "2031-11-12T09:53:22.483");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17201");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getName(locale1, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.lang.String str6 = locale1.getCountry();
        java.lang.String str7 = locale1.getISO3Country();
        java.lang.String str8 = locale1.getDisplayCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test17202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17202");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = property7.getAsShortText(locale8);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = property7.getAsText(locale11);
        org.joda.time.LocalDateTime localDateTime14 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = property7.roundHalfEvenCopy();
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusWeeks((int) 'x');
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        long long37 = dateTimeZone33.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale38 = java.util.Locale.US;
        boolean boolean39 = dateTimeZone33.equals((java.lang.Object) locale38);
        long long43 = dateTimeZone33.convertLocalToUTC((long) ' ', true, (long) '4');
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 'u', dateTimeZone33);
        org.joda.time.DateTime dateTime45 = localDateTime15.toDateTime(dateTimeZone33);
        int int46 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str47 = dateTime45.toString();
        org.joda.time.Instant instant48 = dateTime45.toInstant();
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str56 = iSOChronology55.toString();
        org.joda.time.DurationField durationField57 = iSOChronology55.weeks();
        boolean boolean58 = property54.equals((java.lang.Object) durationField57);
        org.joda.time.DurationField durationField59 = property54.getRangeDurationField();
        java.lang.String str60 = property54.getAsString();
        java.lang.String str61 = property54.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property54.getFieldType();
        int int63 = dateTime45.get(dateTimeFieldType62);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getTimeZone("2022-02-01T09:48:15.922");
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone70 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean71 = timeZone68.hasSameRules(timeZone70);
        java.util.TimeZone.setDefault(timeZone70);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        int int74 = timeZone70.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        java.time.ZoneId zoneId76 = timeZone70.toZoneId();
        boolean boolean77 = timeZone65.hasSameRules(timeZone70);
        boolean boolean78 = dateTime45.equals((java.lang.Object) timeZone70);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9" + "'", str9, "9");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T10:00:00.000" + "'", str16, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T10:00:00.000Z" + "'", str47, "2022-02-11T10:00:00.000Z");
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(durationField59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "9" + "'", str60, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "9" + "'", str61, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(zoneId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test17203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17203");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMonthOfYear(10);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        java.lang.String str19 = iSOChronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField22 = iSOChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology21.era();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYearOfEra((int) 'a');
        int[] intArray32 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withDurationAdded(readableDuration33, (int) '4');
        int[] intArray36 = localDateTime35.getValues();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusYears(2);
        long long40 = iSOChronology17.set((org.joda.time.ReadablePartial) localDateTime38, 1L);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minusMonths((int) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField44 = iSOChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.era();
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYearOfEra((int) 'a');
        int[] intArray54 = iSOChronology43.get((org.joda.time.ReadablePartial) localDateTime50, (long) 100);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.withDurationAdded(readableDuration55, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = localDateTime57.getFieldType((int) (byte) 0);
        boolean boolean60 = localDateTime42.isSupported(dateTimeFieldType59);
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        java.lang.String str68 = property66.getAsShortText(locale67);
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale69.getDisplayName(locale70);
        java.lang.String str72 = property66.getAsText(locale70);
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        int int74 = property66.getMaximumShortTextLength(locale73);
        org.joda.time.chrono.ISOChronology iSOChronology75 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology75.dayOfYear();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property80 = localDateTime77.hourOfDay();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.minusMinutes((int) '4');
        int int83 = property66.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime85 = property66.addToCopy((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = property66.getFieldType();
        int int87 = localDateTime42.get(dateTimeFieldType86);
        int int88 = localDateTime14.indexOf(dateTimeFieldType86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime90 = localDateTime14.withMillisOfSecond(35237825);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35237825 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[2022, 2, 11, 35602539]");
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1707645202539L + "'", long40 == 1707645202539L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "9" + "'", str68, "9");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "English (Canada)" + "'", str71, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "9" + "'", str72, "9");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(iSOChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test17204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17204");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str15 = iSOChronology14.toString();
        org.joda.time.DurationField durationField16 = iSOChronology14.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        int[] intArray23 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray23);
        org.joda.time.DateTimeZone dateTimeZone25 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology0.monthOfYear();
        org.joda.time.Chronology chronology29 = iSOChronology0.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test17205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17205");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        int int13 = dateTimeZone10.getStandardOffset(1707644640457L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone10);
        int int16 = dateTimeZone10.getStandardOffset((long) (short) 100);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        boolean boolean26 = property22.equals((java.lang.Object) durationField25);
        org.joda.time.LocalDateTime localDateTime27 = property22.withMinimumValue();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = property28.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime32 = property28.addToCopy(59);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMillisOfSecond(0);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str36 = iSOChronology35.toString();
        org.joda.time.DurationField durationField37 = iSOChronology35.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        int[] intArray44 = iSOChronology35.get((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = iSOChronology35.getZone();
        java.lang.String str46 = dateTimeZone45.toString();
        java.lang.String str47 = dateTimeZone45.toString();
        java.lang.String str49 = dateTimeZone45.getNameKey(0L);
        org.joda.time.DateTime dateTime50 = localDateTime32.toDateTime(dateTimeZone45);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField52 = iSOChronology51.halfdays();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.TimeZone.setDefault(timeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.Chronology chronology60 = iSOChronology51.withZone(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withYearOfCentury(12);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minus(readableDuration64);
        boolean boolean66 = dateTimeZone45.isLocalDateTimeGap(localDateTime61);
        org.joda.time.DateTime dateTime67 = localDateTime61.toDateTime();
        int int68 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test17206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17206");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((-1));
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plus(readablePeriod10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays(8);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(762);
        org.joda.time.LocalDateTime localDateTime17 = property14.roundFloorCopy();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str25 = iSOChronology24.toString();
        org.joda.time.DurationField durationField26 = iSOChronology24.weeks();
        boolean boolean27 = property23.equals((java.lang.Object) durationField26);
        org.joda.time.LocalDateTime localDateTime28 = property23.withMinimumValue();
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMinimumValue();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekOfWeekyear();
        java.lang.String str32 = property31.toString();
        java.util.Locale locale34 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = locale34.getScript();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale34.getDisplayLanguage(locale37);
        java.lang.String str40 = locale37.getDisplayScript();
        int int41 = property31.getMaximumShortTextLength(locale37);
        int int42 = property14.getMaximumTextLength(locale37);
        int int43 = property14.getMinimumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[weekOfWeekyear]" + "'", str32, "Property[weekOfWeekyear]");
        org.junit.Assert.assertEquals(locale34.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "en" + "'", str38, "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "isochronology[etc/utc]" + "'", str39, "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test17207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17207");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfCentury(12);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minus(readableDuration13);
        java.lang.String str15 = localDateTime10.toString();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withYearOfEra(35151532);
        int int18 = localDateTime10.getYearOfCentury();
        org.joda.time.Chronology chronology19 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.plusMonths(35127201);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekyear(0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:53:22.632" + "'", str15, "2022-02-11T09:53:22.632");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test17208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17208");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean7 = timeZone3.observesDaylightTime();
        timeZone3.setRawOffset(35151532);
        int int11 = timeZone3.getOffset(1707644647380L);
        int int12 = timeZone3.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35151532 + "'", int11 == 35151532);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35151532 + "'", int12 == 35151532);
    }

    @Test
    public void test17209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17209");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        int int18 = localDateTime7.indexOf(dateTimeFieldType17);
        int int19 = localDateTime7.getMillisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField21 = iSOChronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology20.era();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYearOfEra((int) 'a');
        int[] intArray31 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundFloorCopy();
        boolean boolean36 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime7.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35602658 + "'", int19 == 35602658);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test17210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17210");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("GMT");
        double double2 = languageRange1.getWeight();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths((int) 'u');
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsShortText(locale21);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = property20.getAsText(locale24);
        org.joda.time.LocalDateTime localDateTime27 = property20.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str29 = iSOChronology28.toString();
        org.joda.time.DurationField durationField30 = iSOChronology28.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        int[] intArray37 = iSOChronology28.get((org.joda.time.ReadablePartial) localDateTime33, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = iSOChronology28.getZone();
        java.lang.String str39 = dateTimeZone38.toString();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27, dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.withYearOfCentury((int) (short) 10);
        int int48 = localDateTime47.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withPeriodAdded(readablePeriod49, 9);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minus(readablePeriod52);
        boolean boolean54 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = property60.getAsShortText(locale61);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = property60.getAsText(locale64);
        org.joda.time.LocalDateTime localDateTime67 = property60.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = property60.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withMillisOfSecond(14);
        int int73 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.DateTimeField[] dateTimeFieldArray74 = localDateTime13.getFields();
        boolean boolean75 = languageRange1.equals((java.lang.Object) localDateTime13);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "9" + "'", str22, "9");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (Canada)" + "'", str25, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "9" + "'", str26, "9");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9" + "'", str62, "9");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "English (Canada)" + "'", str65, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "9" + "'", str66, "9");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test17211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17211");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        int int20 = localDateTime19.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withEra(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withDayOfWeek(223);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 223 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test17212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17212");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("35130773");
        timeZone0.setID("983");
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.US;
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale12 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale.setDefault(locale14);
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale12.getDisplayCountry(locale14);
        java.util.Locale.setDefault(category7, locale12);
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(category7, locale21);
        java.lang.String str23 = locale21.getDisplayName();
        java.util.Set<java.lang.String> strSet24 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale25 = locale21.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = timeZone0.getDisplayName(true, 35449468, locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 35449468");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+09:45");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals(locale12.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Japanese" + "'", str23, "Japanese");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja");
    }

    @Test
    public void test17213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17213");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        org.joda.time.Interval interval8 = property5.toInterval();
        org.joda.time.DurationField durationField9 = property5.getLeapDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime12.toDateTime(dateTimeZone23);
        org.joda.time.Instant instant26 = dateTime25.toInstant();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str31 = iSOChronology30.toString();
        org.joda.time.DurationField durationField32 = iSOChronology30.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        int[] intArray39 = iSOChronology30.get((org.joda.time.ReadablePartial) localDateTime35, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = iSOChronology30.getZone();
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime42 = localDateTime29.toDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime42.getZone();
        boolean boolean44 = instant26.isAfter((org.joda.time.ReadableInstant) dateTime42);
        int int45 = property5.compareTo((org.joda.time.ReadableInstant) instant26);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField47 = iSOChronology46.halfdays();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.TimeZone.setDefault(timeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.Chronology chronology55 = iSOChronology46.withZone(dateTimeZone54);
        long long58 = dateTimeZone54.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone54);
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology60);
        int int63 = localDateTime62.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology64.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.hourOfDay();
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.lang.String str71 = property69.getAsShortText(locale70);
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.lang.String str74 = locale72.getDisplayName(locale73);
        java.lang.String str75 = property69.getAsText(locale73);
        org.joda.time.LocalDateTime localDateTime76 = property69.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = property69.roundHalfEvenCopy();
        boolean boolean78 = localDateTime62.equals((java.lang.Object) localDateTime77);
        org.joda.time.chrono.ISOChronology iSOChronology79 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str80 = iSOChronology79.toString();
        org.joda.time.DurationField durationField81 = iSOChronology79.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology82 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology82.dayOfYear();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology82);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusDays((int) (byte) 0);
        int[] intArray88 = iSOChronology79.get((org.joda.time.ReadablePartial) localDateTime84, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone89 = iSOChronology79.getZone();
        boolean boolean91 = dateTimeZone89.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime92 = localDateTime77.toDateTime(dateTimeZone89);
        org.joda.time.Chronology chronology93 = dateTime92.getChronology();
        int int94 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime92);
        boolean boolean95 = instant26.isEqual((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Instant instant96 = instant26.toInstant();
        org.joda.time.ReadableInstant readableInstant97 = null;
        boolean boolean98 = instant26.isBefore(readableInstant97);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2022L + "'", long58 == 2022L);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "9" + "'", str71, "9");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "English (Canada)" + "'", str74, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "9" + "'", str75, "9");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(iSOChronology79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ISOChronology[UTC]" + "'", str80, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(iSOChronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test17214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17214");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = property5.withMinimumValue();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str13 = iSOChronology12.toString();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology12.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology12.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology12.weekyear();
        boolean boolean20 = property5.equals((java.lang.Object) iSOChronology12);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology12.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test17215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17215");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str13 = iSOChronology12.toString();
        org.joda.time.DurationField durationField14 = iSOChronology12.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        int[] intArray21 = iSOChronology12.get((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology12.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime11.minusHours(6);
        boolean boolean27 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDurationAdded(readableDuration28, (int) '4');
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField32 = iSOChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.era();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYearOfEra((int) 'a');
        int[] intArray42 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime38, (long) 100);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.withDurationAdded(readableDuration43, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDateTime45.getFieldType((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime30.withField(dateTimeFieldType47, 5);
        org.joda.time.LocalDateTime.Property property50 = localDateTime30.monthOfYear();
        java.util.Locale locale54 = new java.util.Locale("2022-02-11T09:44:00.457", "chinese", "0097-02-18T09:44:20.014");
        int int55 = property50.getMaximumTextLength(locale54);
        java.lang.String str56 = property50.getAsString();
        org.joda.time.LocalDateTime localDateTime57 = property50.roundHalfFloorCopy();
        int int58 = property50.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField59 = property50.getField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals(locale54.toString(), "2022-02-11t09:44:00.457_CHINESE_0097-02-18T09:44:20.014");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2" + "'", str56, "2");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test17216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17216");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DurationField durationField12 = iSOChronology0.months();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks(33035117);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minus(readableDuration16);
        int int18 = localDateTime13.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withMinuteOfHour(1);
        int int21 = localDateTime20.getHourOfDay();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.yearOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.halfdays();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.era();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = property34.getAsShortText(locale35);
        java.lang.String str37 = property28.getAsShortText(locale35);
        java.lang.String str38 = locale35.getVariant();
        java.lang.String str39 = locale35.getISO3Country();
        int int40 = property22.getMaximumShortTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime42 = property22.addToCopy(35066445L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYearOfCentury(571);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 571 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test17217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17217");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra((int) 'a');
        int[] intArray12 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withDurationAdded(readableDuration13, (int) '4');
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime15.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        int int20 = localDateTime19.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.hourOfDay();
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = property26.getAsShortText(locale27);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = property26.getAsText(locale30);
        org.joda.time.LocalDateTime localDateTime33 = property26.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = property26.roundHalfEvenCopy();
        boolean boolean35 = localDateTime19.equals((java.lang.Object) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime19.minusMinutes((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime19);
        int[] intArray40 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime38, (long) 71117797);
        org.joda.time.DurationField durationField41 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField43 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9" + "'", str28, "9");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English (Canada)" + "'", str31, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9" + "'", str32, "9");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 71117797]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test17218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17218");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str8 = iSOChronology7.toString();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = iSOChronology7.add(readablePeriod9, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology7.year();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField15 = iSOChronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology14.era();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra((int) 'a');
        int[] intArray25 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = localDateTime21.getFields();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minusHours(1);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField30 = iSOChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.era();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfEra((int) 'a');
        int[] intArray40 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.withDurationAdded(readableDuration41, (int) '4');
        int[] intArray44 = localDateTime43.getValues();
        iSOChronology7.validate((org.joda.time.ReadablePartial) localDateTime28, intArray44);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology7.year();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology7.secondOfDay();
        org.joda.time.DurationField durationField49 = iSOChronology7.years();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology7.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(211, 35169682, 35380187, (int) (short) 1, 724, 35427919, 35374325, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 724 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[2022, 2, 11, 35602890]");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test17219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17219");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        int int5 = localDateTime2.getWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMillis(51);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime16.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime16.withSecondOfMinute((int) (short) 10);
        boolean boolean29 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plus(readablePeriod30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.year();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusSeconds(99);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.minusYears(0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime33.weekyear();
        org.joda.time.LocalDateTime localDateTime40 = property38.addToCopy(35151532);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 6);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYearOfCentury(51);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plus(readablePeriod45);
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str48 = iSOChronology47.toString();
        org.joda.time.DurationField durationField49 = iSOChronology47.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        int[] intArray56 = iSOChronology47.get((org.joda.time.ReadablePartial) localDateTime52, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = iSOChronology47.getZone();
        long long61 = dateTimeZone57.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withSecondOfMinute(2);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(2922789);
        org.joda.time.DateTime dateTime67 = localDateTime64.toDateTime(dateTimeZone66);
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str69 = iSOChronology68.toString();
        org.joda.time.DurationField durationField70 = iSOChronology68.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology71.dayOfYear();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusDays((int) (byte) 0);
        int[] intArray77 = iSOChronology68.get((org.joda.time.ReadablePartial) localDateTime73, (long) 100);
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology68.dayOfWeek();
        org.joda.time.DurationField durationField79 = iSOChronology68.hours();
        org.joda.time.DurationField durationField80 = iSOChronology68.minutes();
        org.joda.time.DurationField durationField81 = iSOChronology68.minutes();
        long long85 = iSOChronology68.add(1644572669516L, 0L, 2922789);
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology68.clockhourOfHalfday();
        boolean boolean87 = dateTime67.equals((java.lang.Object) iSOChronology68);
        org.joda.time.DateTime dateTime88 = localDateTime44.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime44.plusDays(414);
        boolean boolean91 = localDateTime40.isEqual((org.joda.time.ReadablePartial) localDateTime90);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime90.minusWeeks(0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(iSOChronology68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[UTC]" + "'", str69, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(iSOChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1644572669516L + "'", long85 == 1644572669516L);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(localDateTime93);
    }

    @Test
    public void test17220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17220");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.lang.String[] strArray15 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Iterator<java.lang.String> strItor18 = strSet16.iterator();
        java.lang.Object[] objArray19 = strSet16.toArray();
        java.lang.Object[] objArray20 = strSet16.toArray();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet16.parallelStream();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection23);
        java.util.Collection<java.util.Locale> localeCollection25 = null;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection25);
        java.util.Collection<java.util.Locale> localeCollection27 = null;
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection27, filteringMode28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap30);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode28.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
    }

    @Test
    public void test17221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17221");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.lang.String str14 = property5.getAsShortText(locale12);
        org.joda.time.DurationField durationField15 = property5.getDurationField();
        org.joda.time.LocalDateTime localDateTime17 = property5.setCopy("0");
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDurationAdded(readableDuration18, 58);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        int int22 = localDateTime20.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withWeekyear(35602339);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test17222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17222");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.hours();
        org.joda.time.DurationField durationField7 = iSOChronology0.centuries();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str9 = iSOChronology8.toString();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = iSOChronology8.add(readablePeriod10, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField14 = iSOChronology8.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str23 = iSOChronology22.toString();
        org.joda.time.DurationField durationField24 = iSOChronology22.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        int[] intArray31 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        iSOChronology8.validate((org.joda.time.ReadablePartial) localDateTime21, intArray31);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology8.getZone();
        int int35 = dateTimeZone33.getOffsetFromLocal((long) 1);
        org.joda.time.Chronology chronology36 = iSOChronology0.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField37 = iSOChronology0.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long43 = iSOChronology0.getDateTimeMillis(1707644928144L, 31714644, 71454891, 227, 71104975);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31714644 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test17223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17223");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.DurationField durationField3 = iSOChronology1.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        int[] intArray10 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime6, (long) 100);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology1.dayOfWeek();
        org.joda.time.DurationField durationField12 = iSOChronology1.halfdays();
        org.joda.time.DurationField durationField13 = iSOChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology1.hourOfDay();
        org.joda.time.Chronology chronology15 = iSOChronology1.withUTC();
        org.joda.time.DurationField durationField16 = iSOChronology1.minutes();
        java.lang.String str17 = iSOChronology1.toString();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(35054090L, (org.joda.time.Chronology) iSOChronology1);
        java.lang.Class<?> wildcardClass19 = localDateTime18.getClass();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test17224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17224");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:54:44.845");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:54:44.845' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17225");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.US;
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str6 = locale5.getDisplayCountry();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.util.Locale.setDefault(locale7);
        java.util.Set<java.lang.String> strSet11 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale5.getDisplayCountry(locale7);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.lang.String str15 = locale14.getScript();
        java.util.Locale.setDefault(category0, locale14);
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str22 = nameProvider17.getName(locale18, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale23 = locale18.stripExtensions();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale26.getScript();
        java.lang.String str28 = locale26.getDisplayName();
        java.lang.String str29 = locale25.getDisplayLanguage(locale26);
        java.lang.String str30 = locale25.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale25);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.setLanguage("de");
        java.util.Locale.Builder builder35 = builder32.clearExtensions();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.lang.String str44 = property42.getAsShortText(locale43);
        boolean boolean45 = property42.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField47 = iSOChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology46.era();
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withYearOfEra((int) 'a');
        int[] intArray57 = iSOChronology46.get((org.joda.time.ReadablePartial) localDateTime53, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray58 = localDateTime53.getFields();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.minusHours(1);
        int int61 = localDateTime53.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime53.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime53.withTime(1, 23, 51, 23);
        int int69 = property42.compareTo((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.DurationField durationField70 = property42.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider71 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str74 = locale73.getDisplayScript();
        java.lang.String str77 = nameProvider71.getShortName(locale73, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str78 = property42.getAsShortText(locale73);
        java.lang.String str79 = locale36.getDisplayScript(locale73);
        java.lang.String str80 = locale73.getDisplayLanguage();
        java.util.Locale.Builder builder81 = builder35.setLocale(locale73);
        java.util.Locale.Builder builder83 = builder81.setLanguageTag("Feb");
        java.util.Locale locale84 = builder83.build();
        java.util.Locale.Builder builder85 = builder83.clear();
        java.util.Locale locale86 = java.util.Locale.CANADA;
        java.lang.String str88 = locale86.getExtension('a');
        java.util.Locale.Builder builder89 = builder83.setLocale(locale86);
        java.lang.String str90 = locale86.getDisplayVariant();
        java.lang.String str91 = locale25.getDisplayCountry(locale86);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertEquals(locale5.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English (Canada)" + "'", str9, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "9" + "'", str44, "9");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNull(durationField70);
        org.junit.Assert.assertNotNull(nameProvider71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(str77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "9" + "'", str78, "9");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "feb");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_CA");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "United Kingdom" + "'", str91, "United Kingdom");
    }

    @Test
    public void test17226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17226");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de" + "'", str2, "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "de" + "'", str3, "de");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test17227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17227");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getName(locale1, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale7 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale1.getDisplayVariant(locale7);
        java.lang.String str11 = locale1.getDisplayScript();
        java.lang.String str12 = locale1.getDisplayScript();
        java.util.Set<java.lang.Character> charSet13 = locale1.getExtensionKeys();
        java.lang.String str14 = locale1.getDisplayScript();
        java.lang.String str15 = locale1.getISO3Language();
        java.util.Locale locale16 = locale1.stripExtensions();
        java.lang.String str17 = locale16.getISO3Language();
        java.lang.Object obj18 = locale16.clone();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals(locale7.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "");
    }

    @Test
    public void test17228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17228");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17229");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime32 = localDateTime17.toDateTime(dateTimeZone29);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusWeeks((-1));
        boolean boolean43 = dateTimeZone29.isLocalDateTimeGap(localDateTime39);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField45 = iSOChronology44.halfdays();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology44.era();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withYearOfEra((int) 'a');
        int[] intArray55 = iSOChronology44.get((org.joda.time.ReadablePartial) localDateTime51, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray56 = localDateTime51.getFields();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.minusHours(1);
        int int59 = localDateTime51.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime51.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime51.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property64 = localDateTime51.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime51.withPeriodAdded(readablePeriod65, 8);
        int int68 = localDateTime51.getWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime51.withDayOfYear(58);
        boolean boolean71 = dateTimeZone29.isLocalDateTimeGap(localDateTime51);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 23 + "'", int3 == 23);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test17230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17230");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = iSOChronology0.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test17231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17231");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = iSOChronology0.add(readablePeriod4, 0L, (-23));
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17232");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField22 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField24 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test17233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17233");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        java.lang.String str13 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.millisOfSecond();
        org.joda.time.Chronology chronology15 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.era();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        int int22 = localDateTime20.getYear();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        java.lang.String str26 = iSOChronology24.toString();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.halfdayOfDay();
        org.joda.time.DurationField durationField28 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology24.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(1707644641355L, (org.joda.time.Chronology) iSOChronology24);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology24.era();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMonths((int) 'u');
        int int41 = localDateTime38.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime38.withTime(3, 56, 3, (int) '#');
        int[] intArray48 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime38, 1707644647380L);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime20, intArray48);
        int int50 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property51 = localDateTime20.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[2024, 2, 11, 35047380]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test17234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17234");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone5);
        int int8 = dateTimeZone5.getOffset(1707644734275L);
        long long11 = dateTimeZone5.convertLocalToUTC(92L, false);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 92L + "'", long11 == 92L);
    }

    @Test
    public void test17235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17235");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        long long12 = dateTimeZone8.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays(29);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField19 = iSOChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.era();
        org.joda.time.DurationField durationField21 = iSOChronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology18.centuryOfEra();
        java.lang.Object obj23 = null;
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str28 = iSOChronology27.toString();
        org.joda.time.DurationField durationField29 = iSOChronology27.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        int[] intArray36 = iSOChronology27.get((org.joda.time.ReadablePartial) localDateTime32, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = iSOChronology27.getZone();
        java.lang.String str38 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime39 = localDateTime26.toDateTime(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(obj23, dateTimeZone37);
        org.joda.time.Chronology chronology41 = iSOChronology18.withZone(dateTimeZone37);
        long long43 = dateTimeZone37.nextTransition(59L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 29, dateTimeZone37);
        boolean boolean45 = property16.equals((java.lang.Object) localDateTime44);
        java.lang.String str46 = property16.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2022L + "'", long12 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 59L + "'", long43 == 59L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[monthOfYear]" + "'", str46, "Property[monthOfYear]");
    }

    @Test
    public void test17236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17236");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        long long12 = dateTimeZone8.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays(29);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minus(readablePeriod17);
        int int19 = localDateTime13.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField21 = localDateTime13.getField(442);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 442");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2022L + "'", long12 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
    }

    @Test
    public void test17237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17237");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.TimeZone.setDefault(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.Chronology chronology10 = iSOChronology1.withZone(dateTimeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone9.toTimeZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone9);
        boolean boolean14 = dateTimeZone9.isStandardOffset(11512008555582L);
        int int16 = dateTimeZone9.getOffsetFromLocal(1644572677078L);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.era();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfEra((int) 'a');
        int[] intArray28 = iSOChronology17.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime24.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfWeek();
        int int32 = property31.getMinimumValueOverall();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        int int36 = localDateTime35.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = property39.roundFloorCopy();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType47 = null;
        boolean boolean48 = localDateTime43.isSupported(durationFieldType47);
        org.joda.time.DateTime dateTime49 = localDateTime43.toDateTime();
        long long50 = dateTime49.getMillis();
        long long51 = property39.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime49);
        long long52 = property31.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime49);
        int int53 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone9);
        long long58 = dateTimeZone9.previousTransition(1644572985319L);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644573203282L + "'", long50 == 1644573203282L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-24L) + "'", long51 == (-24L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-8077L) + "'", long52 == (-8077L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644572985319L + "'", long58 == 1644572985319L);
    }

    @Test
    public void test17238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17238");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property5.getFieldType();
        java.lang.String str11 = property5.getAsString();
        boolean boolean12 = property5.isLeap();
        java.lang.String str13 = property5.getAsText();
        org.joda.time.LocalDateTime localDateTime15 = property5.addToCopy(1707644862848L);
        org.joda.time.LocalDateTime localDateTime16 = property5.withMaximumValue();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.secondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test17239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17239");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.millisOfDay();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str35 = iSOChronology34.toString();
        org.joda.time.DurationField durationField36 = iSOChronology34.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        int[] intArray43 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime39, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology34.getZone();
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDateTime33.toDateTime(dateTimeZone44);
        boolean boolean47 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = iSOChronology1.withZone(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone14);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = property56.getAsShortText(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = property56.getAsText(locale60);
        org.joda.time.LocalDateTime localDateTime63 = property56.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = property56.roundHalfEvenCopy();
        java.lang.String str65 = localDateTime64.toString();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime64.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime64.withWeekOfWeekyear(50);
        boolean boolean73 = dateTimeZone14.isLocalDateTimeGap(localDateTime72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.withYearOfCentury(56);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9" + "'", str58, "9");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English (Canada)" + "'", str61, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9" + "'", str62, "9");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-11T10:00:00.000" + "'", str65, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test17240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17240");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(2922789);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology2);
        int int5 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        int int10 = localDateTime9.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsShortText(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = property17.getAsText(locale21);
        org.joda.time.LocalDateTime localDateTime24 = property17.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = property17.roundHalfEvenCopy();
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusHours(6);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withYear(35054090);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str37 = iSOChronology36.toString();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.Chronology chronology42 = iSOChronology36.withUTC();
        boolean boolean43 = localDateTime35.equals((java.lang.Object) chronology42);
        boolean boolean44 = property11.equals((java.lang.Object) localDateTime35);
        org.joda.time.LocalDateTime.Property property45 = localDateTime35.hourOfDay();
        boolean boolean46 = dateTimeZone1.equals((java.lang.Object) localDateTime35);
        java.lang.String str47 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9" + "'", str23, "9");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T10:00:00.000" + "'", str26, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:48:42.789" + "'", str47, "+00:48:42.789");
    }

    @Test
    public void test17241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17241");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17242");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("DEU");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test17243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17243");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("466", (double) 35532050);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=3.553205E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17244");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.seconds();
        org.joda.time.DateTimeZone dateTimeZone12 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology0.add(readablePeriod14, (long) (short) 1, (-19034));
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long25 = iSOChronology0.getDateTimeMillis(1642639573513L, 1970, 330351, 117, 33417158);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test17245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17245");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644572688120L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(35424468);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMinutes(35316464);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test17246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17246");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYear(20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime19.getFieldTypes();
        int int21 = localDateTime19.getCenturyOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T10:00:00.000" + "'", str14, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17247");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDateTime4.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.addWrapFieldToCopy(52);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        int int16 = localDateTime15.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = property22.getAsShortText(locale23);
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = property22.getAsText(locale26);
        org.joda.time.LocalDateTime localDateTime29 = property22.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = property22.roundHalfEvenCopy();
        boolean boolean31 = localDateTime15.equals((java.lang.Object) localDateTime30);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str33 = iSOChronology32.toString();
        org.joda.time.DurationField durationField34 = iSOChronology32.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        int[] intArray41 = iSOChronology32.get((org.joda.time.ReadablePartial) localDateTime37, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology32.getZone();
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime45 = localDateTime30.toDateTime(dateTimeZone42);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTime dateTime47 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeField[] dateTimeFieldArray48 = localDateTime12.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField50 = localDateTime12.getField(36000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 36000000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9" + "'", str24, "9");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9" + "'", str28, "9");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldArray48);
    }

    @Test
    public void test17248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17248");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test17249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17249");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusDays(1970);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.secondOfMinute();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.minusWeeks(9);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test17250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17250");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("0000-02-11T08:44:26.096");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("2022-01-01T00:00:00.000");
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        java.lang.String str11 = iSOChronology9.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology9.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = iSOChronology9.withZone(dateTimeZone14);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.lang.String str21 = dateTimeZone14.getName((long) (byte) 10, locale18);
        java.lang.String str22 = locale18.getDisplayLanguage();
        org.joda.time.tz.NameProvider nameProvider23 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str28 = nameProvider23.getName(locale24, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale30 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str31 = locale30.getISO3Country();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale24.getDisplayVariant(locale30);
        java.lang.String str34 = locale24.getDisplayScript();
        java.util.Locale locale36 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str37 = locale24.getDisplayLanguage(locale36);
        java.lang.String str38 = locale18.getDisplayName(locale24);
        java.lang.String str39 = locale18.getDisplayVariant();
        boolean boolean40 = strSet8.equals((java.lang.Object) str39);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(nameProvider23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals(locale30.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals(locale36.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "German" + "'", str38, "German");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test17251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17251");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        int int32 = localDateTime31.getMonthOfYear();
        int int33 = localDateTime31.getDayOfWeek();
        org.joda.time.Chronology chronology34 = localDateTime31.getChronology();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test17252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17252");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getCountry();
        java.lang.String str4 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale5 = locale0.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.util.Locale.setDefault(locale6);
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale5.getDisplayName(locale6);
        java.lang.String str12 = locale6.getISO3Country();
        boolean boolean13 = locale6.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale17 = new java.util.Locale("", "Etc/UTC");
        java.lang.String str18 = locale14.getDisplayLanguage(locale17);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str21 = locale20.getDisplayVariant();
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = locale20.getScript();
        java.lang.String str24 = locale17.getDisplayVariant(locale20);
        java.lang.String str26 = locale17.getExtension('x');
        java.lang.String str27 = locale17.getDisplayCountry();
        java.lang.String str28 = locale6.getDisplayCountry(locale17);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CAN" + "'", str12, "CAN");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale17.toString(), "_ETC/UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese" + "'", str18, "Chinese");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ETC/UTC" + "'", str27, "ETC/UTC");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Canada" + "'", str28, "Canada");
    }

    @Test
    public void test17253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17253");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        java.util.TimeZone.setDefault(timeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        boolean boolean16 = timeZone3.hasSameRules(timeZone12);
        java.lang.String str17 = timeZone3.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Greenwich Mean Time" + "'", str17, "Greenwich Mean Time");
    }

    @Test
    public void test17254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17254");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = localDateTime2.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = property12.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property12.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime19, dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.withYearOfCentury((int) (short) 10);
        int int40 = localDateTime39.getWeekOfWeekyear();
        int int41 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.withPeriodAdded(readablePeriod42, 35151532);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusMinutes(35066445);
        org.joda.time.DateTimeField dateTimeField48 = localDateTime39.getField(0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test17255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17255");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField6 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.Chronology chronology8 = iSOChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = iSOChronology0.add(readablePeriod9, (long) 35545908, (-23));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35545908L + "'", long12 == 35545908L);
    }

    @Test
    public void test17256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17256");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property12.getFieldType();
        org.joda.time.DurationField durationField16 = property12.getRangeDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime32 = localDateTime19.toDateTime(dateTimeZone30);
        org.joda.time.Instant instant33 = dateTime32.toInstant();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str38 = iSOChronology37.toString();
        org.joda.time.DurationField durationField39 = iSOChronology37.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        int[] intArray46 = iSOChronology37.get((org.joda.time.ReadablePartial) localDateTime42, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = iSOChronology37.getZone();
        java.lang.String str48 = dateTimeZone47.toString();
        org.joda.time.DateTime dateTime49 = localDateTime36.toDateTime(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        boolean boolean51 = instant33.isAfter((org.joda.time.ReadableInstant) dateTime49);
        int int52 = property12.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDateTime localDateTime53 = property12.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withPeriodAdded(readablePeriod54, (int) 'x');
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test17257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17257");
        java.util.Locale locale2 = new java.util.Locale("970", "2022-02-11T09:43:55.701");
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale2.getScript();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Jan");
        java.lang.String str7 = locale2.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getScript();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale15 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str16 = locale15.getDisplayCountry();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Locale.setDefault(locale17);
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale15.getDisplayCountry(locale17);
        java.util.Locale.setDefault(category10, locale15);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str25 = iSOChronology24.toString();
        org.joda.time.DurationField durationField26 = iSOChronology24.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        int[] intArray33 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology24.getZone();
        long long38 = dateTimeZone34.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale39 = java.util.Locale.US;
        boolean boolean40 = dateTimeZone34.equals((java.lang.Object) locale39);
        java.util.Locale.setDefault(category10, locale39);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("en");
        java.util.Locale.setDefault(category10, locale43);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale locale47 = builder45.build();
        java.lang.String str49 = locale47.getExtension('u');
        java.util.Locale.setDefault(category10, locale47);
        java.lang.String str51 = locale8.getDisplayScript(locale47);
        java.lang.String str52 = locale2.getDisplayScript(locale8);
        java.lang.String str53 = locale2.getISO3Language();
        org.junit.Assert.assertEquals(locale2.toString(), "970_2022-02-11T09:43:55.701");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "jan");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "970" + "'", str7, "970");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals(locale15.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "970" + "'", str53, "970");
    }

    @Test
    public void test17258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17258");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str2 = locale1.getScript();
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str4 = locale1.getDisplayCountry(locale3);
        java.lang.String str5 = locale3.getDisplayScript();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = property11.getAsText(locale15);
        org.joda.time.LocalDateTime localDateTime18 = property11.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime18, dateTimeZone29);
        boolean boolean33 = dateTimeZone29.isStandardOffset(1707644655216L);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField37 = iSOChronology36.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.era();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.lang.String str48 = property46.getAsShortText(locale47);
        java.lang.String str49 = property40.getAsShortText(locale47);
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleKeys();
        java.lang.String str51 = dateTimeZone29.getShortName(1644572648983L, locale47);
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology53);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusDays((int) (byte) 0);
        int int58 = localDateTime55.getWeekyear();
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.secondOfMinute();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = property59.getAsText(locale60);
        java.lang.String str63 = dateTimeZone29.getShortName((long) 1, locale60);
        java.lang.String str64 = locale3.getDisplayLanguage(locale60);
        java.lang.String str65 = locale3.getDisplayScript();
        java.lang.String str66 = locale3.getScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "9" + "'", str48, "9");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "en" + "'", str61, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "23" + "'", str62, "23");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese" + "'", str64, "Chinese");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test17259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17259");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (byte) 0);
        long long24 = dateTimeZone17.getMillisKeepLocal(dateTimeZone20, 1707644669306L);
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str28 = locale27.getDisplayVariant();
        java.lang.String str29 = locale27.getISO3Language();
        java.lang.String str30 = locale27.getScript();
        java.lang.String str31 = dateTimeZone17.getName(1212L, locale27);
        long long33 = dateTimeZone17.nextTransition((-541L));
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1707644669298L + "'", long24 == 1707644669298L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-541L) + "'", long33 == (-541L));
    }

    @Test
    public void test17260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17260");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale locale9 = builder7.build();
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder11 = builder6.setLocale(locale9);
        java.lang.Object obj12 = null;
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str17 = iSOChronology16.toString();
        org.joda.time.DurationField durationField18 = iSOChronology16.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        int[] intArray25 = iSOChronology16.get((org.joda.time.ReadablePartial) localDateTime21, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = iSOChronology16.getZone();
        java.lang.String str27 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime28 = localDateTime15.toDateTime(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(obj12, dateTimeZone26);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale31.getDisplayCountry();
        java.lang.String str34 = dateTimeZone26.getShortName((long) 59, locale31);
        java.lang.String str35 = locale31.getDisplayScript();
        java.util.Locale.Builder builder36 = builder6.setLocale(locale31);
        java.util.Locale.Builder builder38 = builder6.setVariant("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder6.setScript("2022-02-11T09:53:18.281");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:53:18.281 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test17261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17261");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.centuryOfEra();
        int int15 = property14.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfFloorCopy();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property14.getAsText(locale17);
        java.lang.String str19 = property14.getName();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "20" + "'", str18, "20");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "centuryOfEra" + "'", str19, "centuryOfEra");
    }

    @Test
    public void test17262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17262");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale.setDefault(category6, locale8);
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str11 = property5.getAsText(locale8);
        org.joda.time.LocalDateTime localDateTime13 = property5.setCopy((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        java.util.Locale locale17 = new java.util.Locale("2022-02-11T03:45:40.777", "2031-11-12T09:44:21.734");
        int int18 = property14.getMaximumShortTextLength(locale17);
        org.joda.time.DurationField durationField19 = property14.getDurationField();
        org.joda.time.DateTimeField dateTimeField20 = property14.getField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(locale17.toString(), "2022-02-11t03:45:40.777_2031-11-12T09:44:21.734");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test17263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17263");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int9 = timeZone5.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        long long12 = dateTimeZone10.previousTransition((long) 17);
        boolean boolean13 = dateTimeZone10.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField16 = iSOChronology15.halfdays();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.TimeZone.setDefault(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Chronology chronology24 = iSOChronology15.withZone(dateTimeZone23);
        java.util.TimeZone timeZone25 = dateTimeZone23.toTimeZone();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 6, dateTimeZone23);
        long long28 = dateTimeZone10.getMillisKeepLocal(dateTimeZone23, 1707644635723L);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 18, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(obj0, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks(35362862);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 17L + "'", long12 == 17L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1707644635723L + "'", long28 == 1707644635723L);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test17264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17264");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField11 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField12 = iSOChronology0.weekyears();
        org.joda.time.Chronology chronology13 = iSOChronology0.withUTC();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = iSOChronology0.add(readablePeriod14, (long) 35066445, 0);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology0.clockhourOfHalfday();
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale.setDefault(category21, locale23);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("yearOfCentury");
        java.util.Locale.setDefault(category21, locale26);
        boolean boolean28 = iSOChronology0.equals((java.lang.Object) category21);
        java.util.Locale locale29 = java.util.Locale.getDefault(category21);
        java.lang.String str30 = locale29.getDisplayCountry();
        java.lang.String str31 = locale29.getScript();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35066445L + "'", long17 == 35066445L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test17265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17265");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField8 = iSOChronology0.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17266");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        boolean boolean8 = timeZone3.observesDaylightTime();
        int int10 = timeZone3.getOffset(1707644660798L);
        timeZone3.setID("2022-02-11T09:44:59.091");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.time.ZoneId zoneId15 = timeZone14.toZoneId();
        java.time.ZoneId zoneId16 = timeZone14.toZoneId();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone(zoneId16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone(zoneId16);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone(zoneId16);
        boolean boolean20 = timeZone3.hasSameRules(timeZone19);
        timeZone19.setRawOffset(789);
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.Locale locale27 = java.util.Locale.US;
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale locale30 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str31 = locale30.getDisplayCountry();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.util.Locale.setDefault(locale32);
        java.util.Set<java.lang.String> strSet36 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale30.getDisplayCountry(locale32);
        java.util.Locale.setDefault(category25, locale30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = timeZone19.getDisplayName(false, 35569080, locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 35569080");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals(locale30.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English (Canada)" + "'", str34, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test17267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17267");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (byte) 0);
        long long24 = dateTimeZone17.getMillisKeepLocal(dateTimeZone20, 1707644669306L);
        java.lang.String str26 = dateTimeZone17.getName((long) (short) 10);
        java.lang.String str27 = dateTimeZone17.toString();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1707644669298L + "'", long24 == 1707644669298L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test17268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17268");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("0");
        java.lang.String str9 = locale8.getVariant();
        java.util.Locale.Builder builder10 = builder0.setLocale(locale8);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getVariant();
        java.util.Locale.Builder builder14 = builder0.setLocale(locale11);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str17 = locale16.getDisplayVariant();
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder20 = builder14.setLocale(locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.setRegion("2022-02-11T09:52:41.378");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:52:41.378 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-CN" + "'", str12, "zh-CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test17269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17269");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        int int4 = localDateTime3.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = property10.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime17 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = property10.roundHalfEvenCopy();
        boolean boolean19 = localDateTime3.equals((java.lang.Object) localDateTime18);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime33 = localDateTime18.toDateTime(dateTimeZone30);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.lang.String str37 = locale35.getDisplayScript(locale36);
        java.lang.String str38 = dateTimeZone30.getShortName(1644572652885L, locale35);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(208799976L, dateTimeZone30);
        org.joda.time.DurationFieldType durationFieldType40 = null;
        boolean boolean41 = localDateTime39.isSupported(durationFieldType40);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test17270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17270");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) 'u');
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.halfdays();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.TimeZone.setDefault(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.Chronology chronology22 = iSOChronology13.withZone(dateTimeZone21);
        java.lang.String str24 = dateTimeZone21.getName((long) 50);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(1644572660583L, dateTimeZone21);
        org.joda.time.DateTime dateTime26 = localDateTime11.toDateTime(dateTimeZone21);
        org.joda.time.Instant instant27 = dateTime26.toInstant();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str29 = iSOChronology28.toString();
        org.joda.time.DurationField durationField30 = iSOChronology28.weeks();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.halfdayOfDay();
        boolean boolean32 = dateTime26.equals((java.lang.Object) dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test17271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17271");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = property10.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime17 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        org.joda.time.LocalDateTime localDateTime20 = property18.addWrapFieldToCopy(58);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra((int) 'a');
        int[] intArray33 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = localDateTime29.getFields();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.minusHours(1);
        int int37 = localDateTime29.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime29.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField40 = iSOChronology39.halfdays();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.TimeZone.setDefault(timeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.Chronology chronology48 = iSOChronology39.withZone(dateTimeZone47);
        long long51 = dateTimeZone47.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMillisOfSecond(5);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str62 = iSOChronology61.toString();
        org.joda.time.DurationField durationField63 = iSOChronology61.weeks();
        boolean boolean64 = property60.equals((java.lang.Object) durationField63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property60.getFieldType();
        boolean boolean66 = localDateTime52.isSupported(dateTimeFieldType65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime29.withField(dateTimeFieldType65, 3);
        org.joda.time.LocalDateTime.Property property69 = localDateTime20.property(dateTimeFieldType65);
        java.lang.String str70 = property69.getAsString();
        org.joda.time.LocalDateTime localDateTime71 = property69.withMaximumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 2022L + "'", long51 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ISOChronology[UTC]" + "'", str62, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "9" + "'", str70, "9");
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test17272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17272");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DurationField durationField33 = property5.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str37 = locale36.getDisplayScript();
        java.lang.String str40 = nameProvider34.getShortName(locale36, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str41 = property5.getAsShortText(locale36);
        org.joda.time.LocalDateTime localDateTime42 = property5.roundHalfEvenCopy();
        long long43 = property5.remainder();
        int int44 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3203936L + "'", long43 == 3203936L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test17273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17273");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean7 = timeZone3.observesDaylightTime();
        java.lang.String str8 = timeZone3.getID();
        java.lang.String str9 = timeZone3.getID();
        java.time.ZoneId zoneId10 = timeZone3.toZoneId();
        java.time.ZoneId zoneId11 = timeZone3.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2022-02-13T19:45:03.252");
        java.util.Locale.setDefault(locale15);
        java.lang.String str17 = timeZone13.getDisplayName(locale15);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT" + "'", str8, "GMT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Greenwich Mean Time" + "'", str17, "Greenwich Mean Time");
    }

    @Test
    public void test17274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17274");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test17275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17275");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2031-11-12T09:44:23.993");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test17276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17276");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField7 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17277");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str15 = iSOChronology14.toString();
        org.joda.time.DurationField durationField16 = iSOChronology14.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        int[] intArray23 = iSOChronology14.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime13, intArray23);
        org.joda.time.DateTimeZone dateTimeZone25 = iSOChronology0.getZone();
        long long27 = dateTimeZone25.previousTransition((long) 22);
        long long30 = dateTimeZone25.adjustOffset((long) 53, true);
        java.lang.String str32 = dateTimeZone25.getNameKey(1707644764812L);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone25);
        org.joda.time.DurationField durationField34 = iSOChronology33.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 22L + "'", long27 == 22L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 53L + "'", long30 == 53L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test17278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17278");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0, 35093236, 49977439, 997, 656);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 997 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17279");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.era();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfEra((int) 'a');
        int[] intArray18 = iSOChronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime14.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusHours(1);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra((int) 'a');
        int[] intArray33 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withDurationAdded(readableDuration34, (int) '4');
        int[] intArray37 = localDateTime36.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray37);
        org.joda.time.DurationField durationField39 = iSOChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField43 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 11, 35604018]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test17280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17280");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str8 = iSOChronology7.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField10 = iSOChronology7.minutes();
        org.joda.time.DateTimeZone dateTimeZone11 = iSOChronology7.getZone();
        org.joda.time.DurationField durationField12 = iSOChronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology7.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(35526756, 35035723, 71412217, (-1644364799), 71104975, 865, 33253692, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1644364799 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test17281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17281");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.DurationField durationField3 = iSOChronology1.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        int[] intArray10 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime6, (long) 100);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology1.dayOfWeek();
        java.lang.String str12 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology1.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(100L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology1.secondOfMinute();
        org.joda.time.DurationField durationField17 = iSOChronology1.halfdays();
        org.joda.time.DurationField durationField18 = iSOChronology1.days();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test17282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17282");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withMillisOfDay(59);
        int int19 = localDateTime18.getYear();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        int int21 = localDateTime18.getMinuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2000 + "'", int19 == 2000);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17283");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property20 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        int int22 = localDateTime21.size();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test17284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17284");
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.era();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology2);
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology2.era();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology2.weekyearOfCentury();
        long long12 = iSOChronology2.add(1644572637306L, 1644572653046L, 6);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology2.millisOfSecond();
        org.joda.time.DurationField durationField15 = iSOChronology2.weekyears();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, (org.joda.time.Chronology) iSOChronology2);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 11512008555582L + "'", long12 == 11512008555582L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test17285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17285");
        java.lang.String[] strArray6 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        boolean boolean18 = strSet7.containsAll((java.util.Collection<java.lang.String>) strList15);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.TimeZone.setDefault(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        int int26 = timeZone22.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.TimeZone.setDefault(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        boolean boolean35 = timeZone22.hasSameRules(timeZone31);
        boolean boolean36 = strSet7.remove((java.lang.Object) timeZone31);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean41 = timeZone38.hasSameRules(timeZone40);
        java.util.TimeZone.setDefault(timeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        int int44 = timeZone40.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        boolean boolean46 = timeZone31.hasSameRules(timeZone40);
        int int48 = timeZone31.getOffset(1644572846716L);
        boolean boolean49 = timeZone31.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            int int56 = timeZone31.getOffset(0, 35335217, (int) (byte) -1, 35208074, 769, 383);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test17286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17286");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField6 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField7 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test17287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17287");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = iSOChronology0.get(readablePeriod8, (-59101884813576L), 33056L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17288");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology1.halfdayOfDay();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17289");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("hi!");
        int int16 = property5.getMaximumShortTextLength(locale15);
        org.joda.time.LocalDateTime localDateTime17 = property5.roundFloorCopy();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMillis(56);
        int int25 = localDateTime24.getCenturyOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField33 = iSOChronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology32.era();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYearOfEra((int) 'a');
        int[] intArray43 = iSOChronology32.get((org.joda.time.ReadablePartial) localDateTime39, (long) 100);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.withDurationAdded(readableDuration44, (int) '4');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime39.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        int int50 = localDateTime39.indexOf(dateTimeFieldType49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime39.plus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime39.plusSeconds((int) 'a');
        boolean boolean55 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.lang.String str63 = property61.getAsShortText(locale62);
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale64.getDisplayName(locale65);
        java.lang.String str67 = property61.getAsText(locale65);
        org.joda.time.LocalDateTime localDateTime68 = property61.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str70 = iSOChronology69.toString();
        org.joda.time.DurationField durationField71 = iSOChronology69.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology72 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology72.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusDays((int) (byte) 0);
        int[] intArray78 = iSOChronology69.get((org.joda.time.ReadablePartial) localDateTime74, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone79 = iSOChronology69.getZone();
        java.lang.String str80 = dateTimeZone79.toString();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime68, dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withDayOfYear((int) '#');
        boolean boolean84 = localDateTime54.isEqual((org.joda.time.ReadablePartial) localDateTime81);
        int int85 = localDateTime81.getYearOfCentury();
        boolean boolean86 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.LocalDateTime.Property property87 = localDateTime24.yearOfCentury();
        int int88 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        int int89 = property5.getMinimumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "9" + "'", str63, "9");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "English (Canada)" + "'", str66, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "9" + "'", str67, "9");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ISOChronology[UTC]" + "'", str70, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(iSOChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 22 + "'", int85 == 22);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test17290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17290");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(0);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str22 = iSOChronology21.toString();
        org.joda.time.DurationField durationField23 = iSOChronology21.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        int[] intArray30 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology21.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime20.toDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        java.lang.String str39 = dateTimeZone37.getNameKey((long) (byte) 0);
        long long41 = dateTimeZone34.getMillisKeepLocal(dateTimeZone37, 1707644669306L);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str45 = locale44.getDisplayVariant();
        java.lang.String str46 = locale44.getISO3Language();
        java.lang.String str47 = locale44.getScript();
        java.lang.String str48 = dateTimeZone34.getName(1212L, locale44);
        org.joda.time.DateTime dateTime49 = localDateTime16.toDateTime(dateTimeZone34);
        int int50 = localDateTime16.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime16.minusMillis(35218262);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime16.minusHours(316);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = localDateTime16.toString(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1707644669298L + "'", long41 == 1707644669298L);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 53 + "'", int50 == 53);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:53:24.183" + "'", str56, "2022-02-11T09:53:24.183");
    }

    @Test
    public void test17291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17291");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test17292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17292");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone8.toTimeZone();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.time.ZoneId zoneId12 = timeZone10.toZoneId();
        java.time.ZoneId zoneId13 = timeZone10.toZoneId();
        boolean boolean14 = timeZone10.useDaylightTime();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test17293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17293");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.withSecondOfMinute(56);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds(67441936);
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusMinutes((int) (short) 10);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        java.lang.String str26 = iSOChronology24.toString();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology24.dayOfMonth();
        org.joda.time.DurationField durationField29 = iSOChronology24.millis();
        org.joda.time.DurationField durationField30 = iSOChronology24.halfdays();
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology24.getZone();
        org.joda.time.DateTime dateTime32 = localDateTime17.toDateTime(dateTimeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone31.toTimeZone();
        java.util.Locale locale39 = new java.util.Locale("2022-02-11T09:44:09.708", "Property[millisOfDay]", "CHN");
        java.lang.String str40 = locale39.getVariant();
        java.util.Locale locale41 = locale39.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = timeZone33.getDisplayName(true, 762, locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 762");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-11T09:53:56.231" + "'", str18, "2022-02-11T09:53:56.231");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale39.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "CHN" + "'", str40, "CHN");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "2022-02-11t09:44:09.708_PROPERTY[MILLISOFDAY]_CHN");
    }

    @Test
    public void test17294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17294");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withDayOfMonth(2);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.plusMillis(23);
        org.joda.time.LocalDateTime.Property property14 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime5.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test17295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17295");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.dayOfWeek();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        java.lang.String str18 = iSOChronology16.toString();
        org.joda.time.DurationField durationField19 = iSOChronology16.hours();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology16.monthOfYear();
        org.joda.time.Chronology chronology22 = iSOChronology16.withUTC();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(1707644635723L, chronology22);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str25 = iSOChronology24.toString();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = iSOChronology24.add(readablePeriod26, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField30 = iSOChronology24.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str39 = iSOChronology38.toString();
        org.joda.time.DurationField durationField40 = iSOChronology38.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        int[] intArray47 = iSOChronology38.get((org.joda.time.ReadablePartial) localDateTime43, (long) 100);
        iSOChronology24.validate((org.joda.time.ReadablePartial) localDateTime37, intArray47);
        org.joda.time.DateTimeZone dateTimeZone49 = iSOChronology24.getZone();
        long long51 = dateTimeZone49.previousTransition((long) 22);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone49);
        int int54 = dateTimeZone49.getOffset(1707644774271L);
        org.joda.time.DateTime dateTime55 = localDateTime23.toDateTime(dateTimeZone49);
        long long57 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime23, 1644572792353L);
        org.joda.time.Chronology chronology58 = localDateTime23.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime60 = localDateTime23.withYearOfCentury(160);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 160 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 22L + "'", long51 == 22L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1707644635723L + "'", long57 == 1707644635723L);
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test17296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17296");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.months();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test17297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17297");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusHours(5);
        int int22 = localDateTime18.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.yearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        int int25 = property23.getMaximumValueOverall();
        org.joda.time.DurationField durationField26 = property23.getDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test17298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17298");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.weekOfWeekyear();
        int int18 = localDateTime13.getYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withYear(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        int int22 = localDateTime20.getSecondOfMinute();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T10:00:00.000" + "'", str14, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test17299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17299");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        java.util.TimeZone timeZone10 = dateTimeZone8.toTimeZone();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.time.ZoneId zoneId12 = timeZone10.toZoneId();
        java.util.TimeZone.setDefault(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("2022-02-13T19:45:13.026");
        timeZone15.setRawOffset(275);
        boolean boolean18 = timeZone10.hasSameRules(timeZone15);
        timeZone15.setID("0097-02-18T09:44:03.425");
        boolean boolean21 = timeZone15.useDaylightTime();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test17300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17300");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDateTime4.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withWeekyear(35066445);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology12.era();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfEra((int) 'a');
        int[] intArray23 = iSOChronology12.get((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withDurationAdded(readableDuration24, (int) '4');
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minus(readableDuration27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusHours(26);
        boolean boolean33 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime4.plusMonths(316);
        int int36 = localDateTime35.getMinuteOfHour();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53 + "'", int36 == 53);
    }

    @Test
    public void test17301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17301");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = localDateTime25.getFields();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusYears(27);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.plus(readablePeriod33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.minus(readablePeriod35);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        int int40 = localDateTime39.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.lang.String str48 = property46.getAsShortText(locale47);
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = property46.getAsText(locale50);
        org.joda.time.LocalDateTime localDateTime53 = property46.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = property46.roundHalfEvenCopy();
        boolean boolean55 = localDateTime39.equals((java.lang.Object) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime39.minusMinutes((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime39.minus(readablePeriod58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str68 = iSOChronology67.toString();
        org.joda.time.DurationField durationField69 = iSOChronology67.weeks();
        boolean boolean70 = property66.equals((java.lang.Object) durationField69);
        org.joda.time.DurationField durationField71 = property66.getRangeDurationField();
        java.lang.String str72 = property66.getAsString();
        java.lang.String str73 = property66.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property66.getFieldType();
        int int75 = localDateTime59.indexOf(dateTimeFieldType74);
        int int76 = localDateTime25.indexOf(dateTimeFieldType74);
        org.joda.time.DateTimeField[] dateTimeFieldArray77 = localDateTime25.getFields();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 24 + "'", int40 == 24);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "9" + "'", str48, "9");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English (Canada)" + "'", str51, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "9" + "'", str52, "9");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(iSOChronology67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[UTC]" + "'", str68, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(durationField71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "9" + "'", str72, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "9" + "'", str73, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldArray77);
    }

    @Test
    public void test17302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17302");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        boolean boolean4 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test17303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17303");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfEvenCopy();
        int int16 = localDateTime15.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMillis(3);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusYears(30);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minus(readableDuration21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.era();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime26 = property23.setCopy(0);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField28 = iSOChronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology27.era();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withYearOfEra((int) 'a');
        int[] intArray38 = iSOChronology27.get((org.joda.time.ReadablePartial) localDateTime34, (long) 100);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.withDurationAdded(readableDuration39, (int) '4');
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.halfdays();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology42.era();
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYearOfEra((int) 'a');
        int[] intArray53 = iSOChronology42.get((org.joda.time.ReadablePartial) localDateTime49, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = localDateTime49.getFields();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.minusHours(1);
        int int57 = localDateTime49.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime49.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField60 = iSOChronology59.halfdays();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone64 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean65 = timeZone62.hasSameRules(timeZone64);
        java.util.TimeZone.setDefault(timeZone64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.Chronology chronology68 = iSOChronology59.withZone(dateTimeZone67);
        long long71 = dateTimeZone67.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone67);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withMillisOfSecond(5);
        org.joda.time.chrono.ISOChronology iSOChronology75 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology75.dayOfYear();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property80 = localDateTime77.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology81 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str82 = iSOChronology81.toString();
        org.joda.time.DurationField durationField83 = iSOChronology81.weeks();
        boolean boolean84 = property80.equals((java.lang.Object) durationField83);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = property80.getFieldType();
        boolean boolean86 = localDateTime72.isSupported(dateTimeFieldType85);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime49.withField(dateTimeFieldType85, 3);
        int int89 = localDateTime34.indexOf(dateTimeFieldType85);
        org.joda.time.LocalDateTime.Property property90 = localDateTime26.property(dateTimeFieldType85);
        org.joda.time.LocalDateTime localDateTime92 = property90.addToCopy(35181813);
        boolean boolean93 = property90.isLeap();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 2022L + "'", long71 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(iSOChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(iSOChronology81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ISOChronology[UTC]" + "'", str82, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test17304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17304");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId2);
        int int5 = timeZone4.getRawOffset();
        java.time.ZoneId zoneId6 = timeZone4.toZoneId();
        java.time.ZoneId zoneId7 = timeZone4.toZoneId();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone(zoneId7);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone(zoneId7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId7);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test17305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17305");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        long long9 = iSOChronology0.add(1644572646636L, 23L, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str18 = iSOChronology17.toString();
        org.joda.time.DurationField durationField19 = iSOChronology17.weeks();
        boolean boolean20 = property16.equals((java.lang.Object) durationField19);
        org.joda.time.LocalDateTime localDateTime21 = property16.withMinimumValue();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 6);
        org.joda.time.LocalDateTime localDateTime26 = property22.addToCopy(59);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfSecond(0);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.DurationField durationField31 = iSOChronology29.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        int[] intArray38 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime34, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone39 = iSOChronology29.getZone();
        java.lang.String str40 = dateTimeZone39.toString();
        java.lang.String str41 = dateTimeZone39.toString();
        java.lang.String str43 = dateTimeZone39.getNameKey(0L);
        org.joda.time.DateTime dateTime44 = localDateTime26.toDateTime(dateTimeZone39);
        int[] intArray46 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime26, 1952243132703L);
        // The following exception was thrown during execution in test generation
        try {
            long long54 = iSOChronology0.getDateTimeMillis(417, 54, 351562, 971, 18, 365, 35469010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 971 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572648936L + "'", long9 == 1644572648936L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[2031, 11, 12, 35132703]");
    }

    @Test
    public void test17306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17306");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DurationField durationField33 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime34 = property5.getLocalDateTime();
        int int35 = property5.getLeapAmount();
        int int36 = property5.getLeapAmount();
        java.util.Locale locale39 = new java.util.Locale("und", "2022-02-11T09:43:52.830");
        int int40 = property5.getMaximumShortTextLength(locale39);
        int int41 = property5.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime43 = property5.addToCopy(1644551101683L);
        int int44 = localDateTime43.getCenturyOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals(locale39.toString(), "und_2022-02-11T09:43:52.830");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1876115 + "'", int44 == 1876115);
    }

    @Test
    public void test17307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17307");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = iSOChronology0.add(readablePeriod4, 1644572637306L, (-1));
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsShortText(locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = property13.getAsText(locale17);
        org.joda.time.LocalDateTime localDateTime20 = property13.getLocalDateTime();
        org.joda.time.DurationField durationField21 = property13.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime22 = property13.roundHalfCeilingCopy();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.months();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology23.dayOfYear();
        org.joda.time.DurationField durationField27 = iSOChronology23.hours();
        org.joda.time.Chronology chronology28 = iSOChronology23.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = property34.getAsShortText(locale35);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = property34.getAsText(locale38);
        org.joda.time.LocalDateTime localDateTime41 = property34.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str43 = iSOChronology42.toString();
        org.joda.time.DurationField durationField44 = iSOChronology42.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        int[] intArray51 = iSOChronology42.get((org.joda.time.ReadablePartial) localDateTime47, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = iSOChronology42.getZone();
        java.lang.String str53 = dateTimeZone52.toString();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime41, dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime54.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime61 = localDateTime54.withYearOfCentury((int) (short) 10);
        int int62 = localDateTime61.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withPeriodAdded(readablePeriod63, 9);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minus(readablePeriod66);
        int[] intArray69 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime65, 1707644672408L);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime22, intArray69);
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644572637306L + "'", long7 == 1644572637306L);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English (Canada)" + "'", str18, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English (Canada)" + "'", str39, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "9" + "'", str40, "9");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[2024, 2, 11, 35072408]");
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test17308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17308");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.millisOfDay();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str35 = iSOChronology34.toString();
        org.joda.time.DurationField durationField36 = iSOChronology34.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        int[] intArray43 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime39, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology34.getZone();
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDateTime33.toDateTime(dateTimeZone44);
        boolean boolean47 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = iSOChronology1.withZone(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone14);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = property56.getAsShortText(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = property56.getAsText(locale60);
        org.joda.time.LocalDateTime localDateTime63 = property56.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = property56.roundHalfEvenCopy();
        java.lang.String str65 = localDateTime64.toString();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime64.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime64.withWeekOfWeekyear(50);
        boolean boolean73 = dateTimeZone14.isLocalDateTimeGap(localDateTime72);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        long long78 = dateTimeZone14.convertLocalToUTC(1644572957943L, true, 2891946L);
        long long80 = dateTimeZone14.previousTransition(1707644925679L);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9" + "'", str58, "9");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English (Canada)" + "'", str61, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9" + "'", str62, "9");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-11T10:00:00.000" + "'", str65, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1644572957943L + "'", long78 == 1644572957943L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1707644925679L + "'", long80 == 1707644925679L);
    }

    @Test
    public void test17309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17309");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DurationField durationField10 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17310");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        java.lang.String str4 = iSOChronology2.toString();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        int[] intArray21 = localDateTime20.getValues();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusYears(2);
        long long25 = iSOChronology2.set((org.joda.time.ReadablePartial) localDateTime23, 1L);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusMonths((int) (short) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = localDateTime23.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField30 = iSOChronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology29.era();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfEra((int) 'a');
        int[] intArray40 = iSOChronology29.get((org.joda.time.ReadablePartial) localDateTime36, (long) 100);
        iSOChronology1.validate((org.joda.time.ReadablePartial) localDateTime23, intArray40);
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(1707644762190L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField47 = iSOChronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology46.era();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology46.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology46);
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology46.era();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology46.weekyearOfCentury();
        long long56 = iSOChronology46.add(1644572637306L, 1644572653046L, 6);
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology46.secondOfDay();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology46.dayOfYear();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology46.clockhourOfDay();
        org.joda.time.DurationField durationField60 = iSOChronology46.centuries();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology46.dayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str69 = iSOChronology68.toString();
        org.joda.time.DurationField durationField70 = iSOChronology68.weeks();
        boolean boolean71 = property67.equals((java.lang.Object) durationField70);
        org.joda.time.DateTimeField dateTimeField72 = property67.getField();
        int int73 = property67.getMinimumValue();
        java.lang.String str74 = property67.getAsString();
        org.joda.time.LocalDateTime localDateTime76 = property67.addToCopy(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = localDateTime76.toString(dateTimeFormatter77);
        boolean boolean79 = iSOChronology46.equals((java.lang.Object) localDateTime76);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.withYearOfEra(22722364);
        int int83 = localDateTime82.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 11, 35604571]");
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1707645204571L + "'", long25 == 1707645204571L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 11512008555582L + "'", long56 == 11512008555582L);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(iSOChronology68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[UTC]" + "'", str69, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "9" + "'", str74, "9");
        org.junit.Assert.assertNotNull(localDateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-11T09:53:24.571" + "'", str78, "2022-02-11T09:53:24.571");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 7 + "'", int83 == 7);
    }

    @Test
    public void test17311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17311");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsShortText(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = property15.getAsText(locale19);
        org.joda.time.LocalDateTime localDateTime22 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = property15.roundHalfEvenCopy();
        boolean boolean24 = localDateTime8.equals((java.lang.Object) localDateTime23);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str26 = iSOChronology25.toString();
        org.joda.time.DurationField durationField27 = iSOChronology25.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int[] intArray34 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology25.getZone();
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime38 = localDateTime23.toDateTime(dateTimeZone35);
        java.lang.String str39 = dateTime38.toString();
        int int40 = property5.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str45 = iSOChronology44.toString();
        org.joda.time.DurationField durationField46 = iSOChronology44.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        int[] intArray53 = iSOChronology44.get((org.joda.time.ReadablePartial) localDateTime49, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = iSOChronology44.getZone();
        java.lang.String str55 = dateTimeZone54.toString();
        org.joda.time.DateTime dateTime56 = localDateTime43.toDateTime(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime56.getZone();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime56.getZone();
        long long59 = dateTime56.getMillis();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime56.getZone();
        boolean boolean61 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime56.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str64 = iSOChronology63.toString();
        org.joda.time.DurationField durationField65 = iSOChronology63.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) (byte) 0);
        int[] intArray72 = iSOChronology63.get((org.joda.time.ReadablePartial) localDateTime68, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = iSOChronology63.getZone();
        long long77 = dateTimeZone73.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withSecondOfMinute(2);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(2922789);
        org.joda.time.DateTime dateTime83 = localDateTime80.toDateTime(dateTimeZone82);
        boolean boolean84 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.chrono.ISOChronology iSOChronology85 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField86 = iSOChronology85.dayOfYear();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology85);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property90 = localDateTime87.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType91 = null;
        boolean boolean92 = localDateTime87.isSupported(durationFieldType91);
        org.joda.time.DateTime dateTime93 = localDateTime87.toDateTime();
        boolean boolean94 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English (Canada)" + "'", str20, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T10:00:00.000Z" + "'", str39, "2022-02-11T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1644573204615L + "'", long59 == 1644573204615L);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(iSOChronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test17312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17312");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList11);
        java.util.stream.Stream<java.lang.String> strStream14 = strList13.parallelStream();
        boolean boolean15 = strSet4.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.util.stream.Stream<java.lang.String> strStream16 = strSet4.parallelStream();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.time.ZoneId zoneId19 = timeZone18.toZoneId();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone(zoneId19);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.time.ZoneId zoneId23 = timeZone22.toZoneId();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone(zoneId23);
        java.time.ZoneId[] zoneIdArray25 = new java.time.ZoneId[] { zoneId19, zoneId23 };
        java.time.ZoneId[] zoneIdArray26 = strSet4.toArray(zoneIdArray25);
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.LocalDateTime localDateTime33 = property32.getLocalDateTime();
        boolean boolean34 = strSet4.equals((java.lang.Object) property32);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology35.centuryOfEra();
        org.joda.time.DurationField durationField38 = iSOChronology35.millis();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology35.centuryOfEra();
        org.joda.time.DurationField durationField40 = iSOChronology35.millis();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology35.minuteOfDay();
        boolean boolean43 = strSet4.contains((java.lang.Object) iSOChronology35);
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str49 = nameProvider44.getName(locale45, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale51 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str52 = locale51.getISO3Country();
        java.lang.String str53 = locale51.getScript();
        java.lang.String str54 = locale45.getDisplayVariant(locale51);
        java.lang.String str55 = locale45.getDisplayScript();
        java.util.Locale locale57 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str58 = locale45.getDisplayLanguage(locale57);
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleAttributes();
        boolean boolean60 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet59);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = strSet4.add("2022-02-11T09:51:58.524");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneIdArray25);
        org.junit.Assert.assertNotNull(zoneIdArray26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals(locale51.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals(locale57.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test17313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17313");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("35130773");
        java.util.TimeZone.setDefault(timeZone0);
        boolean boolean4 = timeZone0.observesDaylightTime();
        timeZone0.setID("0097-02-18T09:46:56.675");
        int int7 = timeZone0.getRawOffset();
        java.lang.String str8 = timeZone0.getID();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0097-02-18T09:46:56.675" + "'", str8, "0097-02-18T09:46:56.675");
    }

    @Test
    public void test17314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17314");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.DurationField durationField10 = property8.getDurationField();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test17315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17315");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DurationField durationField4 = iSOChronology0.days();
        long long8 = iSOChronology0.add(100L, (long) '4', 100);
        org.joda.time.Chronology chronology9 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField11 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField12 = iSOChronology0.months();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        org.joda.time.DurationField durationField24 = iSOChronology13.years();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology13.secondOfMinute();
        java.lang.String str26 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology13.year();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(28);
        org.joda.time.Chronology chronology30 = iSOChronology13.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology13.halfdayOfDay();
        boolean boolean32 = iSOChronology0.equals((java.lang.Object) dateTimeField31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = iSOChronology0.add(readablePeriod33, (long) 599, 71122738);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 5300L + "'", long8 == 5300L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 599L + "'", long36 == 599L);
    }

    @Test
    public void test17316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17316");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField8 = iSOChronology0.days();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = iSOChronology0.add(readablePeriod9, 1707644779179L, 12);
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1707644779179L + "'", long12 == 1707644779179L);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test17317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17317");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsShortText(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = property15.getAsText(locale19);
        org.joda.time.LocalDateTime localDateTime22 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = property15.roundHalfEvenCopy();
        boolean boolean24 = localDateTime8.equals((java.lang.Object) localDateTime23);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str26 = iSOChronology25.toString();
        org.joda.time.DurationField durationField27 = iSOChronology25.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int[] intArray34 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology25.getZone();
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime38 = localDateTime23.toDateTime(dateTimeZone35);
        java.lang.String str39 = dateTime38.toString();
        int int40 = property5.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str45 = iSOChronology44.toString();
        org.joda.time.DurationField durationField46 = iSOChronology44.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        int[] intArray53 = iSOChronology44.get((org.joda.time.ReadablePartial) localDateTime49, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = iSOChronology44.getZone();
        java.lang.String str55 = dateTimeZone54.toString();
        org.joda.time.DateTime dateTime56 = localDateTime43.toDateTime(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime56.getZone();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime56.getZone();
        long long59 = dateTime56.getMillis();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime56.getZone();
        boolean boolean61 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime56.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str64 = iSOChronology63.toString();
        org.joda.time.DurationField durationField65 = iSOChronology63.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) (byte) 0);
        int[] intArray72 = iSOChronology63.get((org.joda.time.ReadablePartial) localDateTime68, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = iSOChronology63.getZone();
        long long77 = dateTimeZone73.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withSecondOfMinute(2);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(2922789);
        org.joda.time.DateTime dateTime83 = localDateTime80.toDateTime(dateTimeZone82);
        boolean boolean84 = dateTime56.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.Chronology chronology85 = dateTime56.getChronology();
        long long86 = dateTime56.getMillis();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English (Canada)" + "'", str20, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T10:00:00.000Z" + "'", str39, "2022-02-11T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1644573204755L + "'", long59 == 1644573204755L);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(chronology85);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1644573204755L + "'", long86 == 1644573204755L);
    }

    @Test
    public void test17318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17318");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyear();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.centuryOfEra();
        org.joda.time.DurationField durationField7 = iSOChronology4.millis();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology4.hourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology11.era();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra((int) 'a');
        int[] intArray22 = iSOChronology11.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDateTime18.getFields();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.minusHours(1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime18.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.withSecondOfMinute((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime18.withDurationAdded(readableDuration31, 10);
        long long35 = iSOChronology4.set((org.joda.time.ReadablePartial) localDateTime18, (long) 24);
        org.joda.time.DateTimeZone dateTimeZone36 = iSOChronology4.getZone();
        org.joda.time.Chronology chronology37 = iSOChronology0.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1644573204791L + "'", long35 == 1644573204791L);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test17319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17319");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds(23);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.era();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test17320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17320");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(40);
        int int3 = dateTimeZone1.getOffsetFromLocal(1644572816518L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 40 + "'", int3 == 40);
    }

    @Test
    public void test17321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17321");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17322");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test17323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17323");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(obj0, dateTimeZone14);
        long long19 = dateTimeZone14.convertUTCToLocal((long) 23);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone20.convertLocalToUTC(1707644649273L, false, (long) 51);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField26 = iSOChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.era();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYearOfEra((int) 'a');
        int[] intArray36 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime32, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = localDateTime32.getFields();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.minusHours(1);
        int int40 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime32.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime32.minusSeconds(2022);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime32.plus(readablePeriod45);
        boolean boolean47 = dateTimeZone20.equals((java.lang.Object) readablePeriod45);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        int int53 = localDateTime50.getWeekyear();
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.minus(readableDuration55);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField58 = iSOChronology57.halfdays();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone62 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean63 = timeZone60.hasSameRules(timeZone62);
        java.util.TimeZone.setDefault(timeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.Chronology chronology66 = iSOChronology57.withZone(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration55, dateTimeZone65);
        java.util.Locale locale70 = java.util.Locale.forLanguageTag("0");
        java.lang.String str71 = dateTimeZone65.getShortName(1644659045736L, locale70);
        long long73 = dateTimeZone20.getMillisKeepLocal(dateTimeZone65, (long) 51);
        long long75 = dateTimeZone14.getMillisKeepLocal(dateTimeZone65, (-24L));
        java.lang.String str76 = dateTimeZone65.getID();
        long long80 = dateTimeZone65.convertLocalToUTC(630002014L, false, 1644572872505L);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 23L + "'", long19 == 23L);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1707644649273L + "'", long24 == 1707644649273L);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 51L + "'", long73 == 51L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-24L) + "'", long75 == (-24L));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "UTC" + "'", str76, "UTC");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 630002014L + "'", long80 == 630002014L);
    }

    @Test
    public void test17324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17324");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        org.joda.time.LocalDateTime.Property property20 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMonths(6);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds(50);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.withYearOfEra(186);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test17325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17325");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField7 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField9 = iSOChronology0.millis();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsShortText(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = property15.getAsText(locale19);
        org.joda.time.LocalDateTime localDateTime22 = property15.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime22, dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.yearOfCentury();
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.dayOfYear();
        int int40 = localDateTime35.getCenturyOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str45 = iSOChronology44.toString();
        org.joda.time.DurationField durationField46 = iSOChronology44.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        int[] intArray53 = iSOChronology44.get((org.joda.time.ReadablePartial) localDateTime49, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = iSOChronology44.getZone();
        java.lang.String str55 = dateTimeZone54.toString();
        org.joda.time.DateTime dateTime56 = localDateTime43.toDateTime(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime43.minusHours(6);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusWeeks(17);
        boolean boolean61 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime35.minusYears(0);
        int int64 = localDateTime35.getMinuteOfHour();
        int[] intArray66 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime35, 1678441937920L);
        org.joda.time.DurationField durationField67 = iSOChronology0.centuries();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English (Canada)" + "'", str20, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20 + "'", int40 == 20);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 53 + "'", int64 == 53);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[2023, 3, 10, 35537920]");
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test17326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17326");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField3 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withYearOfEra(51);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekyear(35068789);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plus(readableDuration17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusHours(41);
        int[] intArray22 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 10);
        int int23 = localDateTime18.getYearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 51 + "'", int23 == 51);
    }

    @Test
    public void test17327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17327");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("2022");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder5.setUnicodeLocaleKeyword("2022-02-11T09:51:53.036", "658");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:51:53.036 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test17328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17328");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMonths(240000);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime12.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        org.joda.time.Instant instant27 = dateTime25.toInstant();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        int int32 = localDateTime31.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = property38.getAsShortText(locale39);
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = property38.getAsText(locale42);
        org.joda.time.LocalDateTime localDateTime45 = property38.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = property38.roundHalfEvenCopy();
        boolean boolean47 = localDateTime31.equals((java.lang.Object) localDateTime46);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str49 = iSOChronology48.toString();
        org.joda.time.DurationField durationField50 = iSOChronology48.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        int[] intArray57 = iSOChronology48.get((org.joda.time.ReadablePartial) localDateTime53, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = iSOChronology48.getZone();
        boolean boolean60 = dateTimeZone58.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime61 = localDateTime46.toDateTime(dateTimeZone58);
        int int62 = localDateTime46.getCenturyOfEra();
        org.joda.time.DateTime dateTime63 = localDateTime46.toDateTime();
        int int64 = instant27.compareTo((org.joda.time.ReadableInstant) dateTime63);
        int int65 = property9.getDifference((org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 24 + "'", int32 == 24);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "9" + "'", str40, "9");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English (Canada)" + "'", str43, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "9" + "'", str44, "9");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20 + "'", int62 == 20);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-86795003) + "'", int65 == (-86795003));
    }

    @Test
    public void test17329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17329");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime7.getFieldTypes();
        int int18 = localDateTime7.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.minusSeconds(46);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDurationAdded(readableDuration21, 675);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.halfdays();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.TimeZone.setDefault(timeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.Chronology chronology33 = iSOChronology24.withZone(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.hourOfDay();
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = property40.getAsShortText(locale41);
        boolean boolean43 = property40.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology44 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField45 = iSOChronology44.halfdays();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology44.era();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withYearOfEra((int) 'a');
        int[] intArray55 = iSOChronology44.get((org.joda.time.ReadablePartial) localDateTime51, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray56 = localDateTime51.getFields();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.minusHours(1);
        int int59 = localDateTime51.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime51.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime51.withTime(1, 23, 51, 23);
        int int67 = property40.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.DurationField durationField68 = property40.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property40.getFieldType();
        org.joda.time.LocalDateTime.Property property70 = localDateTime34.property(dateTimeFieldType69);
        boolean boolean71 = localDateTime20.isSupported(dateTimeFieldType69);
        org.joda.time.LocalDateTime.Property property72 = localDateTime20.millisOfSecond();
        org.joda.time.DurationField durationField73 = property72.getDurationField();
        java.lang.String str74 = property72.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime76 = property72.setCopy(35195796);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35195796 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 25 + "'", int18 == 25);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9" + "'", str42, "9");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(iSOChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(durationField73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "46" + "'", str74, "46");
    }

    @Test
    public void test17330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17330");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMonths(46);
        int int19 = localDateTime18.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = property22.addWrapFieldToCopy(35292823);
        org.joda.time.LocalDateTime localDateTime25 = property22.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 78 + "'", int19 == 78);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test17331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17331");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.plus(readablePeriod20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.getLocalDateTime();
        org.joda.time.Interval interval24 = property22.toInterval();
        org.joda.time.LocalDateTime localDateTime25 = property22.withMinimumValue();
        int int26 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withDayOfMonth(394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 394 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test17332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17332");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone0.convertLocalToUTC(1707644649273L, false, (long) 51);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra((int) 'a');
        int[] intArray16 = iSOChronology5.get((org.joda.time.ReadablePartial) localDateTime12, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime12.getFields();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.minusHours(1);
        int int20 = localDateTime12.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime12.minusSeconds(2022);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime12.plus(readablePeriod25);
        boolean boolean27 = dateTimeZone0.equals((java.lang.Object) readablePeriod25);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int int33 = localDateTime30.getWeekyear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.minus(readableDuration35);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField38 = iSOChronology37.halfdays();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.TimeZone.setDefault(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.Chronology chronology46 = iSOChronology37.withZone(dateTimeZone45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration35, dateTimeZone45);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("0");
        java.lang.String str51 = dateTimeZone45.getShortName(1644659045736L, locale50);
        long long53 = dateTimeZone0.getMillisKeepLocal(dateTimeZone45, (long) 51);
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology54.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology54.weekOfWeekyear();
        org.joda.time.DurationField durationField57 = iSOChronology54.days();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1707644649273L + "'", long4 == 1707644649273L);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 51L + "'", long53 == 51L);
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test17333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17333");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField5 = iSOChronology0.minutes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMinuteOfHour(27);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusMinutes(934);
        int int12 = localDateTime6.getDayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
    }

    @Test
    public void test17334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17334");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        int int24 = localDateTime21.getDayOfWeek();
        int int25 = localDateTime21.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.minus(readablePeriod26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYear(35058029);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withDayOfYear(23);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withWeekyear(94);
        int int34 = localDateTime33.getHourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35605213]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707645205213L + "'", long23 == 1707645205213L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 25 + "'", int25 == 25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
    }

    @Test
    public void test17335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17335");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(56);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYear((int) (byte) 10);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime12.toDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusSeconds(23);
        org.joda.time.LocalDateTime.Property property30 = localDateTime27.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology32.dayOfYear();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType38 = null;
        boolean boolean39 = localDateTime34.isSupported(durationFieldType38);
        org.joda.time.DateTime dateTime40 = localDateTime34.toDateTime();
        long long41 = property30.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        int int46 = localDateTime45.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.lang.String str54 = property52.getAsShortText(locale53);
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = property52.getAsText(locale56);
        org.joda.time.LocalDateTime localDateTime59 = property52.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = property52.roundHalfEvenCopy();
        boolean boolean61 = localDateTime45.equals((java.lang.Object) localDateTime60);
        org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str63 = iSOChronology62.toString();
        org.joda.time.DurationField durationField64 = iSOChronology62.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology65 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusDays((int) (byte) 0);
        int[] intArray71 = iSOChronology62.get((org.joda.time.ReadablePartial) localDateTime67, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone72 = iSOChronology62.getZone();
        boolean boolean74 = dateTimeZone72.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime75 = localDateTime60.toDateTime(dateTimeZone72);
        int int76 = localDateTime60.getCenturyOfEra();
        org.joda.time.DateTime dateTime77 = localDateTime60.toDateTime();
        long long78 = dateTime77.getMillis();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(71123553);
        boolean boolean81 = dateTime77.equals((java.lang.Object) dateTimeZone80);
        int int82 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime77);
        long long83 = dateTime42.getMillis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-19034L) + "'", long41 == (-19034L));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 25 + "'", int46 == 25);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9" + "'", str54, "9");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "English (Canada)" + "'", str57, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9" + "'", str58, "9");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(iSOChronology62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ISOChronology[UTC]" + "'", str63, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(iSOChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20 + "'", int76 == 20);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1644573600000L + "'", long78 == 1644573600000L);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1644573205235L + "'", long83 == 1644573205235L);
    }

    @Test
    public void test17336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17336");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology0.centuries();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = iSOChronology0.add(readablePeriod8, (long) 37, 35097498);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 37L + "'", long11 == 37L);
    }

    @Test
    public void test17337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17337");
        java.util.Locale locale2 = new java.util.Locale("+00:48:42.789", "0097-02-18T09:51:06.687");
        org.junit.Assert.assertEquals(locale2.toString(), "+00:48:42.789_0097-02-18T09:51:06.687");
    }

    @Test
    public void test17338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17338");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = iSOChronology6.add(readablePeriod8, (long) (byte) -1, (-1));
        org.joda.time.Chronology chronology12 = iSOChronology6.withUTC();
        boolean boolean13 = iSOChronology0.equals((java.lang.Object) iSOChronology6);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17339");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        java.lang.String str21 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.util.TimeZone timeZone23 = dateTimeZone13.toTimeZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17340");
        java.lang.String[] strArray10 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.util.Iterator<java.lang.String> strItor13 = strSet11.iterator();
        java.lang.Object[] objArray14 = strSet11.toArray();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale.setDefault(locale15);
        java.util.Set<java.lang.String> strSet19 = locale15.getUnicodeLocaleAttributes();
        boolean boolean20 = strSet11.retainAll((java.util.Collection<java.lang.String>) strSet19);
        strSet11.clear();
        strSet11.clear();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test17341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17341");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.LocalDateTime localDateTime10 = property5.roundHalfCeilingCopy();
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale14 = new java.util.Locale("", "Etc/UTC");
        java.lang.String str15 = locale11.getDisplayLanguage(locale14);
        int int16 = property5.getMaximumShortTextLength(locale11);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str18 = iSOChronology17.toString();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.millisOfDay();
        boolean boolean20 = property5.equals((java.lang.Object) iSOChronology17);
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str22 = iSOChronology21.toString();
        org.joda.time.DurationField durationField23 = iSOChronology21.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        int[] intArray30 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology21.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        int int34 = dateTimeZone31.getStandardOffset(1707644640457L);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone31);
        org.joda.time.Chronology chronology36 = iSOChronology17.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology17.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        long long44 = dateTimeZone40.convertLocalToUTC(1707644649273L, false, (long) 51);
        java.lang.String str46 = dateTimeZone40.getName(1707644670915L);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("en");
        java.lang.String str50 = dateTimeZone40.getShortName(1707644640457L, locale49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        long long55 = dateTimeZone52.convertLocalToUTC((long) (-19034), true);
        long long57 = dateTimeZone40.getMillisKeepLocal(dateTimeZone52, 1644572743163L);
        boolean boolean59 = dateTimeZone40.isStandardOffset(2753023L);
        org.joda.time.Chronology chronology60 = iSOChronology17.withZone(dateTimeZone40);
        int int62 = dateTimeZone40.getOffset((long) 35567447);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale14.toString(), "_ETC/UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1707644649273L + "'", long44 == 1707644649273L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-19042L) + "'", long55 == (-19042L));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1644572743155L + "'", long57 == 1644572743155L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test17342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17342");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = property12.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property12.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        java.lang.String str31 = dateTimeZone30.toString();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime19, dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.withYearOfCentury((int) (short) 10);
        long long41 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime32, (long) (short) 1);
        org.joda.time.DurationField durationField42 = iSOChronology0.months();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField44 = iSOChronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology43.era();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology43.yearOfEra();
        org.joda.time.DurationField durationField47 = iSOChronology43.minutes();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = iSOChronology43.add(readablePeriod48, (long) 15, 306);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology52.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.hourOfDay();
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.lang.String str59 = property57.getAsShortText(locale58);
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = property57.getAsText(locale61);
        java.lang.String str64 = property57.getAsString();
        org.joda.time.LocalDateTime localDateTime65 = property57.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plus(readableDuration66);
        int[] intArray69 = iSOChronology43.get((org.joda.time.ReadablePartial) localDateTime65, 1644572685853L);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.plusWeeks(35335217);
        long long73 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime65, 1644551117203L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644573205381L + "'", long41 == 1644573205381L);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 15L + "'", long51 == 15L);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9" + "'", str59, "9");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English (Canada)" + "'", str62, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "9" + "'", str63, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "9" + "'", str64, "9");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[2022, 2, 11, 35085853]");
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644573205381L + "'", long73 == 1644573205381L);
    }

    @Test
    public void test17343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17343");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test17344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17344");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.millisOfDay();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str35 = iSOChronology34.toString();
        org.joda.time.DurationField durationField36 = iSOChronology34.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        int[] intArray43 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime39, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology34.getZone();
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDateTime33.toDateTime(dateTimeZone44);
        boolean boolean47 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = iSOChronology1.withZone(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone14);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = property56.getAsShortText(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = property56.getAsText(locale60);
        org.joda.time.LocalDateTime localDateTime63 = property56.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = property56.roundHalfEvenCopy();
        java.lang.String str65 = localDateTime64.toString();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime64.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime64.withWeekOfWeekyear(50);
        boolean boolean73 = dateTimeZone14.isLocalDateTimeGap(localDateTime72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.secondOfMinute();
        java.util.Locale locale75 = java.util.Locale.CHINA;
        java.lang.String str76 = locale75.getDisplayName();
        int int77 = property74.getMaximumTextLength(locale75);
        org.joda.time.LocalDateTime localDateTime78 = property74.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withPeriodAdded(readablePeriod79, 35130505);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9" + "'", str58, "9");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English (Canada)" + "'", str61, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9" + "'", str62, "9");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-11T10:00:00.000" + "'", str65, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Chinese (China)" + "'", str76, "Chinese (China)");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test17345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17345");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(30);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str3 = iSOChronology2.toString();
        org.joda.time.DurationField durationField4 = iSOChronology2.weeks();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology2);
        boolean boolean6 = dateTimeZone1.equals((java.lang.Object) localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[UTC]" + "'", str3, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test17346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17346");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology12 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfWeek();
        org.joda.time.DurationField durationField14 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test17347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17347");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(obj0, dateTimeZone14);
        int int18 = localDateTime17.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDurationAdded(readableDuration19, 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.plus(readablePeriod23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readableDuration25);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 515 + "'", int18 == 515);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test17348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17348");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        int int33 = localDateTime28.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.withDurationAdded(readableDuration34, 35179551);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test17349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17349");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readableDuration6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusHours(2);
        int int10 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusDays((int) (byte) -1);
        int int13 = localDateTime12.getHourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 42805563 + "'", int10 == 42805563);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
    }

    @Test
    public void test17350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17350");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        java.lang.String str3 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField5 = iSOChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = iSOChronology1.withZone(dateTimeZone7);
        org.joda.time.DurationField durationField9 = iSOChronology1.minutes();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 202, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = localDateTime13.toString(dateTimeFormatter15);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = property22.getAsShortText(locale23);
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = property22.getAsText(locale26);
        org.joda.time.LocalDateTime localDateTime29 = property22.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = property22.roundHalfEvenCopy();
        java.lang.String str31 = localDateTime30.toString();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.weekOfWeekyear();
        int int35 = localDateTime30.getYear();
        boolean boolean36 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.lang.String str44 = property42.getAsShortText(locale43);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = property42.getAsText(locale46);
        org.joda.time.LocalDateTime localDateTime49 = property42.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.era();
        org.joda.time.LocalDateTime localDateTime52 = property50.addWrapFieldToCopy(58);
        boolean boolean53 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        int[] intArray54 = localDateTime30.getValues();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime30.plusMinutes(9);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.millisOfSecond();
        int[] intArray59 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime56, 3038395L);
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.lang.String str67 = property65.getAsShortText(locale66);
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.lang.String str71 = property65.getAsText(locale69);
        java.util.Locale locale72 = java.util.Locale.ITALIAN;
        int int73 = property65.getMaximumShortTextLength(locale72);
        org.joda.time.chrono.ISOChronology iSOChronology74 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField75 = iSOChronology74.dayOfYear();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.hourOfDay();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime76.minusMinutes((int) '4');
        int int82 = property65.compareTo((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime83 = property65.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime84 = property65.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusYears(58);
        int[] intArray88 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime86, (long) 35311328);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[UTC]" + "'", str3, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 25 + "'", int14 == 25);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:53:25.578" + "'", str16, "2022-02-11T09:53:25.578");
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9" + "'", str24, "9");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (Canada)" + "'", str27, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "9" + "'", str28, "9");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T10:00:00.000" + "'", str31, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "9" + "'", str44, "9");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "English (Canada)" + "'", str47, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "9" + "'", str48, "9");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2022, 2, 11, 36000000]");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1970, 1, 1, 3038395]");
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "9" + "'", str67, "9");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English (Canada)" + "'", str70, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "9" + "'", str71, "9");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(iSOChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1970, 1, 1, 35311328]");
    }

    @Test
    public void test17351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17351");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        java.lang.String str3 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.era();
        org.joda.time.DurationField durationField5 = iSOChronology1.days();
        long long9 = iSOChronology1.add(100L, (long) '4', 100);
        org.joda.time.Chronology chronology10 = iSOChronology1.withUTC();
        org.joda.time.DurationField durationField11 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(1644572669283L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology1.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = localDateTime18.toDateTime(dateTimeZone29);
        org.joda.time.Instant instant32 = dateTime31.toInstant();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str37 = iSOChronology36.toString();
        org.joda.time.DurationField durationField38 = iSOChronology36.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        int[] intArray45 = iSOChronology36.get((org.joda.time.ReadablePartial) localDateTime41, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = iSOChronology36.getZone();
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = localDateTime35.toDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        boolean boolean50 = instant32.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str52 = iSOChronology51.toString();
        org.joda.time.DurationField durationField53 = iSOChronology51.months();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology51.dayOfYear();
        org.joda.time.DurationField durationField55 = iSOChronology51.hours();
        boolean boolean56 = instant32.equals((java.lang.Object) durationField55);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField58 = iSOChronology57.halfdays();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology57.era();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withYearOfEra((int) 'a');
        int[] intArray68 = iSOChronology57.get((org.joda.time.ReadablePartial) localDateTime64, (long) 100);
        org.joda.time.LocalDateTime.Property property69 = localDateTime64.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime70 = property69.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.dayOfYear();
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.lang.String str73 = locale72.getVariant();
        int int74 = property71.getMaximumShortTextLength(locale72);
        int int75 = property71.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property71.getFieldType();
        int int77 = property71.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property71.getFieldType();
        boolean boolean79 = instant32.isSupported(dateTimeFieldType78);
        int int80 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) instant32);
        boolean boolean81 = dateTimeZone15.isFixed();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISOChronology[UTC]" + "'", str3, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 5300L + "'", long9 == 5300L);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test17352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17352");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology5.era();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra((int) 'a');
        int[] intArray16 = iSOChronology5.get((org.joda.time.ReadablePartial) localDateTime12, (long) 100);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withDurationAdded(readableDuration17, (int) '4');
        long long21 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime19, 2022L);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = localDateTime19.getFieldTypes();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.minuteOfHour();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("en");
        java.util.Locale locale26 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = property32.getAsShortText(locale33);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = property32.getAsText(locale36);
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        int int40 = property32.getMaximumShortTextLength(locale39);
        java.lang.String str41 = locale26.getDisplayName(locale39);
        java.lang.String str42 = locale39.getDisplayVariant();
        java.lang.String str43 = locale25.getDisplayScript(locale39);
        int int44 = property23.getMaximumShortTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime45 = property23.roundHalfFloorCopy();
        org.joda.time.DurationField durationField46 = property23.getLeapDurationField();
        org.joda.time.DurationField durationField47 = property23.getDurationField();
        org.joda.time.DurationField durationField48 = property23.getRangeDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644573205670L + "'", long21 == 1644573205670L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9" + "'", str34, "9");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English (Canada)" + "'", str37, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9" + "'", str38, "9");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (Cina)" + "'", str41, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test17353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17353");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime7.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withSecondOfMinute((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.withDurationAdded(readableDuration20, 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusYears((int) (short) 0);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withPeriodAdded(readablePeriod26, 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.yearOfEra();
        org.joda.time.DurationField durationField30 = property29.getRangeDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNull(durationField30);
    }

    @Test
    public void test17354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17354");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str7 = dateTimeZone6.getID();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        java.lang.String str12 = dateTimeZone6.getShortName((long) 35123607);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.halfdays();
        java.lang.String str15 = iSOChronology13.toString();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology13.era();
        boolean boolean20 = dateTimeZone6.equals((java.lang.Object) iSOChronology13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test17355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17355");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder5.setRegion("US");
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        org.joda.time.Chronology chronology14 = iSOChronology9.withZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(1707644906533L, dateTimeZone13);
        long long18 = dateTimeZone13.convertLocalToUTC(1707644762827L, false);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.lang.String str22 = locale21.getDisplayVariant();
        java.lang.String str25 = nameProvider20.getName(locale21, "English (Canada)", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider20);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider20);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider20);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder29.clear();
        java.util.Locale.Builder builder32 = builder29.addUnicodeLocaleAttribute("Fri");
        java.util.Locale locale33 = builder29.build();
        java.lang.String str36 = nameProvider20.getName(locale33, "tedesco", "ISOChronology[Etc/UTC]");
        java.lang.String str37 = dateTimeZone13.getShortName((-19031L), locale33);
        java.util.Locale.Builder builder38 = builder5.setLocale(locale33);
        java.util.Locale.Builder builder39 = builder5.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1707644762821L + "'", long18 == 1707644762821L);
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.006" + "'", str37, "+00:00:00.006");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test17356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17356");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(obj0, dateTimeZone14);
        int int18 = localDateTime17.getMillisOfSecond();
        int int19 = localDateTime17.getWeekOfWeekyear();
        int int20 = localDateTime17.getEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusHours(71122738);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 745 + "'", int18 == 745);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test17357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17357");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("UTC");
        java.util.Locale.Builder builder7 = builder3.setScript("");
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsShortText(locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = property13.getAsText(locale17);
        org.joda.time.LocalDateTime localDateTime20 = property13.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str22 = iSOChronology21.toString();
        org.joda.time.DurationField durationField23 = iSOChronology21.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays((int) (byte) 0);
        int[] intArray30 = iSOChronology21.get((org.joda.time.ReadablePartial) localDateTime26, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = iSOChronology21.getZone();
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfCentury();
        int int37 = property36.getMaximumValueOverall();
        org.joda.time.DurationField durationField38 = property36.getDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.lang.String str46 = property44.getAsShortText(locale45);
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.lang.String str50 = property44.getAsText(locale48);
        java.lang.String str51 = property36.getAsText(locale48);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("2072-02-13T09:44:14.090");
        org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology54.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology54);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str58 = iSOChronology57.toString();
        org.joda.time.DurationField durationField59 = iSOChronology57.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays((int) (byte) 0);
        int[] intArray66 = iSOChronology57.get((org.joda.time.ReadablePartial) localDateTime62, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = iSOChronology57.getZone();
        java.lang.String str68 = dateTimeZone67.toString();
        org.joda.time.DateTime dateTime69 = localDateTime56.toDateTime(dateTimeZone67);
        int int71 = dateTimeZone67.getOffsetFromLocal(0L);
        long long75 = dateTimeZone67.convertLocalToUTC((long) 100, true, (long) 22);
        java.util.Locale locale78 = new java.util.Locale("0");
        java.lang.String str79 = dateTimeZone67.getName(1644572643331L, locale78);
        java.lang.String str80 = locale53.getDisplayCountry(locale78);
        java.lang.String str81 = locale48.getDisplayName(locale53);
        java.util.Locale.Builder builder82 = builder7.setLocale(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder84 = builder82.setRegion("2022-02-11T09:51:10.787Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:51:10.787Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English (Canada)" + "'", str18, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9" + "'", str46, "9");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English (Canada)" + "'", str49, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "9" + "'", str50, "9");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "22" + "'", str51, "22");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(iSOChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[UTC]" + "'", str58, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L + "'", long75 == 100L);
        org.junit.Assert.assertEquals(locale78.toString(), "0");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "English (Canada)" + "'", str81, "English (Canada)");
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test17358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17358");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DurationField durationField6 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.year();
        org.joda.time.DurationField durationField9 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test17359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17359");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField22 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField24 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[UTC]" + "'", str4, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test17360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17360");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfMonth();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        int int19 = property17.getMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime35 = localDateTime22.toDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime35.getZone();
        long long38 = dateTime35.getMillis();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime35.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField41 = iSOChronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.era();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withYearOfEra((int) 'a');
        int[] intArray51 = iSOChronology40.get((org.joda.time.ReadablePartial) localDateTime47, (long) 100);
        org.joda.time.LocalDateTime.Property property52 = localDateTime47.centuryOfEra();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.TimeZone.setDefault(timeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology60.dayOfYear();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology60);
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str64 = iSOChronology63.toString();
        org.joda.time.DurationField durationField65 = iSOChronology63.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology66);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusDays((int) (byte) 0);
        int[] intArray72 = iSOChronology63.get((org.joda.time.ReadablePartial) localDateTime68, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = iSOChronology63.getZone();
        java.lang.String str74 = dateTimeZone73.toString();
        org.joda.time.DateTime dateTime75 = localDateTime62.toDateTime(dateTimeZone73);
        org.joda.time.chrono.ISOChronology iSOChronology76 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology76.dayOfYear();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology76);
        org.joda.time.chrono.ISOChronology iSOChronology79 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str80 = iSOChronology79.toString();
        org.joda.time.DurationField durationField81 = iSOChronology79.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology82 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField83 = iSOChronology82.dayOfYear();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology82);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.minusDays((int) (byte) 0);
        int[] intArray88 = iSOChronology79.get((org.joda.time.ReadablePartial) localDateTime84, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone89 = iSOChronology79.getZone();
        java.lang.String str90 = dateTimeZone89.toString();
        org.joda.time.DateTime dateTime91 = localDateTime78.toDateTime(dateTimeZone89);
        boolean boolean92 = dateTime75.isAfter((org.joda.time.ReadableInstant) dateTime91);
        int int93 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) dateTime91);
        int int94 = property52.getDifference((org.joda.time.ReadableInstant) dateTime91);
        int int95 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime91);
        int int96 = property17.getDifference((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T10:00:00.000" + "'", str14, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1644573205831L + "'", long38 == 1644573205831L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(iSOChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(iSOChronology79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ISOChronology[UTC]" + "'", str80, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(iSOChronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "UTC" + "'", str90, "UTC");
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 245 + "'", int96 == 245);
    }

    @Test
    public void test17361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17361");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfDay();
        org.joda.time.Chronology chronology7 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property14.getAsShortText(locale15);
        org.joda.time.LocalDateTime localDateTime17 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfCeilingCopy();
        int int20 = localDateTime19.getDayOfYear();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.year();
        int[] intArray23 = chronology7.get((org.joda.time.ReadablePartial) localDateTime19, 0L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 0]");
    }

    @Test
    public void test17362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17362");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.lang.String str14 = property5.getAsShortText(locale12);
        org.joda.time.DurationField durationField15 = property5.getDurationField();
        org.joda.time.LocalDateTime localDateTime17 = property5.setCopy("0");
        long long18 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime19 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusHours(770);
        int int22 = localDateTime19.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test17363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17363");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField13 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.secondOfMinute();
        org.joda.time.DurationField durationField15 = iSOChronology0.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test17364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17364");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        int int4 = localDateTime3.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = property10.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime17 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = property10.roundHalfEvenCopy();
        boolean boolean19 = localDateTime3.equals((java.lang.Object) localDateTime18);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime33 = localDateTime18.toDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        long long37 = dateTimeZone34.adjustOffset((long) 11, true);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone34);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = iSOChronology39.add(readablePeriod40, 1707644681489L, 30);
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology39.yearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology39);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusYears(35219646);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 25 + "'", int4 == 25);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 11L + "'", long37 == 11L);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1707644681489L + "'", long43 == 1707644681489L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test17365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17365");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        int int8 = localDateTime7.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property14.getAsShortText(locale15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = property14.getAsText(locale18);
        org.joda.time.LocalDateTime localDateTime21 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property14.roundHalfEvenCopy();
        boolean boolean23 = localDateTime7.equals((java.lang.Object) localDateTime22);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str25 = iSOChronology24.toString();
        org.joda.time.DurationField durationField26 = iSOChronology24.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays((int) (byte) 0);
        int[] intArray33 = iSOChronology24.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = iSOChronology24.getZone();
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime37 = localDateTime22.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.Chronology chronology39 = iSOChronology1.withZone(dateTimeZone38);
        org.joda.time.DurationField durationField40 = iSOChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(537);
        java.lang.String str45 = dateTimeZone43.getNameKey(1707644707886L);
        long long48 = dateTimeZone43.adjustOffset((long) 2030, false);
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMillis(56);
        int int56 = localDateTime55.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField61 = iSOChronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology60.era();
        org.joda.time.DurationField durationField63 = iSOChronology60.halfdays();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology60.centuryOfEra();
        java.lang.Object obj65 = null;
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.dayOfYear();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology66);
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str70 = iSOChronology69.toString();
        org.joda.time.DurationField durationField71 = iSOChronology69.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology72 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology72.dayOfYear();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology72);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusDays((int) (byte) 0);
        int[] intArray78 = iSOChronology69.get((org.joda.time.ReadablePartial) localDateTime74, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone79 = iSOChronology69.getZone();
        java.lang.String str80 = dateTimeZone79.toString();
        org.joda.time.DateTime dateTime81 = localDateTime68.toDateTime(dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(obj65, dateTimeZone79);
        org.joda.time.Chronology chronology83 = iSOChronology60.withZone(dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime58, dateTimeZone79);
        int int85 = localDateTime84.getWeekyear();
        boolean boolean86 = dateTimeZone43.isLocalDateTimeGap(localDateTime84);
        org.joda.time.Chronology chronology87 = iSOChronology1.withZone(dateTimeZone43);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 25 + "'", int8 == 25);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English (Canada)" + "'", str19, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9" + "'", str20, "9");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2030L + "'", long48 == 2030L);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20 + "'", int56 == 20);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ISOChronology[UTC]" + "'", str70, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(iSOChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2030 + "'", int85 == 2030);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(chronology87);
    }

    @Test
    public void test17366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17366");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime32 = localDateTime17.toDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime32.getZone();
        long long36 = dateTimeZone33.adjustOffset((long) 11, true);
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone33);
        long long39 = dateTimeZone33.previousTransition(71104975L);
        java.lang.String str40 = dateTimeZone33.getID();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 26 + "'", int3 == 26);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 11L + "'", long36 == 11L);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 71104975L + "'", long39 == 71104975L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
    }

    @Test
    public void test17367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17367");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = iSOChronology0.getDateTimeMillis(796, 71104975, 33035117, 35538925);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71104975 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17368");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        long long12 = dateTimeZone8.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond(5);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str23 = iSOChronology22.toString();
        org.joda.time.DurationField durationField24 = iSOChronology22.weeks();
        boolean boolean25 = property21.equals((java.lang.Object) durationField24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property21.getFieldType();
        boolean boolean27 = localDateTime13.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime13.withDayOfYear(17);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusYears(35526593);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime29.getFields();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2022L + "'", long12 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
    }

    @Test
    public void test17369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17369");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        java.lang.String str7 = property5.getAsString();
        java.lang.String str8 = property5.getAsText();
        boolean boolean9 = property5.isLeap();
        int int10 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property5.withMaximumValue();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9" + "'", str8, "9");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test17370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17370");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfEra();
        int int6 = localDateTime2.getWeekyear();
        int int7 = localDateTime2.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withWeekyear(35195131);
        org.joda.time.DurationFieldType durationFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFieldAdded(durationFieldType10, 31934397);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test17371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17371");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) 'a');
        int[] intArray14 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1);
        int int18 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        boolean boolean23 = iSOChronology0.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology0.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.era();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test17372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17372");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        boolean boolean31 = dateTimeZone29.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime32 = localDateTime17.toDateTime(dateTimeZone29);
        int int33 = localDateTime17.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime17.plusMonths(4);
        org.joda.time.DateTime dateTime36 = localDateTime17.toDateTime();
        int int37 = localDateTime17.getYearOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusMonths((int) 'u');
        java.lang.String str47 = localDateTime46.toString();
        int int48 = localDateTime46.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundHalfEvenCopy();
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = property56.getAsShortText(locale57);
        java.lang.String str59 = locale57.getISO3Country();
        java.lang.String str60 = locale57.getLanguage();
        java.lang.String str61 = property49.getAsText(locale57);
        java.util.Locale locale64 = new java.util.Locale("0097-02-18T09:44:00.981", "2031-11-12T09:44:11.126");
        int int65 = property49.getMaximumShortTextLength(locale64);
        java.lang.String str66 = property49.toString();
        org.joda.time.LocalDateTime localDateTime67 = property49.withMaximumValue();
        boolean boolean68 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime67);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 26 + "'", int3 == 26);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2031-11-12T09:53:26.119" + "'", str47, "2031-11-12T09:53:26.119");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 46 + "'", int48 == 46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9" + "'", str58, "9");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "en" + "'", str60, "en");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "35606119" + "'", str61, "35606119");
        org.junit.Assert.assertEquals(locale64.toString(), "0097-02-18t09:44:00.981_2031-11-12T09:44:11.126");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Property[millisOfDay]" + "'", str66, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test17373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17373");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        int int24 = localDateTime21.getDayOfWeek();
        int int25 = localDateTime21.getSecondOfMinute();
        int int26 = localDateTime21.getMillisOfDay();
        org.joda.time.DurationFieldType durationFieldType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime21.withFieldAdded(durationFieldType27, 833);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35606160]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707645206160L + "'", long23 == 1707645206160L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 26 + "'", int25 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35606160 + "'", int26 == 35606160);
    }

    @Test
    public void test17374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17374");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.Chronology chronology11 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.monthOfYear();
        int[] intArray21 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime16, (long) (short) 10);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusWeeks((-1));
        java.lang.String str32 = localDateTime31.toString();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime31.getFieldTypes();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str36 = iSOChronology35.toString();
        org.joda.time.DurationField durationField37 = iSOChronology35.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        int[] intArray44 = iSOChronology35.get((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = iSOChronology35.getZone();
        org.joda.time.DurationField durationField46 = iSOChronology35.years();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.Chronology chronology50 = iSOChronology35.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDateTime31.toDateTime(dateTimeZone49);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology52.dayOfYear();
        java.lang.String str54 = iSOChronology52.toString();
        org.joda.time.DurationField durationField55 = iSOChronology52.hours();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology52.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology52.monthOfYear();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology52.year();
        org.joda.time.chrono.ISOChronology iSOChronology59 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.lang.String str66 = property64.getAsShortText(locale65);
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.lang.String str69 = locale67.getDisplayName(locale68);
        java.lang.String str70 = property64.getAsText(locale68);
        org.joda.time.LocalDateTime localDateTime71 = property64.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology72 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str73 = iSOChronology72.toString();
        org.joda.time.DurationField durationField74 = iSOChronology72.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology75 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField76 = iSOChronology75.dayOfYear();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusDays((int) (byte) 0);
        int[] intArray81 = iSOChronology72.get((org.joda.time.ReadablePartial) localDateTime77, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone82 = iSOChronology72.getZone();
        java.lang.String str83 = dateTimeZone82.toString();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime71, dateTimeZone82);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime84.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime91 = localDateTime84.withYearOfCentury((int) (short) 10);
        long long93 = iSOChronology52.set((org.joda.time.ReadablePartial) localDateTime84, (long) (short) 1);
        boolean boolean94 = dateTime51.equals((java.lang.Object) iSOChronology52);
        org.joda.time.DateTimeField dateTimeField95 = iSOChronology52.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 10]");
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0097-02-18T09:53:26.191" + "'", str32, "0097-02-18T09:53:26.191");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[UTC]" + "'", str54, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(iSOChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "9" + "'", str66, "9");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English (Canada)" + "'", str69, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "9" + "'", str70, "9");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(iSOChronology72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[UTC]" + "'", str73, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(iSOChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1644573206191L + "'", long93 == 1644573206191L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test17375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17375");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        java.lang.String str12 = dateTimeZone10.toString();
        int int14 = dateTimeZone10.getStandardOffset((long) 1);
        long long16 = dateTimeZone10.previousTransition((long) 9);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.era();
        org.joda.time.DurationField durationField20 = iSOChronology17.hours();
        org.joda.time.DurationField durationField21 = iSOChronology17.hours();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = property27.getAsShortText(locale28);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = property27.getAsText(locale31);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        int int35 = property27.getMaximumShortTextLength(locale34);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("hi!");
        int int38 = property27.getMaximumShortTextLength(locale37);
        org.joda.time.LocalDateTime localDateTime39 = property27.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plus(readableDuration40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withWeekyear((int) ' ');
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.yearOfEra();
        long long47 = iSOChronology17.set((org.joda.time.ReadablePartial) localDateTime41, (long) 845);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 9L + "'", long16 == 9L);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "9" + "'", str29, "9");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (Canada)" + "'", str32, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1644570000000L + "'", long47 == 1644570000000L);
    }

    @Test
    public void test17376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17376");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) 'a');
        int[] intArray14 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1);
        int int18 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        boolean boolean23 = iSOChronology0.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology0.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
        org.joda.time.DurationField durationField26 = iSOChronology25.months();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.halfdayOfDay();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.TimeZone.setDefault(timeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.Chronology chronology35 = iSOChronology25.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology25.secondOfDay();
        org.joda.time.DurationField durationField37 = iSOChronology25.hours();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology25.weekyearOfCentury();
        org.joda.time.DurationField durationField39 = iSOChronology25.weeks();
        org.joda.time.DurationField durationField40 = iSOChronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology25.millisOfSecond();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test17377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17377");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str7 = dateTimeZone6.getID();
        java.lang.Object obj8 = null;
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str13 = iSOChronology12.toString();
        org.joda.time.DurationField durationField14 = iSOChronology12.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        int[] intArray21 = iSOChronology12.get((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology12.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj8, dateTimeZone22);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale27.getDisplayCountry();
        java.lang.String str30 = dateTimeZone22.getShortName((long) 59, locale27);
        long long32 = dateTimeZone22.convertUTCToLocal((long) 2022);
        long long34 = dateTimeZone22.previousTransition(35066445L);
        long long36 = dateTimeZone22.convertUTCToLocal((long) 1);
        long long38 = dateTimeZone6.getMillisKeepLocal(dateTimeZone22, 117L);
        long long41 = dateTimeZone6.convertLocalToUTC(1707644809791L, true);
        long long44 = dateTimeZone6.convertLocalToUTC(1644572970680L, true);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2022L + "'", long32 == 2022L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35066445L + "'", long34 == 35066445L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 117L + "'", long38 == 117L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1707644809791L + "'", long41 == 1707644809791L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1644572970680L + "'", long44 == 1644572970680L);
    }

    @Test
    public void test17378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17378");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.dayOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17379");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = iSOChronology1.add(readablePeriod8, (long) 'u', (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(1644573600000L, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.Chronology chronology13 = iSOChronology1.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 117L + "'", long11 == 117L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test17380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17380");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfSecond();
        org.joda.time.Chronology chronology8 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusWeeks((-1));
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        java.lang.String str21 = iSOChronology19.toString();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology19.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology19.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = iSOChronology19.withZone(dateTimeZone24);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.hourOfDay();
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = property31.getAsShortText(locale32);
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = property31.getAsText(locale35);
        org.joda.time.LocalDateTime localDateTime38 = property31.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusSeconds(6);
        int[] intArray42 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime40, (long) 58);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime15, intArray42);
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField45 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str2, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str21, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9" + "'", str33, "9");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English (Canada)" + "'", str36, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9" + "'", str37, "9");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 721]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test17381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17381");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DurationField durationField5 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17382");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.era();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfEra((int) 'a');
        int[] intArray18 = iSOChronology7.get((org.joda.time.ReadablePartial) localDateTime14, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDateTime14.getFields();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusHours(1);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField23 = iSOChronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.era();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withYearOfEra((int) 'a');
        int[] intArray33 = iSOChronology22.get((org.joda.time.ReadablePartial) localDateTime29, (long) 100);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withDurationAdded(readableDuration34, (int) '4');
        int[] intArray37 = localDateTime36.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray37);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DurationField durationField40 = iSOChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone41 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str1, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 11, 35607053]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test17383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17383");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.time.ZoneId zoneId7 = timeZone3.toZoneId();
        boolean boolean8 = timeZone1.hasSameRules(timeZone3);
        java.lang.String str9 = timeZone1.getID();
        int int10 = timeZone1.getRawOffset();
        boolean boolean11 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test17384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17384");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsShortText(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = property15.getAsText(locale19);
        org.joda.time.LocalDateTime localDateTime22 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = property15.roundHalfEvenCopy();
        boolean boolean24 = localDateTime8.equals((java.lang.Object) localDateTime23);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str26 = iSOChronology25.toString();
        org.joda.time.DurationField durationField27 = iSOChronology25.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int[] intArray34 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology25.getZone();
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime38 = localDateTime23.toDateTime(dateTimeZone35);
        java.lang.String str39 = dateTime38.toString();
        int int40 = property5.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.halfdays();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology42.era();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology42);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        int int50 = localDateTime49.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = property56.getAsShortText(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = property56.getAsText(locale60);
        org.joda.time.LocalDateTime localDateTime63 = property56.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = property56.roundHalfEvenCopy();
        boolean boolean65 = localDateTime49.equals((java.lang.Object) localDateTime64);
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str67 = iSOChronology66.toString();
        org.joda.time.DurationField durationField68 = iSOChronology66.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology69.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusDays((int) (byte) 0);
        int[] intArray75 = iSOChronology66.get((org.joda.time.ReadablePartial) localDateTime71, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone76 = iSOChronology66.getZone();
        boolean boolean78 = dateTimeZone76.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime79 = localDateTime64.toDateTime(dateTimeZone76);
        java.lang.String str80 = dateTime79.toString();
        int int81 = property46.compareTo((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.chrono.ISOChronology iSOChronology83 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str84 = iSOChronology83.toString();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        long long88 = iSOChronology83.add(readablePeriod85, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField89 = iSOChronology83.halfdays();
        org.joda.time.DateTimeField dateTimeField90 = iSOChronology83.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField91 = iSOChronology83.dayOfYear();
        org.joda.time.DurationField durationField92 = iSOChronology83.centuries();
        org.joda.time.DateTimeField dateTimeField93 = iSOChronology83.weekyear();
        boolean boolean94 = dateTime38.equals((java.lang.Object) iSOChronology83);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27 + "'", int9 == 27);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English (Canada)" + "'", str20, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(iSOChronology25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str26, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T10:00:00.000+00:00:00.663" + "'", str39, "2022-02-11T10:00:00.000+00:00:00.663");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 27 + "'", int50 == 27);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9" + "'", str58, "9");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English (Canada)" + "'", str61, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9" + "'", str62, "9");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(iSOChronology66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str67, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTime79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-02-11T10:00:00.000+00:00:00.663" + "'", str80, "2022-02-11T10:00:00.000+00:00:00.663");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(iSOChronology83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str84, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test17385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17385");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.lang.String str8 = property5.getAsText();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundFloorCopy();
        java.util.Locale locale12 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Set<java.lang.Character> charSet14 = locale12.getExtensionKeys();
        java.lang.String str15 = locale12.getDisplayScript();
        java.lang.String str16 = locale12.getVariant();
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.getDefault(category17);
        java.util.Locale locale19 = java.util.Locale.US;
        java.util.Locale.setDefault(category17, locale19);
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale12.getDisplayScript(locale19);
        java.lang.String str23 = locale19.getScript();
        org.joda.time.LocalDateTime localDateTime24 = property5.setCopy("1", locale19);
        org.joda.time.LocalDateTime localDateTime25 = property5.getLocalDateTime();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9" + "'", str8, "9");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals(locale12.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test17386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17386");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str2, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17387");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str13 = iSOChronology12.toString();
        org.joda.time.DurationField durationField14 = iSOChronology12.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        int[] intArray21 = iSOChronology12.get((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology12.getZone();
        long long26 = dateTimeZone22.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = iSOChronology29.add(readablePeriod31, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField35 = iSOChronology29.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusDays((int) (short) 1);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str44 = iSOChronology43.toString();
        org.joda.time.DurationField durationField45 = iSOChronology43.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        int[] intArray52 = iSOChronology43.get((org.joda.time.ReadablePartial) localDateTime48, (long) 100);
        iSOChronology29.validate((org.joda.time.ReadablePartial) localDateTime42, intArray52);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime28, intArray52);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime28.withDurationAdded(readableDuration55, (int) ' ');
        int int58 = localDateTime57.getMillisOfDay();
        int int59 = localDateTime57.getWeekyear();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.plus(readableDuration60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusMonths(48);
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str1, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str13, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-663L) + "'", long26 == (-663L));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(iSOChronology29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str30, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(iSOChronology43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str44, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35607156 + "'", int58 == 35607156);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test17388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17388");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        int int15 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.minusSeconds(2022);
        int int20 = localDateTime19.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withEra(0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, 71282747);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.minusDays(0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test17389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17389");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = iSOChronology0.withZone(dateTimeZone6);
        org.joda.time.DurationField durationField8 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology10 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.halfdays();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.TimeZone.setDefault(timeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.Chronology chronology21 = iSOChronology12.withZone(dateTimeZone20);
        long long24 = dateTimeZone20.adjustOffset((-1L), false);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 35042587, dateTimeZone20);
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str27 = iSOChronology26.toString();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.weekOfWeekyear();
        long long32 = iSOChronology26.add((long) (short) 10, (long) 35054090, 3);
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology26.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField35 = iSOChronology34.halfdays();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.TimeZone.setDefault(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.Chronology chronology43 = iSOChronology34.withZone(dateTimeZone42);
        long long46 = dateTimeZone42.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withMillisOfSecond(5);
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str57 = iSOChronology56.toString();
        org.joda.time.DurationField durationField58 = iSOChronology56.weeks();
        boolean boolean59 = property55.equals((java.lang.Object) durationField58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property55.getFieldType();
        boolean boolean61 = localDateTime47.isSupported(dateTimeFieldType60);
        boolean boolean62 = iSOChronology26.equals((java.lang.Object) dateTimeFieldType60);
        org.joda.time.LocalDateTime.Property property63 = localDateTime25.property(dateTimeFieldType60);
        int int64 = localDateTime25.getSecondOfMinute();
        int int65 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime25.plusYears(35088377);
        int[] intArray69 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime25, 864L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str2, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(iSOChronology26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str27, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 105162280L + "'", long32 == 105162280L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2022L + "'", long46 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(iSOChronology56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str57, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 587 + "'", int65 == 587);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1970, 1, 1, 1527]");
    }

    @Test
    public void test17390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17390");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        int int5 = localDateTime4.getDayOfWeek();
        java.lang.String str6 = localDateTime4.toString();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plus(readableDuration7);
        int int9 = localDateTime8.getHourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.673" + "'", str6, "1970-01-01T00:00:00.673");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test17391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17391");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet29);
        java.util.Collection<java.lang.String> strCollection31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection31);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.util.Locale.setDefault(locale33);
        java.util.Set<java.lang.String> strSet37 = locale33.getUnicodeLocaleAttributes();
        int int38 = strSet37.size();
        java.util.Spliterator<java.lang.String> strSpliterator39 = strSet37.spliterator();
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet37);
        java.lang.String[] strArray47 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.lang.String[] strArray55 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strList56);
        boolean boolean59 = strSet48.containsAll((java.util.Collection<java.lang.String>) strList56);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone63 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean64 = timeZone61.hasSameRules(timeZone63);
        java.util.TimeZone.setDefault(timeZone63);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        int int67 = timeZone63.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone72 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean73 = timeZone70.hasSameRules(timeZone72);
        java.util.TimeZone.setDefault(timeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        boolean boolean76 = timeZone63.hasSameRules(timeZone72);
        boolean boolean77 = strSet48.remove((java.lang.Object) timeZone72);
        java.lang.Object[] objArray78 = strSet48.toArray();
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet48, filteringMode79);
        java.util.Locale locale82 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str83 = locale82.getDisplayCountry();
        java.util.Locale locale84 = java.util.Locale.CANADA;
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.lang.String str86 = locale84.getDisplayName(locale85);
        java.util.Locale.setDefault(locale84);
        java.util.Set<java.lang.String> strSet88 = locale84.getUnicodeLocaleAttributes();
        java.lang.String str89 = locale82.getDisplayCountry(locale84);
        java.lang.String str90 = locale82.getScript();
        java.util.Set<java.lang.String> strSet91 = locale82.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream92 = strSet91.stream();
        boolean boolean93 = strSet48.containsAll((java.util.Collection<java.lang.String>) strSet91);
        java.util.Locale locale94 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet95 = locale94.getUnicodeLocaleAttributes();
        boolean boolean96 = strSet91.addAll((java.util.Collection<java.lang.String>) strSet95);
        java.util.Iterator<java.lang.String> strItor97 = strSet95.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (Canada)" + "'", str28, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English (Canada)" + "'", str35, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[0, 2022-02-11T09:43:52.830, Greenwich Mean Time, , Etc/UTC]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[0, 2022-02-11T09:43:52.830, Greenwich Mean Time, , Etc/UTC]");
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertEquals(locale82.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "English (Canada)" + "'", str86, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(strStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(strItor97);
    }

    @Test
    public void test17392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17392");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.Chronology chronology15 = iSOChronology0.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = iSOChronology0.centuries();
        org.joda.time.DurationField durationField17 = iSOChronology0.halfdays();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str1, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test17393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17393");
        java.util.Locale locale1 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale1.getDisplayCountry(locale3);
        java.lang.String str9 = locale1.getScript();
        java.lang.String str10 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English (Canada)" + "'", str5, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test17394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17394");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfEvenCopy();
        int int16 = localDateTime15.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusMillis(3);
        int int19 = localDateTime18.getEra();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plus(readableDuration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMillis(13);
        int int24 = localDateTime23.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plus(readablePeriod25);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test17395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17395");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("430");
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setUnicodeLocaleKeyword("2022-02-11t09:45:56.509", "2022-02-11T09:48:34.068");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11t09:45:56.509 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test17396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17396");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withDurationAdded(readableDuration21, (int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDateTime23.getFieldType((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime7.property(dateTimeFieldType25);
        org.joda.time.DurationField durationField27 = property26.getDurationField();
        org.joda.time.DurationField durationField28 = property26.getLeapDurationField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 27 + "'", int3 == 27);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test17397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17397");
        java.util.Locale locale0 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = property6.getAsShortText(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = property6.getAsText(locale10);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        int int14 = property6.getMaximumShortTextLength(locale13);
        java.lang.String str15 = locale0.getDisplayName(locale13);
        java.lang.String str16 = locale13.getDisplayVariant();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str19 = locale13.getDisplayCountry(locale18);
        java.util.Set<java.lang.String> strSet20 = locale13.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet21.spliterator();
        java.lang.Object[] objArray23 = strSet21.toArray();
        boolean boolean24 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet21);
        int int25 = strSet21.size();
        java.util.stream.Stream<java.lang.String> strStream26 = strSet21.parallelStream();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        java.lang.String str29 = iSOChronology27.toString();
        org.joda.time.DurationField durationField30 = iSOChronology27.hours();
        org.joda.time.DurationField durationField31 = iSOChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology27.secondOfDay();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology27.hourOfHalfday();
        org.joda.time.DurationField durationField34 = iSOChronology27.halfdays();
        org.joda.time.Chronology chronology35 = iSOChronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology27.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = strSet21.remove((java.lang.Object) dateTimeField37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9" + "'", str8, "9");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 576 + "'", int25 == 576);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str29, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test17398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17398");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField4 = iSOChronology0.hours();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = property11.getAsShortText(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = property11.getAsText(locale15);
        org.joda.time.LocalDateTime localDateTime18 = property11.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime18, dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withYearOfCentury((int) (short) 10);
        int int39 = localDateTime38.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withPeriodAdded(readablePeriod40, 9);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readablePeriod43);
        int[] intArray46 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime42, 1707644672408L);
        java.util.Date date47 = localDateTime42.toDate();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.fromDateFields(date47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours(952);
        int int51 = localDateTime48.getEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str1, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(iSOChronology19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str20, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.663" + "'", str30, "+00:00:00.663");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[2024, 2, 11, 35073071]");
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Thu Feb 11 09:53:27 GMT 2010");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test17399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17399");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        int int7 = localDateTime6.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = property13.getAsShortText(locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = property13.getAsText(locale17);
        org.joda.time.LocalDateTime localDateTime20 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = property13.roundHalfEvenCopy();
        boolean boolean22 = localDateTime6.equals((java.lang.Object) localDateTime21);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        boolean boolean35 = dateTimeZone33.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime36 = localDateTime21.toDateTime(dateTimeZone33);
        java.util.Locale locale38 = java.util.Locale.ITALY;
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.lang.String str40 = locale38.getDisplayScript(locale39);
        java.lang.String str41 = dateTimeZone33.getShortName(1644572652885L, locale38);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        boolean boolean45 = dateTimeZone1.isLocalDateTimeGap(localDateTime42);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str47 = iSOChronology46.toString();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology46.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology46.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology46.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology46);
        int[] intArray53 = localDateTime52.getValues();
        boolean boolean54 = localDateTime42.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27 + "'", int7 == 27);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English (Canada)" + "'", str18, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iSOChronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str24, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.663" + "'", str41, "+00:00:00.663");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(iSOChronology46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str47, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2022, 2, 11, 35607452]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test17400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17400");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        long long10 = iSOChronology0.add((-562L), (long) 67, 1999);
        org.joda.time.DurationField durationField11 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str1, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 133371L + "'", long10 == 133371L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17401");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField6 = iSOChronology0.years();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str2, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test17402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17402");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.hours();
        org.joda.time.DurationField durationField7 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DurationField durationField9 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str1, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17403");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str2, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17404");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField7 = iSOChronology1.minutes();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 0);
        int int13 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMillis(51);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.era();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfEra((int) 'a');
        int[] intArray28 = iSOChronology17.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localDateTime24.getFields();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.minusHours(1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime24.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime24.withSecondOfMinute((int) (short) 10);
        boolean boolean37 = localDateTime16.isEqual((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plus(readablePeriod38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.year();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusHours(71368896);
        int[] intArray46 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime44, 1013424385104L);
        org.joda.time.DurationField durationField47 = iSOChronology1.minutes();
        org.joda.time.DurationField durationField48 = iSOChronology1.millis();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[2002, 2, 11, 38785767]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test17405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17405");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DurationField durationField12 = iSOChronology0.months();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks(33035117);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(16874184);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfYear(35521872);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35521872 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str1, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str11, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17406");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Locale.setDefault(locale4);
        java.util.Set<java.lang.String> strSet8 = locale4.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Iterator<java.lang.String> strItor10 = strSet3.iterator();
        java.util.Locale locale12 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale.setDefault(locale14);
        java.util.Set<java.lang.String> strSet18 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale12.getDisplayCountry(locale14);
        boolean boolean20 = locale12.hasExtensions();
        java.util.Set<java.lang.String> strSet21 = locale12.getUnicodeLocaleKeys();
        boolean boolean22 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.getDefault(category23);
        java.util.Locale locale25 = java.util.Locale.US;
        java.util.Locale.setDefault(category23, locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleAttributes();
        boolean boolean28 = strSet27.isEmpty();
        java.lang.String[] strArray39 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        java.util.Iterator<java.lang.String> strItor42 = strSet40.iterator();
        boolean boolean43 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet40);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Set<java.lang.String> strSet47 = locale44.getUnicodeLocaleKeys();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.util.Locale.setDefault(locale48);
        java.util.Set<java.lang.String> strSet52 = locale48.getUnicodeLocaleAttributes();
        boolean boolean53 = strSet47.removeAll((java.util.Collection<java.lang.String>) strSet52);
        java.util.Iterator<java.lang.String> strItor54 = strSet47.iterator();
        java.util.stream.Stream<java.lang.String> strStream55 = strSet47.parallelStream();
        boolean boolean56 = strSet40.containsAll((java.util.Collection<java.lang.String>) strSet47);
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray57 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray58 = strSet47.toArray(genericDeclarationArray57);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray59 = strSet21.toArray((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray58);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "English (Canada)" + "'", str2, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertEquals(locale12.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English (Canada)" + "'", str16, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "English (Canada)" + "'", str46, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "English (Canada)" + "'", str50, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(genericDeclarationArray57);
        org.junit.Assert.assertNotNull(genericDeclarationArray58);
        org.junit.Assert.assertNotNull(annotatedElementArray59);
    }

    @Test
    public void test17407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17407");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.lang.String str9 = property7.getAsShortText(locale8);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = property7.getAsText(locale11);
        org.joda.time.LocalDateTime localDateTime14 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = property7.roundHalfEvenCopy();
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusWeeks((int) 'x');
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        long long37 = dateTimeZone33.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale38 = java.util.Locale.US;
        boolean boolean39 = dateTimeZone33.equals((java.lang.Object) locale38);
        long long43 = dateTimeZone33.convertLocalToUTC((long) ' ', true, (long) '4');
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 'u', dateTimeZone33);
        org.joda.time.DateTime dateTime45 = localDateTime15.toDateTime(dateTimeZone33);
        int int46 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.TimeZone timeZone48 = dateTimeZone1.toTimeZone();
        int int49 = timeZone48.getRawOffset();
        timeZone48.setRawOffset(552);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9" + "'", str9, "9");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9" + "'", str13, "9");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T10:00:00.000" + "'", str16, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+00:00:00.663]" + "'", str24, "ISOChronology[+00:00:00.663]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 1, 763]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-663L) + "'", long37 == (-663L));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-631L) + "'", long43 == (-631L));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test17408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17408");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds(23);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMaximumValue();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str30 = iSOChronology29.toString();
        org.joda.time.DurationField durationField31 = iSOChronology29.weeks();
        boolean boolean32 = property28.equals((java.lang.Object) durationField31);
        org.joda.time.LocalDateTime localDateTime33 = property28.withMinimumValue();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = localDateTime33.getFieldTypes();
        int int36 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DurationField durationField37 = property21.getDurationField();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test17409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17409");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.years();
        org.joda.time.Chronology chronology3 = iSOChronology0.withUTC();
        java.lang.Class<?> wildcardClass4 = iSOChronology0.getClass();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test17410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17410");
        java.util.Locale locale2 = new java.util.Locale("0024-02-11T09:47:53.925", "0097-02-18T09:50:16.479");
        org.junit.Assert.assertEquals(locale2.toString(), "0024-02-11t09:47:53.925_0097-02-18T09:50:16.479");
    }

    @Test
    public void test17411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17411");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.lang.String[] strArray15 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Iterator<java.lang.String> strItor18 = strSet16.iterator();
        java.lang.Object[] objArray19 = strSet16.toArray();
        java.lang.Object[] objArray20 = strSet16.toArray();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet16.parallelStream();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList31);
        java.util.stream.Stream<java.lang.String> strStream34 = strList33.parallelStream();
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.util.Locale.setDefault(locale40);
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleAttributes();
        boolean boolean45 = strSet39.removeAll((java.util.Collection<java.lang.String>) strSet44);
        java.util.Iterator<java.lang.String> strItor46 = strSet39.iterator();
        java.util.stream.Stream<java.lang.String> strStream47 = strSet39.parallelStream();
        java.lang.Object[] objArray48 = strSet39.toArray();
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet39);
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str55 = nameProvider50.getName(locale51, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String str61 = nameProvider50.getShortName(locale56, "und", "2022-02-11T09:44:00.457");
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str64 = locale63.getISO3Language();
        java.lang.String str67 = nameProvider50.getName(locale63, "1970-01-01T00:00:00.010", "2022-02-11T10:00:00.000Z");
        java.util.Locale locale69 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str70 = locale69.getISO3Country();
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.lang.String str73 = locale71.getDisplayName(locale72);
        java.util.Locale.setDefault(locale71);
        java.util.Set<java.lang.String> strSet75 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str76 = locale69.getDisplayCountry(locale71);
        java.util.Set<java.lang.String> strSet77 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str80 = nameProvider50.getName(locale69, "0097-02-18T09:44:03.425", "Deutsch");
        boolean boolean81 = strSet39.remove((java.lang.Object) str80);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = strSet39.add("2022-02-11T12:48:56.019");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English (Canada)" + "'", str38, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English (Canada)" + "'", str42, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English (Canada)" + "'", str58, "English (Canada)");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals(locale69.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "English (Canada)" + "'", str73, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test17412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17412");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 6);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury(51);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusHours((int) ' ');
        int int8 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusHours(35142604);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test17413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17413");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField4 = iSOChronology0.millis();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        long long9 = iSOChronology0.add(1707644820261L, 1644659240437L, 23);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 39534807350312L + "'", long9 == 39534807350312L);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17414");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.year();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = iSOChronology0.getDateTimeMillis(761, 789, 611, 71122738);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 789 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17415");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime7.getFields();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusHours(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = localDateTime7.getFieldTypes();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology18.dayOfWeek();
        org.joda.time.Chronology chronology29 = iSOChronology18.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.monthOfYear();
        int[] intArray39 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime34, (long) (short) 10);
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology40.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology40);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusWeeks((-1));
        java.lang.String str50 = localDateTime49.toString();
        boolean boolean51 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        boolean boolean52 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime49.withTime(22, (int) (short) 0, 0, 14);
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField59 = iSOChronology58.halfdays();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology58.era();
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withYearOfEra((int) 'a');
        int[] intArray69 = iSOChronology58.get((org.joda.time.ReadablePartial) localDateTime65, (long) 100);
        org.joda.time.LocalDateTime.Property property70 = localDateTime65.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.plusWeeks(22);
        org.joda.time.chrono.ISOChronology iSOChronology75 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField76 = iSOChronology75.halfdays();
        org.joda.time.DateTimeField dateTimeField77 = iSOChronology75.era();
        org.joda.time.chrono.ISOChronology iSOChronology78 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField79 = iSOChronology78.dayOfYear();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withYearOfEra((int) 'a');
        int[] intArray86 = iSOChronology75.get((org.joda.time.ReadablePartial) localDateTime82, (long) 100);
        org.joda.time.LocalDateTime.Property property87 = localDateTime82.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime88 = property87.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime88.plusWeeks(22);
        boolean boolean92 = localDateTime71.isAfter((org.joda.time.ReadablePartial) localDateTime88);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime88.plusMonths(39);
        org.joda.time.ReadableDuration readableDuration95 = null;
        org.joda.time.LocalDateTime localDateTime96 = localDateTime94.plus(readableDuration95);
        org.joda.time.LocalDateTime localDateTime97 = localDateTime57.withFields((org.joda.time.ReadablePartial) localDateTime96);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1, 10]");
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0097-02-18T09:53:27.070" + "'", str50, "0097-02-18T09:53:27.070");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(iSOChronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(iSOChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertNotNull(localDateTime97);
    }

    @Test
    public void test17416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17416");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology1.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.weekyearOfCentury();
        long long11 = iSOChronology1.add(1644572637306L, 1644572653046L, 6);
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology1.secondOfMinute();
        org.joda.time.Chronology chronology13 = iSOChronology1.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str18 = iSOChronology17.toString();
        org.joda.time.DurationField durationField19 = iSOChronology17.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        int[] intArray26 = iSOChronology17.get((org.joda.time.ReadablePartial) localDateTime22, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = iSOChronology17.getZone();
        java.lang.String str28 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime29 = localDateTime16.toDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withSecondOfMinute(56);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds(67441936);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusMonths((int) 'u');
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readablePeriod44);
        int[] intArray46 = localDateTime43.getValues();
        iSOChronology1.validate((org.joda.time.ReadablePartial) localDateTime34, intArray46);
        org.joda.time.DurationField durationField48 = iSOChronology1.days();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology1.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 11512008555582L + "'", long11 == 11512008555582L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:53:56.144" + "'", str32, "2022-02-11T09:53:56.144");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[2031, 11, 12, 35607144]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test17417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17417");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str7 = iSOChronology6.toString();
        org.joda.time.DurationField durationField8 = iSOChronology6.weeks();
        boolean boolean9 = property5.equals((java.lang.Object) durationField8);
        org.joda.time.DurationField durationField10 = property5.getRangeDurationField();
        java.lang.String str11 = property5.getAsString();
        java.lang.String str12 = property5.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property5.getFieldType();
        org.joda.time.Interval interval14 = property5.toInterval();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(interval14);
    }

    @Test
    public void test17418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17418");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.weeks();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone6.convertLocalToUTC(1707644649273L, false, (long) 51);
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology11.era();
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra((int) 'a');
        int[] intArray22 = iSOChronology11.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDateTime18.getFields();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.minusHours(1);
        int int26 = localDateTime18.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime18.minusSeconds(2022);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime18.plus(readablePeriod31);
        boolean boolean33 = dateTimeZone6.equals((java.lang.Object) readablePeriod31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        int int39 = localDateTime36.getWeekyear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.minus(readableDuration41);
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField44 = iSOChronology43.halfdays();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        java.util.TimeZone.setDefault(timeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.Chronology chronology52 = iSOChronology43.withZone(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) readableDuration41, dateTimeZone51);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("0");
        java.lang.String str57 = dateTimeZone51.getShortName(1644659045736L, locale56);
        long long59 = dateTimeZone6.getMillisKeepLocal(dateTimeZone51, (long) 51);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(1644572759617L, dateTimeZone51);
        org.joda.time.Chronology chronology61 = chronology4.withZone(dateTimeZone51);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1707644649273L + "'", long10 == 1707644649273L);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 51L + "'", long59 == 51L);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test17419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17419");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 0, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.Chronology chronology6 = iSOChronology1.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test17420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17420");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        long long12 = dateTimeZone8.adjustOffset((long) 2022, false);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond(5);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str23 = iSOChronology22.toString();
        org.joda.time.DurationField durationField24 = iSOChronology22.weeks();
        boolean boolean25 = property21.equals((java.lang.Object) durationField24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property21.getFieldType();
        boolean boolean27 = localDateTime13.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime13.minusHours((-19));
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMinutes(71469100);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2022L + "'", long12 == 2022L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test17421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17421");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        int int33 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime35 = property5.addToCopy(0);
        int int36 = property5.getMinimumValueOverall();
        int int37 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test17422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17422");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:48:14.117", "2019-11-11T07:03:23.000", "hi!_908");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:48:14.117_2019-11-11T07:03:23.000_hi!_908");
    }

    @Test
    public void test17423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17423");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        int int7 = property5.getMaximumValue();
        org.joda.time.Interval interval8 = property5.toInterval();
        int int9 = property5.getMaximumValue();
        long long10 = property5.remainder();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3207271L + "'", long10 == 3207271L);
    }

    @Test
    public void test17424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17424");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        long long14 = dateTimeZone10.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str22 = nameProvider17.getName(locale18, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str28 = nameProvider17.getShortName(locale23, "und", "2022-02-11T09:44:00.457");
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str31 = locale30.getISO3Language();
        java.lang.String str34 = nameProvider17.getName(locale30, "1970-01-01T00:00:00.010", "2022-02-11T10:00:00.000Z");
        java.util.Locale locale36 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str37 = locale36.getISO3Country();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.util.Locale.setDefault(locale38);
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale36.getDisplayCountry(locale38);
        java.util.Set<java.lang.String> strSet44 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str47 = nameProvider17.getName(locale36, "0097-02-18T09:44:03.425", "Deutsch");
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str50 = locale49.getScript();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale49.getDisplayCountry(locale51);
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.lang.String str54 = locale53.getVariant();
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("de");
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleKeys();
        java.lang.String str59 = locale53.getDisplayScript(locale56);
        java.lang.String str60 = locale49.getDisplayCountry(locale53);
        java.lang.String str62 = locale53.getExtension('a');
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("0");
        boolean boolean65 = locale64.hasExtensions();
        boolean boolean66 = locale64.hasExtensions();
        java.util.Locale.setDefault(locale64);
        java.lang.String str68 = locale53.getDisplayName(locale64);
        java.lang.String str71 = nameProvider17.getName(locale53, "2022-02-11T09:45:34.877", "2022-02-11T09:47:44.040");
        java.util.Locale locale74 = new java.util.Locale("2022-02-11T09:46:46.413", "44");
        java.lang.String str75 = locale53.getDisplayVariant(locale74);
        java.lang.String str76 = dateTimeZone10.getShortName(1707644743905L, locale74);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        int int79 = dateTimeZone10.getStandardOffset((-208799881L));
        long long81 = dateTimeZone10.convertUTCToLocal((long) 382);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (Canada)" + "'", str25, "English (Canada)");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals(locale36.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English (Canada)" + "'", str40, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Japanese (Japan)" + "'", str68, "Japanese (Japan)");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals(locale74.toString(), "2022-02-11t09:46:46.413_44");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 382L + "'", long81 == 382L);
    }

    @Test
    public void test17425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17425");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.lang.String str7 = dateTimeZone6.getID();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 35088377);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = property17.getAsShortText(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = property17.getAsText(locale21);
        org.joda.time.LocalDateTime localDateTime24 = property17.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str26 = iSOChronology25.toString();
        org.joda.time.DurationField durationField27 = iSOChronology25.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int[] intArray34 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology25.getZone();
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime24, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.yearOfCentury();
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.minuteOfHour();
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime37.minusDays(35353452);
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology45.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.hourOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.minusMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime47);
        org.joda.time.DurationFieldType durationFieldType54 = null;
        boolean boolean55 = localDateTime53.isSupported(durationFieldType54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.minus(readablePeriod56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime53.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        org.joda.time.LocalDateTime.Property property60 = localDateTime44.property(dateTimeFieldType59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime8.property(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "9" + "'", str19, "9");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English (Canada)" + "'", str22, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9" + "'", str23, "9");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test17426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17426");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField5 = iSOChronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology4.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) 'a');
        int[] intArray15 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime11, (long) 100);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, (int) '4');
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusYears(2);
        long long23 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime21, 1L);
        org.joda.time.DurationField durationField24 = iSOChronology0.millis();
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField26 = iSOChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology25.era();
        org.joda.time.DurationField durationField28 = iSOChronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology25.centuryOfEra();
        boolean boolean30 = iSOChronology0.equals((java.lang.Object) iSOChronology25);
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology25.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray34 = iSOChronology25.get(readablePeriod32, 1644573104744L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 11, 35607375]");
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1707645207375L + "'", long23 == 1707645207375L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test17427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17427");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        boolean boolean8 = property5.isLeap();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField10 = iSOChronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology9.era();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra((int) 'a');
        int[] intArray20 = iSOChronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDateTime16.getFields();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusHours(1);
        int int24 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withTime(1, 23, 51, 23);
        int int32 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DurationField durationField33 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime34 = property5.getLocalDateTime();
        int int35 = property5.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime37 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime38 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withWeekyear(10800000);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minusHours(632);
        java.util.Date date43 = localDateTime42.toDate();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(durationField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Sun Jan 16 15:53:27 GMT 2022");
    }

    @Test
    public void test17428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17428");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:45:56.509");
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getCountry();
        java.lang.String str4 = locale1.getLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:45:56.509");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11t09:45:56.509" + "'", str4, "2022-02-11t09:45:56.509");
    }

    @Test
    public void test17429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17429");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet13);
        java.lang.String[] strArray32 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray40 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList41);
        boolean boolean44 = strSet33.containsAll((java.util.Collection<java.lang.String>) strList41);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        java.lang.String[] strArray56 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        java.util.Iterator<java.lang.String> strItor59 = strSet57.iterator();
        java.lang.Object[] objArray60 = strSet57.toArray();
        java.util.Iterator<java.lang.String> strItor61 = strSet57.iterator();
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet57);
        org.joda.time.chrono.ISOChronology iSOChronology63 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField64 = iSOChronology63.halfdays();
        java.lang.String str65 = iSOChronology63.toString();
        org.joda.time.DateTimeField dateTimeField66 = iSOChronology63.era();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology63.centuryOfEra();
        org.joda.time.DurationField durationField68 = iSOChronology63.minutes();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology63);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.year();
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str73 = locale72.getScript();
        java.util.Locale locale74 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str75 = locale72.getDisplayCountry(locale74);
        java.lang.String str76 = property70.getAsText(locale74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property70.getFieldType();
        boolean boolean78 = strSet57.remove((java.lang.Object) property70);
        boolean boolean80 = strSet57.add("0097-02-20T19:50:12.195");
        java.util.TimeZone timeZone82 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone84 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean85 = timeZone82.hasSameRules(timeZone84);
        java.util.TimeZone.setDefault(timeZone84);
        java.util.TimeZone.setDefault(timeZone84);
        java.lang.Object obj88 = timeZone84.clone();
        boolean boolean89 = strSet57.equals((java.lang.Object) timeZone84);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(iSOChronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[UTC]" + "'", str65, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022" + "'", str76, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test17430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17430");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology1.millisOfDay();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime17.toDateTime(dateTimeZone28);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str35 = iSOChronology34.toString();
        org.joda.time.DurationField durationField36 = iSOChronology34.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        int[] intArray43 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime39, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = iSOChronology34.getZone();
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime46 = localDateTime33.toDateTime(dateTimeZone44);
        boolean boolean47 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology49 = iSOChronology1.withZone(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) 46, dateTimeZone14);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.hourOfDay();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = property56.getAsShortText(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = property56.getAsText(locale60);
        org.joda.time.LocalDateTime localDateTime63 = property56.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = property56.roundHalfEvenCopy();
        java.lang.String str65 = localDateTime64.toString();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property68 = localDateTime64.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime64.withWeekOfWeekyear(50);
        boolean boolean73 = dateTimeZone14.isLocalDateTimeGap(localDateTime72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.secondOfMinute();
        org.joda.time.Chronology chronology75 = localDateTime72.getChronology();
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9" + "'", str58, "9");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English (Canada)" + "'", str61, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "9" + "'", str62, "9");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-11T10:00:00.000" + "'", str65, "2022-02-11T10:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(chronology75);
    }

    @Test
    public void test17431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17431");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = nameProvider0.getName(locale1, "Etc/UTC", "2022-02-11T09:43:55.701");
        java.util.Locale locale7 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.getScript();
        java.lang.String str10 = locale1.getDisplayVariant(locale7);
        java.lang.String str11 = locale1.getDisplayScript();
        java.lang.String str12 = locale1.getDisplayScript();
        java.util.Set<java.lang.Character> charSet13 = locale1.getExtensionKeys();
        java.lang.String str14 = locale1.getDisplayScript();
        java.lang.String str15 = locale1.getISO3Language();
        java.util.Locale locale16 = locale1.stripExtensions();
        java.lang.String str17 = locale16.getISO3Language();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Locale locale21 = new java.util.Locale("und", "2022-02-11T09:43:52.830");
        java.lang.String str22 = locale21.getDisplayCountry();
        org.joda.time.tz.NameProvider nameProvider23 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getDisplayVariant();
        java.lang.String str28 = nameProvider23.getName(locale24, "English (Canada)", "Etc/UTC");
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str32 = nameProvider23.getShortName(locale29, "2022-02-11T09:43:52.830", "2022-02-11T09:43:58.520");
        java.util.Locale locale33 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.hourOfDay();
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = property39.getAsShortText(locale40);
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = property39.getAsText(locale43);
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        int int47 = property39.getMaximumShortTextLength(locale46);
        java.lang.String str48 = locale33.getDisplayName(locale46);
        java.lang.String str49 = locale46.getDisplayVariant();
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str52 = locale46.getDisplayCountry(locale51);
        java.lang.String str55 = nameProvider23.getShortName(locale46, "2022-02-11T09:44:06.998", "2022-02-11T09:44:00.457");
        java.lang.String str56 = locale46.getDisplayCountry();
        java.lang.String str57 = locale21.getDisplayVariant(locale46);
        java.lang.String str58 = locale16.getDisplayVariant(locale21);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals(locale7.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale21.toString(), "und_2022-02-11T09:43:52.830");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T09:43:52.830" + "'", str22, "2022-02-11T09:43:52.830");
        org.junit.Assert.assertNotNull(nameProvider23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "9" + "'", str41, "9");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English (Canada)" + "'", str44, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9" + "'", str45, "9");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cinese (Cina)" + "'", str48, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test17432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17432");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        int int18 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.util.TimeZone timeZone20 = dateTimeZone0.toTimeZone();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField22 = iSOChronology21.halfdays();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.util.TimeZone.setDefault(timeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.Chronology chronology30 = iSOChronology21.withZone(dateTimeZone29);
        java.util.TimeZone timeZone31 = dateTimeZone29.toTimeZone();
        boolean boolean32 = timeZone31.observesDaylightTime();
        java.time.ZoneId zoneId33 = timeZone31.toZoneId();
        boolean boolean34 = timeZone31.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.util.TimeZone.setDefault(timeZone31);
        int int37 = timeZone31.getRawOffset();
        boolean boolean38 = timeZone31.observesDaylightTime();
        boolean boolean39 = timeZone20.hasSameRules(timeZone31);
        java.util.TimeZone.setDefault(timeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneId33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test17433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17433");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        int int13 = dateTimeZone10.getStandardOffset(1707644640457L);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        java.lang.String str16 = dateTimeZone10.getNameKey(1707644762190L);
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField24 = iSOChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.era();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYearOfEra((int) 'a');
        int[] intArray34 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.withDurationAdded(readableDuration35, (int) '4');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        int int41 = localDateTime30.indexOf(dateTimeFieldType40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime30.plus(readableDuration42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime30.plusSeconds((int) 'a');
        boolean boolean46 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusWeeks(56);
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.dayOfMonth();
        int int50 = localDateTime45.getMonthOfYear();
        int[] intArray51 = localDateTime45.getValues();
        org.joda.time.LocalDateTime.Property property52 = localDateTime45.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = localDateTime45.toString(dateTimeFormatter53);
        int int55 = localDateTime45.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime45.minus(readablePeriod56);
        boolean boolean58 = dateTimeZone10.equals((java.lang.Object) localDateTime57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDurationAdded(readableDuration59, 35199327);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2022, 2, 11, 35704569]");
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-11T09:55:04.569" + "'", str54, "2022-02-11T09:55:04.569");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test17434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17434");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMonths((-1));
        int int31 = localDateTime25.getHourOfDay();
        org.joda.time.LocalDateTime.Property property32 = localDateTime25.centuryOfEra();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str35 = locale34.getCountry();
        java.lang.String str36 = locale34.getDisplayScript();
        java.lang.String str37 = property32.getAsShortText(locale34);
        java.lang.String str38 = locale34.getISO3Country();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "20" + "'", str37, "20");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test17435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17435");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        java.lang.String str11 = dateTimeZone8.getName((long) 50);
        java.lang.String str12 = dateTimeZone8.toString();
        int int14 = dateTimeZone8.getOffsetFromLocal(1707644660798L);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("0097-02-18T09:44:15.719");
        java.lang.String str18 = dateTimeZone8.getName((long) 3, locale17);
        boolean boolean20 = dateTimeZone8.isStandardOffset((-59101884817548L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test17436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17436");
        java.lang.Object obj0 = null;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str5 = iSOChronology4.toString();
        org.joda.time.DurationField durationField6 = iSOChronology4.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        int[] intArray13 = iSOChronology4.get((org.joda.time.ReadablePartial) localDateTime9, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = iSOChronology4.getZone();
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(obj0, dateTimeZone14);
        boolean boolean19 = dateTimeZone14.isStandardOffset(0L);
        boolean boolean20 = dateTimeZone14.isFixed();
        java.util.TimeZone timeZone21 = dateTimeZone14.toTimeZone();
        boolean boolean22 = timeZone21.observesDaylightTime();
        java.util.Set<java.lang.String> strSet23 = org.joda.time.DateTimeZone.getAvailableIDs();
        boolean boolean24 = strSet23.isEmpty();
        boolean boolean26 = strSet23.add("+00:00:00.008");
        java.util.TimeZone timeZone28 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.time.ZoneId zoneId32 = timeZone28.toZoneId();
        int int33 = timeZone28.getRawOffset();
        java.util.TimeZone.setDefault(timeZone28);
        java.util.TimeZone.setDefault(timeZone28);
        boolean boolean36 = strSet23.equals((java.lang.Object) timeZone28);
        java.time.ZoneId zoneId37 = timeZone28.toZoneId();
        boolean boolean38 = timeZone21.hasSameRules(timeZone28);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISOChronology[UTC]" + "'", str5, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(zoneId37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test17437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17437");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology14 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17438");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        timeZone1.setRawOffset(9);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
    }

    @Test
    public void test17439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17439");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField5 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField6 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.dayOfWeek();
        java.lang.String str8 = iSOChronology0.toString();
        org.joda.time.DurationField durationField9 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[UTC]" + "'", str2, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17440");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.time.ZoneId zoneId6 = timeZone1.toZoneId();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone(zoneId6);
        timeZone7.setID("0097-02-18T09:47:00.469");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '0097-02-18T09:47:00.469' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test17441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17441");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField11 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        java.lang.String str13 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.clockhourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str17 = iSOChronology16.toString();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = iSOChronology16.add(readablePeriod18, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField22 = iSOChronology16.halfdays();
        org.joda.time.DurationField durationField23 = iSOChronology16.millis();
        org.joda.time.DurationField durationField24 = iSOChronology16.hours();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology16.clockhourOfHalfday();
        org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology27);
        int int30 = localDateTime29.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.lang.String str38 = property36.getAsShortText(locale37);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = property36.getAsText(locale40);
        org.joda.time.LocalDateTime localDateTime43 = property36.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = property36.roundHalfEvenCopy();
        boolean boolean45 = localDateTime29.equals((java.lang.Object) localDateTime44);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str47 = iSOChronology46.toString();
        org.joda.time.DurationField durationField48 = iSOChronology46.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology49.dayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusDays((int) (byte) 0);
        int[] intArray55 = iSOChronology46.get((org.joda.time.ReadablePartial) localDateTime51, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = iSOChronology46.getZone();
        boolean boolean58 = dateTimeZone56.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime59 = localDateTime44.toDateTime(dateTimeZone56);
        org.joda.time.Chronology chronology60 = iSOChronology16.withZone(dateTimeZone56);
        long long62 = dateTimeZone56.previousTransition(1707644953252L);
        org.joda.time.Chronology chronology63 = iSOChronology0.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.millisOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(iSOChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 27 + "'", int30 == 27);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9" + "'", str38, "9");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English (Canada)" + "'", str41, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9" + "'", str42, "9");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(iSOChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1707644953252L + "'", long62 == 1707644953252L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test17442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17442");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test17443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17443");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) 'a');
        int[] intArray14 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1);
        int int18 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        boolean boolean23 = iSOChronology0.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField25 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField28 = iSOChronology0.centuries();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test17444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17444");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) 'u');
        java.lang.String str9 = localDateTime8.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusYears(626);
        java.util.Date date12 = localDateTime11.toDate();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2031-11-12T09:53:27.758" + "'", str9, "2031-11-12T09:53:27.758");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Nov 12 09:53:27 GMT 2657");
    }

    @Test
    public void test17445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17445");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.DurationField durationField7 = iSOChronology0.millis();
        org.joda.time.DurationField durationField8 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField10 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField11 = iSOChronology0.millis();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str13 = iSOChronology12.toString();
        org.joda.time.DurationField durationField14 = iSOChronology12.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        int[] intArray21 = iSOChronology12.get((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology12.getZone();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology12.minuteOfHour();
        org.joda.time.DurationField durationField25 = iSOChronology12.seconds();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str27 = iSOChronology26.toString();
        org.joda.time.DurationField durationField28 = iSOChronology26.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        int[] intArray35 = iSOChronology26.get((org.joda.time.ReadablePartial) localDateTime31, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = iSOChronology26.getZone();
        long long40 = dateTimeZone36.convertLocalToUTC((long) 0, true, 0L);
        long long43 = dateTimeZone36.adjustOffset(0L, false);
        long long45 = dateTimeZone36.convertUTCToLocal((long) 37);
        org.joda.time.Chronology chronology46 = iSOChronology12.withZone(dateTimeZone36);
        java.lang.String str47 = chronology46.toString();
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.hourOfDay();
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.lang.String str55 = property53.getAsShortText(locale54);
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String str59 = property53.getAsText(locale57);
        org.joda.time.LocalDateTime localDateTime60 = property53.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str62 = iSOChronology61.toString();
        org.joda.time.DurationField durationField63 = iSOChronology61.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology64.dayOfYear();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusDays((int) (byte) 0);
        int[] intArray70 = iSOChronology61.get((org.joda.time.ReadablePartial) localDateTime66, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone71 = iSOChronology61.getZone();
        java.lang.String str72 = dateTimeZone71.toString();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime60, dateTimeZone71);
        boolean boolean75 = dateTimeZone71.isStandardOffset((long) 0);
        int int77 = dateTimeZone71.getOffset((long) 16);
        org.joda.time.Chronology chronology78 = chronology46.withZone(dateTimeZone71);
        org.joda.time.Chronology chronology79 = iSOChronology0.withZone(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone80 = iSOChronology0.getZone();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(dateTimeZone80);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[UTC]" + "'", str1, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 37L + "'", long45 == 37L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "9" + "'", str55, "9");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English (Canada)" + "'", str58, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "9" + "'", str59, "9");
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ISOChronology[UTC]" + "'", str62, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(iSOChronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
    }

    @Test
    public void test17446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17446");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.era();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.lang.String str17 = property15.getAsShortText(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = property15.getAsText(locale19);
        org.joda.time.LocalDateTime localDateTime22 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = property15.roundHalfEvenCopy();
        boolean boolean24 = localDateTime8.equals((java.lang.Object) localDateTime23);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str26 = iSOChronology25.toString();
        org.joda.time.DurationField durationField27 = iSOChronology25.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusDays((int) (byte) 0);
        int[] intArray34 = iSOChronology25.get((org.joda.time.ReadablePartial) localDateTime30, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = iSOChronology25.getZone();
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime38 = localDateTime23.toDateTime(dateTimeZone35);
        java.lang.String str39 = dateTime38.toString();
        int int40 = property5.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDateTime localDateTime41 = property5.getLocalDateTime();
        int int42 = localDateTime41.getCenturyOfEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray43 = localDateTime41.getFields();
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.plus(readablePeriod45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime41.minusMinutes(421200000);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27 + "'", int9 == 27);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9" + "'", str17, "9");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English (Canada)" + "'", str20, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T10:00:00.000Z" + "'", str39, "2022-02-11T10:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test17447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17447");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.hourOfDay();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = property9.getAsText(locale13);
        org.joda.time.LocalDateTime localDateTime16 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property9.roundHalfEvenCopy();
        boolean boolean18 = localDateTime2.equals((java.lang.Object) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime2.minusMinutes((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.minus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime2.plusWeeks(71117797);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime2.plusSeconds(30);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withPeriodAdded(readablePeriod28, 13);
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField32 = iSOChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology31.era();
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYearOfEra((int) 'a');
        int[] intArray42 = iSOChronology31.get((org.joda.time.ReadablePartial) localDateTime38, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray43 = localDateTime38.getFields();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.minusHours(1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = localDateTime38.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime38.withSecondOfMinute((int) (short) 10);
        org.joda.time.LocalDateTime.Property property51 = localDateTime38.secondOfMinute();
        org.joda.time.LocalDateTime.Property property52 = localDateTime38.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField54 = iSOChronology53.halfdays();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone58 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean59 = timeZone56.hasSameRules(timeZone58);
        java.util.TimeZone.setDefault(timeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.Chronology chronology62 = iSOChronology53.withZone(dateTimeZone61);
        java.lang.String str64 = dateTimeZone61.getName((long) 50);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(dateTimeZone61);
        org.joda.time.chrono.ISOChronology iSOChronology66 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField67 = iSOChronology66.dayOfYear();
        java.lang.String str68 = iSOChronology66.toString();
        org.joda.time.DateTimeField dateTimeField69 = iSOChronology66.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology66.dayOfMonth();
        org.joda.time.DurationField durationField71 = iSOChronology66.weeks();
        org.joda.time.DurationField durationField72 = iSOChronology66.centuries();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology66.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField74 = iSOChronology66.millisOfDay();
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology66);
        boolean boolean76 = dateTimeZone61.equals((java.lang.Object) localDateTime75);
        org.joda.time.DateTime dateTime77 = localDateTime38.toDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime78 = localDateTime30.toDateTime((org.joda.time.ReadableInstant) dateTime77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime30.withWeekOfWeekyear(161);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 161 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 27 + "'", int3 == 27);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English (Canada)" + "'", str14, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9" + "'", str15, "9");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(iSOChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[UTC]" + "'", str68, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test17448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17448");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property5.getMaximumShortTextLength(locale12);
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMinutes((int) '4');
        int int22 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime23 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears(58);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusDays(72000000);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9" + "'", str11, "9");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test17449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17449");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours(2010);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 0, 4);
        org.joda.time.DateTime dateTime21 = localDateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.util.TimeZone timeZone25 = dateTimeZone20.toTimeZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 100]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:04");
    }

    @Test
    public void test17450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17450");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        int int4 = localDateTime3.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = property10.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime17 = property10.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = property10.roundHalfEvenCopy();
        boolean boolean19 = localDateTime3.equals((java.lang.Object) localDateTime18);
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str21 = iSOChronology20.toString();
        org.joda.time.DurationField durationField22 = iSOChronology20.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays((int) (byte) 0);
        int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDateTime25, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology20.getZone();
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime33 = localDateTime18.toDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        long long37 = dateTimeZone34.adjustOffset((long) 11, true);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (byte) 10, dateTimeZone34);
        long long40 = dateTimeZone34.convertUTCToLocal(1707644779171L);
        org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.hourOfDay();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.lang.String str48 = property46.getAsShortText(locale47);
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = property46.getAsText(locale50);
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        int int54 = property46.getMaximumShortTextLength(locale53);
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology55);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.hourOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.minusMinutes((int) '4');
        int int63 = property46.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime64 = property46.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime65 = property46.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusMillis(17);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusHours((int) 'a');
        boolean boolean70 = dateTimeZone34.isLocalDateTimeGap(localDateTime69);
        java.lang.String str72 = dateTimeZone34.getNameKey(1707644920066L);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27 + "'", int4 == 27);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9" + "'", str12, "9");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9" + "'", str16, "9");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+00:04]" + "'", str21, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 11L + "'", long37 == 11L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1707645019171L + "'", long40 == 1707645019171L);
        org.junit.Assert.assertNotNull(iSOChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "9" + "'", str48, "9");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English (Canada)" + "'", str51, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "9" + "'", str52, "9");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test17451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17451");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DurationField durationField3 = iSOChronology0.hours();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = iSOChronology0.add(readablePeriod6, (long) 35124175, 0);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField11 = iSOChronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology10.era();
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra((int) 'a');
        int[] intArray21 = iSOChronology10.get((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime17.getFields();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusHours(1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime17.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime17.withYear(1970);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology30.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField34 = iSOChronology33.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = iSOChronology33.era();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYearOfEra((int) 'a');
        int[] intArray44 = iSOChronology33.get((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray45 = localDateTime40.getFields();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.minusHours(1);
        int int48 = localDateTime40.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime40.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        boolean boolean52 = localDateTime50.isSupported(dateTimeFieldType51);
        boolean boolean53 = iSOChronology30.equals((java.lang.Object) dateTimeFieldType51);
        org.joda.time.DateTimeZone dateTimeZone54 = iSOChronology30.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone54);
        org.joda.time.DurationField durationField56 = iSOChronology55.weekyears();
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str59 = iSOChronology58.toString();
        org.joda.time.DurationField durationField60 = iSOChronology58.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        int[] intArray67 = iSOChronology58.get((org.joda.time.ReadablePartial) localDateTime63, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone68 = iSOChronology58.getZone();
        long long72 = dateTimeZone68.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale73 = java.util.Locale.US;
        boolean boolean74 = dateTimeZone68.equals((java.lang.Object) locale73);
        long long78 = dateTimeZone68.convertLocalToUTC((long) ' ', true, (long) '4');
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) 'u', dateTimeZone68);
        int[] intArray81 = iSOChronology55.get((org.joda.time.ReadablePartial) localDateTime79, 1644659110423L);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime29, intArray81);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:04]" + "'", str2, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35124175L + "'", long9 == 35124175L);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(iSOChronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[+00:04]" + "'", str59, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-240000L) + "'", long72 == (-240000L));
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-239968L) + "'", long78 == (-239968L));
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[2022, 2, 12, 35350423]");
    }

    @Test
    public void test17452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17452");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(588, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 120");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17453");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(33253692, 78537112, 35127201, 0, 35142767);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35142767 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17454");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = iSOChronology0.add(readablePeriod7, 2664427L, 6);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:04]" + "'", str2, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2664427L + "'", long10 == 2664427L);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test17455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17455");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.dayOfWeek();
        long long12 = iSOChronology0.add(59L, 1644572646636L, 50);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str14 = iSOChronology13.toString();
        org.joda.time.DurationField durationField15 = iSOChronology13.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays((int) (byte) 0);
        int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDateTime18, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = iSOChronology13.getZone();
        long long27 = dateTimeZone23.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale28 = java.util.Locale.US;
        boolean boolean29 = dateTimeZone23.equals((java.lang.Object) locale28);
        long long33 = dateTimeZone23.convertLocalToUTC((long) ' ', true, (long) '4');
        org.joda.time.Chronology chronology34 = iSOChronology0.withZone(dateTimeZone23);
        org.joda.time.DurationField durationField35 = iSOChronology0.halfdays();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:04]" + "'", str1, "ISOChronology[+00:04]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 82228632331859L + "'", long12 == 82228632331859L);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:04]" + "'", str14, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-240000L) + "'", long27 == (-240000L));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-239968L) + "'", long33 == (-239968L));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test17456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17456");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.Chronology chronology11 = iSOChronology0.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.monthOfYear();
        int[] intArray21 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime16, (long) (short) 10);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusWeeks((-1));
        java.lang.String str32 = localDateTime31.toString();
        boolean boolean33 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.dayOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str36 = iSOChronology35.toString();
        org.joda.time.DurationField durationField37 = iSOChronology35.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        int[] intArray44 = iSOChronology35.get((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology35.dayOfWeek();
        org.joda.time.Chronology chronology46 = iSOChronology35.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField48 = iSOChronology47.dayOfYear();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.monthOfYear();
        int[] intArray56 = iSOChronology35.get((org.joda.time.ReadablePartial) localDateTime51, (long) (short) 10);
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology57.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.minusWeeks((-1));
        java.lang.String str67 = localDateTime66.toString();
        boolean boolean68 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = localDateTime66.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime66.plusMonths(31);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime66.withPeriodAdded(readablePeriod72, 12);
        int int75 = property34.compareTo((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime66.minusSeconds(224);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withCenturyOfEra(50);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:04]" + "'", str1, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 240010]");
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0097-02-18T09:57:27.994" + "'", str32, "0097-02-18T09:57:27.994");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+00:04]" + "'", str36, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 1, 240010]");
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0097-02-18T09:57:27.994" + "'", str67, "0097-02-18T09:57:27.994");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test17457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17457");
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str8 = iSOChronology7.toString();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(35169682, 9, 67441936, 35323899, 35583117, 35585693, 0, (org.joda.time.Chronology) iSOChronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35323899 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[+00:04]" + "'", str8, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test17458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17458");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusMinutes((int) '4');
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2);
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str13 = iSOChronology12.toString();
        org.joda.time.DurationField durationField14 = iSOChronology12.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        int[] intArray21 = iSOChronology12.get((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology12.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime11.minusHours(6);
        boolean boolean27 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withDurationAdded(readableDuration28, (int) '4');
        int int31 = localDateTime26.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.plusMinutes(872);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+00:04]" + "'", str13, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:04" + "'", str23, "+00:04");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test17459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17459");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField13 = iSOChronology0.seconds();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.lang.String[] strArray20 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.util.Locale.setDefault(locale24);
        java.util.Set<java.lang.String> strSet28 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.lang.String[] strArray34 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strList35);
        java.util.stream.Stream<java.lang.String> strStream38 = strList37.parallelStream();
        boolean boolean39 = strSet28.containsAll((java.util.Collection<java.lang.String>) strList37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet28);
        java.lang.String[] strArray47 = new java.lang.String[] { "0", "2022-02-11T09:43:52.830", "Greenwich Mean Time", "", "0", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.lang.String[] strArray55 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strList56);
        boolean boolean59 = strSet48.containsAll((java.util.Collection<java.lang.String>) strList56);
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet48);
        boolean boolean61 = localDateTime14.equals((java.lang.Object) strSet48);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime14.withPeriodAdded(readablePeriod62, 54);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime14.minusMonths(67);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withMillisOfDay(4);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusHours(78537112);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.plusMillis(187200000);
        long long74 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime68, 1707644698405L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:04]" + "'", str1, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "English (Canada)" + "'", str26, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1468194960004L + "'", long74 == 1468194960004L);
    }

    @Test
    public void test17460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17460");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology6 = iSOChronology0.withZone(dateTimeZone5);
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = property12.getAsShortText(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = property12.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime19 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds(6);
        int[] intArray23 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime21, (long) 58);
        org.joda.time.DateTimeZone dateTimeZone24 = iSOChronology0.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:04]" + "'", str2, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9" + "'", str14, "9");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English (Canada)" + "'", str17, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9" + "'", str18, "9");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[1970, 1, 1, 240058]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test17461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17461");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        int int3 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDayOfMonth(35451999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35451999 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 28 + "'", int3 == 28);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test17462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17462");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int7 = timeZone3.getRawOffset();
        timeZone3.setRawOffset((int) (byte) 0);
        java.time.ZoneId zoneId10 = timeZone3.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId10);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test17463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17463");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        java.util.Locale locale4 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection3);
        java.lang.String[] strArray15 = new java.lang.String[] { "2022-02-11T09:43:52.830", "hi!", "Etc/UTC", "Greenwich Mean Time", "hi!", "hi!", "en_CA", "2022-02-11T09:43:52.830", "Etc/UTC", "English (Canada)" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Iterator<java.lang.String> strItor18 = strSet16.iterator();
        java.lang.Object[] objArray19 = strSet16.toArray();
        java.lang.Object[] objArray20 = strSet16.toArray();
        java.util.stream.Stream<java.lang.String> strStream21 = strSet16.parallelStream();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList31);
        java.util.stream.Stream<java.lang.String> strStream34 = strList33.parallelStream();
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList33);
        org.joda.time.tz.Provider provider36 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet37 = provider36.getAvailableIDs();
        java.util.Set<java.lang.String> strSet38 = provider36.getAvailableIDs();
        java.util.Set<java.lang.String> strSet39 = provider36.getAvailableIDs();
        java.lang.String str40 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet39);
        boolean boolean42 = strSet39.remove((java.lang.Object) "2022-02-11T09:46:07.097");
        org.joda.time.tz.Provider provider43 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet44 = provider43.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider43);
        java.util.Set<java.lang.String> strSet46 = provider43.getAvailableIDs();
        java.util.Set<java.lang.String> strSet47 = provider43.getAvailableIDs();
        int int48 = strSet47.size();
        boolean boolean50 = strSet47.add("2031-11-12T09:47:38.699");
        strSet47.clear();
        boolean boolean52 = strSet39.retainAll((java.util.Collection<java.lang.String>) strSet47);
        strSet47.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[2022-02-11T09:43:52.830, hi!, Etc/UTC, Greenwich Mean Time, en_CA, English (Canada)]");
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(provider36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(provider43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 575 + "'", int48 == 575);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test17464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17464");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.plusSeconds((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis(71111255);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime20);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField24 = iSOChronology23.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology23.era();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) iSOChronology23);
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology23.secondOfDay();
        boolean boolean29 = localDateTime20.equals((java.lang.Object) dateTimeField28);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test17465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17465");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("de");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("GMT");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = builder6.setExtension('a', "fr_CA");
        java.util.Locale locale10 = builder9.build();
        java.lang.String str11 = locale10.getScript();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "gmt__#a-fr-ca");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
    }

    @Test
    public void test17466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17466");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DurationField durationField7 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.era();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfEra((int) 'a');
        int[] intArray19 = iSOChronology8.get((org.joda.time.ReadablePartial) localDateTime15, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = localDateTime15.getFields();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusHours(1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.minusMinutes((-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localDateTime15.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.withSecondOfMinute((int) (short) 10);
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.era();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYearOfEra((int) 'a');
        int[] intArray39 = iSOChronology28.get((org.joda.time.ReadablePartial) localDateTime35, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = localDateTime35.getFields();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusHours(1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.minusMinutes((-1));
        int int45 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMonths((int) 'u');
        java.lang.String str55 = localDateTime54.toString();
        int int56 = localDateTime54.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withMillisOfDay(11);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getExtension('a');
        boolean boolean62 = localDateTime58.equals((java.lang.Object) locale59);
        int int63 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        long long65 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime27, 6830578589573L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:04]" + "'", str1, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(iSOChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2031-11-12T09:57:28.215" + "'", str55, "2031-11-12T09:57:28.215");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2031 + "'", int56 == 2031);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1644573190215L + "'", long65 == 1644573190215L);
    }

    @Test
    public void test17467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17467");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = iSOChronology0.add(readablePeriod11, 1644572681360L, 2015);
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:04]" + "'", str1, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572681360L + "'", long14 == 1644572681360L);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17468");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readableDuration15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusHours(5);
        int int22 = localDateTime18.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.yearOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.year();
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.yearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.minusYears(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        java.lang.String str31 = iSOChronology29.toString();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology29.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology29.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology29.year();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str36 = iSOChronology35.toString();
        org.joda.time.DurationField durationField37 = iSOChronology35.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology38.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology38);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusDays((int) (byte) 0);
        int[] intArray44 = iSOChronology35.get((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = iSOChronology35.getZone();
        long long49 = dateTimeZone45.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.millisOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology52.dayOfYear();
        java.lang.String str54 = iSOChronology52.toString();
        org.joda.time.DurationField durationField55 = iSOChronology52.hours();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology52.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology57.dayOfYear();
        java.lang.String str59 = iSOChronology57.toString();
        org.joda.time.DateTimeField dateTimeField60 = iSOChronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology57.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = iSOChronology57.withZone(dateTimeZone62);
        int int65 = dateTimeZone62.getOffsetFromLocal(6830578589573L);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone62);
        int[] intArray68 = iSOChronology52.get((org.joda.time.ReadablePartial) localDateTime66, (long) 22);
        iSOChronology29.validate((org.joda.time.ReadablePartial) localDateTime50, intArray68);
        boolean boolean70 = localDateTime27.isEqual((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime27.minusMillis(6);
        int[] intArray73 = localDateTime72.getValues();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 28 + "'", int22 == 28);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[+00:04]" + "'", str31, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+00:04]" + "'", str36, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-240000L) + "'", long49 == (-240000L));
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[+00:04]" + "'", str54, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(iSOChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[+00:04]" + "'", str59, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 240000 + "'", int65 == 240000);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1, 240022]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(intArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[2022, 2, 11, 35848004]");
    }

    @Test
    public void test17469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17469");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        long long14 = dateTimeZone10.convertLocalToUTC((long) 0, true, 0L);
        java.util.Locale locale15 = java.util.Locale.US;
        boolean boolean16 = dateTimeZone10.equals((java.lang.Object) locale15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfYear(16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear(35165291);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = localDateTime19.getField(682);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 682");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+00:04]" + "'", str1, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-240000L) + "'", long14 == (-240000L));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test17470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17470");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusWeeks(56);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.minusSeconds(2);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.withMillisOfDay(35054090);
        org.joda.time.LocalDateTime.Property property36 = localDateTime28.millisOfSecond();
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = property36.getAsShortText(locale37);
        org.joda.time.LocalDateTime localDateTime41 = property36.withMinimumValue();
        long long42 = property36.remainder();
        org.joda.time.DateTimeField dateTimeField43 = property36.getField();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 1, 240100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English (Canada)" + "'", str39, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "301" + "'", str40, "301");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test17471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17471");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField5 = iSOChronology0.months();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField8 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.halfdayOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+00:04]" + "'", str2, "ISOChronology[+00:04]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17472");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'u');
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        int int4 = dateTimeZone1.getOffset(readableInstant3);
        int int6 = dateTimeZone1.getOffset(1644572660583L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 421200000 + "'", int4 == 421200000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 421200000 + "'", int6 == 421200000);
    }

    @Test
    public void test17473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17473");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = property5.getAsShortText(locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = property5.getAsText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property5.roundHalfEvenCopy();
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusWeeks((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.weekOfWeekyear();
        int int18 = localDateTime13.getYear();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = property24.getAsShortText(locale25);
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = property24.getAsText(locale28);
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        int int32 = property24.getMaximumShortTextLength(locale31);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.dayOfYear();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.minusMinutes((int) '4');
        int int41 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        boolean boolean42 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property43 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime.Property property44 = localDateTime13.dayOfMonth();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6" + "'", str7, "6");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (Canada)" + "'", str10, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "6" + "'", str11, "6");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-16T07:00:00.000" + "'", str14, "2022-02-16T07:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "6" + "'", str26, "6");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English (Canada)" + "'", str29, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "6" + "'", str30, "6");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test17474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17474");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.era();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) 'a');
        int[] intArray14 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime10, (long) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime10.getFields();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1);
        int int18 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDateTime20.isSupported(dateTimeFieldType21);
        boolean boolean23 = iSOChronology0.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.DurationField durationField24 = iSOChronology0.months();
        org.joda.time.DurationField durationField25 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology0.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = iSOChronology0.add(readablePeriod28, 1644572910734L, 35353452);
        org.joda.time.DurationField durationField32 = iSOChronology0.years();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644572910734L + "'", long31 == 1644572910734L);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test17475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17475");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusDays((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((int) 'u');
        java.lang.String str9 = localDateTime8.toString();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.year();
        int int11 = localDateTime8.getCenturyOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2031-11-17T06:53:28.383" + "'", str9, "2031-11-17T06:53:28.383");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    public void test17476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17476");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusDays(1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withWeekyear(35093236);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusHours(641);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths(35324780);
        int int15 = localDateTime12.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plus(readableDuration16);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17477");
        java.util.Locale locale0 = java.util.Locale.PRC;
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.lang.String str8 = property6.getAsShortText(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = property6.getAsText(locale10);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        int int14 = property6.getMaximumShortTextLength(locale13);
        java.lang.String str15 = locale0.getDisplayName(locale13);
        boolean boolean16 = locale0.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("de");
        java.lang.String str19 = locale0.getDisplayScript(locale18);
        java.lang.String str20 = locale18.getISO3Language();
        java.util.Locale locale21 = locale18.stripExtensions();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleAttributes();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = iSOChronology23.add(readablePeriod25, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField29 = iSOChronology23.halfdays();
        org.joda.time.DurationField durationField30 = iSOChronology23.millis();
        org.joda.time.DurationField durationField31 = iSOChronology23.hours();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology23.weekOfWeekyear();
        boolean boolean33 = strSet22.contains((java.lang.Object) dateTimeField32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6" + "'", str8, "6");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "6" + "'", str12, "6");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "cinese (Cina)" + "'", str15, "cinese (Cina)");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "deu" + "'", str20, "deu");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+117:00]" + "'", str24, "ISOChronology[+117:00]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test17478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17478");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Chinese", (double) (short) 1);
        double double3 = languageRange2.getWeight();
        double double4 = languageRange2.getWeight();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        double double8 = languageRange2.getWeight();
        double double9 = languageRange2.getWeight();
        double double10 = languageRange2.getWeight();
        double double11 = languageRange2.getWeight();
        java.lang.String str12 = languageRange2.getRange();
        java.lang.String str13 = languageRange2.getRange();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale.Builder builder17 = builder14.setVariant("Chinese");
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("2022");
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale.Builder builder23 = builder19.setExtension('a', "359");
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        java.util.Locale locale26 = builder23.build();
        java.util.Locale.Builder builder27 = builder23.clearExtensions();
        boolean boolean28 = languageRange2.equals((java.lang.Object) builder23);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "chinese" + "'", str7, "chinese");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "chinese" + "'", str12, "chinese");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "chinese" + "'", str13, "chinese");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17479");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        java.lang.String str11 = iSOChronology0.toString();
        org.joda.time.DurationField durationField12 = iSOChronology0.days();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.halfdayOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.hourOfDay();
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = property20.getAsShortText(locale21);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = property20.getAsText(locale24);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        int int28 = property20.getMaximumShortTextLength(locale27);
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.minusMinutes((int) '4');
        int int37 = property20.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime39 = property20.addToCopy((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withDayOfYear(5);
        int[] intArray45 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime39, 1644572874569L);
        int int46 = localDateTime39.size();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+117:00]" + "'", str1, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+117:00]" + "'", str11, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "6" + "'", str22, "6");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (Canada)" + "'", str25, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "6" + "'", str26, "6");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2022, 2, 16, 24474569]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
    }

    @Test
    public void test17480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17480");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2031-11-12T09:49:38.721");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test17481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17481");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str2 = iSOChronology1.toString();
        org.joda.time.DurationField durationField3 = iSOChronology1.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusDays((int) (byte) 0);
        int[] intArray10 = iSOChronology1.get((org.joda.time.ReadablePartial) localDateTime6, (long) 100);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology1.hourOfHalfday();
        java.lang.String str12 = iSOChronology1.toString();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology1.minuteOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str16 = iSOChronology15.toString();
        org.joda.time.DurationField durationField17 = iSOChronology15.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusDays((int) (byte) 0);
        int[] intArray24 = iSOChronology15.get((org.joda.time.ReadablePartial) localDateTime20, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = iSOChronology15.getZone();
        long long29 = dateTimeZone25.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        int int33 = dateTimeZone25.getOffset((long) 2024);
        org.joda.time.Chronology chronology34 = iSOChronology1.withZone(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(1707644686430L, dateTimeZone25);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+117:00]" + "'", str2, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+117:00]" + "'", str12, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(iSOChronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+117:00]" + "'", str16, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-421200000L) + "'", long29 == (-421200000L));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 421200000 + "'", int33 == 421200000);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test17482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17482");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        java.lang.String str2 = iSOChronology0.toString();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology4 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.weekyear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISOChronology[+117:00]" + "'", str2, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17483");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField7 = iSOChronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology6.era();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra((int) 'a');
        int[] intArray17 = iSOChronology6.get((org.joda.time.ReadablePartial) localDateTime13, (long) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withDurationAdded(readableDuration18, (int) '4');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        int int24 = localDateTime13.indexOf(dateTimeFieldType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.plusSeconds((int) 'a');
        boolean boolean29 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime2.minus(readablePeriod30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime2.plusDays(3);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField35 = iSOChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology34.era();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology37.dayOfYear();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYearOfEra((int) 'a');
        int[] intArray45 = iSOChronology34.get((org.joda.time.ReadablePartial) localDateTime41, (long) 100);
        long long49 = iSOChronology34.add((-1L), (long) (byte) 1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology34.hourOfDay();
        org.joda.time.DurationField durationField51 = iSOChronology34.millis();
        boolean boolean52 = localDateTime33.equals((java.lang.Object) durationField51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime33.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime33.withYearOfCentury(851);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 851 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test17484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17484");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.yearOfEra();
        org.joda.time.DurationField durationField4 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = property10.getAsText(locale14);
        org.joda.time.LocalDateTime localDateTime17 = property10.getLocalDateTime();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str19 = iSOChronology18.toString();
        org.joda.time.DurationField durationField20 = iSOChronology18.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology21 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusDays((int) (byte) 0);
        int[] intArray27 = iSOChronology18.get((org.joda.time.ReadablePartial) localDateTime23, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = iSOChronology18.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17, dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withDayOfYear((int) '#');
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.minusMonths((-1));
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = localDateTime37.getFieldType(0);
        int[] intArray42 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime37, 0L);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime37.withYear((-292275054));
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField47 = localDateTime44.getField(833);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 833");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "6" + "'", str12, "6");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "6" + "'", str16, "6");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+117:00]" + "'", str19, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(iSOChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+117:00" + "'", str29, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[1970, 1, 5, 75600000]");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test17485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17485");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str20 = iSOChronology19.toString();
        org.joda.time.DurationField durationField21 = iSOChronology19.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays((int) (byte) 0);
        int[] intArray28 = iSOChronology19.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = iSOChronology19.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = localDateTime18.toDateTime(dateTimeZone29);
        boolean boolean32 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField35 = iSOChronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology34.era();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (byte) 10, (org.joda.time.Chronology) iSOChronology34);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.secondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology39);
        int int42 = localDateTime41.getSecondOfMinute();
        org.joda.time.chrono.ISOChronology iSOChronology43 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.hourOfDay();
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.lang.String str50 = property48.getAsShortText(locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = property48.getAsText(locale52);
        org.joda.time.LocalDateTime localDateTime55 = property48.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = property48.roundHalfEvenCopy();
        boolean boolean57 = localDateTime41.equals((java.lang.Object) localDateTime56);
        org.joda.time.chrono.ISOChronology iSOChronology58 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str59 = iSOChronology58.toString();
        org.joda.time.DurationField durationField60 = iSOChronology58.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology61.dayOfYear();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays((int) (byte) 0);
        int[] intArray67 = iSOChronology58.get((org.joda.time.ReadablePartial) localDateTime63, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone68 = iSOChronology58.getZone();
        boolean boolean70 = dateTimeZone68.isStandardOffset((long) 51);
        org.joda.time.DateTime dateTime71 = localDateTime56.toDateTime(dateTimeZone68);
        java.lang.String str72 = dateTime71.toString();
        int int73 = property38.compareTo((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime71);
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("de");
        org.joda.time.tz.NameProvider nameProvider77 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale79 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str80 = locale79.getDisplayScript();
        java.lang.String str83 = nameProvider77.getShortName(locale79, "Chinese", "ISOChronology[Etc/UTC]");
        java.lang.String str84 = locale76.getDisplayName(locale79);
        boolean boolean85 = dateTime71.equals((java.lang.Object) locale76);
        org.joda.time.Chronology chronology86 = dateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+117:00]" + "'", str4, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+117:00" + "'", str14, "+117:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+117:00]" + "'", str20, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+117:00" + "'", str30, "+117:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 28 + "'", int42 == 28);
        org.junit.Assert.assertNotNull(iSOChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "6" + "'", str50, "6");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English (Canada)" + "'", str53, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "6" + "'", str54, "6");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(iSOChronology58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[+117:00]" + "'", str59, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(iSOChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-16T07:00:00.000+117:00" + "'", str72, "2022-02-16T07:00:00.000+117:00");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertNotNull(nameProvider77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "German" + "'", str84, "German");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test17486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17486");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.withSecondOfMinute(56);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime2.withTime((int) (byte) 0, 13, 53, 4);
        org.joda.time.LocalDateTime.Property property23 = localDateTime2.millisOfSecond();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.LocalDateTime localDateTime26 = property23.addToCopy(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property23.getFieldType();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.era();
        org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYearOfEra((int) 'a');
        int[] intArray39 = iSOChronology28.get((org.joda.time.ReadablePartial) localDateTime35, (long) 100);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.withDurationAdded(readableDuration40, (int) '4');
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minus(readableDuration43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusHours(5);
        int int50 = localDateTime46.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property51 = localDateTime46.yearOfEra();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.monthOfYear();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.minusYears(0);
        org.joda.time.DateTime dateTime56 = localDateTime55.toDateTime();
        int int57 = property23.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+117:00]" + "'", str4, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+117:00" + "'", str14, "+117:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(iSOChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 28 + "'", int50 == 28);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test17487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17487");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        int int14 = property12.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property12.getFieldType();
        java.util.Locale locale17 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Locale.setDefault(locale19);
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale17.getDisplayCountry(locale19);
        java.lang.String str25 = locale17.getScript();
        java.lang.String str26 = locale17.getDisplayScript();
        int int27 = property12.getMaximumTextLength(locale17);
        int int28 = property12.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime30 = property12.addWrapFieldToCopy(31495257);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfMonth();
        java.lang.String str32 = property31.getAsString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2922789 + "'", int14 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals(locale17.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English (Canada)" + "'", str21, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2922789 + "'", int28 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "16" + "'", str32, "16");
    }

    @Test
    public void test17488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17488");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("53");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=53");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17489");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setVariant("Chinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setVariant("72");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 72 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test17490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17490");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList22.parallelStream();
        boolean boolean24 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray31 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList32);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.util.Locale.setDefault(locale35);
        java.util.Set<java.lang.String> strSet39 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.lang.String[] strArray45 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList46);
        java.util.stream.Stream<java.lang.String> strStream49 = strList48.parallelStream();
        boolean boolean50 = strSet39.containsAll((java.util.Collection<java.lang.String>) strList48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet55);
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.util.Set<java.lang.String> strSet60 = locale57.getUnicodeLocaleKeys();
        java.lang.String str61 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.lang.String[] strArray67 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strList68);
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.lang.String str73 = locale71.getDisplayName(locale72);
        java.util.Locale.setDefault(locale71);
        java.util.Set<java.lang.String> strSet75 = locale71.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.lang.String[] strArray81 = new java.lang.String[] { "9", "ISOChronology[Etc/UTC]" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.lang.String>) strList82);
        java.util.stream.Stream<java.lang.String> strStream85 = strList84.parallelStream();
        boolean boolean86 = strSet75.containsAll((java.util.Collection<java.lang.String>) strList84);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strSet75);
        java.util.Locale locale88 = java.util.Locale.CANADA;
        java.util.Locale locale89 = java.util.Locale.CANADA;
        java.lang.String str90 = locale88.getDisplayName(locale89);
        java.util.Set<java.lang.String> strSet91 = locale88.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strSet91);
        java.util.Collection<java.util.Locale> localeCollection93 = null;
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, localeCollection93);
        java.util.Locale.FilteringMode filteringMode95 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, localeCollection93, filteringMode95);
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection93);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap98 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList99 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap98);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English (Canada)" + "'", str37, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English (Canada)" + "'", str54, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "English (Canada)" + "'", str59, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "English (Canada)" + "'", str73, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "English (Canada)" + "'", str90, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertTrue("'" + filteringMode95 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode95.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNotNull(localeList97);
        org.junit.Assert.assertNotNull(languageRangeList99);
    }

    @Test
    public void test17491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17491");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:51:02.985");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test17492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17492");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("en-CA", strMap1);
        java.util.Locale locale4 = new java.util.Locale("ISOChronology[Etc/UTC]");
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.util.Locale.setDefault(locale6);
        java.util.Set<java.lang.String> strSet10 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale4.getDisplayCountry(locale6);
        java.util.Set<java.lang.String> strSet12 = locale4.getUnicodeLocaleAttributes();
        boolean boolean14 = strSet12.remove((java.lang.Object) (byte) 10);
        java.lang.String str15 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12);
        strSet12.clear();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertEquals(locale4.toString(), "isochronology[etc/utc]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test17493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17493");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra((int) 'a');
        int[] intArray11 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime7, (long) 100);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withDurationAdded(readableDuration12, (int) '4');
        org.joda.time.Chronology chronology15 = localDateTime7.getChronology();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.plus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks(442);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17494");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        long long5 = iSOChronology0.add(readablePeriod2, (long) (byte) -1, (-1));
        org.joda.time.DurationField durationField6 = iSOChronology0.halfdays();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusHours((int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minus(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withDayOfYear(3);
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str23 = iSOChronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = iSOChronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology22.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.Chronology chronology28 = iSOChronology22.withUTC();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology29.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology29);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str33 = iSOChronology32.toString();
        org.joda.time.DurationField durationField34 = iSOChronology32.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = iSOChronology35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusDays((int) (byte) 0);
        int[] intArray41 = iSOChronology32.get((org.joda.time.ReadablePartial) localDateTime37, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = iSOChronology32.getZone();
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = localDateTime31.toDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime31.minusHours(6);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusHours((-1));
        int[] intArray50 = chronology28.get((org.joda.time.ReadablePartial) localDateTime46, (long) 0);
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime21, intArray50);
        org.joda.time.DurationField durationField52 = iSOChronology0.millis();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str54 = iSOChronology53.toString();
        org.joda.time.DurationField durationField55 = iSOChronology53.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology56.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusDays((int) (byte) 0);
        int[] intArray62 = iSOChronology53.get((org.joda.time.ReadablePartial) localDateTime58, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = iSOChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology53.halfdayOfDay();
        org.joda.time.Chronology chronology65 = iSOChronology53.withUTC();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str68 = iSOChronology67.toString();
        org.joda.time.DurationField durationField69 = iSOChronology67.weeks();
        org.joda.time.DateTimeField dateTimeField70 = iSOChronology67.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        long long74 = iSOChronology67.add(readablePeriod71, 0L, (int) (byte) -1);
        boolean boolean75 = localDateTime66.equals((java.lang.Object) readablePeriod71);
        org.joda.time.chrono.ISOChronology iSOChronology76 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField77 = iSOChronology76.halfdays();
        org.joda.time.DateTimeField dateTimeField78 = iSOChronology76.era();
        org.joda.time.chrono.ISOChronology iSOChronology79 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField80 = iSOChronology79.dayOfYear();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology79);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withYearOfEra((int) 'a');
        int[] intArray87 = iSOChronology76.get((org.joda.time.ReadablePartial) localDateTime83, (long) 100);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime83.withDurationAdded(readableDuration88, (int) '4');
        int[] intArray91 = localDateTime90.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) localDateTime66, intArray91);
        org.joda.time.DateTimeField dateTimeField93 = iSOChronology0.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime94 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DurationField durationField95 = iSOChronology0.weekyears();
        java.lang.String str96 = iSOChronology0.toString();
        org.joda.time.Chronology chronology97 = iSOChronology0.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+117:00]" + "'", str1, "ISOChronology[+117:00]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[+117:00]" + "'", str23, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[+117:00]" + "'", str33, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+117:00" + "'", str43, "+117:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[+117:00]" + "'", str54, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(iSOChronology67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[+117:00]" + "'", str68, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(iSOChronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(iSOChronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(intArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[2022, 2, 16, 24808736]");
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ISOChronology[+117:00]" + "'", str96, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    public void test17495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17495");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffset(1707644635723L);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17496");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str4 = iSOChronology3.toString();
        org.joda.time.DurationField durationField5 = iSOChronology3.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays((int) (byte) 0);
        int[] intArray12 = iSOChronology3.get((org.joda.time.ReadablePartial) localDateTime8, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = iSOChronology3.getZone();
        long long17 = dateTimeZone13.convertLocalToUTC((long) 0, true, 0L);
        long long19 = dateTimeZone13.previousTransition((long) (short) 10);
        org.joda.time.Chronology chronology20 = iSOChronology0.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology0.monthOfYear();
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str24 = iSOChronology23.toString();
        org.joda.time.DurationField durationField25 = iSOChronology23.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = iSOChronology26.dayOfYear();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusDays((int) (byte) 0);
        int[] intArray32 = iSOChronology23.get((org.joda.time.ReadablePartial) localDateTime28, (long) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = iSOChronology23.getZone();
        long long37 = dateTimeZone33.convertLocalToUTC((long) 0, true, 0L);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.Chronology chronology39 = iSOChronology0.withZone(dateTimeZone33);
        long long41 = dateTimeZone33.nextTransition((long) 14);
        long long43 = dateTimeZone33.previousTransition(1707644686574L);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone33);
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField46 = iSOChronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = iSOChronology45.era();
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology48.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withYearOfEra((int) 'a');
        int[] intArray56 = iSOChronology45.get((org.joda.time.ReadablePartial) localDateTime52, (long) 100);
        long long60 = iSOChronology45.add((-1L), (long) (byte) 1, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology45.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = iSOChronology45.getZone();
        boolean boolean64 = dateTimeZone33.equals((java.lang.Object) iSOChronology45);
        long long68 = iSOChronology45.add(1644573096330L, 0L, 453);
        // The following exception was thrown during execution in test generation
        try {
            long long73 = iSOChronology45.getDateTimeMillis(643, 122, 104400000, 36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISOChronology[+117:00]" + "'", str4, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-421200000L) + "'", long17 == (-421200000L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[+117:00]" + "'", str24, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-421200000L) + "'", long37 == (-421200000L));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 14L + "'", long41 == 14L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1707644686574L + "'", long43 == 1707644686574L);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1644573096330L + "'", long68 == 1644573096330L);
    }

    @Test
    public void test17497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17497");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.halfdays();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = iSOChronology0.getZone();
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.hourOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField18 = iSOChronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.era();
        org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusDays((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withYearOfEra((int) 'a');
        int[] intArray28 = iSOChronology17.get((org.joda.time.ReadablePartial) localDateTime24, (long) 100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.withDurationAdded(readableDuration29, (int) '4');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.plusWeeks((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = null;
        int int35 = localDateTime24.indexOf(dateTimeFieldType34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.plus(readableDuration36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime24.plusSeconds((int) 'a');
        boolean boolean40 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime13.minus(readablePeriod41);
        long long44 = iSOChronology0.set((org.joda.time.ReadablePartial) localDateTime13, 2L);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime13.withCenturyOfEra(26);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks(46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withDayOfYear(161);
        org.joda.time.chrono.ISOChronology iSOChronology51 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusDays((int) (byte) 0);
        int int56 = localDateTime53.getWeekyear();
        org.joda.time.LocalDateTime.Property property57 = localDateTime53.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.minus(readableDuration58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusSeconds(0);
        boolean boolean62 = localDateTime50.equals((java.lang.Object) localDateTime61);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(iSOChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1644573208809L + "'", long44 == 1644573208809L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(iSOChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test17498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17498");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Etc/UTC");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getISO3Language();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet5 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test17499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17499");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        java.lang.String str1 = iSOChronology0.toString();
        org.joda.time.DurationField durationField2 = iSOChronology0.weeks();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) iSOChronology3);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays((int) (byte) 0);
        int[] intArray9 = iSOChronology0.get((org.joda.time.ReadablePartial) localDateTime5, (long) 100);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.clockhourOfDay();
        org.joda.time.Chronology chronology12 = iSOChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField14 = iSOChronology0.months();
        org.joda.time.DurationField durationField15 = iSOChronology0.weeks();
        org.joda.time.DurationField durationField16 = iSOChronology0.centuries();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISOChronology[+117:00]" + "'", str1, "ISOChronology[+117:00]");
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1970, 1, 5, 75600100]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test17500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17500");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("English (Canada)");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("English (Canada)");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean7 = timeZone3.observesDaylightTime();
        java.lang.String str8 = timeZone3.getID();
        java.lang.String str9 = timeZone3.getID();
        java.time.ZoneId zoneId10 = timeZone3.toZoneId();
        int int11 = timeZone3.getRawOffset();
        java.util.TimeZone.setDefault(timeZone3);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT" + "'", str8, "GMT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }
}
